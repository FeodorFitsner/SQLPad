<?xml version="1.0" encoding="utf-8"?>
<Documentation xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://husqvik.com/SqlPad/2014/08/Oracle">
  <Functions>
    <Function Name="ABS" Url="http://docs.oracle.com/database/121/SQLRF/functions009.htm">ABS returns the absolute value of n.
This function takes as an argument any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. The function returns the same data type as the numeric data type of the argument.</Function>
    <Function Name="ACOS" Url="http://docs.oracle.com/database/121/SQLRF/functions010.htm">ACOS returns the arc cosine of n. The argument n must be in the range of -1 to 1, and the function returns a value in the range of 0 to pi, expressed in radians.
This function takes as an argument any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. If the argument is BINARY_FLOAT, then the function returns BINARY_DOUBLE. Otherwise the function returns the same numeric data type as the argument.</Function>
    <Function Name="ADD_MONTHS" Url="http://docs.oracle.com/database/121/SQLRF/functions011.htm">ADD_MONTHS returns the date date plus integer months. A month is defined by the session parameter NLS_CALENDAR. The date argument can be a datetime value or any value that can be implicitly converted to DATE. The integer argument can be an integer or any value that can be implicitly converted to an integer. The return type is always DATE, regardless of the data type of date. If date is the last day of the month or if the resulting month has fewer days than the day component of date, then the result is the last day of the resulting month. Otherwise, the result has the same day component as date.</Function>
    <Function Name="APPENDCHILDXML" Url="http://docs.oracle.com/database/121/SQLRF/functions012.htm">APPENDCHILDXML appends a user-supplied value onto the target XML as the child of the node indicated by an XPath expression.

XMLType_instance is an instance of XMLType.

XPath_string is an Xpath expression indicating one or more nodes onto which one or more child nodes are to be appended. You can specify an absolute XPath_string with an initial slash or a relative XPath_string by omitting the initial slash. If you omit the initial slash, then the context of the relative path defaults to the root node.

value_expr specifies one or more nodes of XMLType. It must resolve to a string.

The optional namespace_string provides namespace information for the XPath_string. This parameter must be of type VARCHAR2.</Function>
    <Function Name="APPROX_COUNT_DISTINCT" Url="http://docs.oracle.com/database/121/SQLRF/functions013.htm">APPROX_COUNT_DISTINCT returns the approximate number of rows that contain distinct values of expr.
This function provides an alternative to the COUNT (DISTINCT expr) function, which returns the exact number of rows that contain distinct values of expr. APPROX_COUNT_DISTINCT processes large amounts of data significantly faster than COUNT, with negligible deviation from the exact result.
For expr, you can specify a column of any scalar data type other than BFILE, BLOB, CLOB, LONG, LONG RAW, or NCLOB.
APPROX_COUNT_DISTINCT ignores rows that contain a null value for expr. This function returns a NUMBER.</Function>
    <Function Name="ASCII" Url="http://docs.oracle.com/database/121/SQLRF/functions014.htm">ASCII returns the decimal representation in the database character set of the first character of char.
char can be of data type CHAR, VARCHAR2, NCHAR, or NVARCHAR2. The value returned is of data type NUMBER. If your database character set is 7-bit ASCII, then this function returns an ASCII value. If your database character set is EBCDIC Code, then this function returns an EBCDIC value. There is no corresponding EBCDIC character function.
This function does not support CLOB data directly. However, CLOBs can be passed in as arguments through implicit data conversion.</Function>
    <Function Name="ASCIISTR" Url="http://docs.oracle.com/database/121/SQLRF/functions015.htm">ASCIISTR takes as its argument a string, or an expression that resolves to a string, in any character set and returns an ASCII version of the string in the database character set. Non-ASCII characters are converted to the form \xxxx, where xxxx represents a UTF-16 code unit.</Function>
    <Function Name="ASIN" Url="http://docs.oracle.com/database/121/SQLRF/functions016.htm">ASIN returns the arc sine of n. The argument n must be in the range of -1 to 1, and the function returns a value in the range of -pi/2 to pi/2, expressed in radians.
This function takes as an argument any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. If the argument is BINARY_FLOAT, then the function returns BINARY_DOUBLE. Otherwise the function returns the same numeric data type as the argument.</Function>
    <Function Name="ATAN" Url="http://docs.oracle.com/database/121/SQLRF/functions017.htm">ATAN returns the arc tangent of n. The argument n can be in an unbounded range and returns a value in the range of -pi/2 to pi/2, expressed in radians.
This function takes as an argument any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. If the argument is BINARY_FLOAT, then the function returns BINARY_DOUBLE. Otherwise the function returns the same numeric data type as the argument.</Function>
    <Function Name="ATAN2" Url="http://docs.oracle.com/database/121/SQLRF/functions018.htm">ATAN2 returns the arc tangent of n1 and n2. The argument n1 can be in an unbounded range and returns a value in the range of -pi to pi, depending on the signs of n1 and n2, expressed in radians.
This function takes as arguments any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. If any argument is BINARY_FLOAT or BINARY_DOUBLE, then the function returns BINARY_DOUBLE. Otherwise the function returns NUMBER.</Function>
    <Function Name="AVG" Url="http://docs.oracle.com/database/121/SQLRF/functions019.htm">AVG returns average value of expr.
This function takes as an argument any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. The function returns the same data type as the numeric data type of the argument.</Function>
    <Function Name="BFILENAME" Url="http://docs.oracle.com/database/121/SQLRF/functions020.htm">BFILENAME returns a BFILE locator that is associated with a physical LOB binary file on the server file system.

'directory' is a database object that serves as an alias for a full path name on the server file system where the files are actually located.

'filename' is the name of the file in the server file system.

You must create the directory object and associate a BFILE value with a physical file before you can use them as arguments to BFILENAME in a SQL or PL/SQL statement, DBMS_LOB package, or OCI operation.
You can use this function in two ways:

In a DML statement to initialize a BFILE column

In a programmatic interface to access BFILE data by assigning a value to the BFILE locator

The directory argument is case sensitive. You must ensure that you specify the directory object name exactly as it exists in the data dictionary. For example, if an "Admin" directory object was created using mixed case and a quoted identifier in the CREATE DIRECTORY statement, then when using the BFILENAME function you must refer to the directory object as 'Admin'. You must specify the filename argument according to the case and punctuation conventions for your operating system.</Function>
    <Function Name="BIN_TO_NUM" Url="http://docs.oracle.com/database/121/SQLRF/functions021.htm">BIN_TO_NUM converts a bit vector to its equivalent number. Each argument to this function represents a bit in the bit vector. This function takes as arguments any numeric data type, or any nonnumeric data type that can be implicitly converted to NUMBER. Each expr must evaluate to 0 or 1. This function returns Oracle NUMBER.
BIN_TO_NUM is useful in data warehousing applications for selecting groups of interest from a materialized view using grouping sets.</Function>
    <Function Name="BITAND" Url="http://docs.oracle.com/database/121/SQLRF/functions022.htm">The BITAND function treats its inputs and its output as vectors of bits; the output is the bitwise AND of the inputs.
The types of expr1 and expr2 are NUMBER, and the result is of type NUMBER. If either argument to BITAND is NULL, the result is NULL.
The arguments must be in the range -(2(n-1)) .. ((2(n-1))-1). If an argument is out of this range, the result is undefined.
The result is computed in several steps. First, each argument A is replaced with the value SIGN(A)*FLOOR(ABS(A)). This conversion has the effect of truncating each argument towards zero. Next, each argument A (which must now be an integer value) is converted to an n-bit two's complement binary integer value. The two bit values are combined using a bitwise AND operation. Finally, the resulting n-bit two's complement value is converted back to NUMBER.

Notes on the BITAND Function

The current implementation of BITAND defines n = 128.

PL/SQL supports an overload of BITAND for which the types of the inputs and of the result are all BINARY_INTEGER and for which n = 32.</Function>
    <Function Name="CARDINALITY" Url="http://docs.oracle.com/database/121/SQLRF/functions023.htm">CARDINALITY returns the number of elements in a nested table. The return type is NUMBER. If the nested table is empty, or is a null collection, then CARDINALITY returns NULL.</Function>
    <Function Name="CAST" Url="http://docs.oracle.com/database/121/SQLRF/functions024.htm">CAST converts one built-in data type or collection-typed value into another built-in data type or collection-typed value.
CAST lets you convert built-in data types or collection-typed values of one type into another built-in data type or collection type. You can cast an unnamed operand (such as a date or the result set of a subquery) or a named collection (such as a varray or a nested table) into a type-compatible data type or named collection. The type_name must be the name of a built-in data type or collection type and the operand must be a built-in data type or must evaluate to a collection value.
For the operand, expr can be either a built-in data type, a collection type, or an instance of an ANYDATA type. If expr is an instance of an ANYDATA type, then CAST tries to extract the value of the ANYDATA instance and return it if it matches the cast target type, otherwise, null will be returned. MULTISET informs Oracle Database to take the result set of the subquery and return a collection value. Table 7-1 shows which built-in data types can be cast into which other built-in data types. (CAST does not support LONG, LONG RAW, or the Oracle-supplied types.)
CAST does not directly support any of the LOB data types. When you use CAST to convert a CLOB value into a character data type or a BLOB value into the RAW data type, the database implicitly converts the LOB value to character or raw data and then explicitly casts the resulting value into the target data type. If the resulting value is larger than the target type, then the database returns an error.
When you use CAST ... MULTISET to get a collection value, each select list item in the query passed to the CAST function is converted to the corresponding attribute type of the target collection element type.</Function>
    <Function Name="CEIL" Url="http://docs.oracle.com/database/121/SQLRF/functions025.htm">CEIL returns the smallest integer that is greater than or equal to n. The number n can always be written as the difference of an integer k and a positive fraction f such that 0 &lt;= f &lt; 1 and n = k - f. The value of CEIL is the integer k. Thus, the value of CEIL is n itself if and only if n is precisely an integer.
This function takes as an argument any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. The function returns the same data type as the numeric data type of the argument.</Function>
    <Function Name="CLUSTER_DETAILS" Url="http://docs.oracle.com/database/121/SQLRF/functions028.htm">CLUSTER_DETAILS returns cluster details for each row in the selection. The return value is an XML string that describes the attributes of the highest probability cluster or the specified cluster_id.

topN
If you specify a value for topN, the function returns the N attributes that most influence the cluster assignment (the score). If you do not specify topN, the function returns the 5 most influential attributes.

DESC, ASC, or ABS
The returned attributes are ordered by weight. The weight of an attribute expresses its positive or negative impact on cluster assignment. A positive weight indicates an increased likelihood of assignment. A negative weight indicates a decreased likelihood of assignment.
By default, CLUSTER_DETAILS returns the attributes with the highest positive weights (DESC). If you specify ASC, the attributes with the highest negative weights are returned. If you specify ABS, the attributes with the greatest weights, whether negative or positive, are returned. The results are ordered by absolute value from highest to lowest. Attributes with a zero weight are not included in the output.

Syntax Choice
CLUSTER_DETAILS can score the data in one of two ways: It can apply a mining model object to the data, or it can dynamically mine the data by executing an analytic clause that builds and applies one or more transient mining models. Choose Syntax or Analytic Syntax:

Syntax — Use the first syntax to score the data with a pre-defined model. Supply the name of a clustering model.

Analytic Syntax — Use the analytic syntax to score the data without a pre-defined model. Include INTO n, where n is the number of clusters to compute, and mining_analytic_clause, which specifies if the data should be partitioned for multiple model builds. The mining_analytic_clause supports a query_partition_clause and an order_by_clause. (See "analytic_clause::=".)


mining_attribute_clause
mining_attribute_clause identifies the column attributes to use as predictors for scoring. When the function is invoked with the analytic syntax, these predictors are also used for building the transient models. The mining_attribute_clause behaves as described for the PREDICTION function. (See "mining_attribute_clause::=".)</Function>
    <Function Name="CLUSTER_DISTANCE" Url="http://docs.oracle.com/database/121/SQLRF/functions029.htm">CLUSTER_DISTANCE returns a cluster distance for each row in the selection. The cluster distance is the distance between the row and the centroid of the highest probability cluster or the specified cluster_id. The distance is returned as BINARY_DOUBLE.

Syntax Choice
CLUSTER_DISTANCE can score the data in one of two ways: It can apply a mining model object to the data, or it can dynamically mine the data by executing an analytic clause that builds and applies one or more transient mining models. Choose Syntax or Analytic Syntax:

Syntax — Use the first syntax to score the data with a pre-defined model. Supply the name of a clustering model.

Analytic Syntax — Use the analytic syntax to score the data without a pre-defined model. Include INTO n, where n is the number of clusters to compute, and mining_analytic_clause, which specifies if the data should be partitioned for multiple model builds. The mining_analytic_clause supports a query_partition_clause and an order_by_clause. (See "analytic_clause::=".)


mining_attribute_clause
mining_attribute_clause identifies the column attributes to use as predictors for scoring. When the function is invoked with the analytic syntax, this data is also used for building the transient models. The mining_attribute_clause behaves as described for the PREDICTION function. (See "mining_attribute_clause::=".)</Function>
    <Function Name="CLUSTER_ID" Url="http://docs.oracle.com/database/121/SQLRF/functions030.htm">CLUSTER_ID returns the identifier of the highest probability cluster for each row in the selection. The cluster identifier is returned as an Oracle NUMBER.

Syntax Choice
CLUSTER_ID can score the data in one of two ways: It can apply a mining model object to the data, or it can dynamically mine the data by executing an analytic clause that builds and applies one or more transient mining models. Choose Syntax or Analytic Syntax:

Syntax — Use the first syntax to score the data with a pre-defined model. Supply the name of a clustering model.

Analytic Syntax — Use the analytic syntax to score the data without a pre-defined model. Include INTO n, where n is the number of clusters to compute, and mining_analytic_clause, which specifies if the data should be partitioned for multiple model builds. The mining_analytic_clause supports a query_partition_clause and an order_by_clause. (See "analytic_clause::=".)


mining_attribute_clause
mining_attribute_clause identifies the column attributes to use as predictors for scoring. When the function is invoked with the analytic syntax, these predictors are also used for building the transient models. The mining_attribute_clause behaves as described for the PREDICTION function. (See "mining_attribute_clause::=".)</Function>
    <Function Name="CLUSTER_PROBABILITY" Url="http://docs.oracle.com/database/121/SQLRF/functions031.htm">CLUSTER_PROBABILITY returns a probability for each row in the selection. The probability refers to the highest probability cluster or to the specified cluster_id. The cluster probability is returned as BINARY_DOUBLE.

Syntax Choice
CLUSTER_PROBABILITY can score the data in one of two ways: It can apply a mining model object to the data, or it can dynamically mine the data by executing an analytic clause that builds and applies one or more transient mining models. Choose Syntax or Analytic Syntax:

Syntax — Use the first syntax to score the data with a pre-defined model. Supply the name of a clustering model.

Analytic Syntax — Use the analytic syntax to score the data without a pre-defined model. Include INTO n, where n is the number of clusters to compute, and mining_analytic_clause, which specifies if the data should be partitioned for multiple model builds. The mining_analytic_clause supports a query_partition_clause and an order_by_clause. (See "analytic_clause::=".)


mining_attribute_clause
mining_attribute_clause identifies the column attributes to use as predictors for scoring. When the function is invoked with the analytic syntax, these predictors are also used for building the transient models. The mining_attribute_clause behaves as described for the PREDICTION function. (See "mining_attribute_clause::=".)</Function>
    <Function Name="CLUSTER_SET" Url="http://docs.oracle.com/database/121/SQLRF/functions032.htm">CLUSTER_SET returns a set of cluster ID and probability pairs for each row in the selection. The return value is a varray of objects with field names CLUSTER_ID and PROBABILITY. The cluster identifier is an Oracle NUMBER; the probability is BINARY_DOUBLE.

topN and cutoff
You can specify topN and cutoff to limit the number of clusters returned by the function. By default, both topN and cutoff are null and all clusters are returned.

topN is the N most probable clusters. If multiple clusters share the Nth probability, then the function chooses one of them.

cutoff is a probability threshold. Only clusters with probability greater than or equal to cutoff are returned. To filter by cutoff only, specify NULL for topN.

To return up to the N most probable clusters that are greater than or equal to cutoff, specify both topN and cutoff.

Syntax Choice
CLUSTER_SET can score the data in one of two ways: It can apply a mining model object to the data, or it can dynamically mine the data by executing an analytic clause that builds and applies one or more transient mining models. Choose Syntax or Analytic Syntax:

Syntax — Use the first syntax to score the data with a pre-defined model. Supply the name of a clustering model.

Analytic Syntax — Use the analytic syntax to score the data without a pre-defined model. Include INTO n, where n is the number of clusters to compute, and mining_analytic_clause, which specifies if the data should be partitioned for multiple model builds. The mining_analytic_clause supports a query_partition_clause and an order_by_clause. (See "analytic_clause::=".)


mining_attribute_clause
mining_attribute_clause identifies the column attributes to use as predictors for scoring. When the function is invoked with the analytic syntax, these predictors are also used for building the transient models. The mining_attribute_clause behaves as described for the PREDICTION function. (See "mining_attribute_clause::=".)</Function>
    <Function Name="COALESCE" Url="http://docs.oracle.com/database/121/SQLRF/functions033.htm">COALESCE returns the first non-null expr in the expression list. You must specify at least two expressions. If all occurrences of expr evaluate to null, then the function returns null.
Oracle Database uses short-circuit evaluation. The database evaluates each expr value and determines whether it is NULL, rather than evaluating all of the expr values before determining whether any of them is NULL.
If all occurrences of expr are numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type, then Oracle Database determines the argument with the highest numeric precedence, implicitly converts the remaining arguments to that data type, and returns that data type.</Function>
    <Function Name="COLLECT" Url="http://docs.oracle.com/database/121/SQLRF/functions034.htm">COLLECT is an aggregate function that takes as its argument a column of any type and creates a nested table of the input type out of the rows selected. To get accurate results from this function you must use it within a CAST function.
If column is itself a collection, then the output of COLLECT is a nested table of collections. If column is of a user-defined type, then column must have a MAP or ORDER method defined on it in order for you to use the optional DISTINCT, UNIQUE, and ORDER BY clauses.</Function>
    <Function Name="COMPOSE" Url="http://docs.oracle.com/database/121/SQLRF/functions035.htm">COMPOSE takes as its argument a string, or an expression that resolves to a string, in any data type, and returns a Unicode string in the same character set as the input. char can be any of the data types CHAR, VARCHAR2, NCHAR, NVARCHAR2, CLOB, or NCLOB. For example, an o code point qualified by an umlaut code point will be returned as the o-umlaut code point.
COMPOSE returns the string in NFC normal form. For a more exclusive setting, you can first call DECOMPOSE with the CANONICAL setting and then COMPOSE. This combination returns the string in NFKC normal form.
CLOB and NCLOB values are supported through implicit conversion. If char is a character LOB value, then it is converted to a VARCHAR value before the COMPOSE operation. The operation will fail if the size of the LOB value exceeds the supported length of the VARCHAR in the particular development environment.</Function>
    <Function Name="CONCAT" Url="http://docs.oracle.com/database/121/SQLRF/functions040.htm">CONCAT returns char1 concatenated with char2. Both char1 and char2 can be any of the data types CHAR, VARCHAR2, NCHAR, NVARCHAR2, CLOB, or NCLOB. The string returned is in the same character set as char1. Its data type depends on the data types of the arguments.
In concatenations of two different data types, Oracle Database returns the data type that results in a lossless conversion. Therefore, if one of the arguments is a LOB, then the returned value is a LOB. If one of the arguments is a national data type, then the returned value is a national data type. For example:

CONCAT(CLOB, NCLOB) returns NCLOB

CONCAT(NCLOB, NCHAR) returns NCLOB

CONCAT(NCLOB, CHAR) returns NCLOB

CONCAT(NCHAR, CLOB) returns NCLOB

This function is equivalent to the concatenation operator (||).</Function>
    <Function Name="CONVERT" Url="http://docs.oracle.com/database/121/SQLRF/functions041.htm">CONVERT converts a character string from one character set to another.

The char argument is the value to be converted. It can be any of the data types CHAR, VARCHAR2, NCHAR, NVARCHAR2, CLOB, or NCLOB.

The dest_char_set argument is the name of the character set to which char is converted.

The source_char_set argument is the name of the character set in which char is stored in the database. The default value is the database character set.

The return value for CHAR and VARCHAR2 is VARCHAR2. For NCHAR and NVARCHAR2, it is NVARCHAR2. For CLOB, it is CLOB, and for NCLOB, it is NCLOB.
Both the destination and source character set arguments can be either literals or columns containing the name of the character set.
For complete correspondence in character conversion, it is essential that the destination character set contains a representation of all the characters defined in the source character set. Where a character does not exist in the destination character set, a replacement character appears. Replacement characters can be defined as part of a character set definition.</Function>
    <Function Name="CORR" Url="http://docs.oracle.com/database/121/SQLRF/functions042.htm">CORR returns the coefficient of correlation of a set of number pairs. You can use it as an aggregate or analytic function.
This function takes as arguments any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. Oracle determines the argument with the highest numeric precedence, implicitly converts the remaining arguments to that data type, and returns that data type.</Function>
    <Function Name="CORR" Url="http://docs.oracle.com/database/121/SQLRF/functions043.htm">The CORR function (see CORR) calculates the Pearson's correlation coefficient and requires numeric expressions as input. The CORR_* functions support nonparametric or rank correlation. They let you find correlations between expressions that are ordinal scaled (where ranking of the values is possible). Correlation coefficients take on a value ranging from -1 to 1, where 1 indicates a perfect relationship, -1 a perfect inverse relationship (when one variable increases as the other decreases), and a value close to 0 means no relationship.
These functions takes as arguments any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. Oracle Database determines the argument with the highest numeric precedence, implicitly converts the remaining arguments to that data type, makes the calculation, and returns NUMBER.</Function>
    <Function Name="COS" Url="http://docs.oracle.com/database/121/SQLRF/functions044.htm">COS returns the cosine of n (an angle expressed in radians).
This function takes as an argument any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. If the argument is BINARY_FLOAT, then the function returns BINARY_DOUBLE. Otherwise the function returns the same numeric data type as the argument.</Function>
    <Function Name="COSH" Url="http://docs.oracle.com/database/121/SQLRF/functions045.htm">COSH returns the hyperbolic cosine of n.
This function takes as an argument any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. If the argument is BINARY_FLOAT, then the function returns BINARY_DOUBLE. Otherwise the function returns the same numeric data type as the argument.</Function>
    <Function Name="COUNT" Url="http://docs.oracle.com/database/121/SQLRF/functions046.htm">COUNT returns the number of rows returned by the query. You can use it as an aggregate or analytic function.
If you specify DISTINCT, then you can specify only the query_partition_clause of the analytic_clause. The order_by_clause and windowing_clause are not allowed.
If you specify expr, then COUNT returns the number of rows where expr is not null. You can count either all rows, or only distinct values of expr.
If you specify the asterisk (*), then this function returns all rows, including duplicates and nulls. COUNT never returns null.</Function>
    <Function Name="COVAR_POP" Url="http://docs.oracle.com/database/121/SQLRF/functions047.htm">COVAR_POP returns the population covariance of a set of number pairs. You can use it as an aggregate or analytic function.
This function takes as arguments any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. Oracle determines the argument with the highest numeric precedence, implicitly converts the remaining arguments to that data type, and returns that data type.</Function>
    <Function Name="COVAR_SAMP" Url="http://docs.oracle.com/database/121/SQLRF/functions048.htm">COVAR_SAMP returns the sample covariance of a set of number pairs. You can use it as an aggregate or analytic function.
This function takes as arguments any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. Oracle determines the argument with the highest numeric precedence, implicitly converts the remaining arguments to that data type, and returns that data type.</Function>
    <Function Name="CUBE_TABLE" Url="http://docs.oracle.com/database/121/SQLRF/functions049.htm">CUBE_TABLE extracts data from a cube or dimension and returns it in the two-dimensional format of a relational table, which can be used by SQL-based applications.
The function takes a single VARCHAR2 argument. The optional hierarchy clause enables you to specify a dimension hierarchy. A cube can have multiple hierarchy clauses, one for each dimension.
You can generate these different types of tables:

A cube table contains a key column for each dimension and a column for each measure and calculated measure in the cube. To create a cube table, you can specify the cube with or without a cube hierarchy clause. For a dimension with multiple hierarchies, this clause limits the return values to the dimension members and levels in the specified hierarchy. Without a hierarchy clause, all dimension members and all levels are included.

A dimension table contains a key column, and a column for each level and each attribute. It also contains a MEMBER_TYPE column, which identifies each member with one of the following codes:

L - Loaded from a table, view, or synonym

A - Loaded member and the single root of all hierarchies in the dimension, that is, the "all" aggregate member

C - Calculated member

All dimension members and all levels are included in the table. To create a dimension table, specify the dimension without a dimension hierarchy clause.

A hierarchy table contains all the columns of a dimension table plus a column for the parent member and a column for each source level. It also contains a MEMBER_TYPE column, as described for dimension tables. Any dimension members and levels that are not part of the named hierarchy are excluded from the table. To create a hierarchy table, specify the dimension with a dimension hierarchy clause.

CUBE_TABLE is a table function and is always used in the context of a SELECT statement with this syntax:

SELECT ... FROM TABLE(CUBE_TABLE('arg'));</Function>
    <Function Name="CUME_DIST" Url="http://docs.oracle.com/database/121/SQLRF/functions050.htm">CUME_DIST calculates the cumulative distribution of a value in a group of values. The range of values returned by CUME_DIST is &gt;0 to &lt;=1. Tie values always evaluate to the same cumulative distribution value.
This function takes as arguments any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. Oracle Database determines the argument with the highest numeric precedence, implicitly converts the remaining arguments to that data type, makes the calculation, and returns NUMBER.</Function>
    <Function Name="CURRENT_DATE" Url="http://docs.oracle.com/database/121/SQLRF/functions051.htm">CURRENT_DATE returns the current date in the session time zone, in a value in the Gregorian calendar of data type DATE.</Function>
    <Function Name="CURRENT_TIMESTAMP" Url="http://docs.oracle.com/database/121/SQLRF/functions052.htm">CURRENT_TIMESTAMP returns the current date and time in the session time zone, in a value of data type TIMESTAMP WITH TIME ZONE. The time zone offset reflects the current local time of the SQL session. If you omit precision, then the default is 6. The difference between this function and LOCALTIMESTAMP is that CURRENT_TIMESTAMP returns a TIMESTAMP WITH TIME ZONE value while LOCALTIMESTAMP returns a TIMESTAMP value.
In the optional argument, precision specifies the fractional second precision of the time value returned.</Function>
    <Function Name="CV" Url="http://docs.oracle.com/database/121/SQLRF/functions053.htm">The CV function can be used only in the model_clause of a SELECT statement and then only on the right-hand side of a model rule. It returns the current value of a dimension column or a partitioning column carried from the left-hand side to the right-hand side of a rule. This function is used in the model_clause to provide relative indexing with respect to the dimension column. The return type is that of the data type of the dimension column. If you omit the argument, then it defaults to the dimension column associated with the relative position of the function within the cell reference.
The CV function can be used outside a cell reference. In this case, dimension_column is required.</Function>
    <Function Name="DATAOBJ_TO_MAT_PARTITION" Url="http://docs.oracle.com/database/121/SQLRF/functions054.htm">DATAOBJ_TO_MAT_PARTITION is useful only to Data Cartridge developers who are performing data maintenance or query operations on system-partitioned tables that are used to store domain index data. The DML or query operations are triggered by corresponding operations on the base table of the domain index.
This function takes as arguments the name of the base table and the partition ID of the base table partition, both of which are passed to the function by the appropriate ODCIIndex method. The function returns the materialized partition number of the corresponding system-partitioned table, which can be used to perform the operation (DML or query) on that partition of the system-partitioned table.
If the base table is interval partitioned, then Oracle recommends that you use this function instead of the DATAOBJ_TO_PARTITION function. The DATAOBJ_TO_PARTITION function determines the absolute partition number, given the physical partition identifier. However, if the base table is interval partitioned, then there might be holes in the partition numbers corresponding to unmaterialized partitions. Because the system partitioned table only has materialized partitions, DATAOBJ_TO_PARTITION numbers can cause a mis-match between the partitions of the base table and the partitions of the underlying system partitioned index storage tables. The DATAOBJ_TO_MAT_PARTITION function returns the materialized partition number (as opposed to the absolute partition number) and helps keep the two tables in sync. Indextypes planning to support local domain indexes on interval partitioned tables should migrate to the use of this function.</Function>
    <Function Name="DATAOBJ_TO_PARTITION" Url="http://docs.oracle.com/database/121/SQLRF/functions055.htm">DATAOBJ_TO_PARTITION is useful only to Data Cartridge developers who are performing data maintenance or query operations on system-partitioned tables that are used to store domain index data. The DML or query operations are triggered by corresponding operations on the base table of the domain index.
This function takes as arguments the name of the base table and the partition ID of the base table partition, both of which are passed to the function by the appropriate ODCIIndex method. The function returns the absolute partition number of the corresponding system-partitioned table, which can be used to perform the operation (DML or query) on that partition of the system-partitioned table.</Function>
    <Function Name="DBTIMEZONE" Url="http://docs.oracle.com/database/121/SQLRF/functions056.htm">DBTIMEZONE returns the value of the database time zone. The return type is a time zone offset (a character type in the format '[+|-]TZH:TZM') or a time zone region name, depending on how the user specified the database time zone value in the most recent CREATE DATABASE or ALTER DATABASE statement.</Function>
    <Function Name="DECODE" Url="http://docs.oracle.com/database/121/SQLRF/functions057.htm">DECODE compares expr to each search value one by one. If expr is equal to a search, then Oracle Database returns the corresponding result. If no match is found, then Oracle returns default. If default is omitted, then Oracle returns null.
The arguments can be any of the numeric types (NUMBER, BINARY_FLOAT, or BINARY_DOUBLE) or character types.

If expr and search are character data, then Oracle compares them using nonpadded comparison semantics. expr, search, and result can be any of the data types CHAR, VARCHAR2, NCHAR, or NVARCHAR2. The string returned is of VARCHAR2 data type and is in the same character set as the first result parameter.

If the first search-result pair are numeric, then Oracle compares all search-result expressions and the first expr to determine the argument with the highest numeric precedence, implicitly converts the remaining arguments to that data type, and returns that data type.

The search, result, and default values can be derived from expressions. Oracle Database uses short-circuit evaluation. The database evaluates each search value only before comparing it to expr, rather than evaluating all search values before comparing any of them with expr. Consequently, Oracle never evaluates a search if a previous search is equal to expr.
Oracle automatically converts expr and each search value to the data type of the first search value before comparing. Oracle automatically converts the return value to the same data type as the first result. If the first result has the data type CHAR or if the first result is null, then Oracle converts the return value to the data type VARCHAR2.
In a DECODE function, Oracle considers two nulls to be equivalent. If expr is null, then Oracle returns the result of the first search that is also null.
The maximum number of components in the DECODE function, including expr, searches, results, and default, is 255.</Function>
    <Function Name="DECOMPOSE" Url="http://docs.oracle.com/database/121/SQLRF/functions058.htm">DECOMPOSE is valid only for Unicode characters. DECOMPOSE takes as its argument a string in any data type and returns a Unicode string after decomposition in the same character set as the input. For example, an o-umlaut code point will be returned as the "o" code point followed by an umlaut code point.

string can be any of the data types CHAR, VARCHAR2, NCHAR, NVARCHAR2, CLOB, or NCLOB.

CANONICAL causes canonical decomposition, which allows recomposition (for example, with the COMPOSE function) to the original string. This is the default and returns the string in NFD normal form.

COMPATIBILITY causes decomposition in compatibility mode. In this mode, recomposition is not possible. This mode is useful, for example, when decomposing half-width and full-width katakana characters, where recomposition might not be desirable without external formatting or style information. It returns the string in NFKD normal form.

CLOB and NCLOB values are supported through implicit conversion. If char is a character LOB value, then it is converted to a VARCHAR value before the COMPOSE operation. The operation will fail if the size of the LOB value exceeds the supported length of the VARCHAR in the particular development environment.</Function>
    <Function Name="DELETEXML" Url="http://docs.oracle.com/database/121/SQLRF/functions059.htm">DELETEXML deletes the node or nodes matched by the XPath expression in the target XML.

XMLType_instance is an instance of XMLType.

XPath_string is an Xpath expression indicating one or more nodes that are to be deleted. You can specify an absolute XPath_string with an initial slash or a relative XPath_string by omitting the initial slash. If you omit the initial slash, then the context of the relative path defaults to the root node. Any child nodes of the nodes specified by XPath_string are also deleted.

The optional namespace_string provides namespace information for the XPath_string. This parameter must be of type VARCHAR2.</Function>
    <Function Name="DENSE_RANK" Url="http://docs.oracle.com/database/121/SQLRF/functions060.htm">DENSE_RANK computes the rank of a row in an ordered group of rows and returns the rank as a NUMBER. The ranks are consecutive integers beginning with 1. The largest rank value is the number of unique values returned by the query. Rank values are not skipped in the event of ties. Rows with equal values for the ranking criteria receive the same rank. This function is useful for top-N and bottom-N reporting.
This function accepts as arguments any numeric data type and returns NUMBER.

As an aggregate function, DENSE_RANK calculates the dense rank of a hypothetical row identified by the arguments of the function with respect to a given sort specification. The arguments of the function must all evaluate to constant expressions within each aggregate group, because they identify a single row within each group. The constant argument expressions and the expressions in the order_by_clause of the aggregate match by position. Therefore, the number of arguments must be the same and types must be compatible.

As an analytic function, DENSE_RANK computes the rank of each row returned from a query with respect to the other rows, based on the values of the value_exprs in the order_by_clause.</Function>
    <Function Name="DEPTH" Url="http://docs.oracle.com/database/121/SQLRF/functions061.htm">DEPTH is an ancillary function used only with the UNDER_PATH and EQUALS_PATH conditions. It returns the number of levels in the path specified by the UNDER_PATH condition with the same correlation variable.
The correlation_integer can be any NUMBER integer. Use it to correlate this ancillary function with its primary condition if the statement contains multiple primary conditions. Values less than 1 are treated as 1.</Function>
    <Function Name="DEREF" Url="http://docs.oracle.com/database/121/SQLRF/functions062.htm">DEREF returns the object reference of argument expr, where expr must return a REF to an object. If you do not use this function in a query, then Oracle Database returns the object ID of the REF instead, as shown in the example that follows.</Function>
    <Function Name="DUMP" Url="http://docs.oracle.com/database/121/SQLRF/functions063.htm">DUMP returns a VARCHAR2 value containing the data type code, length in bytes, and internal representation of expr. The returned result is always in the database character set. For the data type corresponding to each code, see Table 2-1, "Built-in Data Type Summary".
The argument return_fmt specifies the format of the return value and can have any of the following values:

8 returns result in octal notation.

10 returns result in decimal notation.

16 returns result in hexadecimal notation.

17 returns each byte printed as a character if and only if it can be interpreted as a printable character in the character set of the compiler—typically ASCII or EBCDIC. Some ASCII control characters may be printed in the form ^X as well. Otherwise the character is printed in hexadecimal notation. All NLS parameters are ignored. Do not depend on any particular output format for DUMP with return_fmt 17.

By default, the return value contains no character set information. To retrieve the character set name of expr, add 1000 to any of the preceding format values. For example, a return_fmt of 1008 returns the result in octal and provides the character set name of expr.
The arguments start_position and length combine to determine which portion of the internal representation to return. The default is to return the entire internal representation in decimal notation.
If expr is null, then this function returns NULL.
This function does not support CLOB data directly. However, CLOBs can be passed in as arguments through implicit data conversion.</Function>
    <Function Name="EMPTY_BLOB" Url="http://docs.oracle.com/database/121/SQLRF/functions064.htm">EMPTY_BLOB and EMPTY_CLOB return an empty LOB locator that can be used to initialize a LOB variable or, in an INSERT or UPDATE statement, to initialize a LOB column or attribute to EMPTY. EMPTY means that the LOB is initialized, but not populated with data.</Function>
    <Function Name="EXISTSNODE" Url="http://docs.oracle.com/database/121/SQLRF/functions065.htm">EXISTSNODE determines whether traversal of an XML document using a specified path results in any nodes. It takes as arguments the XMLType instance containing an XML document and a VARCHAR2 XPath string designating a path. The optional namespace_string must resolve to a VARCHAR2 value that specifies a default mapping or namespace mapping for prefixes, which Oracle Database uses when evaluating the XPath expression(s).
The namespace_string argument defaults to the namespace of the root element. If you refer to any subelement in Xpath_string, then you must specify namespace_string, and you must specify the "who" prefix in both of these arguments.</Function>
    <Function Name="EXP" Url="http://docs.oracle.com/database/121/SQLRF/functions066.htm">EXP returns e raised to the nth power, where e = 2.71828183... . The function returns a value of the same type as the argument.
This function takes as an argument any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. If the argument is BINARY_FLOAT, then the function returns BINARY_DOUBLE. Otherwise the function returns the same numeric data type as the argument.</Function>
    <Function Name="EXTRACT" Url="http://docs.oracle.com/database/121/SQLRF/functions067.htm">EXTRACT extracts and returns the value of a specified datetime field from a datetime or interval expression. The expr can be any expression that evaluates to a datetime or interval data type compatible with the requested field:

If YEAR or MONTH is requested, then expr must evaluate to an expression of data type DATE, TIMESTAMP, TIMESTAMP WITH TIME ZONE, TIMESTAMP WITH LOCAL TIME ZONE, or INTERVAL YEAR TO MONTH.

If DAY is requested, then expr must evaluate to an expression of data type DATE, TIMESTAMP, TIMESTAMP WITH TIME ZONE, TIMESTAMP WITH LOCAL TIME ZONE, or INTERVAL DAY TO SECOND.

If HOUR, MINUTE, or SECOND is requested, then expr must evaluate to an expression of data type TIMESTAMP, TIMESTAMP WITH TIME ZONE, TIMESTAMP WITH LOCAL TIME ZONE, or INTERVAL DAY TO SECOND. DATE is not valid here, because Oracle Database treats it as ANSI DATE data type, which has no time fields.

If TIMEZONE_HOUR, TIMEZONE_MINUTE, TIMEZONE_ABBR, TIMEZONE_REGION, or TIMEZONE_OFFSET is requested, then expr must evaluate to an expression of data type TIMESTAMP WITH TIME ZONE or TIMESTAMP WITH LOCAL TIME ZONE.

EXTRACT interprets expr as an ANSI datetime data type. For example, EXTRACT treats DATE not as legacy Oracle DATE but as ANSI DATE, without time elements. Therefore, you can extract only YEAR, MONTH, and DAY from a DATE value. Likewise, you can extract TIMEZONE_HOUR and TIMEZONE_MINUTE only from the TIMESTAMP WITH TIME ZONE data type.
When you specify TIMEZONE_REGION or TIMEZONE_ABBR (abbreviation), the value returned is a VARCHAR2 string containing the appropriate time zone region name or abbreviation. When you specify any of the other datetime fields, the value returned is an integer value of NUMBER data type representing the datetime value in the Gregorian calendar. When extracting from a datetime with a time zone value, the value returned is in UTC. For a listing of time zone region names and their corresponding abbreviations, query the V$TIMEZONE_NAMES dynamic performance view.
This function can be very useful for manipulating datetime field values in very large tables, as shown in the first example below.</Function>
    <Function Name="EXTRACT" Url="http://docs.oracle.com/database/121/SQLRF/functions068.htm">EXTRACT (XML) is similar to the EXISTSNODE function. It applies a VARCHAR2 XPath string and returns an XMLType instance containing an XML fragment. You can specify an absolute XPath_string with an initial slash or a relative XPath_string by omitting the initial slash. If you omit the initial slash, then the context of the relative path defaults to the root node. The optional namespace_string is required if the XML you are handling uses a namespace prefix. This argument must resolve to a VARCHAR2 value that specifies a default mapping or namespace mapping for prefixes, which Oracle Database uses when evaluating the XPath expression(s).</Function>
    <Function Name="FEATURE_DETAILS" Url="http://docs.oracle.com/database/121/SQLRF/functions070.htm">FEATURE_DETAILS returns feature details for each row in the selection. The return value is an XML string that describes the attributes of the highest value feature or the specified feature_id.

topN
If you specify a value for topN, the function returns the N attributes that most influence the feature value. If you do not specify topN, the function returns the 5 most influential attributes.

DESC, ASC, or ABS
The returned attributes are ordered by weight. The weight of an attribute expresses its positive or negative impact on the value of the feature. A positive weight indicates a higher feature value. A negative weight indicates a lower feature value.
By default, FEATURE_DETAILS returns the attributes with the highest positive weight (DESC). If you specify ASC, the attributes with the highest negative weight are returned. If you specify ABS, the attributes with the greatest weight, whether negative or positive, are returned. The results are ordered by absolute value from highest to lowest. Attributes with a zero weight are not included in the output.

Syntax Choice
FEATURE_DETAILS can score the data in one of two ways: It can apply a mining model object to the data, or it can dynamically mine the data by executing an analytic clause that builds and applies one or more transient mining models. Choose Syntax or Analytic Syntax:

Syntax — Use the first syntax to score the data with a pre-defined model. Supply the name of a feature extraction model.

Analytic Syntax — Use the analytic syntax to score the data without a pre-defined model. Include INTO n, where n is the number of features to extract, and mining_analytic_clause, which specifies if the data should be partitioned for multiple model builds. The mining_analytic_clause supports a query_partition_clause and an order_by_clause. (See "analytic_clause::=".)


mining_attribute_clause
mining_attribute_clause identifies the column attributes to use as predictors for scoring. When the function is invoked with the analytic syntax, these predictors are also used for building the transient models. The mining_attribute_clause behaves as described for the PREDICTION function. (See "mining_attribute_clause::=".)</Function>
    <Function Name="FEATURE_ID" Url="http://docs.oracle.com/database/121/SQLRF/functions071.htm">FEATURE_ID returns the identifier of the highest value feature for each row in the selection. The feature identifier is returned as an Oracle NUMBER.

Syntax Choice
FEATURE_ID can score the data in one of two ways: It can apply a mining model object to the data, or it can dynamically mine the data by executing an analytic clause that builds and applies one or more transient mining models. Choose Syntax or Analytic Syntax:

Syntax — Use the first syntax to score the data with a pre-defined model. Supply the name of a feature extraction model.

Analytic Syntax — Use the analytic syntax to score the data without a pre-defined model. Include INTO n, where n is the number of features to extract, and mining_analytic_clause, which specifies if the data should be partitioned for multiple model builds. The mining_analytic_clause supports a query_partition_clause and an order_by_clause. (See "analytic_clause::=".)


mining_attribute_clause
mining_attribute_clause identifies the column attributes to use as predictors for scoring. When the function is invoked with the analytic syntax, these predictors are also used for building the transient models. The mining_attribute_clause behaves as described for the PREDICTION function. (See "mining_attribute_clause::=".)</Function>
    <Function Name="FEATURE_SET" Url="http://docs.oracle.com/database/121/SQLRF/functions072.htm">FEATURE_SET returns a set of feature ID and feature value pairs for each row in the selection. The return value is a varray of objects with field names FEATURE_ID and VALUE. The data type of both fields is NUMBER.

topN and cutoff
You can specify topN and cutoff to limit the number of features returned by the function. By default, both topN and cutoff are null and all features are returned.

topN is the N highest value features. If multiple features have the Nth value, then the function chooses one of them.

cutoff is a value threshold. Only features that are greater than or equal to cutoff are returned. To filter by cutoff only, specify NULL for topN.

To return up to N features that are greater than or equal to cutoff, specify both topN and cutoff.

Syntax Choice
FEATURE_SET can score the data in one of two ways: It can apply a mining model object to the data, or it can dynamically mine the data by executing an analytic clause that builds and applies one or more transient mining models. Choose Syntax or Analytic Syntax:

Syntax — Use the first syntax to score the data with a pre-defined model. Supply the name of a feature extraction model.

Analytic Syntax — Use the analytic syntax to score the data without a pre-defined model. Include INTO n, where n is the number of features to extract, and mining_analytic_clause, which specifies if the data should be partitioned for multiple model builds. The mining_analytic_clause supports a query_partition_clause and an order_by_clause. (See "analytic_clause::=".)


mining_attribute_clause
mining_attribute_clause identifies the column attributes to use as predictors for scoring. When the function is invoked with the analytic syntax, these predictors are also used for building the transient models. The mining_attribute_clause behaves as described for the PREDICTION function. (See "mining_attribute_clause::=".)</Function>
    <Function Name="FEATURE_VALUE" Url="http://docs.oracle.com/database/121/SQLRF/functions073.htm">FEATURE_VALUE returns a feature value for each row in the selection. The value refers to the highest value feature or to the specified feature_id. The feature value is returned as BINARY_DOUBLE.

Syntax Choice
FEATURE_VALUE can score the data in one of two ways: It can apply a mining model object to the data, or it can dynamically mine the data by executing an analytic clause that builds and applies one or more transient mining models. Choose Syntax or Analytic Syntax:

Syntax — Use the first syntax to score the data with a pre-defined model. Supply the name of a feature extraction model.

Analytic Syntax — Use the analytic syntax to score the data without a pre-defined model. Include INTO n, where n is the number of features to extract, and mining_analytic_clause, which specifies if the data should be partitioned for multiple model builds. The mining_analytic_clause supports a query_partition_clause and an order_by_clause. (See "analytic_clause::=".)


mining_attribute_clause
mining_attribute_clause identifies the column attributes to use as predictors for scoring. When the function is invoked with the analytic syntax, this data is also used for building the transient models. The mining_attribute_clause behaves as described for the PREDICTION function. (See "mining_attribute_clause::=".)</Function>
    <Function Name="FIRST" Url="http://docs.oracle.com/database/121/SQLRF/functions074.htm">FIRST and LAST are very similar functions. Both are aggregate and analytic functions that operate on a set of values from a set of rows that rank as the FIRST or LAST with respect to a given sorting specification. If only one row ranks as FIRST or LAST, then the aggregate operates on the set with only one element.
If you omit the OVER clause, then the FIRST and LAST functions are treated as aggregate functions. You can use these functions as analytic functions by specifying the OVER clause. The query_partition_clause is the only part of the OVER clause valid with these functions. If you include the OVER clause but omit the query_partition_clause, then the function is treated as an analytic function, but the window defined for analysis is the entire table.
These functions take as an argument any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. The function returns the same data type as the numeric data type of the argument.
When you need a value from the first or last row of a sorted group, but the needed value is not the sort key, the FIRST and LAST functions eliminate the need for self-joins or views and enable better performance.

The aggregate_function argument is any one of the MIN, MAX, SUM, AVG, COUNT, VARIANCE, or STDDEV functions. It operates on values from the rows that rank either FIRST or LAST. If only one row ranks as FIRST or LAST, then the aggregate operates on a singleton (nonaggregate) set.

The KEEP keyword is for semantic clarity. It qualifies aggregate_function, indicating that only the FIRST or LAST values of aggregate_function will be returned.

DENSE_RANK FIRST or DENSE_RANK LAST indicates that Oracle Database will aggregate over only those rows with the minimum (FIRST) or the maximum (LAST) dense rank (also called olympic rank).</Function>
    <Function Name="FIRST" Url="http://docs.oracle.com/database/121/SQLRF/functions095.htm">FIRST and LAST are very similar functions. Both are aggregate and analytic functions that operate on a set of values from a set of rows that rank as the FIRST or LAST with respect to a given sorting specification. If only one row ranks as FIRST or LAST, then the aggregate operates on the set with only one element.
Refer to FIRST for complete information on this function and for examples of its use.</Function>
    <Function Name="FIRST_VALUE" Url="http://docs.oracle.com/database/121/SQLRF/functions075.htm">FIRST_VALUE is an analytic function. It returns the first value in an ordered set of values. If the first value in the set is null, then the function returns NULL unless you specify IGNORE NULLS. This setting is useful for data densification.</Function>
    <Function Name="FLOOR" Url="http://docs.oracle.com/database/121/SQLRF/functions076.htm">FLOOR returns the largest integer equal to or less than n. The number n can always be written as the sum of an integer k and a positive fraction f such that 0 &lt;= f &lt; 1 and n = k + f. The value of FLOOR is the integer k. Thus, the value of FLOOR is n itself if and only if n is precisely an integer.
This function takes as an argument any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. The function returns the same data type as the numeric data type of the argument.</Function>
    <Function Name="FROM_TZ" Url="http://docs.oracle.com/database/121/SQLRF/functions077.htm">FROM_TZ converts a timestamp value and a time zone to a TIMESTAMP WITH TIME ZONE value. time_zone_value is a character string in the format 'TZH:TZM' or a character expression that returns a string in TZR with optional TZD format.</Function>
    <Function Name="GREATEST" Url="http://docs.oracle.com/database/121/SQLRF/functions078.htm">GREATEST returns the greatest of a list of one or more expressions. Oracle Database uses the first expr to determine the return type. If the first expr is numeric, then Oracle determines the argument with the highest numeric precedence, implicitly converts the remaining arguments to that data type before the comparison, and returns that data type. If the first expr is not numeric, then each expr after the first is implicitly converted to the data type of the first expr before the comparison.
Oracle Database compares each expr using nonpadded comparison semantics. The comparison is binary by default and is linguistic if the NLS_COMP parameter is set to LINGUISTIC and the NLS_SORT parameter has a setting other than BINARY. Character comparison is based on the numerical codes of the characters in the database character set and is performed on whole strings treated as one sequence of bytes, rather than character by character. If the value returned by this function is character data, then its data type is VARCHAR2 if the first expr is a character data type and NVARCHAR2 if the first expr is a national character data type.</Function>
    <Function Name="GROUP_ID" Url="http://docs.oracle.com/database/121/SQLRF/functions079.htm">GROUP_ID distinguishes duplicate groups resulting from a GROUP BY specification. It is useful in filtering out duplicate groupings from the query result. It returns an Oracle NUMBER to uniquely identify duplicate groups. This function is applicable only in a SELECT statement that contains a GROUP BY clause.
If n duplicates exist for a particular grouping, then GROUP_ID returns numbers in the range 0 to n-1.</Function>
    <Function Name="GROUPING" Url="http://docs.oracle.com/database/121/SQLRF/functions080.htm">GROUPING distinguishes superaggregate rows from regular grouped rows. GROUP BY extensions such as ROLLUP and CUBE produce superaggregate rows where the set of all values is represented by null. Using the GROUPING function, you can distinguish a null representing the set of all values in a superaggregate row from a null in a regular row.
The expr in the GROUPING function must match one of the expressions in the GROUP BY clause. The function returns a value of 1 if the value of expr in the row is a null representing the set of all values. Otherwise, it returns zero. The data type of the value returned by the GROUPING function is Oracle NUMBER. Refer to the SELECT group_by_clause for a discussion of these terms.</Function>
    <Function Name="GROUPING_ID" Url="http://docs.oracle.com/database/121/SQLRF/functions081.htm">GROUPING_ID returns a number corresponding to the GROUPING bit vector associated with a row. GROUPING_ID is applicable only in a SELECT statement that contains a GROUP BY extension, such as ROLLUP or CUBE, and a GROUPING function. In queries with many GROUP BY expressions, determining the GROUP BY level of a particular row requires many GROUPING functions, which leads to cumbersome SQL. GROUPING_ID is useful in these cases.
GROUPING_ID is functionally equivalent to taking the results of multiple GROUPING functions and concatenating them into a bit vector (a string of ones and zeros). By using GROUPING_ID you can avoid the need for multiple GROUPING functions and make row filtering conditions easier to express. Row filtering is easier with GROUPING_ID because the desired rows can be identified with a single condition of GROUPING_ID = n. The function is especially useful when storing multiple levels of aggregation in a single table.</Function>
    <Function Name="HEXTORAW" Url="http://docs.oracle.com/database/121/SQLRF/functions082.htm">HEXTORAW converts char containing hexadecimal digits in the CHAR, VARCHAR2, NCHAR, or NVARCHAR2 data type to a raw value.
This function does not support CLOB data directly. However, CLOBs can be passed in as arguments through implicit data conversion.</Function>
    <Function Name="CHARTOROWID" Url="http://docs.oracle.com/database/121/SQLRF/functions026.htm">CHARTOROWID converts a value from CHAR, VARCHAR2, NCHAR, or NVARCHAR2 data type to ROWID data type.
This function does not support CLOB data directly. However, CLOBs can be passed in as arguments through implicit data conversion.</Function>
    <Function Name="CHR" Url="http://docs.oracle.com/database/121/SQLRF/functions027.htm">CHR returns the character having the binary equivalent to n as a VARCHAR2 value in either the database character set or, if you specify USING NCHAR_CS, the national character set.
For single-byte character sets, if n &gt; 256, then Oracle Database returns the binary equivalent of n mod 256. For multibyte character sets, n must resolve to one entire code point. Invalid code points are not validated, and the result of specifying invalid code points is indeterminate.
This function takes as an argument a NUMBER value, or any value that can be implicitly converted to NUMBER, and returns a character.</Function>
    <Function Name="INITCAP" Url="http://docs.oracle.com/database/121/SQLRF/functions083.htm">INITCAP returns char, with the first letter of each word in uppercase, all other letters in lowercase. Words are delimited by white space or characters that are not alphanumeric.
char can be of any of the data types CHAR, VARCHAR2, NCHAR, or NVARCHAR2. The return value is the same data type as char. The database sets the case of the initial characters based on the binary mapping defined for the underlying character set. For linguistic-sensitive uppercase and lowercase, refer to NLS_INITCAP.
This function does not support CLOB data directly. However, CLOBs can be passed in as arguments through implicit data conversion.</Function>
    <Function Name="INSERTCHILDXML" Url="http://docs.oracle.com/database/121/SQLRF/functions084.htm">INSERTCHILDXML inserts a user-supplied value into the target XML at the node indicated by the XPath expression. Compare this function with INSERTXMLBEFORE.

XMLType_instance is an instance of XMLType.

XPath_string is an Xpath expression indicating one or more nodes into which the one or more child nodes are to be inserted. You can specify an absolute XPath_string with an initial slash or a relative XPath_string by omitting the initial slash. If you omit the initial slash, then the context of the relative path defaults to the root node.

child_expr specifies the one or more element or attribute nodes to be inserted.

value_expr is an fragment of XMLType that specifies one or more notes being inserted. It must resolve to a string.

The optional namespace_string provides namespace information for the XPath_string. This parameter must be of type VARCHAR2.</Function>
    <Function Name="INSERTXMLAFTER" Url="http://docs.oracle.com/database/121/SQLRF/functions087.htm">INSERTXMLAFTER inserts one or more nodes of any kind immediately after a target node that is not an attribute node. The XML document that is the target of the insertion can be schema-based or non-schema-based. This function is similar to insertXMLbefore, but it inserts after, not before, the target node.

XMLType_instance specifies the target node of the of the insertion.

XPath_string is an XPath 1.0 expression that locates in the target node zero or more nodes of any kind except attribute nodes. XML-data is inserted immediately after each of these nodes; that is, each node specified becomes the preceding sibling node of a node specified in value_expr.

value_expr is the XML data to be inserted. You can specify one or more nodes of any kind. The order of the nodes is preserved after the insertion.

The optional namespace_string is the namespace for the target node.</Function>
    <Function Name="INSERTXMLBEFORE" Url="http://docs.oracle.com/database/121/SQLRF/functions088.htm">INSERTXMLBEFORE inserts a user-supplied value into the target XML before the node indicated by the XPath expression. This function is similar to INSERTXMLAFTER, but it inserts before, not after, the target node. Compare this function with INSERTCHILDXML.

XMLType_instance is an instance of XMLType.

XPath_string is an Xpath expression indicating one or more nodes into which one or more child nodes are to be inserted. You can specify an absolute XPath_string with an initial slash or a relative XPath_string by omitting the initial slash. If you omit the initial slash, then the context of the relative path defaults to the root node.

value_expr is a fragment of XMLType that defines one or more nodes being inserted and their position within the parent node. It must resolve to a string.

The optional namespace_string provides namespace information for the XPath_string. This parameter must be of type VARCHAR2.</Function>
    <Function Name="INSERTXMLCHILDAFTER" Url="http://docs.oracle.com/database/121/SQLRF/functions085.htm">INSERTXMLCHILDAFTER inserts one or more collection elements as children of target parent elements. The insertion for each target occurs immediately after a specified existing collection element. The existing XML document that is the target of the insertion can be schema-based or non-schema-based.

XMLType_instance identifies the XML data that is the target of the insertion.

XPath_string locates the parent elements within target-data; child-data is inserted under each parent element.

child_expr is a relative XPath 1.0 expression that locates the existing child that will precede the inserted child-data. It must name a child element of the element indicated by parent-xpath, and it can include a predicate.

value_expr is the XMLType child element data to insert. Each top-level element node in this argument must have the same data type as the element indicated by child_expr.

The optional namespace_string specifies the namespace for the parent elements, existing child element, and child element XML data to be inserted.</Function>
    <Function Name="INSERTXMLCHILDBEFORE" Url="http://docs.oracle.com/database/121/SQLRF/functions086.htm">INSERTXMLCHILDBEFORE inserts one or more collection elements as children of target parent elements. The insertion for each target occurs immediately before a specified existing collection element. The existing XML document that is the target of the insertion can be schema-based or non-schema-based.

XMLType_instance identifies the XML data that is the target of the insertion.

XPath_string locates the parent elements within target-data; child-data is inserted under each parent element.

child_expr is a relative XPath 1.0 expression that locates the existing child that will follow the inserted child-data. It must name a child element of the element indicated by parent-xpath, and it can include a predicate.

value_expr is the XMLType child element data to insert. Each top-level element node in this argument must have the same data type as the element indicated by child_expr.

The optional namespace_string specifies the namespace for the parent elements, existing child element, and child element XML data to be inserted.</Function>
    <Function Name="INSTR" Url="http://docs.oracle.com/database/121/SQLRF/functions089.htm">The INSTR functions search string for substring. The search operation is defined as comparing the substring argument with substrings of string of the same length for equality until a match is found or there are no more substrings left. Each consecutive compared substring of string begins one character to the right (for forward searches) or one character to the left (for backward searches) from the first character of the previous compared substring. If a substring that is equal to substring is found, then the function returns an integer indicating the position of the first character of this substring. If no such substring is found, then the function returns zero.

position is an nonzero integer indicating the character of string where Oracle Database begins the search—that is, the position of the first character of the first substring to compare with substring. If position is negative, then Oracle counts backward from the end of string and then searches backward from the resulting position.

occurrence is an integer indicating which occurrence of substring in string Oracle should search for. The value of occurrence must be positive. If occurrence is greater than 1, then the database does not return on the first match but continues comparing consecutive substrings of string, as described above, until match number occurrence has been found.

INSTR accepts and returns positions in characters as defined by the input character set, with the first character of string having position 1. INSTRB uses bytes instead of characters. INSTRC uses Unicode complete characters. INSTR2 uses UCS2 code points. INSTR4 uses UCS4 code points.
string can be any of the data types CHAR, VARCHAR2, NCHAR, NVARCHAR2, CLOB, or NCLOB. The exceptions are INSTRC, INSTR2, and INSTR4, which do not allow string to be a CLOB or NCLOB.
substring can be any of the data types CHAR, VARCHAR2, NCHAR, NVARCHAR2, CLOB, or NCLOB.
The value returned is of NUMBER data type.
Both position and occurrence must be of data type NUMBER, or any data type that can be implicitly converted to NUMBER, and must resolve to an integer. The default values of both position and occurrence are 1, meaning Oracle begins searching at the first character of string for the first occurrence of substring. The return value is relative to the beginning of string, regardless of the value of position.</Function>
    <Function Name="ITERATION_NUMBER" Url="http://docs.oracle.com/database/121/SQLRF/functions090.htm">The ITERATION_NUMBER function can be used only in the model_clause of the SELECT statement and then only when ITERATE(number) is specified in the model_rules_clause. It returns an integer representing the completed iteration through the model rules. The ITERATION_NUMBER function returns 0 during the first iteration. For each subsequent iteration, the ITERATION_NUMBER function returns the equivalent of iteration_number plus one.</Function>
    <Function Name="JSON_QUERY" Url="http://docs.oracle.com/database/121/SQLRF/functions091.htm">JSON_QUERY finds one or more specified JSON values in JSON data and returns the values in a character string.

expr
Use this clause to specify the JSON data to be evaluated. For expr, specify an expression that evaluates to a text literal. If expr is a column, then the column must be of data type VARCHAR2, CLOB, or BLOB. If expr is null, then the function returns null.
If expr is not a text literal of well-formed JSON data using strict or lax syntax, then the function returns null by default. You can use the JSON_query_on_error_clause to override this default behavior. Refer to JSON_query_on_error_clause.

FORMAT JSON
You must specify FORMAT JSON if expr is a column of data type BLOB.


JSON_path_expression
Use this clause to specify a JSON path expression. The function uses the path expression to evaluate expr and find one or more JSON values that match, or satisfy, the path expression. The path expression must be a text literal.
The path expression must begin with a dollar sign ($), which represents the context item, that is, the expression specified by expr. The dollar sign is followed by zero or more steps, each of which can be an object step or an array step.
The function attempts to match the first step in the path expression to the context item. If the first step results in a match, then the function attempts to match the second step to the JSON value(s) that matched the first step. If the second step results in a match, then the function attempts to match the third step to the JSON values(s) that matched the second step, and so on. The function returns the value(s) matched in the final step as a comma-separated sequence of values in a character string. The order of the sequence is nondeterministic. All values are returned using strict JSON syntax, regardless of whether the original JSON data used strict or lax JSON syntax. A path expression that consists of a dollar sign followed by zero steps ('$') matches the entire context item.
You can specify the JSON_query_returning_clause to control the data type and format of the return character string. Refer to the JSON_query_returning_clause.
If multiple values match the path expression, or if only one scalar value matches the path expression, then you must wrap the value(s) in an array wrapper. Refer to the JSON_query_wrapper_clause.
If any step in the path expression does not result in a match, then the function returns null by default. You can use the JSON_query_on_error_clause to override this default behavior. Refer to the JSON_query_on_error_clause.


object_step Use this clause to specify an object step.

Use simple_name or complex_name to specify a property name. If a member with that property name exists in the JSON object being evaluated, then the object step results in a match to the property value of that member. Otherwise, the object step does not result in a match. Both types of names are case-sensitive. Therefore, a match will result only if the alphabetic character cases match in the object step and the JSON data.
A simple_name can contain only alphanumeric characters and must begin with an alphabetic character. A complex_name can contain only alphanumeric characters and spaces, and must begin with an alphanumeric character. A complex_name must be enclosed in double quotation marks.

Use the asterisk wildcard symbol (*) to specify all property names. If the JSON object being evaluated contains at least one member, then the object step results in a match to the values of all members. Otherwise, the object step does not result in a match.

If you apply an object step to a JSON array, then the array is implicitly unwrapped and the elements of the array are evaluated using the object step. This is called JSON path expression relaxation. Refer to Oracle XML DB Developer's Guide for more information.
If the JSON data being evaluated is not a JSON object, then the object step does not result in a match.


array_step Use this clause to specify an array step.

Use integer to specify the element at index integer in a JSON array. Use integer TO integer to specify the range of elements between the two index integer values, inclusive. If the specified elements exist in the JSON array being evaluated, then the array step results in a match to those elements. Otherwise, the array step does not result in a match. The first element in a JSON array had index 0.

Use the asterisk wildcard symbol (*) to specify all elements in a JSON array. If the JSON array being evaluated contains at least one element, then the array step results in a match to all elements in the JSON array. Otherwise, the array step does not result in a match.

If the JSON data being evaluated is not a JSON array, then the data is implicitly wrapped in an array and then evaluated using the array step. This is called JSON path expression relaxation. Refer to Oracle XML DB Developer's Guide for more information.


JSON_query_returning_clause
Use this clause to specify the data type and format of the character string returned by this function.

RETURNING Use the RETURNING clause to specify the data type of the character string. If you omit this clause, then JSON_QUERY returns a character string of type VARCHAR2(4000).
You can use the JSON_return_type_clause to specify the following data type:

VARCHAR2[(size [BYTE,CHAR])]
When specifying the VARCHAR2 data type elsewhere in SQL, you are required to specify a size. However, in this clause you can omit the size. In this case, JSON_QUERY returns a character string of type VARCHAR2(4000).
Refer to "VARCHAR2 Data Type" for more information.

If the data type is not large enough to hold the return character string, then this function returns null by default. You can use the JSON_query_on_error_clause to override this default behavior. Refer to the JSON_query_on_error_clause.

PRETTY Specify PRETTY to pretty-print the return character string by inserting newline characters and indenting.

ASCII Specify ASCII to automatically escape any non-ASCII Unicode characters in the return character string, using standard ASCII Unicode escape sequences.


JSON_query_wrapper_clause
Use this clause to control whether this function wraps the values matched by the path expression in an array wrapper—that is, encloses the sequence of values in square brackets ([]).

Specify WITHOUT WRAPPER to omit the array wrapper. You can specify this clause only if the path expression matches a single JSON object or JSON array. This is the default.

Specify WITH WRAPPER to include the array wrapper. You must specify this clause if the path expression matches a single scalar value (a value that is not a JSON object or JSON array) or multiple values of any type.

Specifying the WITH UNCONDITIONAL WRAPPER clause is equivalent to specifying the WITH WRAPPER clause. The UNCONDITIONAL keyword is provided for semantic clarity.

Specify WITH CONDITIONAL WRAPPER to include the array wrapper only if the path expression matches a single scalar value or multiple values of any type. If the path expression matches a single JSON object or JSON array, then the array wrapper is omitted.

The ARRAY keyword is optional and is provided for semantic clarity.
If the function returns a single scalar value, or multiple values of any type, and you do not specify WITH [UNCONDITIONAL | CONDITIONAL] WRAPPER, then the function returns null by default. You can use the JSON_query_on_error_clause to override this default behavior. Refer to the JSON_query_on_error_clause.


JSON_query_on_error_clause
Use this clause to specify the value returned by this function when any of the following errors occur:

expr is not well-formed JSON data using strict or lax JSON syntax

No match is found when the JSON data is evaluated using the JSON path expression

The return value data type is not large enough to hold the return character string

The function matches a single scalar value or, multiple values of any type, and the WITH [UNCONDITIONAL | CONDITIONAL] WRAPPER clause is not specified

You can specify the following clauses:

NULL ON ERROR - Returns null when an error occurs. This is the default.

ERROR ON ERROR - Returns the appropriate Oracle error when an error occurs.

EMPTY ON ERROR - Returns an empty JSON array ('[]') when an error occurs.</Function>
    <Function Name="JSON_TABLE" Url="http://docs.oracle.com/database/121/SQLRF/functions092.htm">JSON_TABLE creates a relational view of JSON data. It maps the result of a JSON data evaluation into relational rows and columns. You can query the result returned by the function as a virtual relational table using SQL. The main purpose of JSON_TABLE is to create a row of relational data for each object inside a JSON array and output JSON values from within that object as individual SQL column values.
You must specify JSON_TABLE only in the FROM clause of a SELECT statement. The function first applies a JSON path expression, called a row path expression, to the supplied JSON data. The JSON value that matches the row path expression is called a row source in that it generates a row of relational data. The COLUMNS clause evaluates the row source, finds specific JSON values within the row source, and returns those JSON values as SQL values in individual columns of a row of relational data.
The COLUMNS clause enables you to search for JSON values in different ways by using the following clauses:

JSON_exists_column - Evaluates JSON data in the same manner as the JSON_EXISTS condition, that is, determines if a specified JSON value exists, and returns either a VARCHAR2 column of values 'true' or 'false', or a NUMBER column of values 1 or 0.

JSON_query_column - Evaluates JSON data in the same manner as the JSON_QUERY function, that is, finds one or more specified JSON values, and returns a column of character strings that contain those JSON values.

JSON_value_column - Evaluates JSON data in the same manner as the JSON_VALUE function, that is, finds a specified scalar JSON value, and returns a column of those JSON values as SQL values.

JSON_nested_path - Allows you to flatten JSON values in a nested JSON object or JSON array into individual columns in a single row along with JSON values from the parent object or array. You can use this clause recursively to project data from multiple layers of nested objects or arrays into a single row.

ordinality_column - Returns a column of generated row numbers.

The column definition clauses allow you to specify a name for each column of data that they return. You can reference these column names elsewhere in the SELECT statement, such as in the SELECT list and the WHERE clause.

expr
Use this clause to specify the JSON data to be evaluated. For expr, specify an expression that evaluates to a text literal. If expr is a column, then the column must be of data type VARCHAR2, CLOB, or BLOB. If expr is null, then the function returns null.
If expr is not a text literal of well-formed JSON data using strict or lax syntax, then the function returns null by default. You can use the JSON_table_on_error_clause to override this default behavior. Refer to JSON_table_on_error_clause.

FORMAT JSON
You must specify FORMAT JSON if expr is a column of data type BLOB.

JSON_path_expression
Use this clause to specify the row path expression. The function uses the row path expression to evaluate expr and find the a JSON value, called the row source, that matches, or satisfy, the path expression. This row source is then evaluated by the COLUMNS clause. The path expression must be a text literal.
The JSON_path_expression clause has the same semantics for JSON_TABLE and JSON_QUERY. For the full semantics of this clause, refer to JSON_path_expression in the documentation on JSON_QUERY.


JSON_table_on_error_clause
Use this clause to specify the value returned by this function when the following errors occur:

expr is not well-formed JSON data using strict or lax JSON syntax

No match is found when the JSON data is evaluated using the row path expression

You can specify the following clauses:

NULL ON ERROR - Returns null when an error occurs. This is the default.

ERROR ON ERROR - Returns the appropriate Oracle error when an error occurs.

DEFAULT literal ON ERROR - Returns literal when an error occurs. If the data type of the value returned by this function is VARCHAR2, then you must specify a text literal. If the data type is NUMBER, then you must specify a numeric literal.



JSON_columns_clause
Use the COLUMNS clause to define the columns in the virtual relational table returned by the JSON_TABLE function.


JSON_exists_column This clause evaluates JSON data in the same manner as the JSON_EXISTS condition, that is, it determines if a specified JSON value exists. It returns either a VARCHAR2 column of values 'true' or 'false', or a NUMBER column of values 1 or 0. A value of 'true' or 1 indicates that the JSON value exists and a value of 'false' or 0 indicates that the JSON value does not exist.
You can use the JSON_value_return_type clause to control the data type of the returned column. If you omit this clause, then the data type is VARCHAR2(4000). Use column_name to specify the name of the returned column. The rest of the clauses of JSON_exists_column have the same semantics here as they have for the JSON_EXISTS condition. For full information on these clauses, refer to "JSON_EXISTS Condition". Also see "Using JSON_exists_column: Examples" for an example.


JSON_query_column This clause evaluates JSON data in the same manner as the JSON_QUERY function, that is, it finds one or more specified JSON values, and returns a column of character strings that contain those JSON values.
Use column_name to specify the name of the returned column. The rest of the clauses of JSON_query_column have the same semantics here as they have for the JSON_QUERY function. For full information on these clauses, refer to JSON_QUERY. Also see "Using JSON_query_column: Example" for an example.


JSON_value_column This clause evaluates JSON data in the same manner as the JSON_VALUE function, that is, it finds a specified scalar JSON value, and returns a column of those JSON values as SQL values.
Use column_name to specify the name of the returned column. The rest of the clauses of JSON_value_column have the same semantics here as they have for the JSON_VALUE function. For full information on these clauses, refer to JSON_VALUE. Also see "Using JSON_value_column: Example" for an example.


nested_path_column Use this clause to flatten JSON values in a nested JSON object or JSON array into individual columns in a single row along with JSON values from the parent object or array. You can use this clause recursively to project data from multiple layers of nested objects or arrays into a single row.
Specify the JSON_path_expression clause to match the nested object or array. This path expression is relative to the row path expression specified in the JSON_TABLE function.
Use the COLUMNS clause to define the columns of the nested object or array to be returned. This clause is recursive—you can specify the nested_path_column clause within another nested_path_column clause. Also see "Using nested_path_column: Examples" for an example.


ordinality_column This clause returns a column of generated row numbers of data type NUMBER. You can specify at most one ordinality_column. Also see "Using JSON_value_column: Example" for an example of using the ordinality_column clause.</Function>
    <Function Name="JSON_VALUE" Url="http://docs.oracle.com/database/121/SQLRF/functions093.htm">JSON_VALUE finds a specified scalar JSON value in JSON data and returns it as a SQL value.

expr
Use this clause to specify the JSON data to be evaluated. For expr, specify an expression that evaluates to a text literal. If expr is a column, then the column must be of data type VARCHAR2, CLOB, or BLOB. If expr is null, then the function returns null.
If expr is not a text literal of well-formed JSON data using strict or lax syntax, then the function returns null by default. You can use the JSON_value_on_error_clause to override this default behavior. Refer to the JSON_value_on_error_clause.

FORMAT JSON
You must specify FORMAT JSON if expr is a column of data type BLOB.


JSON_path_expression
Use this clause to specify a JSON path expression. The function uses the path expression to evaluate expr and find a scalar JSON value that matches, or satisfies, the path expression. The path expression must be a text literal.
The path expression must begin with a dollar sign ($), which represents the context item, that is, the expression specified by expr. The dollar sign is followed by zero or more steps, each of which can be an object step or an array step.
The function attempts to match the first step in the path expression to the context item. If the first step results in a match, then the function attempts to match the second step to the JSON value(s) that matched the first step. If the second step results in a match, then the function attempts to match the third step to the JSON value(s) that matched the second step, and so on. If the final step matches a scalar JSON value, then the function returns that value as a SQL value. A path expression that consists of a dollar sign followed by zero steps ('$') matches the entire context item.
You can specify the JSON_value_returning_clause to control the data type and format of the returned SQL value. Refer to the JSON_value_returning_clause.
If any step in the path expression does not result in a match, or if the final step matches a nonscalar value, then the function returns null by default. You can use the JSON_value_on_error_clause to override this default behavior. Refer to the JSON_value_on_error_clause.


object_step Use this clause to specify an object step.

Use simple_name or complex_name to specify a property name. If a member with that property name exists in the JSON object being evaluated, then the object step results in a match to the property value of that member. Otherwise, the object step does not result in a match. Both types of names are case-sensitive. Therefore, a match will result only if the alphabetic character cases match in the object step and the JSON data.
A simple_name can contain only alphanumeric characters and must begin with an alphabetic character. A complex_name can contain only alphanumeric characters and spaces, and must begin with an alphanumeric character. A complex_name must be enclosed in double quotation marks.

Use the asterisk wildcard symbol (*) to specify all property names. If the JSON object being evaluated contains at least one member, then the object step results in a match to the values of all members. Otherwise, the object step does not result in a match.

If you apply an object step to a JSON array, then the array is implicitly unwrapped and the elements of the array are evaluated using the object step. This is called JSON path expression relaxation. Refer to Oracle XML DB Developer's Guide for more information.
If the JSON value being evaluated is not a JSON object, then the object step does not result in a match.


array_step Use this clause to specify an array step.

Use integer to specify the element at index integer in a JSON array. Use integer TO integer to specify the range of elements between the two index integer values, inclusive. If the specified elements exist in the JSON array being evaluated, then the array step results in a match to those elements. Otherwise, the array step does not result in a match. The first element in a JSON array has index 0.

Use the asterisk wildcard symbol (*) to specify all elements in a JSON array. If the JSON array being evaluated contains at least one element, then the array step results in a match to all elements in the JSON array. Otherwise, the array step does not result in a match.

If the JSON data being evaluated is not a JSON array, then the data is implicitly wrapped in an array and then evaluated using the array step. This is called JSON path expression relaxation. Refer to Oracle XML DB Developer's Guide for more information.


JSON_value_returning_clause
Use this clause to specify the data type and format of the value returned by this function.

RETURNING Use the RETURNING clause to specify the data type of the return value. If you omit this clause, then JSON_VALUE returns a value of type VARCHAR2(4000).
You can use JSON_value_return_type to specify the following data types:

VARCHAR2[(size [BYTE,CHAR])]
If you specify this data type, then the scalar value returned by this function can be a character or number value. A number value will be implicitly converted to a VARCHAR2. When specifying the VARCHAR2 data type elsewhere in SQL, you are required to specify a size. However, in this clause you can omit the size. In this case, JSON_VALUE returns a value of type VARCHAR2(4000).
Refer to "VARCHAR2 Data Type" for more information.

NUMBER[(precision [, scale])]
If you specify this data type, then the scalar value returned by this function must be a number value.
Refer to "NUMBER Data Type" for more information.

If the data type is not large enough to hold the return value, then this function returns null by default. You can use the JSON_value_on_error_clause to override this default behavior. Refer to the JSON_value_on_error_clause.

ASCII Specify ASCII to automatically escape any non-ASCII Unicode characters in the return value, using standard ASCII Unicode escape sequences.


JSON_value_on_error_clause
Use this clause to specify the value returned by this function when any of the following errors occur:

expr is not well-formed JSON data using strict or lax JSON syntax

A nonscalar value or no match is found when the JSON data is evaluated using the JSON path expression

The return value data type is not large enough to hold the return value

You can specify the following clauses:

NULL ON ERROR - Returns null when an error occurs. This is the default.

ERROR ON ERROR - Returns the appropriate Oracle error when an error occurs.

DEFAULT literal ON ERROR - Returns literal when an error occurs. If the data type of the value returned by this function is VARCHAR2, then you must specify a text literal. If the data type is NUMBER, then you must specify a numeric literal.</Function>
    <Function Name="LAG" Url="http://docs.oracle.com/database/121/SQLRF/functions094.htm">LAG is an analytic function. It provides access to more than one row of a table at the same time without a self join. Given a series of rows returned from a query and a position of the cursor, LAG provides access to a row at a given physical offset prior to that position.
For the optional offset argument, specify an integer that is greater than zero. If you do not specify offset, then its default is 1. The optional default value is returned if the offset goes beyond the scope of the window. If you do not specify default, then its default is null.
{RESPECT | IGNORE} NULLS determines whether null values of value_expr are included in or eliminated from the calculation. The default is RESPECT NULLS.
You cannot nest analytic functions by using LAG or any other analytic function for value_expr. However, you can use other built-in function expressions for value_expr.</Function>
    <Function Name="LAST_DAY" Url="http://docs.oracle.com/database/121/SQLRF/functions096.htm">LAST_DAY returns the date of the last day of the month that contains date. The last day of the month is defined by the session parameter NLS_CALENDAR. The return type is always DATE, regardless of the data type of date.</Function>
    <Function Name="LAST_VALUE" Url="http://docs.oracle.com/database/121/SQLRF/functions097.htm">LAST_VALUE is an analytic function that is useful for data densification. It returns the last value in an ordered set of values.</Function>
    <Function Name="LEAD" Url="http://docs.oracle.com/database/121/SQLRF/functions098.htm">LEAD is an analytic function. It provides access to more than one row of a table at the same time without a self join. Given a series of rows returned from a query and a position of the cursor, LEAD provides access to a row at a given physical offset beyond that position.
If you do not specify offset, then its default is 1. The optional default value is returned if the offset goes beyond the scope of the table. If you do not specify default, then its default value is null.
{RESPECT | IGNORE} NULLS determines whether null values of value_expr are included in or eliminated from the calculation. The default is RESPECT NULLS.
You cannot nest analytic functions by using LEAD or any other analytic function for value_expr. However, you can use other built-in function expressions for value_expr.</Function>
    <Function Name="LEAST" Url="http://docs.oracle.com/database/121/SQLRF/functions099.htm">LEAST returns the least of a list of one or more expressions. Oracle Database uses the first expr to determine the return type. If the first expr is numeric, then Oracle determines the argument with the highest numeric precedence, implicitly converts the remaining arguments to that data type before the comparison, and returns that data type. If the first expr is not numeric, then each expr after the first is implicitly converted to the data type of the first expr before the comparison.
Oracle Database compares each expr using nonpadded comparison semantics. The comparison is binary by default and is linguistic if the NLS_COMP parameter is set to LINGUISTIC and the NLS_SORT parameter has a setting other than BINARY. Character comparison is based on the numerical codes of the characters in the database character set and is performed on whole strings treated as one sequence of bytes, rather than character by character. If the value returned by this function is character data, then its data type is VARCHAR2 if the first expr is a character data type and NVARCHAR2 if the first expr is a national character data type.</Function>
    <Function Name="LENGTH" Url="http://docs.oracle.com/database/121/SQLRF/functions100.htm">The LENGTH functions return the length of char. LENGTH calculates length using characters as defined by the input character set. LENGTHB uses bytes instead of characters. LENGTHC uses Unicode complete characters. LENGTH2 uses UCS2 code points. LENGTH4 uses UCS4 code points.
char can be any of the data types CHAR, VARCHAR2, NCHAR, NVARCHAR2, CLOB, or NCLOB. The exceptions are LENGTHC, LENGTH2, and LENGTH4, which do not allow char to be a CLOB or NCLOB. The return value is of data type NUMBER. If char has data type CHAR, then the length includes all trailing blanks. If char is null, then this function returns null.

Restriction on LENGTHB The LENGTHB function is supported for single-byte LOBs only. It cannot be used with CLOB and NCLOB data in a multibyte character set.</Function>
    <Function Name="LISTAGG" Url="http://docs.oracle.com/database/121/SQLRF/functions101.htm">For a specified measure, LISTAGG orders data within each group specified in the ORDER BY clause and then concatenates the values of the measure column.

As a single-set aggregate function, LISTAGG operates on all rows and returns a single output row.

As a group-set aggregate, the function operates on and returns an output row for each group defined by the GROUP BY clause.

As an analytic function, LISTAGG partitions the query result set into groups based on one or more expression in the query_partition_clause.

The arguments to the function are subject to the following rules:

The measure_expr can be any expression. Null values in the measure column are ignored.

The delimiter_expr designates the string that is to separate the measure values. This clause is optional and defaults to NULL.

The order_by_clause determines the order in which the concatenated values are returned. The function is deterministic only if the ORDER BY column list achieved unique ordering.

The return data type is RAW if the measure column is RAW; otherwise the return value is VARCHAR2.</Function>
    <Function Name="LN" Url="http://docs.oracle.com/database/121/SQLRF/functions102.htm">LN returns the natural logarithm of n, where n is greater than 0.
This function takes as an argument any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. If the argument is BINARY_FLOAT, then the function returns BINARY_DOUBLE. Otherwise the function returns the same numeric data type as the argument.</Function>
    <Function Name="LNNVL" Url="http://docs.oracle.com/database/121/SQLRF/functions103.htm">LNNVL provides a concise way to evaluate a condition when one or both operands of the condition may be null. The function can be used in the WHERE clause of a query, or as the WHEN condition in a searched CASE expression. It takes as an argument a condition and returns TRUE if the condition is FALSE or UNKNOWN and FALSE if the condition is TRUE. LNNVL can be used anywhere a scalar expression can appear, even in contexts where the IS [NOT] NULL, AND, or OR conditions are not valid but would otherwise be required to account for potential nulls.
Oracle Database sometimes uses the LNNVL function internally in this way to rewrite NOT IN conditions as NOT EXISTS conditions. In such cases, output from EXPLAIN PLAN shows this operation in the plan table output. The condition can evaluate any scalar values but cannot be a compound condition containing AND, OR, or BETWEEN.
The table that follows shows what LNNVL returns given that a = 2 and b is null.</Function>
    <Function Name="LOCALTIMESTAMP" Url="http://docs.oracle.com/database/121/SQLRF/functions104.htm">LOCALTIMESTAMP returns the current date and time in the session time zone in a value of data type TIMESTAMP. The difference between this function and CURRENT_TIMESTAMP is that LOCALTIMESTAMP returns a TIMESTAMP value while CURRENT_TIMESTAMP returns a TIMESTAMP WITH TIME ZONE value.
The optional argument timestamp_precision specifies the fractional second precision of the time value returned.</Function>
    <Function Name="LOG" Url="http://docs.oracle.com/database/121/SQLRF/functions105.htm">LOG returns the logarithm, base n2, of n1. The base n2 can be any positive value other than 0 or 1 and n1 can be any positive value.
This function takes as arguments any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. If any argument is BINARY_FLOAT or BINARY_DOUBLE, then the function returns BINARY_DOUBLE. Otherwise the function returns NUMBER.</Function>
    <Function Name="LOWER" Url="http://docs.oracle.com/database/121/SQLRF/functions106.htm">LOWER returns char, with all letters lowercase. char can be any of the data types CHAR, VARCHAR2, NCHAR, NVARCHAR2, CLOB, or NCLOB. The return value is the same data type as char. The database sets the case of the characters based on the binary mapping defined for the underlying character set. For linguistic-sensitive lowercase, refer to NLS_LOWER.</Function>
    <Function Name="LPAD" Url="http://docs.oracle.com/database/121/SQLRF/functions107.htm">LPAD returns expr1, left-padded to length n characters with the sequence of characters in expr2. This function is useful for formatting the output of a query.
Both expr1 and expr2 can be any of the data types CHAR, VARCHAR2, NCHAR, NVARCHAR2, CLOB, or NCLOB. The string returned is of VARCHAR2 data type if expr1 is a character data type, NVARCHAR2 if expr1 is a national character data type, and a LOB if expr1 is a LOB data type. The string returned is in the same character set as expr1. The argument n must be a NUMBER integer or a value that can be implicitly converted to a NUMBER integer.
If you do not specify expr2, then the default is a single blank. If expr1 is longer than n, then this function returns the portion of expr1 that fits in n.
The argument n is the total length of the return value as it is displayed on your terminal screen. In most character sets, this is also the number of characters in the return value. However, in some multibyte character sets, the display length of a character string can differ from the number of characters in the string.</Function>
    <Function Name="LTRIM" Url="http://docs.oracle.com/database/121/SQLRF/functions108.htm">LTRIM removes from the left end of char all of the characters contained in set. If you do not specify set, then it defaults to a single blank. If char is a character literal, then you must enclose it in single quotation marks. Oracle Database begins scanning char from its first character and removes all characters that appear in set until reaching a character not in set and then returns the result.
Both char and set can be any of the data types CHAR, VARCHAR2, NCHAR, NVARCHAR2, CLOB, or NCLOB. The string returned is of VARCHAR2 data type if char is a character data type, NVARCHAR2 if char is a national character data type, and a LOB if char is a LOB data type.</Function>
    <Function Name="MAKE_REF" Url="http://docs.oracle.com/database/121/SQLRF/functions109.htm">MAKE_REF creates a REF to a row of an object view or a row in an object table whose object identifier is primary key based. This function is useful, for example, if you are creating an object view</Function>
    <Function Name="MAX" Url="http://docs.oracle.com/database/121/SQLRF/functions110.htm">MAX returns maximum value of expr. You can use it as an aggregate or analytic function.</Function>
    <Function Name="MEDIAN" Url="http://docs.oracle.com/database/121/SQLRF/functions111.htm">MEDIAN is an inverse distribution function that assumes a continuous distribution model. It takes a numeric or datetime value and returns the middle value or an interpolated value that would be the middle value once the values are sorted. Nulls are ignored in the calculation.
This function takes as arguments any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. If you specify only expr, then the function returns the same data type as the numeric data type of the argument. If you specify the OVER clause, then Oracle Database determines the argument with the highest numeric precedence, implicitly converts the remaining arguments to that data type, and returns that data type.</Function>
    <Function Name="MIN" Url="http://docs.oracle.com/database/121/SQLRF/functions112.htm">MIN returns minimum value of expr. You can use it as an aggregate or analytic function.</Function>
    <Function Name="MOD" Url="http://docs.oracle.com/database/121/SQLRF/functions113.htm">MOD returns the remainder of n2 divided by n1. Returns n2 if n1 is 0.
This function takes as arguments any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. Oracle determines the argument with the highest numeric precedence, implicitly converts the remaining arguments to that data type, and returns that data type.</Function>
    <Function Name="MONTHS_BETWEEN" Url="http://docs.oracle.com/database/121/SQLRF/functions114.htm">MONTHS_BETWEEN returns number of months between dates date1 and date2. The month and the last day of the month are defined by the parameter NLS_CALENDAR. If date1 is later than date2, then the result is positive. If date1 is earlier than date2, then the result is negative. If date1 and date2 are either the same days of the month or both last days of months, then the result is always an integer. Otherwise Oracle Database calculates the fractional portion of the result based on a 31-day month and considers the difference in time components date1 and date2.</Function>
    <Function Name="NANVL" Url="http://docs.oracle.com/database/121/SQLRF/functions115.htm">The NANVL function is useful only for floating-point numbers of type BINARY_FLOAT or BINARY_DOUBLE. It instructs Oracle Database to return an alternative value n1 if the input value n2 is NaN (not a number). If n2 is not NaN, then Oracle returns n2.
This function takes as arguments any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. Oracle determines the argument with the highest numeric precedence, implicitly converts the remaining arguments to that data type, and returns that data type.</Function>
    <Function Name="NEW_TIME" Url="http://docs.oracle.com/database/121/SQLRF/functions117.htm">NEW_TIME returns the date and time in time zone timezone2 when date and time in time zone timezone1 are date. Before using this function, you must set the NLS_DATE_FORMAT parameter to display 24-hour time. The return type is always DATE, regardless of the data type of date.</Function>
    <Function Name="NEXT_DAY" Url="http://docs.oracle.com/database/121/SQLRF/functions118.htm">NEXT_DAY returns the date of the first weekday named by char that is later than the date date. The return type is always DATE, regardless of the data type of date. The argument char must be a day of the week in the date language of your session, either the full name or the abbreviation. The minimum number of letters required is the number of letters in the abbreviated version. Any characters immediately following the valid abbreviation are ignored. The return value has the same hours, minutes, and seconds component as the argument date.</Function>
    <Function Name="NCHR" Url="http://docs.oracle.com/database/121/SQLRF/functions116.htm">NCHR returns the character having the binary equivalent to number in the national character set. The value returned is always NVARCHAR2. This function is equivalent to using the CHR function with the USING NCHAR_CS clause.
This function takes as an argument a NUMBER value, or any value that can be implicitly converted to NUMBER, and returns a character.</Function>
    <Function Name="NLS_CHARSET_DECL_LEN" Url="http://docs.oracle.com/database/121/SQLRF/functions119.htm">NLS_CHARSET_DECL_LEN returns the declaration length (in number of characters) of an NCHAR column. The byte_count argument is the width of the column. The char_set_id argument is the character set ID of the column.</Function>
    <Function Name="NLS_CHARSET_ID" Url="http://docs.oracle.com/database/121/SQLRF/functions120.htm">NLS_CHARSET_ID returns the character set ID number corresponding to character set name string. The string argument is a run-time VARCHAR2 value. The string value 'CHAR_CS' returns the database character set ID number of the server. The string value 'NCHAR_CS' returns the national character set ID number of the server.
Invalid character set names return null.</Function>
    <Function Name="NLS_CHARSET_NAME" Url="http://docs.oracle.com/database/121/SQLRF/functions121.htm">NLS_CHARSET_NAME returns the name of the character set corresponding to ID number number. The character set name is returned as a VARCHAR2 value in the database character set.
If number is not recognized as a valid character set ID, then this function returns null.</Function>
    <Function Name="NLS_INITCAP" Url="http://docs.oracle.com/database/121/SQLRF/functions122.htm">NLS_INITCAP returns char, with the first letter of each word in uppercase, all other letters in lowercase. Words are delimited by white space or characters that are not alphanumeric.
Both char and 'nlsparam' can be any of the data types CHAR, VARCHAR2, NCHAR, or NVARCHAR2. The string returned is of VARCHAR2 data type and is in the same character set as char.
The value of 'nlsparam' can have this form:

'NLS_SORT = sort'

where sort is either a linguistic sort sequence or BINARY. The linguistic sort sequence handles special linguistic requirements for case conversions. These requirements can result in a return value of a different length than the char. If you omit 'nlsparam', then this function uses the default sort sequence for your session.
This function does not support CLOB data directly. However, CLOBs can be passed in as arguments through implicit data conversion.</Function>
    <Function Name="NLS_LOWER" Url="http://docs.oracle.com/database/121/SQLRF/functions123.htm">NLS_LOWER returns char, with all letters lowercase.
Both char and 'nlsparam' can be any of the data types CHAR, VARCHAR2, NCHAR, NVARCHAR2, CLOB, or NCLOB. The string returned is of VARCHAR2 data type if char is a character data type and a LOB if char is a LOB data type. The return string is in the same character set as char.
The 'nlsparam' can have the same form and serve the same purpose as in the NLS_INITCAP function.</Function>
    <Function Name="NLS_UPPER" Url="http://docs.oracle.com/database/121/SQLRF/functions124.htm">NLS_UPPER returns char, with all letters uppercase.
Both char and 'nlsparam' can be any of the data types CHAR, VARCHAR2, NCHAR, NVARCHAR2, CLOB, or NCLOB. The string returned is of VARCHAR2 data type if char is a character data type and a LOB if char is a LOB data type. The return string is in the same character set as char.
The 'nlsparam' can have the same form and serve the same purpose as in the NLS_INITCAP function.</Function>
    <Function Name="NLSSORT" Url="http://docs.oracle.com/database/121/SQLRF/functions125.htm">NLSSORT returns a collation key for the character value char and an explicitly or implicitly specified collation. A collation key is a string of bytes used to sort char according to the specified collation. The property of the collation keys is that mutual ordering of two such keys generated for the given collation when compared according to their binary order is the same as mutual ordering of the source character values when compared according to the given collation.
Both char and 'nlsparam' can be any of the data types CHAR, VARCHAR2, NCHAR, or NVARCHAR2.
The value of 'nlsparam' must have the form

'NLS_SORT = collation'

where collation is the name of a linguistic collation or BINARY. NLSSORT uses the specified collation to generate the collation key. If you omit 'nlsparam', then this function uses the default collation for your session, which is specified in the session parameter NLS_SORT. If you specify BINARY, then this function returns the char value itself cast to RAW and possibly truncated as described below.
If you specify 'nlsparam', then you can append to the linguistic collation name the suffix _ai to request an accent-insensitive collation or _ci to request a case-insensitive collation. Refer to Oracle Database Globalization Support Guide for more information on accent- and case-insensitive sorting. Using accent-insensitive or case-insensitive collations with the ORDER BY query clause is not recommended as it leads to a nondeterministic sort order.
The returned collation key is of RAW data type. The length of the collation key resulting from a given char value for a given collation may exceed the maximum length of the RAW value returned by NLSSORT. In this case, the behavior of NLSSORT depends on the value of the initialization parameter MAX_STRING_SIZE. If MAX_STRING_SIZE = EXTENDED, then the maximum length of the return value is 32767 bytes. If the collation key exceeds this limit, then the function fails with the error "ORA-12742: unable to create the collation key". This error may also be reported for short input strings if they contain a high percentage of Unicode characters with very high decomposition ratios.
If MAX_STRING_SIZE = STANDARD, then the maximum length of the return value is 2000 bytes. If the value to be returned exceeds the limit, then NLSSORT calculates the collation key for a maximum prefix, or initial substring, of char so that the calculated result does not exceed the maximum length. For monolingual collations, for example FRENCH, the prefix length is typically 1000 characters. For multilingual collations, for example GENERIC_M, the prefix is typically 500 characters. For Unicode Collation Algorithm (UCA) collations, for example UCA0610_DUCET, the prefix is typically 285 characters. The exact length may be lower or higher depending on the collation and the characters contained in char.
The behavior when MAX_STRING_SIZE = STANDARD implies that two character values whose collation keys (NLSSORT results) are compared to find the linguistic ordering are considered equal if they do not differ in the prefix even though they may differ at some further character position. Because the NLSSORT function is used implicitly to find linguistic ordering for comparison conditions, the BETWEEN condition, the IN condition, ORDER BY, GROUP BY, and COUNT(DISTINCT), those operations may return results that are only approximate for long character values. If you want guarantee that the results of those operations are exact, then migrate your database to use MAX_STRING_SIZE = EXTENDED.
Refer to "Extended Data Types" for more information on the MAX_STRING_SIZE initialization parameter.
This function does not support CLOB data directly. However, CLOBs can be passed in as arguments through implicit data conversion.</Function>
    <Function Name="NTH_VALUE" Url="http://docs.oracle.com/database/121/SQLRF/functions126.htm">NTH_VALUE returns the measure_expr value of the nth row in the window defined by the analytic_clause. The returned value has the data type of the measure_expr.

{RESPECT | IGNORE} NULLS determines whether null values of measure_expr are included in or eliminated from the calculation. The default is RESPECT NULLS.

n determines the nth row for which the measure value is to be returned. n can be a constant, bind variable, column, or an expression involving them, as long as it resolves to a positive integer. The function returns NULL if the data source window has fewer than n rows. If n is null, then the function returns an error.

FROM {FIRST | LAST} determines whether the calculation begins at the first or last row of the window. The default is FROM FIRST.

If you omit the windowing_clause of the analytic_clause, it defaults to RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW. This default sometimes returns an unexpected value for NTH_VALUE ... FROM LAST ... , because the last value in the window is at the bottom of the window, which is not fixed. It keeps changing as the current row changes. For expected results, specify the windowing_clause as RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING. Alternatively, you can specify the windowing_clause as RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING.</Function>
    <Function Name="NTILE" Url="http://docs.oracle.com/database/121/SQLRF/functions127.htm">NTILE is an analytic function. It divides an ordered data set into a number of buckets indicated by expr and assigns the appropriate bucket number to each row. The buckets are numbered 1 through expr. The expr value must resolve to a positive constant for each partition. Oracle Database expects an integer, and if expr is a noninteger constant, then Oracle truncates the value to an integer. The return value is NUMBER.
The number of rows in the buckets can differ by at most 1. The remainder values (the remainder of number of rows divided by buckets) are distributed one for each bucket, starting with bucket 1.
If expr is greater than the number of rows, then a number of buckets equal to the number of rows will be filled, and the remaining buckets will be empty.
You cannot nest analytic functions by using NTILE or any other analytic function for expr. However, you can use other built-in function expressions for expr.</Function>
    <Function Name="NULLIF" Url="http://docs.oracle.com/database/121/SQLRF/functions128.htm">NULLIF compares expr1 and expr2. If they are equal, then the function returns null. If they are not equal, then the function returns expr1. You cannot specify the literal NULL for expr1.
If both arguments are numeric data types, then Oracle Database determines the argument with the higher numeric precedence, implicitly converts the other argument to that data type, and returns that data type. If the arguments are not numeric, then they must be of the same data type, or Oracle returns an error.
The NULLIF function is logically equivalent to the following CASE expression:

CASE WHEN expr1 = expr2 THEN NULL ELSE expr1 END</Function>
    <Function Name="NUMTODSINTERVAL" Url="http://docs.oracle.com/database/121/SQLRF/functions129.htm">NUMTODSINTERVAL converts n to an INTERVAL DAY TO SECOND literal. The argument n can be any NUMBER value or an expression that can be implicitly converted to a NUMBER value. The argument interval_unit can be of CHAR, VARCHAR2, NCHAR, or NVARCHAR2 data type. The value for interval_unit specifies the unit of n and must resolve to one of the following string values:

'DAY'

'HOUR'

'MINUTE'

'SECOND'

interval_unit is case insensitive. Leading and trailing values within the parentheses are ignored. By default, the precision of the return is 9.</Function>
    <Function Name="NUMTOYMINTERVAL" Url="http://docs.oracle.com/database/121/SQLRF/functions130.htm">NUMTOYMINTERVAL converts number n to an INTERVAL YEAR TO MONTH literal. The argument n can be any NUMBER value or an expression that can be implicitly converted to a NUMBER value. The argument interval_unit can be of CHAR, VARCHAR2, NCHAR, or NVARCHAR2 data type. The value for interval_unit specifies the unit of n and must resolve to one of the following string values:

'YEAR'

'MONTH'

interval_unit is case insensitive. Leading and trailing values within the parentheses are ignored. By default, the precision of the return is 9.</Function>
    <Function Name="NVL" Url="http://docs.oracle.com/database/121/SQLRF/functions131.htm">NVL lets you replace null (returned as a blank) with a string in the results of a query. If expr1 is null, then NVL returns expr2. If expr1 is not null, then NVL returns expr1.
The arguments expr1 and expr2 can have any data type. If their data types are different, then Oracle Database implicitly converts one to the other. If they cannot be converted implicitly, then the database returns an error. The implicit conversion is implemented as follows:

If expr1 is character data, then Oracle Database converts expr2 to the data type of expr1 before comparing them and returns VARCHAR2 in the character set of expr1.

If expr1 is numeric, then Oracle Database determines which argument has the highest numeric precedence, implicitly converts the other argument to that data type, and returns that data type.


See Also:

Table 2-10, "Implicit Type Conversion Matrix" for more information on implicit conversion and "Numeric Precedence" for information on numeric precedence

"COALESCE" and "CASE Expressions", which provide functionality similar to that of NVL</Function>
    <Function Name="NVL2" Url="http://docs.oracle.com/database/121/SQLRF/functions132.htm">NVL2 lets you determine the value returned by a query based on whether a specified expression is null or not null. If expr1 is not null, then NVL2 returns expr2. If expr1 is null, then NVL2 returns expr3.
The argument expr1 can have any data type. The arguments expr2 and expr3 can have any data types except LONG.
If the data types of expr2 and expr3 are different, then Oracle Database implicitly converts one to the other. If they cannot be converted implicitly, then the database returns an error. If expr2 is character or numeric data, then the implicit conversion is implemented as follows:

If expr2 is character data, then Oracle Database converts expr3 to the data type of expr2 before returning a value unless expr3 is a null constant. In that case, a data type conversion is not necessary, and the database returns VARCHAR2 in the character set of expr2.

If expr2 is numeric data, then Oracle Database determines which argument has the highest numeric precedence, implicitly converts the other argument to that data type, and returns that data type.


See Also:
Table 2-10, "Implicit Type Conversion Matrix" for more information on implicit conversion and "Numeric Precedence" for information on numeric precedence</Function>
    <Function Name="ORA_DST_AFFECTED" Url="http://docs.oracle.com/database/121/SQLRF/functions133.htm">ORA_DST_AFFECTED is useful when you are changing the time zone data file for your database. The function takes as an argument a datetime expression that resolves to a TIMESTAMP WITH TIME ZONE value or a VARRAY object that contains TIMESTAMP WITH TIME ZONE values. The function returns 1 if the datetime value is affected by or will result in a "nonexisting time" or "duplicate time" error with the new time zone data. Otherwise, it returns 0.
This function can be issued only when changing the time zone data file of the database and upgrading the timestamp with the time zone data, and only between the execution of the DBMS_DST.BEGIN_PREPARE and the DBMS_DST.END_PREPARE procedures or between the execution of the DBMS_DST.BEGIN_UPGRADE and the DBMS_DST.END_UPGRADE procedures.</Function>
    <Function Name="ORA_DST_CONVERT" Url="http://docs.oracle.com/database/121/SQLRF/functions134.htm">ORA_DST_CONVERT is useful when you are changing the time zone data file for your database. The function lets you specify error handling for a specified datetime expression.

For datetime_expr, specify a datetime expression that resolves to a TIMESTAMP WITH TIME ZONE value or a VARRAY object that contains TIMESTAMP WITH TIME ZONE values.

The optional second argument specifies handling of "duplicate time" errors. Specify 0 (false) to suppress the error by returning the source datetime value. This is the default. Specify 1 (true) to allow the database to return the duplicate time error.

The optional third argument specifies handling of "nonexisting time" errors. Specify 0 (false) to suppress the error by returning the source datetime value. This is the default. Specify 1 (true) to allow the database to return the nonexisting time error.

If no error occurs, this function returns a value of the same data type as datetime_expr (a TIMESTAMP WITH TIME ZONE value or a VARRAY object that contains TIMESTAMP WITH TIME ZONE values). The returned datetime value when interpreted with the new time zone file corresponds to datetime_expr interpreted with the old time zone file.
This function can be issued only when changing the time zone data file of the database and upgrading the timestamp with the time zone data, and only between the execution of the DBMS_DST.BEGIN_UPGRADE and the DBMS_DST.END_UPGRADE procedures.</Function>
    <Function Name="ORA_DST_ERROR" Url="http://docs.oracle.com/database/121/SQLRF/functions135.htm">ORA_DST_ERROR is useful when you are changing the time zone data file for your database. The function takes as an argument a datetime expression that resolves to a TIMESTAMP WITH TIME ZONE value or a VARRAY object that contains TIMESTAMP WITH TIME ZONE values, and indicates whether the datetime value will result in an error with the new time zone data. The return values are:

0: the datetime value does not result in an error with the new time zone data.

1878: the datetime value results in a "nonexisting time" error.

1883: the datetime value results in a "duplicate time" error.

This function can be issued only when changing the time zone data file of the database and upgrading the timestamp with the time zone data, and only between the execution of the DBMS_DST.BEGIN_PREPARE and the DBMS_DST.END_PREPARE procedures or between the execution of the DBMS_DST.BEGIN_UPGRADE and the DBMS_DST.END_UPGRADE procedures.</Function>
    <Function Name="ORA_HASH" Url="http://docs.oracle.com/database/121/SQLRF/functions136.htm">ORA_HASH is a function that computes a hash value for a given expression. This function is useful for operations such as analyzing a subset of data and generating a random sample.

The expr argument determines the data for which you want Oracle Database to compute a hash value. There are no restrictions on the length of data represented by expr, which commonly resolves to a column name. The expr cannot be a LONG or LOB type. It cannot be a user-defined object type unless it is a nested table type. The hash value for nested table types does not depend on the order of elements in the collection. All other data types are supported for expr.

The optional max_bucket argument determines the maximum bucket value returned by the hash function. You can specify any value between 0 and 4294967295. The default is 4294967295.

The optional seed_value argument enables Oracle to produce many different results for the same set of data. Oracle applies the hash function to the combination of expr and seed_value. You can specify any value between 0 and 4294967295. The default is 0.

The function returns a NUMBER value.</Function>
    <Function Name="ORA_INVOKING_USER" Url="http://docs.oracle.com/database/121/SQLRF/functions137.htm">ORA_INVOKING_USER returns the name of the database user who invoked the current statement or view. This function takes into account the BEQUEATH property of intervening views referenced in the statement. If this function is invoked from within a definer's rights context, then it returns the name of the owner of the definer's rights object. If the invoking user is a Real Application Security user, then it returns user XS$NULL.
This function returns a VARCHAR2 value.</Function>
    <Function Name="ORA_INVOKING_USERID" Url="http://docs.oracle.com/database/121/SQLRF/functions138.htm">ORA_INVOKING_USERID returns the identifier of the database user who invoked the current statement or view. This function takes into account the BEQUEATH property of intervening views referenced in the statement.
This function returns a NUMBER value.</Function>
    <Function Name="PATH" Url="http://docs.oracle.com/database/121/SQLRF/functions139.htm">PATH is an ancillary function used only with the UNDER_PATH and EQUALS_PATH conditions. It returns the relative path that leads to the resource specified in the parent condition.
The correlation_integer can be any NUMBER integer and is used to correlate this ancillary function with its primary condition. Values less than 1 are treated as 1.</Function>
    <Function Name="PERCENT_RANK" Url="http://docs.oracle.com/database/121/SQLRF/functions140.htm">PERCENT_RANK is similar to the CUME_DIST (cumulative distribution) function. The range of values returned by PERCENT_RANK is 0 to 1, inclusive. The first row in any set has a PERCENT_RANK of 0. The return value is NUMBER.</Function>
    <Function Name="PERCENTILE_CONT" Url="http://docs.oracle.com/database/121/SQLRF/functions141.htm">PERCENTILE_CONT is an inverse distribution function that assumes a continuous distribution model. It takes a percentile value and a sort specification, and returns an interpolated value that would fall into that percentile value with respect to the sort specification. Nulls are ignored in the calculation.
This function takes as an argument any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. The function returns the same data type as the numeric data type of the argument.</Function>
    <Function Name="PERCENTILE_DISC" Url="http://docs.oracle.com/database/121/SQLRF/functions142.htm">PERCENTILE_DISC is an inverse distribution function that assumes a discrete distribution model. It takes a percentile value and a sort specification and returns an element from the set. Nulls are ignored in the calculation.
This function takes as an argument any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. The function returns the same data type as the numeric data type of the argument.</Function>
    <Function Name="POWER" Url="http://docs.oracle.com/database/121/SQLRF/functions143.htm">POWER returns n2 raised to the n1 power. The base n2 and the exponent n1 can be any numbers, but if n2 is negative, then n1 must be an integer.
This function takes as arguments any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. If any argument is BINARY_FLOAT or BINARY_DOUBLE, then the function returns BINARY_DOUBLE. Otherwise, the function returns NUMBER.</Function>
    <Function Name="POWERMULTISET" Url="http://docs.oracle.com/database/121/SQLRF/functions144.htm">POWERMULTISET takes as input a nested table and returns a nested table of nested tables containing all nonempty subsets (called submultisets) of the input nested table.

expr can be any expression that evaluates to a nested table.

If expr resolves to null, then Oracle Database returns NULL.

If expr resolves to a nested table that is empty, then Oracle returns an error.

The element types of the nested table must be comparable. Refer to "Comparison Conditions" for information on the comparability of nonscalar types.


Note:
This function is not supported in PL/SQL.</Function>
    <Function Name="POWERMULTISET_BY_CARDINALITY" Url="http://docs.oracle.com/database/121/SQLRF/functions145.htm">POWERMULTISET_BY_CARDINALITY takes as input a nested table and a cardinality and returns a nested table of nested tables containing all nonempty subsets (called submultisets) of the nested table of the specified cardinality.

expr can be any expression that evaluates to a nested table.

cardinality can be any positive integer.

If expr resolves to null, then Oracle Database returns NULL.

If expr resolves to a nested table that is empty, then Oracle returns an error.

The element types of the nested table must be comparable. Refer to "Comparison Conditions" for information on the comparability of nonscalar types.


Note:
This function is not supported in PL/SQL.</Function>
    <Function Name="PREDICTION" Url="http://docs.oracle.com/database/121/SQLRF/functions146.htm">PREDICTION returns a prediction for each row in the selection. The data type of the returned prediction depends on whether the function performs regression, classification, or anomaly detection.

Regression — Returns the expected target value for each row. The data type of the return value is the data type of the target.

Classification — Returns the most probable target class (or lowest cost target class, if costs are specified) for each row. The data type of the return value is the data type of the target.

Anomaly Detection — Returns 1 or 0 for each row. Typical rows are classified as 1. Rows that differ significantly from the rest of the data are classified as 0.


cost_matrix_clause
Costs are a biasing factor for minimizing the most harmful kinds of misclassifications. You can specify cost_matrix_clause for classification or anomaly detection. Costs are not relevant for regression. The cost_matrix_clause behaves as described for "PREDICTION_COST".

Syntax Choice
PREDICTION can score the data in one of two ways: It can apply a mining model object to the data, or it can dynamically score the data by executing an analytic clause that builds and applies one or more transient mining models. Choose Syntax or Analytic Syntax:

Syntax — Use the first syntax to score the data with a pre-defined model. Supply the name of a model that performs classification, regression, or anomaly detection.

Analytic Syntax — Use the analytic syntax to score the data without a pre-defined model. The analytic syntax uses mining_analytic_clause , which specifies if the data should be partitioned for multiple model builds. The mining_analytic_clause supports a query_partition_clause and an order_by_clause. (See "analytic_clause::=".)

For regression, specify FOR expr, where expr is an expression that identifies a target column that has a numeric data type.

For classification, specify FOR expr, where expr is an expression that identifies a target column that has a character data type.

For anomaly detection, specify the keywords OF ANOMALY.




mining_attribute_clause
mining_attribute_clause identifies the column attributes to use as predictors for scoring.

If you specify USING *, all the relevant attributes present in the input row are used.

If you invoke the function with the analytic syntax, the mining_attribute_clause is used both for building the transient models and for scoring.

It you invoke the function with a pre-defined model, the mining_attribute_clause should include all or some of the attributes that were used to create the model. The following conditions apply:

If mining_attribute_clause includes an attribute with the same name but a different data type from the one that was used to create the model, then the data type is converted to the type expected by the model.

If you specify more attributes for scoring than were used to create the model, then the extra attributes are silently ignored.

If you specify fewer attributes for scoring than were used to create the model, then scoring is performed on a best-effort basis.</Function>
    <Function Name="PREDICTION_BOUNDS" Url="http://docs.oracle.com/database/121/SQLRF/functions147.htm">PREDICTION_BOUNDS applies a Generalized Linear Model (GLM) to predict a class or a value for each row in the selection. The function returns the upper and lower bounds of each prediction in a varray of objects with fields UPPER and LOWER.
GLM can perform either regression or binary classification:

The bounds for regression refer to the predicted target value. The data type of UPPER and LOWER is the data type of the target.

The bounds for binary classification refer to the probability of either the predicted target class or the specified class_value. The data type of UPPER and LOWER is BINARY_DOUBLE.

If the model was built using ridge regression, or if the covariance matrix is found to be singular during the build, then PREDICTION_BOUNDS returns NULL for both bounds.
confidence_level is a number in the range (0,1). The default value is 0.95. You can specify class_value while leaving confidence_level at its default by specifying NULL for confidence_level.

mining_attribute_clause
mining_attribute_clause identifies the column attributes to use as predictors for scoring. This clause behaves as described for the PREDICTION function. (Note that the reference to analytic syntax does not apply.) See "mining_attribute_clause::=".</Function>
    <Function Name="PREDICTION_COST" Url="http://docs.oracle.com/database/121/SQLRF/functions148.htm">PREDICTION_COST returns a cost for each row in the selection. The cost refers to the lowest cost class or to the specified class. The cost is returned as BINARY_DOUBLE.
PREDICTION_COST can perform classification or anomaly detection. For classification, the returned cost refers to a predicted target class. For anomaly detection, the returned cost refers to a classification of 1 (for typical rows) or 0 (for anomalous rows).
You can use PREDICTION_COST in conjunction with the PREDICTION function to obtain the prediction and the cost of the prediction.


cost_matrix_clause
Costs are a biasing factor for minimizing the most harmful kinds of misclassifications. For example, false positives might be considered more costly than false negatives. Costs are specified in a cost matrix that can be associated with the model or defined inline in a VALUES clause. All classification algorithms can use costs to influence scoring.
Decision Tree is the only algorithm that can use costs to influence the model build. The cost matrix used to build a Decision Tree model is also the default scoring cost matrix for the model.
The following cost matrix table specifies that the misclassification of 1 is five times more costly than the misclassification of 0.

ACTUAL_TARGET_VALUE PREDICTED_TARGET_VALUE       COST
------------------- ---------------------- ----------
                  0                      0          0
                  0                      1          1
                  1                      0          5
                  1                      1          0

In cost_matrix_clause:

COST MODEL indicates that scoring should be performed by taking into account the scoring cost matrix associated with the model. If the cost matrix does not exist, then the function returns an error.

COST MODEL AUTO indicates that the existence of a cost matrix is unknown. If a cost matrix exists, then the function uses it to return the lowest cost prediction. Otherwise the function returns the highest probability prediction.

The VALUES clause specifies an inline cost matrix for class_value. For example, you could specify that the misclassification of 1 is five times more costly than the misclassification of 0 as follows:

   PREDICTION (nb_model COST (0,1) VALUES ((0, 1),(1, 5)) USING *)

If a model that has a scoring cost matrix is invoked with an inline cost matrix, then the inline costs are used.



See Also:
Oracle Data Mining User's Guide for more information about cost-sensitive prediction.




Syntax Choice
PREDICTION_COST can score the data in one of two ways: It can apply a mining model object to the data, or it can dynamically mine the data by executing an analytic clause that builds and applies one or more transient mining models. Choose Syntax or Analytic Syntax:

Syntax — Use the first syntax to score the data with a pre-defined model. Supply the name of a model that performs classification or anomaly detection.

Analytic Syntax — Use the analytic syntax to score the data without a pre-defined model. The analytic syntax uses mining_analytic_clause , which specifies if the data should be partitioned for multiple model builds. The mining_analytic_clause supports a query_partition_clause and an order_by_clause. (See "analytic_clause::=".)

For classification, specify FOR expr, where expr is an expression that identifies a target column that has a character data type.

For anomaly detection, specify the keywords OF ANOMALY.



mining_attribute_clause
mining_attribute_clause identifies the column attributes to use as predictors for scoring. When the function is invoked with the analytic syntax, these predictors are also used for building the transient models. The mining_attribute_clause behaves as described for the PREDICTION function. (See "mining_attribute_clause::=".)</Function>
    <Function Name="PREDICTION_DETAILS" Url="http://docs.oracle.com/database/121/SQLRF/functions149.htm">PREDICTION_DETAILS returns prediction details for each row in the selection. The return value is an XML string that describes the attributes of the prediction.
For regression, the returned details refer to the predicted target value. For classification and anomaly detection, the returned details refer to the highest probability class or the specified class_value.

topN
If you specify a value for topN, the function returns the N attributes that have the most influence on the prediction (the score). If you do not specify topN, the function returns the 5 most influential attributes.

DESC, ASC, or ABS
The returned attributes are ordered by weight. The weight of an attribute expresses its positive or negative impact on the prediction. For regression, a positive weight indicates a higher value prediction; a negative weight indicates a lower value prediction. For classification and anomaly detection, a positive weight indicates a higher probability prediction; a negative weight indicates a lower probability prediction.
By default, PREDICTION_DETAILS returns the attributes with the highest positive weight (DESC). If you specify ASC, the attributes with the highest negative weight are returned. If you specify ABS, the attributes with the greatest weight, whether negative or positive, are returned. The results are ordered by absolute value from highest to lowest. Attributes with a zero weight are not included in the output.

Syntax Choice
PREDICTION_DETAILS can score the data in one of two ways: It can apply a mining model object to the data, or it can dynamically mine the data by executing an analytic clause that builds and applies one or more transient mining models. Choose Syntax or Analytic Syntax:

Syntax — Use the first syntax to score the data with a pre-defined model. Supply the name of a model that performs classification, regression, or anomaly detection.

Analytic Syntax — Use the analytic syntax to score the data without a pre-defined model. The analytic syntax uses mining_analytic_clause, which specifies if the data should be partitioned for multiple model builds. The mining_analytic_clause supports a query_partition_clause and an order_by_clause. (See "analytic_clause::=".)

For classification, specify FOR expr, where expr is an expression that identifies a target column that has a character data type.

For regression, specify FOR expr, where expr is an expression that identifies a target column that has a numeric data type.

For anomaly detection, specify the keywords OF ANOMALY.



mining_attribute_clause
mining_attribute_clause identifies the column attributes to use as predictors for scoring. When the function is invoked with the analytic syntax, these predictors are also used for building the transient models. The mining_attribute_clause behaves as described for the PREDICTION function. (See "mining_attribute_clause::=".)</Function>
    <Function Name="PREDICTION_PROBABILITY" Url="http://docs.oracle.com/database/121/SQLRF/functions150.htm">PREDICTION_PROBABILITY returns a probability for each row in the selection. The probability refers to the highest probability class or to the specified class. The data type of the returned probability is BINARY_DOUBLE.
PREDICTION_PROBABILITY can perform classification or anomaly detection. For classification, the returned probability refers to a predicted target class. For anomaly detection, the returned probability refers to a classification of 1 (for typical rows) or 0 (for anomalous rows).
You can use PREDICTION_PROBABILITY in conjunction with the PREDICTION function to obtain the prediction and the probability of the prediction.

Syntax Choice
PREDICTION_PROBABILITY can score the data in one of two ways: It can apply a mining model object to the data, or it can dynamically mine the data by executing an analytic clause that builds and applies one or more transient mining models. Choose Syntax or Analytic Syntax:

Syntax — Use the first syntax to score the data with a pre-defined model. Supply the name of a model that performs classification or anomaly detection.

Analytic Syntax — Use the analytic syntax to score the data without a pre-defined model. The analytic syntax uses mining_analytic_clause, which specifies if the data should be partitioned for multiple model builds. The mining_analytic_clause supports a query_partition_clause and an order_by_clause. (See "analytic_clause::=".)

For classification, specify FOR expr, where expr is an expression that identifies a target column that has a character data type.

For anomaly detection, specify the keywords OF ANOMALY.



mining_attribute_clause
mining_attribute_clause identifies the column attributes to use as predictors for scoring. When the function is invoked with the analytic syntax, these predictors are also used for building the transient models. The mining_attribute_clause behaves as described for the PREDICTION function. (See "mining_attribute_clause::=".)</Function>
    <Function Name="PREDICTION_SET" Url="http://docs.oracle.com/database/121/SQLRF/functions151.htm">PREDICTION_SET returns a set of predictions with either probabilities or costs for each row in the selection. The return value is a varray of objects with field names PREDICTION_ID and PROBABILITY or COST. The prediction identifier is an Oracle NUMBER; the probability and cost fields are BINARY_DOUBLE.
PREDICTION_SET can perform classification or anomaly detection. For classification, the return value refers to a predicted target class. For anomaly detection, the return value refers to a classification of 1 (for typical rows) or 0 (for anomalous rows).

bestN and cutoff
You can specify bestN and cutoff to limit the number of predictions returned by the function. By default, both bestN and cutoff are null and all predictions are returned.

bestN is the N predictions that are either the most probable or the least costly. If multiple predictions share the Nth probability or cost, then the function chooses one of them.

cutoff is a value threshold. Only predictions with probability greater than or equal to cutoff, or with cost less than or equal to cutoff, are returned. To filter by cutoff only, specify NULL for bestN. If the function uses a cost_matrix_clause with COST MODEL AUTO, then cutoff is ignored.

You can specify bestN with cutoff to return up to the N most probable predictions that are greater than or equal to cutoff. If costs are used, specify bestN with cutoff to return up to the N least costly predictions that are less than or equal to cutoff.

cost_matrix_clause
You can specify cost_matrix_clause as a biasing factor for minimizing the most harmful kinds of misclassifications. cost_matrix_clause behaves as described for "PREDICTION_COST".

Syntax Choice
PREDICTION_SET can score the data in one of two ways: It can apply a mining model object to the data, or it can dynamically mine the data by executing an analytic clause that builds and applies one or more transient mining models. Choose Syntax or Analytic Syntax:

Syntax — Use the first syntax to score the data with a pre-defined model. Supply the name of a model that performs classification or anomaly detection.

Analytic Syntax — Use the analytic syntax to score the data without a pre-defined model. The analytic syntax uses mining_analytic_clause, which specifies if the data should be partitioned for multiple model builds. The mining_analytic_clause supports a query_partition_clause and an order_by_clause. (See "analytic_clause::=".)

For classification, specify FOR expr, where expr is an expression that identifies a target column that has a character data type.

For anomaly detection, specify the keywords OF ANOMALY.



mining_attribute_clause
mining_attribute_clause identifies the column attributes to use as predictors for scoring. When the function is invoked with the analytic syntax, these predictors are also used for building the transient models. The mining_attribute_clause behaves as described for the PREDICTION function. (See "mining_attribute_clause::=".)</Function>
    <Function Name="PRESENTNNV" Url="http://docs.oracle.com/database/121/SQLRF/functions152.htm">The PRESENTNNV function can be used only in the model_clause of the SELECT statement and then only on the right-hand side of a model rule. It returns expr1 when cell_reference exists prior to the execution of the model_clause and is not null when PRESENTNNV is evaluated. Otherwise it returns expr2. This function differs from NVL2 in that NVL2 evaluates the data at the time it is executed, rather than evaluating the data as it was prior to the execution of the model_clause.</Function>
    <Function Name="PRESENTV" Url="http://docs.oracle.com/database/121/SQLRF/functions153.htm">The PRESENTV function can be used only within the model_clause of the SELECT statement and then only on the right-hand side of a model rule. It returns expr1 when, prior to the execution of the model_clause, cell_reference exists. Otherwise it returns expr2.</Function>
    <Function Name="PREVIOUS" Url="http://docs.oracle.com/database/121/SQLRF/functions154.htm">The PREVIOUS function can be used only in the model_clause of the SELECT statement and then only in the ITERATE ... [ UNTIL ] clause of the model_rules_clause. It returns the value of cell_reference at the beginning of each iteration.</Function>
    <Function Name="RANK" Url="http://docs.oracle.com/database/121/SQLRF/functions155.htm">RANK calculates the rank of a value in a group of values. The return type is NUMBER.</Function>
    <Function Name="RATIO_TO_REPORT" Url="http://docs.oracle.com/database/121/SQLRF/functions156.htm">RATIO_TO_REPORT is an analytic function. It computes the ratio of a value to the sum of a set of values. If expr evaluates to null, then the ratio-to-report value also evaluates to null.
The set of values is determined by the query_partition_clause. If you omit that clause, then the ratio-to-report is computed over all rows returned by the query.
You cannot nest analytic functions by using RATIO_TO_REPORT or any other analytic function for expr. However, you can use other built-in function expressions for expr. Refer to "About SQL Expressions" for information on valid forms of expr.</Function>
    <Function Name="RAWTOHEX" Url="http://docs.oracle.com/database/121/SQLRF/functions157.htm">RAWTOHEX converts raw to a character value containing its hexadecimal representation.
As a SQL built-in function, RAWTOHEX accepts an argument of any scalar data type other than LONG, LONG RAW, CLOB, BLOB, or BFILE. It returns a VARCHAR2 value with the hexadecimal representation of bytes that make up the value of raw. Each byte is represented by two hexadecimal digits.</Function>
    <Function Name="RAWTONHEX" Url="http://docs.oracle.com/database/121/SQLRF/functions158.htm">RAWTONHEX converts raw to a character value containing its hexadecimal representation. RAWTONHEX (raw) is equivalent to TO_NCHAR(RAWTOHEX(raw)). The value returned is always in the national character set.</Function>
    <Function Name="REF" Url="http://docs.oracle.com/database/121/SQLRF/functions159.htm">REF takes as its argument a correlation variable (table alias) associated with a row of an object table or an object view. A REF value is returned for the object instance that is bound to the variable or row.</Function>
    <Function Name="REFTOHEX" Url="http://docs.oracle.com/database/121/SQLRF/functions160.htm">REFTOHEX converts argument expr to a character value containing its hexadecimal equivalent. expr must return a REF.</Function>
    <Function Name="REGEXP_COUNT" Url="http://docs.oracle.com/database/121/SQLRF/functions161.htm">REGEXP_COUNT complements the functionality of the REGEXP_INSTR function by returning the number of times a pattern occurs in a source string. The function evaluates strings using characters as defined by the input character set. It returns an integer indicating the number of occurrences of pattern. If no match is found, then the function returns 0.

source_char is a character expression that serves as the search value. It is commonly a character column and can be of any of the data types CHAR, VARCHAR2, NCHAR, NVARCHAR2, CLOB, or NCLOB.

pattern is the regular expression. It is usually a text literal and can be of any of the data types CHAR, VARCHAR2, NCHAR, or NVARCHAR2. It can contain up to 512 bytes. If the data type of pattern is different from the data type of source_char, then Oracle Database converts pattern to the data type of source_char.
REGEXP_COUNT ignores subexpression parentheses in pattern. For example, the pattern '(123(45))' is equivalent to '12345'. For a listing of the operators you can specify in pattern, refer to Appendix D, "Oracle Regular Expression Support".

position is a positive integer indicating the character of source_char where Oracle should begin the search. The default is 1, meaning that Oracle begins the search at the first character of source_char. After finding the first occurrence of pattern, the database searches for a second occurrence beginning with the first character following the first occurrence.

match_param is a text literal that lets you change the default matching behavior of the function. You can specify one or more of the following values for match_param:

'i' specifies case-insensitive matching.

'c' specifies case-sensitive matching.

'n' allows the period (.), which is the match-any-character character, to match the newline character. If you omit this parameter, then the period does not match the newline character.

'm' treats the source string as multiple lines. Oracle interprets the caret (^) and dollar sign ($) as the start and end, respectively, of any line anywhere in the source string, rather than only at the start or end of the entire source string. If you omit this parameter, then Oracle treats the source string as a single line.

'x' ignores whitespace characters. By default, whitespace characters match themselves.

If you specify multiple contradictory values, then Oracle uses the last value. For example, if you specify 'ic', then Oracle uses case-sensitive matching. If you specify a character other than those shown above, then Oracle returns an error.
If you omit match_param, then:

The default case sensitivity is determined by the value of the NLS_SORT parameter.

A period (.) does not match the newline character.

The source string is treated as a single line.</Function>
    <Function Name="REGEXP_INSTR" Url="http://docs.oracle.com/database/121/SQLRF/functions162.htm">REGEXP_INSTR extends the functionality of the INSTR function by letting you search a string for a regular expression pattern. The function evaluates strings using characters as defined by the input character set. It returns an integer indicating the beginning or ending position of the matched substring, depending on the value of the return_option argument. If no match is found, then the function returns 0.
This function complies with the POSIX regular expression standard and the Unicode Regular Expression Guidelines. For more information, refer to Appendix D, "Oracle Regular Expression Support".

source_char is a character expression that serves as the search value. It is commonly a character column and can be of any of the data types CHAR, VARCHAR2, NCHAR, NVARCHAR2, CLOB, or NCLOB.

pattern is the regular expression. It is usually a text literal and can be of any of the data types CHAR, VARCHAR2, NCHAR, or NVARCHAR2. It can contain up to 512 bytes. If the data type of pattern is different from the data type of source_char, then Oracle Database converts pattern to the data type of source_char. For a listing of the operators you can specify in pattern, refer to Appendix D, "Oracle Regular Expression Support".

position is a positive integer indicating the character of source_char where Oracle should begin the search. The default is 1, meaning that Oracle begins the search at the first character of source_char.

occurrence is a positive integer indicating which occurrence of pattern in source_char Oracle should search for. The default is 1, meaning that Oracle searches for the first occurrence of pattern. If occurrence is greater than 1, then the database searches for the second occurrence beginning with the first character following the first occurrence of pattern, and so forth. This behavior is different from the INSTR function, which begins its search for the second occurrence at the second character of the first occurrence.

return_option lets you specify what Oracle should return in relation to the occurrence:

If you specify 0, then Oracle returns the position of the first character of the occurrence. This is the default.

If you specify 1, then Oracle returns the position of the character following the occurrence.


match_parameter is a text literal that lets you change the default matching behavior of the function. The behavior of this parameter is the same for this function as for REGEXP_COUNT. Refer to REGEXP_COUNT for detailed information.

For a pattern with subexpressions, subexpr is an integer from 0 to 9 indicating which subexpression in pattern is the target of the function. The subexpr is a fragment of pattern enclosed in parentheses. Subexpressions can be nested. Subexpressions are numbered in order in which their left parentheses appear in pattern. For example, consider the following expression:

0123(((abc)(de)f)ghi)45(678)

This expression has five subexpressions in the following order: "abcdefghi" followed by "abcdef", "abc", "de" and "678".
If subexpr is zero, then the position of the entire substring that matches the pattern is returned. If subexpr is greater than zero, then the position of the substring fragment that corresponds to subexpression number subexpr in the matched substring is returned. If pattern does not have at least subexpr subexpressions, the function returns zero. A null subexpr value returns NULL. The default value for subexpr is zero.</Function>
    <Function Name="REGEXP_REPLACE" Url="http://docs.oracle.com/database/121/SQLRF/functions163.htm">REGEXP_REPLACE extends the functionality of the REPLACE function by letting you search a string for a regular expression pattern. By default, the function returns source_char with every occurrence of the regular expression pattern replaced with replace_string. The string returned is in the same character set as source_char. The function returns VARCHAR2 if the first argument is not a LOB and returns CLOB if the first argument is a LOB.
This function complies with the POSIX regular expression standard and the Unicode Regular Expression Guidelines. For more information, refer to Appendix D, "Oracle Regular Expression Support".

source_char is a character expression that serves as the search value. It is commonly a character column and can be of any of the data types CHAR, VARCHAR2, NCHAR, NVARCHAR2, CLOB or NCLOB.

pattern is the regular expression. It is usually a text literal and can be of any of the data types CHAR, VARCHAR2, NCHAR, or NVARCHAR2. It can contain up to 512 bytes. If the data type of pattern is different from the data type of source_char, then Oracle Database converts pattern to the data type of source_char. For a listing of the operators you can specify in pattern, refer to Appendix D, "Oracle Regular Expression Support".

replace_string can be of any of the data types CHAR, VARCHAR2, NCHAR, NVARCHAR2, CLOB, or NCLOB. If replace_string is a CLOB or NCLOB, then Oracle truncates replace_string to 32K. The replace_string can contain up to 500 backreferences to subexpressions in the form \n, where n is a number from 1 to 9. If you want to include a backslash (\) in replace_string, then you must precede it with the escape character, which is also a backslash. For example, to replace \2 you would enter \\2. For more information on backreference expressions, refer to the notes to "Oracle Regular Expression Support", Table D-1.

position is a positive integer indicating the character of source_char where Oracle should begin the search. The default is 1, meaning that Oracle begins the search at the first character of source_char.

occurrence is a nonnegative integer indicating the occurrence of the replace operation:

If you specify 0, then Oracle replaces all occurrences of the match.

If you specify a positive integer n, then Oracle replaces the nth occurrence.

If occurrence is greater than 1, then the database searches for the second occurrence beginning with the first character following the first occurrence of pattern, and so forth. This behavior is different from the INSTR function, which begins its search for the second occurrence at the second character of the first occurrence.

match_parameter is a text literal that lets you change the default matching behavior of the function. The behavior of this parameter is the same for this function as for REGEXP_COUNT. Refer to REGEXP_COUNT for detailed information.</Function>
    <Function Name="REGEXP_SUBSTR" Url="http://docs.oracle.com/database/121/SQLRF/functions164.htm">REGEXP_SUBSTR extends the functionality of the SUBSTR function by letting you search a string for a regular expression pattern. It is also similar to REGEXP_INSTR, but instead of returning the position of the substring, it returns the substring itself. This function is useful if you need the contents of a match string but not its position in the source string. The function returns the string as VARCHAR2 or CLOB data in the same character set as source_char.
This function complies with the POSIX regular expression standard and the Unicode Regular Expression Guidelines. For more information, refer to Appendix D, "Oracle Regular Expression Support".

source_char is a character expression that serves as the search value. It is commonly a character column and can be of any of the data types CHAR, VARCHAR2, NCHAR, NVARCHAR2, CLOB, or NCLOB.

pattern is the regular expression. It is usually a text literal and can be of any of the data types CHAR, VARCHAR2, NCHAR, or NVARCHAR2. It can contain up to 512 bytes. If the data type of pattern is different from the data type of source_char, then Oracle Database converts pattern to the data type of source_char. For a listing of the operators you can specify in pattern, refer to Appendix D, "Oracle Regular Expression Support".

position is a positive integer indicating the character of source_char where Oracle should begin the search. The default is 1, meaning that Oracle begins the search at the first character of source_char.

occurrence is a positive integer indicating which occurrence of pattern in source_char Oracle should search for. The default is 1, meaning that Oracle searches for the first occurrence of pattern.
If occurrence is greater than 1, then the database searches for the second occurrence beginning with the first character following the first occurrence of pattern, and so forth. This behavior is different from the SUBSTR function, which begins its search for the second occurrence at the second character of the first occurrence.

match_parameter is a text literal that lets you change the default matching behavior of the function. The behavior of this parameter is the same for this function as for REGEXP_COUNT. Refer to REGEXP_COUNT for detailed information.

For a pattern with subexpressions, subexpr is a nonnegative integer from 0 to 9 indicating which subexpression in pattern is to be returned by the function. This parameter has the same semantics that it has for the REGEXP_INSTR function. Refer to REGEXP_INSTR for more information.</Function>
    <Function Name="REMAINDER" Url="http://docs.oracle.com/database/121/SQLRF/functions166.htm">REMAINDER returns the remainder of n2 divided by n1.
This function takes as arguments any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. Oracle determines the argument with the highest numeric precedence, implicitly converts the remaining arguments to that data type, and returns that data type.
The MOD function is similar to REMAINDER except that it uses FLOOR in its formula, whereas REMAINDER uses ROUND. Refer to MOD.</Function>
    <Function Name="REPLACE" Url="http://docs.oracle.com/database/121/SQLRF/functions167.htm">REPLACE returns char with every occurrence of search_string replaced with replacement_string. If replacement_string is omitted or null, then all occurrences of search_string are removed. If search_string is null, then char is returned.
Both search_string and replacement_string, as well as char, can be any of the data types CHAR, VARCHAR2, NCHAR, NVARCHAR2, CLOB, or NCLOB. The string returned is in the same character set as char. The function returns VARCHAR2 if the first argument is not a LOB and returns CLOB if the first argument is a LOB.
REPLACE provides functionality related to that provided by the TRANSLATE function. TRANSLATE provides single-character, one-to-one substitution. REPLACE lets you substitute one string for another as well as to remove character strings.</Function>
    <Function Name="ROUND" Url="http://docs.oracle.com/database/121/SQLRF/functions168.htm">ROUND returns date rounded to the unit specified by the format model fmt. This function is not sensitive to the NLS_CALENDAR session parameter. It operates according to the rules of the Gregorian calendar. The value returned is always of data type DATE, even if you specify a different datetime data type for date. If you omit fmt, then date is rounded to the nearest day. The date expression must resolve to a DATE value.</Function>
    <Function Name="ROUND" Url="http://docs.oracle.com/database/121/SQLRF/functions169.htm">ROUND returns n rounded to integer places to the right of the decimal point. If you omit integer, then n is rounded to zero places. If integer is negative, then n is rounded off to the left of the decimal point.
n can be any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. If you omit integer, then the function returns the value ROUND(n, 0) in the same data type as the numeric data type of n. If you include integer, then the function returns NUMBER.
ROUND is implemented using the following rules:

If n is 0, then ROUND always returns 0 regardless of integer.

If n is negative, then ROUND(n, integer) returns -ROUND(-n, integer).

If n is positive, then

ROUND(n, integer) = FLOOR(n * POWER(10, integer) + 0.5) * POWER(10, -integer)

ROUND applied to a NUMBER value may give a slightly different result from ROUND applied to the same value expressed in floating-point. The different results arise from differences in internal representations of NUMBER and floating point values. The difference will be 1 in the rounded digit if a difference occurs.</Function>
    <Function Name="ROW_NUMBER" Url="http://docs.oracle.com/database/121/SQLRF/functions170.htm">ROW_NUMBER is an analytic function. It assigns a unique number to each row to which it is applied (either each row in the partition or each row returned by the query), in the ordered sequence of rows specified in the order_by_clause, beginning with 1.
By nesting a subquery using ROW_NUMBER inside a query that retrieves the ROW_NUMBER values for a specified range, you can find a precise subset of rows from the results of the inner query. This use of the function lets you implement top-N, bottom-N, and inner-N reporting. For consistent results, the query must ensure a deterministic sort order.
You cannot nest analytic functions by using ROW_NUMBER or any other analytic function for expr. However, you can use other built-in function expressions for expr. Refer to "About SQL Expressions" for information on valid forms of expr.</Function>
    <Function Name="ROWIDTOCHAR" Url="http://docs.oracle.com/database/121/SQLRF/functions171.htm">ROWIDTOCHAR converts a rowid value to VARCHAR2 data type. The result of this conversion is always 18 characters long.</Function>
    <Function Name="ROWIDTONCHAR" Url="http://docs.oracle.com/database/121/SQLRF/functions172.htm">ROWIDTONCHAR converts a rowid value to NVARCHAR2 data type. The result of this conversion is always in the national character set and is 18 characters long.</Function>
    <Function Name="RPAD" Url="http://docs.oracle.com/database/121/SQLRF/functions173.htm">RPAD returns expr1, right-padded to length n characters with expr2, replicated as many times as necessary. This function is useful for formatting the output of a query.
Both expr1 and expr2 can be any of the data types CHAR, VARCHAR2, NCHAR, NVARCHAR2, CLOB, or NCLOB. The string returned is of VARCHAR2 data type if expr1 is a character data type, NVARCHAR2 if expr1 is a national character data type, and a LOB if expr1 is a LOB data type. The string returned is in the same character set as expr1. The argument n must be a NUMBER integer or a value that can be implicitly converted to a NUMBER integer.
expr1 cannot be null. If you do not specify expr2, then it defaults to a single blank. If expr1 is longer than n, then this function returns the portion of expr1 that fits in n.
The argument n is the total length of the return value as it is displayed on your terminal screen. In most character sets, this is also the number of characters in the return value. However, in some multibyte character sets, the display length of a character string can differ from the number of characters in the string.</Function>
    <Function Name="RTRIM" Url="http://docs.oracle.com/database/121/SQLRF/functions174.htm">RTRIM removes from the right end of char all of the characters that appear in set. This function is useful for formatting the output of a query.
If you do not specify set, then it defaults to a single blank. If char is a character literal, then you must enclose it in single quotation marks. RTRIM works similarly to LTRIM.
Both char and set can be any of the data types CHAR, VARCHAR2, NCHAR, NVARCHAR2, CLOB, or NCLOB. The string returned is of VARCHAR2 data type if char is a character data type, NVARCHAR2 if char is a national character data type, and a LOB if char is a LOB data type.</Function>
    <Function Name="SCN_TO_TIMESTAMP" Url="http://docs.oracle.com/database/121/SQLRF/functions175.htm">SCN_TO_TIMESTAMP takes as an argument a number that evaluates to a system change number (SCN), and returns the approximate timestamp associated with that SCN. The returned value is of TIMESTAMP data type. This function is useful any time you want to know the timestamp associated with an SCN. For example, it can be used in conjunction with the ORA_ROWSCN pseudocolumn to associate a timestamp with the most recent change to a row.</Function>
    <Function Name="SESSIONTIMEZONE" Url="http://docs.oracle.com/database/121/SQLRF/functions176.htm">SESSIONTIMEZONE returns the time zone of the current session. The return type is a time zone offset (a character type in the format '[+|-]TZH:TZM') or a time zone region name, depending on how the user specified the session time zone value in the most recent ALTER SESSION statement.</Function>
    <Function Name="SET" Url="http://docs.oracle.com/database/121/SQLRF/functions177.htm">SET converts a nested table into a set by eliminating duplicates. The function returns a nested table whose elements are distinct from one another. The returned nested table is of the same type as the input nested table.
The element types of the nested table must be comparable. Refer to "Comparison Conditions" for information on the comparability of nonscalar types.</Function>
    <Function Name="SIGN" Url="http://docs.oracle.com/database/121/SQLRF/functions178.htm">SIGN returns the sign of n. This function takes as an argument any numeric data type, or any nonnumeric data type that can be implicitly converted to NUMBER, and returns NUMBER.
For value of NUMBER type, the sign is:

-1 if n&lt;0

0 if n=0

1 if n&gt;0

For binary floating-point numbers (BINARY_FLOAT and BINARY_DOUBLE), this function returns the sign bit of the number. The sign bit is:

-1 if n&lt;0

+1 if n&gt;=0 or n=NaN</Function>
    <Function Name="SIN" Url="http://docs.oracle.com/database/121/SQLRF/functions179.htm">SIN returns the sine of n (an angle expressed in radians).
This function takes as an argument any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. If the argument is BINARY_FLOAT, then the function returns BINARY_DOUBLE. Otherwise the function returns the same numeric data type as the argument.</Function>
    <Function Name="SINH" Url="http://docs.oracle.com/database/121/SQLRF/functions180.htm">SINH returns the hyperbolic sine of n.
This function takes as an argument any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. If the argument is BINARY_FLOAT, then the function returns BINARY_DOUBLE. Otherwise the function returns the same numeric data type as the argument.</Function>
    <Function Name="SOUNDEX" Url="http://docs.oracle.com/database/121/SQLRF/functions181.htm">SOUNDEX returns a character string containing the phonetic representation of char. This function lets you compare words that are spelled differently, but sound alike in English.
The phonetic representation is defined in The Art of Computer Programming, Volume 3: Sorting and Searching, by Donald E. Knuth, as follows:

Retain the first letter of the string and remove all other occurrences of the following letters: a, e, h, i, o, u, w, y.

Assign numbers to the remaining letters (after the first) as follows:

b, f, p, v = 1
c, g, j, k, q, s, x, z = 2
d, t = 3
l = 4
m, n = 5
r = 6

If two or more letters with the same number were adjacent in the original name (before step 1), or adjacent except for any intervening h and w, then retain the first letter and omit rest of all the adjacent letters with same number.

Return the first four bytes padded with 0.

char can be of any of the data types CHAR, VARCHAR2, NCHAR, or NVARCHAR2. The return value is the same data type as char.
This function does not support CLOB data directly. However, CLOBs can be passed in as arguments through implicit data conversion.</Function>
    <Function Name="SQRT" Url="http://docs.oracle.com/database/121/SQLRF/functions182.htm">SQRT returns the square root of n.
This function takes as an argument any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. The function returns the same data type as the numeric data type of the argument.</Function>
    <Function Name="STANDARD_HASH" Url="http://docs.oracle.com/database/121/SQLRF/functions183.htm">STANDARD_HASH computes a hash value for a given expression using one of several hash algorithms that are defined and standardized by the National Institute of Standards and Technology. This function is useful for performing authentication and maintaining data integrity in security applications such as digital signatures, checksums, and fingerprinting.
You can use the STANDARD_HASH function to create an index on an extended data type column. Refer to "Creating an Index on an Extended Data Type Column" for more information.

The expr argument determines the data for which you want Oracle Database to compute a hash value. There are no restrictions on the length of data represented by expr, which commonly resolves to a column name. The expr cannot be a LONG or LOB type. It cannot be a user-defined object type. All other data types are supported for expr.

The optional method argument lets you specify the name of the hash algorithm to be used. Valid algorithms are SHA1, SHA256, SHA384, SHA512, and MD5. If you omit this argument, then SHA1 is used.

The function returns a RAW value.</Function>
    <Function Name="STATS_BINOMIAL_TEST" Url="http://docs.oracle.com/database/121/SQLRF/functions184.htm">STATS_BINOMIAL_TEST is an exact probability test used for dichotomous variables, where only two possible values exist. It tests the difference between a sample proportion and a given proportion. The sample size in such tests is usually small.
This function takes four arguments: expr1 is the sample being examined. expr2 contains the values for which the proportion is expected to be, and p is a proportion to test against. The fourth argument is a return value of type VARCHAR2. If you omit the fourth argument, then the default is TWO_SIDED_PROB. The meaning of the return values is shown in Table 7-3.</Function>
    <Function Name="STATS_CROSSTAB" Url="http://docs.oracle.com/database/121/SQLRF/functions185.htm">Crosstabulation (commonly called crosstab) is a method used to analyze two nominal variables. The STATS_CROSSTAB function takes three arguments: two expressions and a return value of type VARCHAR2. expr1 and expr2 are the two variables being analyzed. The function returns one number, determined by the value of the third argument. If you omit the third argument, then the default is CHISQ_SIG. The meaning of the return values is shown in Table 7-4.</Function>
    <Function Name="STATS_F_TEST" Url="http://docs.oracle.com/database/121/SQLRF/functions186.htm">STATS_F_TEST tests whether two variances are significantly different. The observed value of f is the ratio of one variance to the other, so values very different from 1 usually indicate significant differences.
This function takes two required arguments: expr1 is the grouping or independent variable and expr2 is the sample of values. The function returns one number, determined by the value of the third argument. If you omit the third argument, then the default is TWO_SIDED_SIG. The meaning of the return values is shown in Table 7-5.</Function>
    <Function Name="STATS_KS_TEST" Url="http://docs.oracle.com/database/121/SQLRF/functions187.htm">STATS_KS_TEST is a Kolmogorov-Smirnov function that compares two samples to test whether they are from the same population or from populations that have the same distribution. It does not assume that the population from which the samples were taken is normally distributed.
This function takes three arguments: two expressions and a return value of type VARCHAR2. expr1 classifies the data into the two samples. expr2 contains the values for each of the samples. If expr1 classifies the rows into only one sample or into more than two samples, then an error is raised.The function returns one value determined by the third argument. If you omit the third argument, then the default is SIG. The meaning of the return values is shown in Table 7-6.</Function>
    <Function Name="STATS_MODE" Url="http://docs.oracle.com/database/121/SQLRF/functions188.htm">STATS_MODE takes as its argument a set of values and returns the value that occurs with the greatest frequency. If more than one mode exists, then Oracle Database chooses one and returns only that one value.
To obtain multiple modes (if multiple modes exist), you must use a combination of other functions, as shown in the hypothetical query:

SELECT x FROM (SELECT x, COUNT(x) AS cnt1
   FROM t GROUP BY x)
   WHERE cnt1 =
      (SELECT MAX(cnt2) FROM (SELECT COUNT(x) AS cnt2 FROM t GROUP BY x));</Function>
    <Function Name="STATS_ONE_WAY_ANOVA" Url="http://docs.oracle.com/database/121/SQLRF/functions190.htm">The one-way analysis of variance function (STATS_ONE_WAY_ANOVA) tests differences in means (for groups or variables) for statistical significance by comparing two different estimates of variance. One estimate is based on the variances within each group or category. This is known as the mean squares within or mean square error. The other estimate is based on the variances among the means of the groups. This is known as the mean squares between. If the means of the groups are significantly different, then the mean squares between will be larger than expected and will not match the mean squares within. If the mean squares of the groups are consistent, then the two variance estimates will be about the same.
STATS_ONE_WAY_ANOVA takes three arguments: two expressions and a return value of type VARCHAR2. expr1 is an independent or grouping variable that divides the data into a set of groups. expr2 is a dependent variable (a numeric expression) containing the values corresponding to each member of a group. The function returns one number, determined by the value of the third argument. If you omit the third argument, then the default is SIG. The meaning of the return values is shown in Table 7-8.</Function>
    <Function Name="STATS_T_TEST_" Url="http://docs.oracle.com/database/121/SQLRF/functions191.htm">The t-test measures the significance of a difference of means. You can use it to compare the means of two groups or the means of one group with a constant. The one-sample and two-sample STATS_T_TEST_* functions take three arguments: two expressions and a return value of type VARCHAR2. The functions return one number, determined by the value of the third argument. If you omit the third argument, then the default is TWO_SIDED_SIG. The meaning of the return values is shown in Table 7-9.</Function>
    <Function Name="STATS_WSR_TEST" Url="http://docs.oracle.com/database/121/SQLRF/functions192.htm">STATS_WSR_TEST is a Wilcoxon Signed Ranks test of paired samples to determine whether the median of the differences between the samples is significantly different from zero. The absolute values of the differences are ordered and assigned ranks. Then the null hypothesis states that the sum of the ranks of the positive differences is equal to the sum of the ranks of the negative differences.
This function takes three arguments: expr1 and expr2 are the two samples being analyzed, and the third argument is a return value of type VARCHAR2. If you omit the third argument, then the default is TWO_SIDED_SIG. The meaning of the return values is shown in Table 7-10.</Function>
    <Function Name="STDDEV" Url="http://docs.oracle.com/database/121/SQLRF/functions193.htm">STDDEV returns the sample standard deviation of expr, a set of numbers. You can use it as both an aggregate and analytic function. It differs from STDDEV_SAMP in that STDDEV returns zero when it has only 1 row of input data, whereas STDDEV_SAMP returns null.
Oracle Database calculates the standard deviation as the square root of the variance defined for the VARIANCE aggregate function.
This function takes as an argument any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. The function returns the same data type as the numeric data type of the argument.</Function>
    <Function Name="STDDEV_POP" Url="http://docs.oracle.com/database/121/SQLRF/functions194.htm">STDDEV_POP computes the population standard deviation and returns the square root of the population variance. You can use it as both an aggregate and analytic function.
This function takes as an argument any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. The function returns the same data type as the numeric data type of the argument.</Function>
    <Function Name="STDDEV_SAMP" Url="http://docs.oracle.com/database/121/SQLRF/functions195.htm">STDDEV_SAMP computes the cumulative sample standard deviation and returns the square root of the sample variance. You can use it as both an aggregate and analytic function.
This function takes as an argument any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. The function returns the same data type as the numeric data type of the argument.</Function>
    <Function Name="SUBSTR" Url="http://docs.oracle.com/database/121/SQLRF/functions196.htm">The SUBSTR functions return a portion of char, beginning at character position, substring_length characters long. SUBSTR calculates lengths using characters as defined by the input character set. SUBSTRB uses bytes instead of characters. SUBSTRC uses Unicode complete characters. SUBSTR2 uses UCS2 code points. SUBSTR4 uses UCS4 code points.

If position is 0, then it is treated as 1.

If position is positive, then Oracle Database counts from the beginning of char to find the first character.

If position is negative, then Oracle counts backward from the end of char.

If substring_length is omitted, then Oracle returns all characters to the end of char. If substring_length is less than 1, then Oracle returns null.

char can be any of the data types CHAR, VARCHAR2, NCHAR, NVARCHAR2, CLOB, or NCLOB. The exceptions are SUBSTRC, SUBSTR2, and SUBSTR4, which do not allow char to be a CLOB or NCLOB. Both position and substring_length must be of data type NUMBER, or any data type that can be implicitly converted to NUMBER, and must resolve to an integer. The return value is the same data type as char. Floating-point numbers passed as arguments to SUBSTR are automatically converted to integers.</Function>
    <Function Name="SUM" Url="http://docs.oracle.com/database/121/SQLRF/functions197.htm">SUM returns the sum of values of expr. You can use it as an aggregate or analytic function.
This function takes as an argument any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. The function returns the same data type as the numeric data type of the argument.</Function>
    <Function Name="SYS_CONNECT_BY_PATH" Url="http://docs.oracle.com/database/121/SQLRF/functions198.htm">SYS_CONNECT_BY_PATH is valid only in hierarchical queries. It returns the path of a column value from root to node, with column values separated by char for each row returned by CONNECT BY condition.
Both column and char can be any of the data types CHAR, VARCHAR2, NCHAR, or NVARCHAR2. The string returned is of VARCHAR2 data type and is in the same character set as column.</Function>
    <Function Name="SYS_CONTEXT" Url="http://docs.oracle.com/database/121/SQLRF/functions199.htm">SYS_CONTEXT returns the value of parameter associated with the context namespace at the current instant. You can use this function in both SQL and PL/SQL statements. SYS_CONTEXT must be executed locally.
For namespace and parameter, you can specify either a string or an expression that resolves to a string designating a namespace or an attribute. If you specify literal arguments for namespace and parameter, and you are using SYS_CONTEXT explicitly in a SQL statement—rather than in a PL/SQL function that in turn is in mentioned in a SQL statement—then Oracle Database evaluates SYS_CONTEXT only once per SQL statement execution for each call site that invokes the SYS_CONTEXT function.
The context namespace must already have been created, and the associated parameter and its value must also have been set using the DBMS_SESSION.set_context procedure. The namespace must be a valid SQL identifier. The parameter name can be any string. It is not case sensitive, but it cannot exceed 30 bytes in length.
The data type of the return value is VARCHAR2. The default maximum size of the return value is 256 bytes. You can override this default by specifying the optional length parameter, which must be a NUMBER or a value that can be implicitly converted to NUMBER. The valid range of values is 1 to 4000 bytes. If you specify an invalid value, then Oracle Database ignores it and uses the default.
Oracle provides the following built-in namespaces:

USERENV - Describes the current session. The predefined parameters of namespace USERENV are listed in Table 7-11.

SYS_SESSION_ROLES - Indicates whether a specified role is currently enabled for the session.</Function>
    <Function Name="SYS_DBURIGEN" Url="http://docs.oracle.com/database/121/SQLRF/functions200.htm">SYS_DBURIGen takes as its argument one or more columns or attributes, and optionally a rowid, and generates a URL of data type DBURIType to a particular column or row object. You can then use the URL to retrieve an XML document from the database.
All columns or attributes referenced must reside in the same table. They must perform the function of a primary key. They need not actually match the primary key of the table, but they must reference a unique value. If you specify multiple columns, then all but the final column identify the row in the database, and the last column specified identifies the column within the row.
By default the URL points to a formatted XML document. If you want the URL to point only to the text of the document, then specify the optional 'text()'.</Function>
    <Function Name="SYS_EXTRACT_UTC" Url="http://docs.oracle.com/database/121/SQLRF/functions201.htm">SYS_EXTRACT_UTC extracts the UTC (Coordinated Universal Time—formerly Greenwich Mean Time) from a datetime value with time zone offset or time zone region name. If a time zone is not specified, then the datetime is associated with the session time zone.</Function>
    <Function Name="SYS_GUID" Url="http://docs.oracle.com/database/121/SQLRF/functions202.htm">SYS_GUID generates and returns a globally unique identifier (RAW value) made up of 16 bytes. On most platforms, the generated identifier consists of a host identifier, a process or thread identifier of the process or thread invoking the function, and a nonrepeating value (sequence of bytes) for that process or thread.</Function>
    <Function Name="SYS_OP_ZONE_ID" Url="http://docs.oracle.com/database/121/SQLRF/functions203.htm">SYS_OP_ZONE_ID takes as its argument a rowid and returns a zone ID. The rowid identifies a row in a table. The zone ID identifies the set of contiguous disk blocks, called the zone, that contains the row. The function returns a NUMBER value.
The SYS_OP_ZONE_ID function is used when creating a zone map with the CREATE MATERIALIZED ZONEMAP statement. You must specify SYS_OP_ZONE_ID in the SELECT and GROUP BY clauses of the defining subquery of the zone map.
For rowid, specify the ROWID pseudocolumn of the fact table of the zone map.
Use schema and table to specify the schema and name of the fact table, or t_alias to specify the table alias for the fact table. The specification of these parameters depends on the FROM clause in the defining subquery of the zone map:

If the FROM clause specifies a table alias for the fact table, then you must also specify the table alias (t_alias) in SYS_OP_ZONE_ID.

If the FROM clause does not specify a table alias for the fact table, then use table to specify the name of the fact table. You can use the schema qualifier if the fact table is in a schema other than your own. If you omit schema, then the database assumes the fact table is in your own schema. If the FROM clause specifies only one table (the fact table) then you need not specify schema or table.

The optional scale parameter represents the scale of the zone map. It is not necessary to specify this parameter because, by default, SYS_OP_ZONE_ID uses the scale of the zone map being created. If you do specify scale, then it must match the scale of the zone map being created. Refer to the SCALE clause of CREATE MATERIALIZED ZONEMAP for information on specifying the scale of a zone map.</Function>
    <Function Name="SYS_TYPEID" Url="http://docs.oracle.com/database/121/SQLRF/functions204.htm">SYS_TYPEID returns the typeid of the most specific type of the operand. This value is used primarily to identify the type-discriminant column underlying a substitutable column. For example, you can use the value returned by SYS_TYPEID to build an index on the type-discriminant column.
You can use this function only on object type operands. All final root object types—final types not belonging to a type hierarchy—have a null typeid. Oracle Database assigns to all types belonging to a type hierarchy a unique non-null typeid.</Function>
    <Function Name="SYS_XMLAGG" Url="http://docs.oracle.com/database/121/SQLRF/functions205.htm">SYS_XMLAgg aggregates all of the XML documents or fragments represented by expr and produces a single XML document. It adds a new enclosing element with a default name ROWSET. If you want to format the XML document differently, then specify fmt, which is an instance of the XMLFormat object.</Function>
    <Function Name="SYS_XMLGEN" Url="http://docs.oracle.com/database/121/SQLRF/functions206.htm">SYS_XMLGen takes an expression that evaluates to a particular row and column of the database, and returns an instance of type XMLType containing an XML document. The expr can be a scalar value, a user-defined type, or an XMLType instance.

If expr is a scalar value, then the function returns an XML element containing the scalar value.

If expr is a type, then the function maps the user-defined type attributes to XML elements.

If expr is an XMLType instance, then the function encloses the document in an XML element whose default tag name is ROW.

By default the elements of the XML document match the elements of expr. For example, if expr resolves to a column name, then the enclosing XML element will be the same column name. If you want to format the XML document differently, then specify fmt, which is an instance of the XMLFormat object.</Function>
    <Function Name="SYSDATE" Url="http://docs.oracle.com/database/121/SQLRF/functions207.htm">SYSDATE returns the current date and time set for the operating system on which the database server resides. The data type of the returned value is DATE, and the format returned depends on the value of the NLS_DATE_FORMAT initialization parameter. The function requires no arguments. In distributed SQL statements, this function returns the date and time set for the operating system of your local database. You cannot use this function in the condition of a CHECK constraint.</Function>
    <Function Name="SYSTIMESTAMP" Url="http://docs.oracle.com/database/121/SQLRF/functions208.htm">SYSTIMESTAMP returns the system date, including fractional seconds and time zone, of the system on which the database resides. The return type is TIMESTAMP WITH TIME ZONE.</Function>
    <Function Name="TAN" Url="http://docs.oracle.com/database/121/SQLRF/functions209.htm">TAN returns the tangent of n (an angle expressed in radians).
This function takes as an argument any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. If the argument is BINARY_FLOAT, then the function returns BINARY_DOUBLE. Otherwise the function returns the same numeric data type as the argument.</Function>
    <Function Name="TANH" Url="http://docs.oracle.com/database/121/SQLRF/functions210.htm">TANH returns the hyperbolic tangent of n.
This function takes as an argument any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. If the argument is BINARY_FLOAT, then the function returns BINARY_DOUBLE. Otherwise the function returns the same numeric data type as the argument.</Function>
    <Function Name="TIMESTAMP_TO_SCN" Url="http://docs.oracle.com/database/121/SQLRF/functions211.htm">TIMESTAMP_TO_SCN takes as an argument a timestamp value and returns the approximate system change number (SCN) associated with that timestamp. The returned value is of data type NUMBER. This function is useful any time you want to know the SCN associated with a particular timestamp.</Function>
    <Function Name="TO_BINARY_DOUBLE" Url="http://docs.oracle.com/database/121/SQLRF/functions212.htm">TO_BINARY_DOUBLE returns a double-precision floating-point number.

expr can be a character string or a numeric value of type NUMBER, BINARY_FLOAT, or BINARY_DOUBLE. If expr is BINARY_DOUBLE, then the function returns expr.

The optional 'fmt' and 'nlsparam' arguments are valid only if expr is a character string. They serve the same purpose as for the TO_CHAR (number) function.

The case-insensitive string 'INF' is converted to positive infinity.

The case-insensitive string '-INF' is converted to negative identity.

The case-insensitive string 'NaN' is converted to NaN (not a number).


You cannot use a floating-point number format element (F, f, D, or d) in a character string expr.
Conversions from character strings or NUMBER to BINARY_DOUBLE can be inexact, because the NUMBER and character types use decimal precision to represent the numeric value, and BINARY_DOUBLE uses binary precision.
Conversions from BINARY_FLOAT to BINARY_DOUBLE are exact.</Function>
    <Function Name="TO_BINARY_FLOAT" Url="http://docs.oracle.com/database/121/SQLRF/functions213.htm">TO_BINARY_FLOAT returns a single-precision floating-point number.

expr can be a character string or a numeric value of type NUMBER, BINARY_FLOAT, or BINARY_DOUBLE. If expr is BINARY_FLOAT, then the function returns expr.

The optional 'fmt' and 'nlsparam' arguments are valid only if expr is a character string. They serve the same purpose as for the TO_CHAR (number) function.

The incase-sensitive string 'INF' is converted to positive infinity.

The incase-sensitive string '-INF' is converted to negative identity.

The incase-sensitive string 'NaN' is converted to NaN (not a number).


You cannot use a floating-point number format element (F, f, D, or d) in a character string expr.
Conversions from character strings or NUMBER to BINARY_FLOAT can be inexact, because the NUMBER and character types use decimal precision to represent the numeric value and BINARY_FLOAT uses binary precision.
Conversions from BINARY_DOUBLE to BINARY_FLOAT are inexact if the BINARY_DOUBLE value uses more bits of precision than supported by the BINARY_FLOAT.</Function>
    <Function Name="TO_BLOB" Url="http://docs.oracle.com/database/121/SQLRF/functions214.htm">TO_BLOB converts LONG RAW and RAW values to BLOB values.
From within a PL/SQL package, you can use TO_BLOB to convert RAW and BLOB values to BLOB.</Function>
    <Function Name="TO_CLOB" Url="http://docs.oracle.com/database/121/SQLRF/functions218.htm">TO_CLOB converts NCLOB values in a LOB column or other character strings to CLOB values. char can be any of the data types CHAR, VARCHAR2, NCHAR, NVARCHAR2, CLOB, or NCLOB. Oracle Database executes this function by converting the underlying LOB data from the national character set to the database character set.
From within a PL/SQL package, you can use the TO_CLOB function to convert RAW, CHAR, VARCHAR, VARCHAR2, NCHAR, NVARCHAR2, CLOB, or NCLOB values to CLOB or NCLOB values.</Function>
    <Function Name="TO_DATE" Url="http://docs.oracle.com/database/121/SQLRF/functions219.htm">TO_DATE converts char of CHAR, VARCHAR2, NCHAR, or NVARCHAR2 data type to a value of DATE data type.</Function>
    <Function Name="TO_DSINTERVAL" Url="http://docs.oracle.com/database/121/SQLRF/functions220.htm">TO_DSINTERVAL converts a character string of CHAR, VARCHAR2, NCHAR, or NVARCHAR2 data type to an INTERVAL DAY TO SECOND type.
TO_DSINTERVAL accepts argument in one of the two formats:

SQL interval format compatible with the SQL standard (ISO/IEC 9075:2003)

ISO duration format compatible with the ISO 8601:2004 standard

In the SQL format, days is an integer between 0 and 999999999, hours is an integer between 0 and 23, and minutes and seconds are integers between 0 and 59. frac_secs is the fractional part of seconds between .0 and .999999999. One or more blanks separate days from hours. Additional blanks are allowed between format elements.
In the ISO format, days, hours, minutes and seconds are integers between 0 and 999999999. frac_secs is the fractional part of seconds between .0 and .999999999. No blanks are allowed in the value. If you specify T, then you must specify at least one of the hours, minutes, or seconds values.</Function>
    <Function Name="TO_CHAR" Url="http://docs.oracle.com/database/121/SQLRF/functions215.htm">TO_CHAR (character) converts NCHAR, NVARCHAR2, CLOB, or NCLOB data to the database character set. The value returned is always VARCHAR2.
When you use this function to convert a character LOB into the database character set, if the LOB value to be converted is larger than the target type, then the database returns an error.</Function>
    <Function Name="TO_CHAR" Url="http://docs.oracle.com/database/121/SQLRF/functions216.htm">TO_CHAR (datetime) converts a datetime or interval value of DATE, TIMESTAMP, TIMESTAMP WITH TIME ZONE, TIMESTAMP WITH LOCAL TIME ZONE, INTERVAL DAY TO SECOND, or INTERVAL YEAR TO MONTH data type to a value of VARCHAR2 data type in the format specified by the date format fmt. If you omit fmt, then date is converted to a VARCHAR2 value as follows:

DATE values are converted to values in the default date format.

TIMESTAMP and TIMESTAMP WITH LOCAL TIME ZONE values are converted to values in the default timestamp format.

TIMESTAMP WITH TIME ZONE values are converted to values in the default timestamp with time zone format.

Interval values are converted to the numeric representation of the interval literal.

Refer to "Format Models" for information on datetime formats.
The 'nlsparam' argument specifies the language in which month and day names and abbreviations are returned. This argument can have this form:

'NLS_DATE_LANGUAGE = language' 

If you omit 'nlsparam', then this function uses the default date language for your session.</Function>
    <Function Name="TO_CHAR" Url="http://docs.oracle.com/database/121/SQLRF/functions217.htm">TO_CHAR (number) converts n to a value of VARCHAR2 data type, using the optional number format fmt. The value n can be of type NUMBER, BINARY_FLOAT, or BINARY_DOUBLE. If you omit fmt, then n is converted to a VARCHAR2 value exactly long enough to hold its significant digits.
If n is negative, then the sign is applied after the format is applied. Thus TO_CHAR(-1, '$9') returns -$1, rather than $-1.
Refer to "Format Models" for information on number formats.
The 'nlsparam' argument specifies these characters that are returned by number format elements:

Decimal character

Group separator

Local currency symbol

International currency symbol

This argument can have this form:

'NLS_NUMERIC_CHARACTERS = ''dg''
   NLS_CURRENCY = ''text''
   NLS_ISO_CURRENCY = territory '

The characters d and g represent the decimal character and group separator, respectively. They must be different single-byte characters. Within the quoted string, you must use two single quotation marks around the parameter values. Ten characters are available for the currency symbol.
If you omit 'nlsparam' or any one of the parameters, then this function uses the default parameter values for your session.</Function>
    <Function Name="TO_LOB" Url="http://docs.oracle.com/database/121/SQLRF/functions221.htm">TO_LOB converts LONG or LONG RAW values in the column long_column to LOB values. You can apply this function only to a LONG or LONG RAW column, and only in the select list of a subquery in an INSERT statement.
Before using this function, you must create a LOB column to receive the converted LONG values. To convert LONG values, create a CLOB column. To convert LONG RAW values, create a BLOB column.
You cannot use the TO_LOB function to convert a LONG column to a LOB column in the subquery of a CREATE TABLE ... AS SELECT statement if you are creating an index-organized table. Instead, create the index-organized table without the LONG column, and then use the TO_LOB function in an INSERT ... AS SELECT statement.
You cannot use this function within a PL/SQL package. Instead use the TO_CLOB or TO_BLOB functions.</Function>
    <Function Name="TO_MULTI_BYTE" Url="http://docs.oracle.com/database/121/SQLRF/functions222.htm">TO_MULTI_BYTE returns char with all of its single-byte characters converted to their corresponding multibyte characters. char can be of data type CHAR, VARCHAR2, NCHAR, or NVARCHAR2. The value returned is in the same data type as char.
Any single-byte characters in char that have no multibyte equivalents appear in the output string as single-byte characters. This function is useful only if your database character set contains both single-byte and multibyte characters.
This function does not support CLOB data directly. However, CLOBs can be passed in as arguments through implicit data conversion.</Function>
    <Function Name="TO_NCLOB" Url="http://docs.oracle.com/database/121/SQLRF/functions226.htm">TO_NCLOB converts CLOB values in a LOB column or other character strings to NCLOB values. char can be any of the data types CHAR, VARCHAR2, NCHAR, NVARCHAR2, CLOB, or NCLOB. Oracle Database implements this function by converting the character set of char from the database character set to the national character set.</Function>
    <Function Name="TO_NCHAR" Url="http://docs.oracle.com/database/121/SQLRF/functions223.htm">TO_NCHAR (character) converts a character string, CHAR, VARCHAR2, CLOB, or NCLOB value to the national character set. The value returned is always NVARCHAR2. This function is equivalent to the TRANSLATE ... USING function with a USING clause in the national character set.</Function>
    <Function Name="TO_NCHAR" Url="http://docs.oracle.com/database/121/SQLRF/functions224.htm">TO_NCHAR (datetime) converts a datetime or interval value of DATE, TIMESTAMP, TIMESTAMP WITH TIME ZONE, TIMESTAMP WITH LOCAL TIME ZONE, INTERVAL MONTH TO YEAR, or INTERVAL DAY TO SECOND data type from the database character set to the national character set.</Function>
    <Function Name="TO_NCHAR" Url="http://docs.oracle.com/database/121/SQLRF/functions225.htm">TO_NCHAR (number) converts n to a string in the national character set. The value n can be of type NUMBER, BINARY_FLOAT, or BINARY_DOUBLE. The function returns a value of the same type as the argument. The optional fmt and 'nlsparam' corresponding to n can be of DATE, TIMESTAMP, TIMESTAMP WITH TIME ZONE, TIMESTAMP WITH LOCAL TIME ZONE, INTERVAL MONTH TO YEAR, or INTERVAL DAY TO SECOND data type.</Function>
    <Function Name="TO_NUMBER" Url="http://docs.oracle.com/database/121/SQLRF/functions227.htm">TO_NUMBER converts expr to a value of NUMBER data type. The expr can be a number value of CHAR, VARCHAR2, NCHAR, NVARCHAR2, BINARY_FLOAT, or BINARY_DOUBLE data type.

If you specify an expr of CHAR, VARCHAR2, NCHAR, or NVARCHAR2 data type, then you can optionally specify the format model fmt.

If you specify an expr of BINARY_FLOAT or BINARY_DOUBLE data type, then you cannot specify a format model because a BINARY_FLOAT or BINARY_DOUBLE can be interpreted only by its internal representation.

Refer to "Format Models" for information on format models.
The 'nlsparam' argument in this function has the same purpose as it does in the TO_CHAR function for number conversions. Refer to TO_CHAR (number) for more information.
This function does not support CLOB data directly. However, CLOBs can be passed in as arguments through implicit data conversion.</Function>
    <Function Name="TO_SINGLE_BYTE" Url="http://docs.oracle.com/database/121/SQLRF/functions228.htm">TO_SINGLE_BYTE returns char with all of its multibyte characters converted to their corresponding single-byte characters. char can be of data type CHAR, VARCHAR2, NCHAR, or NVARCHAR2. The value returned is in the same data type as char.
Any multibyte characters in char that have no single-byte equivalents appear in the output as multibyte characters. This function is useful only if your database character set contains both single-byte and multibyte characters.
This function does not support CLOB data directly. However, CLOBs can be passed in as arguments through implicit data conversion.</Function>
    <Function Name="TO_YMINTERVAL" Url="http://docs.oracle.com/database/121/SQLRF/functions231.htm">TO_YMINTERVAL converts a character string of CHAR, VARCHAR2, NCHAR, or NVARCHAR2 data type to an INTERVAL YEAR TO MONTH type.
TO_YMINTERVAL accepts argument in one of the two formats:

SQL interval format compatible with the SQL standard (ISO/IEC 9075:2003)

ISO duration format compatible with the ISO 8601:2004 standard

In the SQL format, years is an integer between 0 and 999999999, and months is an integer between 0 and 11. Additional blanks are allowed between format elements.
In the ISO format, years and months are integers between 0 and 999999999. Days, hours, minutes, seconds, and frac_secs are non-negative integers, and are ignored, if specified. No blanks are allowed in the value. If you specify T, then you must specify at least one of the hours, minutes, or seconds values.</Function>
    <Function Name="TRANSLATE" Url="http://docs.oracle.com/database/121/SQLRF/functions232.htm">TRANSLATE returns expr with all occurrences of each character in from_string replaced by its corresponding character in to_string. Characters in expr that are not in from_string are not replaced. The argument from_string can contain more characters than to_string. In this case, the extra characters at the end of from_string have no corresponding characters in to_string. If these extra characters appear in expr, then they are removed from the return value.
If a character appears multiple times in from_string, then the to_string mapping corresponding to the first occurrence is used.
You cannot use an empty string for to_string to remove all characters in from_string from the return value. Oracle Database interprets the empty string as null, and if this function has a null argument, then it returns null. To remove all characters in from_string, concatenate another character to the beginning of from_string and specify this character as the to_string. For example, TRANSLATE(expr, 'x0123456789', 'x') removes all digits from expr.
TRANSLATE provides functionality related to that provided by the REPLACE function. REPLACE lets you substitute a single string for another single string, as well as remove character strings. TRANSLATE lets you make several single-character, one-to-one substitutions in one operation.
This function does not support CLOB data directly. However, CLOBs can be passed in as arguments through implicit data conversion.</Function>
    <Function Name="TRANSLATE" Url="http://docs.oracle.com/database/121/SQLRF/functions233.htm">TRANSLATE ... USING converts char into the character set specified for conversions between the database character set and the national character set.</Function>
    <Function Name="TREAT" Url="http://docs.oracle.com/database/121/SQLRF/functions234.htm">TREAT changes the declared type of an expression.
You must have the EXECUTE object privilege on type to use this function.

type must be some supertype or subtype of the declared type of expr. If the most specific type of expr is type (or some subtype of type), then TREAT returns expr. If the most specific type of expr is not type (or some subtype of type), then TREAT returns NULL.

You can specify REF only if the declared type of expr is a REF type.

If the declared type of expr is a REF to a source type of expr, then type must be some subtype or supertype of the source type of expr. If the most specific type of DEREF(expr) is type (or a subtype of type), then TREAT returns expr. If the most specific type of DEREF(expr) is not type (or a subtype of type), then TREAT returns NULL.

This function does not support CLOB data directly. However, CLOBs can be passed in as arguments through implicit data conversion.</Function>
    <Function Name="TRIM" Url="http://docs.oracle.com/database/121/SQLRF/functions235.htm">TRIM enables you to trim leading or trailing characters (or both) from a character string. If trim_character or trim_source is a character literal, then you must enclose it in single quotation marks.

If you specify LEADING, then Oracle Database removes any leading characters equal to trim_character.

If you specify TRAILING, then Oracle removes any trailing characters equal to trim_character.

If you specify BOTH or none of the three, then Oracle removes leading and trailing characters equal to trim_character.

If you do not specify trim_character, then the default value is a blank space.

If you specify only trim_source, then Oracle removes leading and trailing blank spaces.

The function returns a value with data type VARCHAR2. The maximum length of the value is the length of trim_source.

If either trim_source or trim_character is null, then the TRIM function returns null.

Both trim_character and trim_source can be VARCHAR2 or any data type that can be implicitly converted to VARCHAR2. The string returned is a VARCHAR2 (NVARCHAR2) data type if trim_source is a CHAR or VARCHAR2 (NCHAR or NVARCHAR2) data type, and a CLOB if trim_source is a CLOB data type. The return string is in the same character set as trim_source.</Function>
    <Function Name="TRUNC" Url="http://docs.oracle.com/database/121/SQLRF/functions236.htm">The TRUNC (date) function returns date with the time portion of the day truncated to the unit specified by the format model fmt. This function is not sensitive to the NLS_CALENDAR session parameter. It operates according to the rules of the Gregorian calendar. The value returned is always of data type DATE, even if you specify a different datetime data type for date. If you omit fmt, then the default format model 'DD' is used and the value returned is date truncated to the day with a time of midnight. Refer to "ROUND and TRUNC Date Functions" for the permitted format models to use in fmt.</Function>
    <Function Name="TRUNC" Url="http://docs.oracle.com/database/121/SQLRF/functions237.htm">The TRUNC (number) function returns n1 truncated to n2 decimal places. If n2 is omitted, then n1 is truncated to 0 places. n2 can be negative to truncate (make zero) n2 digits left of the decimal point.
This function takes as an argument any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. If you omit n2, then the function returns the same data type as the numeric data type of the argument. If you include n2, then the function returns NUMBER.</Function>
    <Function Name="TZ_OFFSET" Url="http://docs.oracle.com/database/121/SQLRF/functions238.htm">TZ_OFFSET returns the time zone offset corresponding to the argument based on the date the statement is executed. You can enter a valid time zone region name, a time zone offset from UTC (which simply returns itself), or the keyword SESSIONTIMEZONE or DBTIMEZONE. For a listing of valid values for time_zone_name, query the TZNAME column of the V$TIMEZONE_NAMES dynamic performance view.</Function>
    <Function Name="UID" Url="http://docs.oracle.com/database/121/SQLRF/functions239.htm">UID returns an integer that uniquely identifies the session user (the user who logged on).</Function>
    <Function Name="UNISTR" Url="http://docs.oracle.com/database/121/SQLRF/functions240.htm">UNISTR takes as its argument a text literal or an expression that resolves to character data and returns it in the national character set. The national character set of the database can be either AL16UTF16 or UTF8. UNISTR provides support for Unicode string literals by letting you specify the Unicode encoding value of characters in the string. This is useful, for example, for inserting data into NCHAR columns.
The Unicode encoding value has the form '\xxxx' where 'xxxx' is the hexadecimal value of a character in UCS-2 encoding format. Supplementary characters are encoded as two code units, the first from the high-surrogates range (U+D800 to U+DBFF), and the second from the low-surrogates range (U+DC00 to U+DFFF). To include the backslash in the string itself, precede it with another backslash (\\).
For portability and data preservation, Oracle recommends that in the UNISTR string argument you specify only ASCII characters and the Unicode encoding values.</Function>
    <Function Name="UPDATEXML" Url="http://docs.oracle.com/database/121/SQLRF/functions241.htm">UPDATEXML takes as arguments an XMLType instance and an XPath-value pair and returns an XMLType instance with the updated value. If XPath_string is an XML element, then the corresponding value_expr must be an XMLType instance. If XPath_string is an attribute or text node, then the value_expr can be any scalar data type. You can specify an absolute XPath_string with an initial slash or a relative XPath_string by omitting the initial slash. If you omit the initial slash, then the context of the relative path defaults to the root node.
The data types of the target of each XPath_string and its corresponding value_expr must match. The optional namespace_string must resolve to a VARCHAR2 value that specifies a default mapping or namespace mapping for prefixes, which Oracle Database uses when evaluating the XPath expression(s).
If you update an XML element to null, then Oracle removes the attributes and children of the element, and the element becomes empty. If you update the text node of an element to null, Oracle removes the text value of the element, and the element itself remains but is empty.
In most cases, this function materializes an XML document in memory and updates the value. However, UPDATEXML is optimized for UPDATE statements on object-relational columns so that the function updates the value directly in the column. This optimization requires the following conditions:

The XMLType_instance must be the same as the column in the UPDATE ... SET clause.

The XPath_string must resolve to scalar content.</Function>
    <Function Name="UPPER" Url="http://docs.oracle.com/database/121/SQLRF/functions242.htm">UPPER returns char, with all letters uppercase. char can be any of the data types CHAR, VARCHAR2, NCHAR, NVARCHAR2, CLOB, or NCLOB. The return value is the same data type as char. The database sets the case of the characters based on the binary mapping defined for the underlying character set. For linguistic-sensitive uppercase, refer to NLS_UPPER.</Function>
    <Function Name="USER" Url="http://docs.oracle.com/database/121/SQLRF/functions243.htm">USER returns the name of the session user (the user who logged on). This may change during the duration of a database session as Real Application Security sessions are attached or detached. For enterprise users, this function returns the schema. For other users, it returns the database user name. If a Real Application Security session is currently attached to the database session, then it returns user XS$NULL.
This function returns a VARCHAR2 value.
Oracle Database compares values of this function with blank-padded comparison semantics.
In a distributed SQL statement, the UID and USER functions together identify the user on your local database. You cannot use these functions in the condition of a CHECK constraint.</Function>
    <Function Name="VALUE" Url="http://docs.oracle.com/database/121/SQLRF/functions245.htm">VALUE takes as its argument a correlation variable (table alias) associated with a row of an object table and returns object instances stored in the object table. The type of the object instances is the same type as the object table.</Function>
    <Function Name="VAR_POP" Url="http://docs.oracle.com/database/121/SQLRF/functions246.htm">VAR_POP returns the population variance of a set of numbers after discarding the nulls in this set. You can use it as both an aggregate and analytic function.
This function takes as an argument any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. The function returns the same data type as the numeric data type of the argument.</Function>
    <Function Name="VAR_SAMP" Url="http://docs.oracle.com/database/121/SQLRF/functions247.htm">VAR_SAMP returns the sample variance of a set of numbers after discarding the nulls in this set. You can use it as both an aggregate and analytic function.
This function takes as an argument any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. The function returns the same data type as the numeric data type of the argument.</Function>
    <Function Name="VARIANCE" Url="http://docs.oracle.com/database/121/SQLRF/functions248.htm">VARIANCE returns the variance of expr. You can use it as an aggregate or analytic function.
Oracle Database calculates the variance of expr as follows:

0 if the number of rows in expr = 1

VAR_SAMP if the number of rows in expr &gt; 1

If you specify DISTINCT, then you can specify only the query_partition_clause of the analytic_clause. The order_by_clause and windowing_clause are not allowed.
This function takes as an argument any numeric data type or any nonnumeric data type that can be implicitly converted to a numeric data type. The function returns the same data type as the numeric data type of the argument.</Function>
    <Function Name="VSIZE" Url="http://docs.oracle.com/database/121/SQLRF/functions249.htm">VSIZE returns the number of bytes in the internal representation of expr. If expr is null, then this function returns null.
This function does not support CLOB data directly. However, CLOBs can be passed in as arguments through implicit data conversion.</Function>
    <Function Name="WIDTH_BUCKET" Url="http://docs.oracle.com/database/121/SQLRF/functions250.htm">WIDTH_BUCKET lets you construct equiwidth histograms, in which the histogram range is divided into intervals that have identical size. (Compare this function with NTILE, which creates equiheight histograms.) Ideally each bucket is a closed-open interval of the real number line. For example, a bucket can be assigned to scores between 10.00 and 19.999 ... to indicate that 10 is included in the interval and 20 is excluded. This is sometimes denoted [10, 20).
For a given expression, WIDTH_BUCKET returns the bucket number into which the value of this expression would fall after being evaluated.

expr is the expression for which the histogram is being created. This expression must evaluate to a numeric or datetime value or to a value that can be implicitly converted to a numeric or datetime value. If expr evaluates to null, then the expression returns null.

min_value and max_value are expressions that resolve to the end points of the acceptable range for expr. Both of these expressions must also evaluate to numeric or datetime values, and neither can evaluate to null.

num_buckets is an expression that resolves to a constant indicating the number of buckets. This expression must evaluate to a positive integer.


See Also:
Table 2-10, "Implicit Type Conversion Matrix" for more information on implicit conversion


When needed, Oracle Database creates an underflow bucket numbered 0 and an overflow bucket numbered num_buckets+1. These buckets handle values less than min_value and more than max_value and are helpful in checking the reasonableness of endpoints.</Function>
    <Function Name="XMLAGG" Url="http://docs.oracle.com/database/121/SQLRF/functions251.htm">XMLAgg is an aggregate function. It takes a collection of XML fragments and returns an aggregated XML document. Any arguments that return null are dropped from the result.
XMLAgg is similar to SYS_XMLAgg except that XMLAgg returns a collection of nodes but it does not accept formatting using the XMLFormat object. Also, XMLAgg does not enclose the output in an element tag as does SYS_XMLAgg.
Within the order_by_clause, Oracle Database does not interpret number literals as column positions, as it does in other uses of this clause, but simply as number literals.</Function>
    <Function Name="XMLCAST" Url="http://docs.oracle.com/database/121/SQLRF/functions252.htm">XMLCast casts value_expression to the scalar SQL data type specified by datatype. The value_expression argument is a SQL expression that is evaluated. The datatype argument can be of data type NUMBER, VARCHAR2, CHAR, CLOB, BLOB, REF XMLTYPE, and any of the datetime data types.</Function>
    <Function Name="XMLCDATA" Url="http://docs.oracle.com/database/121/SQLRF/functions253.htm">XMLCData generates a CDATA section by evaluating value_expr. The value_expr must resolve to a string. The value returned by the function takes the following form:

&lt;![CDATA[string]]&gt;

If the resulting value is not a valid XML CDATA section, then the function returns an error.The following conditions apply to XMLCData:

The value_expr cannot contain the substring ]]&gt;.

If value_expr evaluates to null, then the function returns null.</Function>
    <Function Name="XMLCOLATTVAL" Url="http://docs.oracle.com/database/121/SQLRF/functions254.htm">XMLColAttVal creates an XML fragment and then expands the resulting XML so that each XML fragment has the name column with the attribute name.
You can use the AS clause to change the value of the name attribute to something other than the column name. You can do this by specifying c_alias, which is a string literal, or by specifying EVALNAME value_expr. In the latter case, the value expression is evaluated and the result, which must be a string literal, is used as the alias. The alias can be up to 4000 characters if the initialization parameter MAX_STRING_SIZE = STANDARD, and 32767 characters if MAX_STRING_SIZE = EXTENDED. See "Extended Data Types" for more information.
You must specify a value for value_expr. If value_expr is null, then no element is returned.

Restriction on XMLColAttVal You cannot specify an object type column for value_expr.</Function>
    <Function Name="XMLCOMMENT" Url="http://docs.oracle.com/database/121/SQLRF/functions255.htm">XMLComment generates an XML comment using an evaluated result of value_expr. The value_expr must resolve to a string. It cannot contain two consecutive dashes (hyphens). The value returned by the function takes the following form:

&lt;!--string--&gt;

If value_expr resolves to null, then the function returns null.</Function>
    <Function Name="XMLCONCAT" Url="http://docs.oracle.com/database/121/SQLRF/functions256.htm">XMLConcat takes as input a series of XMLType instances, concatenates the series of elements for each row, and returns the concatenated series. XMLConcat is the inverse of XMLSequence.
Null expressions are dropped from the result. If all the value expressions are null, then the function returns null.</Function>
    <Function Name="XMLDIFF" Url="http://docs.oracle.com/database/121/SQLRF/functions257.htm">The XMLDiff function is the SQL interface for the XmlDiff C API. This function compares two XML documents and captures the differences in XML conforming to an Xdiff schema. The diff document is returned as an XMLType document.

For the first two arguments, specify the names of two XMLType documents.

For the integer, specify a number representing the hashLevel for a C function XmlDiff. If you do not want hashing, set this argument to 0 or omit it entirely. If you do not want hashing, but you want to specify flags, then you must set this argument to 0.

For string, specify the flags that control the behavior of the function. These flags are specified by one or more names separated by semicolon. The names are the same as the names of constants for XmlDiff function.</Function>
    <Function Name="XMLELEMENT" Url="http://docs.oracle.com/database/121/SQLRF/functions258.htm">XMLElement takes an element name for identifier or evaluates an element name for EVALNAME value_expr, an optional collection of attributes for the element, and arguments that make up the content of the element. It returns an instance of type XMLType. XMLElement is similar to SYS_XMLGen except that XMLElement can include attributes in the XML returned, but it does not accept formatting using the XMLFormat object.
The XMLElement function is typically nested to produce an XML document with a nested structure, as in the example in the following section.
For an explanation of the ENTITYESCAPING and NONENTITYESCAPING keywords, refer to Oracle XML DB Developer's Guide.
You must specify a value for Oracle Database to use an the enclosing tag. You can do this by specifying identifier, which is a string literal, or by specifying EVALNAME value_expr. In the latter case, the value expression is evaluated and the result, which must be a string literal, is used as the identifier. The identifier does not have to be a column name or column reference. It cannot be an expression or null. It can be up to 4000 characters if the initialization parameter MAX_STRING_SIZE = STANDARD, and 32767 characters if MAX_STRING_SIZE = EXTENDED.
The objects that make up the element content follow the XMLATTRIBUTES keyword. In the XML_attributes_clause, if the value_expr is null, then no attribute is created for that value expression. The type of value_expr cannot be an object type or collection. If you specify an alias for value_expr using the AS clause, then the c_alias or the evaluated value expression (EVALNAME value_expr) can be up to 4000 characters if the initialization parameter MAX_STRING_SIZE = STANDARD, and 32767 characters if MAX_STRING_SIZE = EXTENDED.</Function>
    <Function Name="XMLEXISTS" Url="http://docs.oracle.com/database/121/SQLRF/functions259.htm">XMLExists checks whether a given XQuery expression returns a nonempty XQuery sequence. If so, the function returns TRUE; otherwise, it returns FALSE. The argument XQuery_string is a literal string, but it can contain XQuery variables that you bind using the XML_passing_clause.
The expr in the XML_passing_clause is an expression returning an XMLType or an instance of a SQL scalar data type that is used as the context for evaluating the XQuery expression. You can specify only one expr in the PASSING clause without an identifier. The result of evaluating each expr is bound to the corresponding identifier in the XQuery_string. If any expr that is not followed by an AS clause, then the result of evaluating that expression is used as the context item for evaluating the XQuery_string.</Function>
    <Function Name="XMLFOREST" Url="http://docs.oracle.com/database/121/SQLRF/functions260.htm">XMLForest converts each of its argument parameters to XML, and then returns an XML fragment that is the concatenation of these converted arguments.

If value_expr is a scalar expression, then you can omit the AS clause, and Oracle Database uses the column name as the element name.

If value_expr is an object type or collection, then the AS clause is mandatory, and Oracle uses the specified expression as the enclosing tag.
You can do this by specifying c_alias, which is a string literal, or by specifying EVALNAME value_expr. In the latter case, the value expression is evaluated and the result, which must be a string literal, is used as the identifier. The identifier does not have to be a column name or column reference. It cannot be an expression or null. It can be up to 4000 characters if the initialization parameter MAX_STRING_SIZE = STANDARD, and 32767 characters if MAX_STRING_SIZE = EXTENDED. See "Extended Data Types" for more information.

If value_expr is null, then no element is created for that value_expr.</Function>
    <Function Name="XMLISVALID" Url="http://docs.oracle.com/database/121/SQLRF/functions261.htm">XMLISVALID checks whether the input XMLType_instance conforms to the relevant XML schema. It does not change the validation status recorded for XMLType_instance.
If the input XML document is determined to be valid, then XMLISVALID returns 1; otherwise, it returns 0. If you provide XMLSchema_URL as an argument, then that is used to check conformance. Otherwise, the XML schema specified by the XML document is used to check conformance.

XMLType_instance is the XMLType instance to be validated.

XMLSchema_URL is the URL of the XML schema against which to check conformance.

element is the element of the specified schema against which to check conformance. Use this if you have an XML schema that defines more than one top level element, and you want to check conformance against a specific one of those elements.</Function>
    <Function Name="XMLPARSE" Url="http://docs.oracle.com/database/121/SQLRF/functions262.htm">XMLParse parses and generates an XML instance from the evaluated result of value_expr. The value_expr must resolve to a string. If value_expr resolves to null, then the function returns null.

If you specify DOCUMENT, then value_expr must resolve to a singly rooted XML document.

If you specify CONTENT, then value_expr must resolve to a valid XML value.

When you specify WELLFORMED, you are guaranteeing that value_expr resolves to a well-formed XML document, so the database does not perform validity checks to ensure that the input is well formed.</Function>
    <Function Name="XMLPATCH" Url="http://docs.oracle.com/database/121/SQLRF/functions263.htm">The XMLPatch function is the SQL interface for the XmlPatch C API. This function patches an XML document with the changes specified. A patched XMLType document is returned.

For the first argument, specify the name of the input XMLType document.

For the second argument, specify the XMLType document containing the changes to be applied to the first document. The changes should conform to the Xdiff XML schema. You can supply the XML output from the Oracle XML Developer's Kit Java method diff().</Function>
    <Function Name="XMLPI" Url="http://docs.oracle.com/database/121/SQLRF/functions264.htm">XMLPI generates an XML processing instruction using identifier and optionally the evaluated result of value_expr. A processing instruction is commonly used to provide to an application information that is associated with all or part of an XML document. The application uses the processing instruction to determine how best to process the XML document.
You must specify a value for Oracle Database to use an the enclosing tag. You can do this by specifying identifier, which is a string literal, or by specifying EVALNAME value_expr. In the latter case, the value expression is evaluated and the result, which must be a string literal, is used as the identifier. The identifier does not have to be a column name or column reference. It cannot be an expression or null. It can be up to 4000 characters if the initialization parameter MAX_STRING_SIZE = STANDARD, and 32767 characters if MAX_STRING_SIZE = EXTENDED. See "Extended Data Types" for more information.
The optional value_expr must resolve to a string. If you omit the optional value_expr, then a zero-length string is the default. The value returned by the function takes this form:

&lt;?identifier string?&gt;

XMLPI is subject to the following restrictions:

The identifier must be a valid target for a processing instruction.

You cannot specify xml in any case combination for identifier.

The identifier cannot contain the consecutive characters ?&gt;.</Function>
    <Function Name="XMLQUERY" Url="http://docs.oracle.com/database/121/SQLRF/functions265.htm">XMLQUERY lets you query XML data in SQL statements. It takes an XQuery expression as a string literal, an optional context item, and other bind variables and returns the result of evaluating the XQuery expression using these input values.

XQuery_string is a complete XQuery expression, including prolog.

The expr in the XML_passing_clause is an expression returning an XMLType or an instance of a SQL scalar data type that is used as the context for evaluating the XQuery expression. You can specify only one expr in the PASSING clause without an identifier. The result of evaluating each expr is bound to the corresponding identifier in the XQuery_string. If any expr that is not followed by an AS clause, then the result of evaluating that expression is used as the context item for evaluating the XQuery_string.

RETURNING CONTENT indicates that the result from the XQuery evaluation is either an XML 1.0 document or a document fragment conforming to the XML 1.0 semantics.

If the result set is empty, then the function returns the SQL NULL value. The NULL ON EMPTY keywords are implemented by default and are shown for semantic clarity.</Function>
    <Function Name="XMLROOT" Url="http://docs.oracle.com/database/121/SQLRF/functions266.htm">XMLROOT lets you create a new XML value by providing version and standalone properties in the XML root information (prolog) of an existing XML value. If the value_expr already has a prolog, then the database returns an error. If the input is null, then the function returns null.
The value returned takes the following form:

&lt;?xml version = "version" [ STANDALONE = "{yes | no}" ]?&gt;


The first value_expr specifies the XML value for which you are providing prolog information.

In the VERSION clause, value_expr must resolve to a string representing a valid XML version. If you specify NO VALUE for VERSION, then the version defaults to 1.0.

If you omit the optional STANDALONE clause, or if you specify it with NO VALUE, then the standalone property is absent from the value returned by the function.</Function>
    <Function Name="XMLSEQUENCE" Url="http://docs.oracle.com/database/121/SQLRF/functions267.htm">XMLSequence has two forms:

The first form takes as input an XMLType instance and returns a varray of the top-level nodes in the XMLType. This form is effectively superseded by the SQL/XML standard function XMLTable, which provides for more readable SQL code. Prior to Oracle Database 10g Release 2, XMLSequence was used with SQL function TABLE to do some of what can now be done better with the XMLTable function.

The second form takes as input a REFCURSOR instance, with an optional instance of the XMLFormat object, and returns as an XMLSequence type an XML document for each row of the cursor.

Because XMLSequence returns a collection of XMLType, you can use this function in a TABLE clause to unnest the collection values into multiple rows, which can in turn be further processed in the SQL query.</Function>
    <Function Name="XMLSERIALIZE" Url="http://docs.oracle.com/database/121/SQLRF/functions268.htm">XMLSerialize creates a string or LOB containing the contents of value_expr.

If you specify DOCUMENT, then the value_expr must be a valid XML document.

If you specify CONTENT, then the value_expr need not be a singly rooted XML document. However it must be valid XML content.

The datatype specified can be a string type (VARCHAR2 or VARCHAR, but not NVARCHAR2), BLOB, or CLOB. The default is CLOB.

If datatype is BLOB, then you can specify the ENCODING clause to use the specified encoding in the prolog. The xml_encoding_spec is an XML encoding declaration (encoding="...").

Specify the VERSION clause to use the version you provide as string_literal in the XML declaration (&lt;?xml version="..." ...?&gt;).

Specify NO INDENT to strip all insignificant whitespace from the output. Specify INDENT SIZE = N, where N is a whole number, for output that is pretty-printed using a relative indentation of N spaces. If N is 0, then pretty-printing inserts a newline character after each element, placing each element on a line by itself, but omitting all other insignificant whitespace in the output. If INDENT is present without a SIZE specification, then 2-space indenting is used. If you omit this clause, then the behavior (pretty-printing or not) is indeterminate.

HIDE DEFAULTS and SHOW DEFAULTS apply only to XML schema-based data. If you specify SHOW DEFAULTS and the input data is missing any optional elements or attributes for which the XML schema defines default values, then those elements or attributes are included in the output with their default values. If you specify HIDE DEFAULTS, then no such elements or attributes are included in the output. HIDE DEFAULTS is the default behavior.</Function>
    <Function Name="XMLTABLE" Url="http://docs.oracle.com/database/121/SQLRF/functions269.htm">XMLTable maps the result of an XQuery evaluation into relational rows and columns. You can query the result returned by the function as a virtual relational table using SQL.

The XMLNAMESPACES clause contains a set of XML namespace declarations. These declarations are referenced by the XQuery expression (the evaluated XQuery_string), which computes the row, and by the XPath expression in the PATH clause of XML_table_column, which computes the columns for the entire XMLTable function. If you want to use qualified names in the PATH expressions of the COLUMNS clause, then you need to specify the XMLNAMESPACES clause.

XQuery_string is a literal string. It is a complete XQuery expression and can include prolog declarations. The value of XQuery_string serves as input to the XMLTable function; it is this XQuery result that is decomposed and stored as relational data.

The expr in the XML_passing_clause is an expression returning an XMLType or an instance of a SQL scalar data type that is used as the context for evaluating the XQuery expression. You can specify only one expr in the PASSING clause without an identifier. The result of evaluating each expr is bound to the corresponding identifier in the XQuery_string. If any expr that is not followed by an AS clause, then the result of evaluating that expression is used as the context item for evaluating the XQuery_string. This clause supports only passing by value, not passing by reference. Therefore, the BY VALUE keywords are optional and are provided for semantic clarity.

The optional RETURNING SEQUENCE BY REF clause causes the result of the XQuery evaluation to be returned by reference. This allows you to refer to any part of the source data in the XML_table_column clause.
If you omit this clause, then the result of the XQuery evaluation is returned by value. That is, a copy of the targeted nodes is returned instead of a reference to the actual nodes. In this case, you cannot refer to any data that is not in the returned copy in the XML_table_column clause. In particular, you cannot refer to data that precedes the targeted nodes in the source data.

The optional COLUMNS clause defines the columns of the virtual table to be created by XMLTable.

If you omit the COLUMNS clause, then XMLTable returns a row with a single XMLType pseudocolumn named COLUMN_VALUE.

FOR ORDINALITY specifies that column is to be a column of generated row numbers. There must be at most one FOR ORDINALITY clause. It is created as a NUMBER column.

For each resulting column except the FOR ORDINALITY column, you must specify the column data type, which can be XMLType or any other data type.
If the column data type is XMLType, then specify the XMLTYPE clause. If you specify the optional (SEQUENCE) BY REF clause, then a reference to the source data targeted by the PATH expression is returned as the column content. Otherwise, column contains a copy of that targeted data.
Returning the XMLType data by reference lets you specify other columns whose paths target nodes in the source data that are outside those targeted by the PATH expression for column.
If the column data type is any other data type, then specify datatype.

The optional PATH clause specifies that the portion of the XQuery result that is addressed by XQuery expression string is to be used as the column content.
If you omit PATH, then the XQuery expression column is assumed. For example:

XMLTable(... COLUMNS xyz)

is equivalent to

XMLTable(... COLUMNS xyz PATH 'XYZ')

You can use different PATH clauses to split the XQuery result into different virtual-table columns.

The optional DEFAULT clause specifies the value to use when the PATH expression results in an empty sequence. Its expr is an XQuery expression that is evaluated to produce the default value.</Function>
    <Function Name="XMLTRANSFORM" Url="http://docs.oracle.com/database/121/SQLRF/functions270.htm">XMLTransform takes as arguments an XMLType instance and an XSL style sheet, which is itself a form of XMLType instance. It applies the style sheet to the instance and returns an XMLType.
This function is useful for organizing data according to a style sheet as you are retrieving it from the database.</Function>
  </Functions>
  <Statements>
    <Statement Name="ADMINISTER KEY MANAGEMENT" Url="http://docs.oracle.com/database/121/SQLRF/statements_1003.htm" />
    <Statement Name="ALTER AUDIT POLICY" Url="http://docs.oracle.com/database/121/SQLRF/statements_1004.htm" />
    <Statement Name="ALTER CLUSTER" Url="http://docs.oracle.com/database/121/SQLRF/statements_1005.htm" />
    <Statement Name="ALTER DATABASE" Url="http://docs.oracle.com/database/121/SQLRF/statements_1006.htm" />
    <Statement Name="ALTER DATABASE LINK" Url="http://docs.oracle.com/database/121/SQLRF/statements_1007.htm" />
    <Statement Name="ALTER DIMENSION" Url="http://docs.oracle.com/database/121/SQLRF/statements_1008.htm" />
    <Statement Name="ALTER DISKGROUP" Url="http://docs.oracle.com/database/121/SQLRF/statements_1009.htm" />
    <Statement Name="ALTER FLASHBACK ARCHIVE" Url="http://docs.oracle.com/database/121/SQLRF/statements_1010.htm" />
    <Statement Name="ALTER FUNCTION" Url="http://docs.oracle.com/database/121/SQLRF/statements_1011.htm" />
    <Statement Name="ALTER INDEX" Url="http://docs.oracle.com/database/121/SQLRF/statements_1012.htm" />
    <Statement Name="ALTER INDEXTYPE" Url="http://docs.oracle.com/database/121/SQLRF/statements_1013.htm" />
    <Statement Name="ALTER JAVA" Url="http://docs.oracle.com/database/121/SQLRF/statements_1014.htm" />
    <Statement Name="ALTER LIBRARY" Url="http://docs.oracle.com/database/121/SQLRF/statements_2001.htm" />
    <Statement Name="ALTER MATERIALIZED VIEW" Url="http://docs.oracle.com/database/121/SQLRF/statements_2002.htm" />
    <Statement Name="ALTER MATERIALIZED VIEW LOG" Url="http://docs.oracle.com/database/121/SQLRF/statements_2003.htm" />
    <Statement Name="ALTER MATERIALIZED ZONEMAP" Url="http://docs.oracle.com/database/121/SQLRF/statements_2004.htm" />
    <Statement Name="ALTER OPERATOR" Url="http://docs.oracle.com/database/121/SQLRF/statements_2005.htm" />
    <Statement Name="ALTER OUTLINE" Url="http://docs.oracle.com/database/121/SQLRF/statements_2006.htm" />
    <Statement Name="ALTER PACKAGE" Url="http://docs.oracle.com/database/121/SQLRF/statements_2007.htm" />
    <Statement Name="ALTER PLUGGABLE DATABASE" Url="http://docs.oracle.com/database/121/SQLRF/statements_2008.htm" />
    <Statement Name="ALTER PROCEDURE" Url="http://docs.oracle.com/database/121/SQLRF/statements_2009.htm" />
    <Statement Name="ALTER PROFILE" Url="http://docs.oracle.com/database/121/SQLRF/statements_2010.htm" />
    <Statement Name="ALTER RESOURCE COST" Url="http://docs.oracle.com/database/121/SQLRF/statements_2011.htm" />
    <Statement Name="ALTER ROLE" Url="http://docs.oracle.com/database/121/SQLRF/statements_2012.htm" />
    <Statement Name="ALTER ROLLBACK SEGMENT" Url="http://docs.oracle.com/database/121/SQLRF/statements_2013.htm" />
    <Statement Name="ALTER SEQUENCE" Url="http://docs.oracle.com/database/121/SQLRF/statements_2014.htm" />
    <Statement Name="ALTER SESSION" Url="http://docs.oracle.com/database/121/SQLRF/statements_2015.htm" />
    <Statement Name="ALTER SYNONYM" Url="http://docs.oracle.com/database/121/SQLRF/statements_2016.htm" />
    <Statement Name="ALTER SYSTEM" Url="http://docs.oracle.com/database/121/SQLRF/statements_2017.htm" />
    <Statement Name="ALTER TABLE" Url="http://docs.oracle.com/database/121/SQLRF/statements_3001.htm" />
    <Statement Name="ALTER TABLESPACE" Url="http://docs.oracle.com/database/121/SQLRF/statements_3002.htm" />
    <Statement Name="ALTER TRIGGER" Url="http://docs.oracle.com/database/121/SQLRF/statements_4001.htm" />
    <Statement Name="ALTER TYPE" Url="http://docs.oracle.com/database/121/SQLRF/statements_4002.htm" />
    <Statement Name="ALTER USER" Url="http://docs.oracle.com/database/121/SQLRF/statements_4003.htm" />
    <Statement Name="ALTER VIEW" Url="http://docs.oracle.com/database/121/SQLRF/statements_4004.htm" />
    <Statement Name="ANALYZE" Url="http://docs.oracle.com/database/121/SQLRF/statements_4005.htm" />
    <Statement Name="ASSOCIATE STATISTICS" Url="http://docs.oracle.com/database/121/SQLRF/statements_4006.htm" />
    <Statement Name="AUDIT" Url="http://docs.oracle.com/database/121/SQLRF/statements_4007.htm" />
    <Statement Name="AUDIT" Url="http://docs.oracle.com/database/121/SQLRF/statements_4008.htm" />
    <Statement Name="CALL" Url="http://docs.oracle.com/database/121/SQLRF/statements_4009.htm" />
    <Statement Name="COMMENT" Url="http://docs.oracle.com/database/121/SQLRF/statements_4010.htm" />
    <Statement Name="COMMIT" Url="http://docs.oracle.com/database/121/SQLRF/statements_4011.htm" />
    <Statement Name="CREATE AUDIT POLICY" Url="http://docs.oracle.com/database/121/SQLRF/statements_5001.htm" />
    <Statement Name="CREATE CLUSTER" Url="http://docs.oracle.com/database/121/SQLRF/statements_5002.htm" />
    <Statement Name="CREATE CONTEXT" Url="http://docs.oracle.com/database/121/SQLRF/statements_5003.htm" />
    <Statement Name="CREATE CONTROLFILE" Url="http://docs.oracle.com/database/121/SQLRF/statements_5004.htm" />
    <Statement Name="CREATE DATABASE" Url="http://docs.oracle.com/database/121/SQLRF/statements_5005.htm" />
    <Statement Name="CREATE DATABASE LINK" Url="http://docs.oracle.com/database/121/SQLRF/statements_5006.htm" />
    <Statement Name="CREATE DIMENSION" Url="http://docs.oracle.com/database/121/SQLRF/statements_5007.htm" />
    <Statement Name="CREATE DIRECTORY" Url="http://docs.oracle.com/database/121/SQLRF/statements_5008.htm" />
    <Statement Name="CREATE DISKGROUP" Url="http://docs.oracle.com/database/121/SQLRF/statements_5009.htm" />
    <Statement Name="CREATE EDITION" Url="http://docs.oracle.com/database/121/SQLRF/statements_5010.htm" />
    <Statement Name="CREATE FLASHBACK ARCHIVE" Url="http://docs.oracle.com/database/121/SQLRF/statements_5011.htm" />
    <Statement Name="CREATE FUNCTION" Url="http://docs.oracle.com/database/121/SQLRF/statements_5012.htm" />
    <Statement Name="CREATE INDEX" Url="http://docs.oracle.com/database/121/SQLRF/statements_5013.htm" />
    <Statement Name="CREATE INDEXTYPE" Url="http://docs.oracle.com/database/121/SQLRF/statements_5014.htm" />
    <Statement Name="CREATE JAVA" Url="http://docs.oracle.com/database/121/SQLRF/statements_5015.htm" />
    <Statement Name="CREATE LIBRARY" Url="http://docs.oracle.com/database/121/SQLRF/statements_6001.htm" />
    <Statement Name="CREATE MATERIALIZED VIEW" Url="http://docs.oracle.com/database/121/SQLRF/statements_6002.htm" />
    <Statement Name="CREATE MATERIALIZED VIEW LOG" Url="http://docs.oracle.com/database/121/SQLRF/statements_6003.htm" />
    <Statement Name="CREATE MATERIALIZED ZONEMAP" Url="http://docs.oracle.com/database/121/SQLRF/statements_6004.htm" />
    <Statement Name="CREATE OPERATOR" Url="http://docs.oracle.com/database/121/SQLRF/statements_6005.htm" />
    <Statement Name="CREATE OUTLINE" Url="http://docs.oracle.com/database/121/SQLRF/statements_6006.htm" />
    <Statement Name="CREATE PACKAGE" Url="http://docs.oracle.com/database/121/SQLRF/statements_6007.htm" />
    <Statement Name="CREATE PACKAGE BODY" Url="http://docs.oracle.com/database/121/SQLRF/statements_6008.htm" />
    <Statement Name="CREATE PFILE" Url="http://docs.oracle.com/database/121/SQLRF/statements_6009.htm" />
    <Statement Name="CREATE PLUGGABLE DATABASE" Url="http://docs.oracle.com/database/121/SQLRF/statements_6010.htm" />
    <Statement Name="CREATE PROCEDURE" Url="http://docs.oracle.com/database/121/SQLRF/statements_6011.htm" />
    <Statement Name="CREATE PROFILE" Url="http://docs.oracle.com/database/121/SQLRF/statements_6012.htm" />
    <Statement Name="CREATE RESTORE POINT" Url="http://docs.oracle.com/database/121/SQLRF/statements_6013.htm" />
    <Statement Name="CREATE ROLE" Url="http://docs.oracle.com/database/121/SQLRF/statements_6014.htm" />
    <Statement Name="CREATE ROLLBACK SEGMENT" Url="http://docs.oracle.com/database/121/SQLRF/statements_6015.htm" />
    <Statement Name="CREATE SEQUENCE" Url="http://docs.oracle.com/database/121/SQLRF/statements_6017.htm" />
    <Statement Name="CREATE SCHEMA" Url="http://docs.oracle.com/database/121/SQLRF/statements_6016.htm" />
    <Statement Name="CREATE SPFILE" Url="http://docs.oracle.com/database/121/SQLRF/statements_6018.htm" />
    <Statement Name="CREATE SYNONYM" Url="http://docs.oracle.com/database/121/SQLRF/statements_7001.htm" />
    <Statement Name="CREATE TABLE" Url="http://docs.oracle.com/database/121/SQLRF/statements_7002.htm" />
    <Statement Name="CREATE TABLESPACE" Url="http://docs.oracle.com/database/121/SQLRF/statements_7003.htm" />
    <Statement Name="CREATE TRIGGER" Url="http://docs.oracle.com/database/121/SQLRF/statements_7004.htm" />
    <Statement Name="CREATE TYPE" Url="http://docs.oracle.com/database/121/SQLRF/statements_8001.htm" />
    <Statement Name="CREATE TYPE BODY" Url="http://docs.oracle.com/database/121/SQLRF/statements_8002.htm" />
    <Statement Name="CREATE USER" Url="http://docs.oracle.com/database/121/SQLRF/statements_8003.htm" />
    <Statement Name="CREATE VIEW" Url="http://docs.oracle.com/database/121/SQLRF/statements_8004.htm" />
    <Statement Name="DELETE" Url="http://docs.oracle.com/database/121/SQLRF/statements_8005.htm" />
    <Statement Name="DISASSOCIATE STATISTICS" Url="http://docs.oracle.com/database/121/SQLRF/statements_8006.htm" />
    <Statement Name="DROP AUDIT POLICY" Url="http://docs.oracle.com/database/121/SQLRF/statements_8007.htm" />
    <Statement Name="DROP CLUSTER" Url="http://docs.oracle.com/database/121/SQLRF/statements_8008.htm" />
    <Statement Name="DROP CONTEXT" Url="http://docs.oracle.com/database/121/SQLRF/statements_8009.htm" />
    <Statement Name="DROP DATABASE" Url="http://docs.oracle.com/database/121/SQLRF/statements_8010.htm" />
    <Statement Name="DROP DATABASE LINK" Url="http://docs.oracle.com/database/121/SQLRF/statements_8011.htm" />
    <Statement Name="DROP DIMENSION" Url="http://docs.oracle.com/database/121/SQLRF/statements_8012.htm" />
    <Statement Name="DROP DIRECTORY" Url="http://docs.oracle.com/database/121/SQLRF/statements_8013.htm" />
    <Statement Name="DROP DISKGROUP" Url="http://docs.oracle.com/database/121/SQLRF/statements_8014.htm" />
    <Statement Name="DROP EDITION" Url="http://docs.oracle.com/database/121/SQLRF/statements_8015.htm" />
    <Statement Name="DROP FLASHBACK ARCHIVE" Url="http://docs.oracle.com/database/121/SQLRF/statements_8016.htm" />
    <Statement Name="DROP FUNCTION" Url="http://docs.oracle.com/database/121/SQLRF/statements_8017.htm" />
    <Statement Name="DROP INDEX" Url="http://docs.oracle.com/database/121/SQLRF/statements_8018.htm" />
    <Statement Name="DROP INDEXTYPE" Url="http://docs.oracle.com/database/121/SQLRF/statements_8019.htm" />
    <Statement Name="DROP JAVA" Url="http://docs.oracle.com/database/121/SQLRF/statements_8020.htm" />
    <Statement Name="DROP LIBRARY" Url="http://docs.oracle.com/database/121/SQLRF/statements_8021.htm" />
    <Statement Name="DROP MATERIALIZED VIEW" Url="http://docs.oracle.com/database/121/SQLRF/statements_8022.htm" />
    <Statement Name="DROP MATERIALIZED VIEW LOG" Url="http://docs.oracle.com/database/121/SQLRF/statements_8023.htm" />
    <Statement Name="DROP MATERIALIZED ZONEMAP" Url="http://docs.oracle.com/database/121/SQLRF/statements_8024.htm" />
    <Statement Name="DROP OPERATOR" Url="http://docs.oracle.com/database/121/SQLRF/statements_8025.htm" />
    <Statement Name="DROP OUTLINE" Url="http://docs.oracle.com/database/121/SQLRF/statements_8026.htm" />
    <Statement Name="DROP PACKAGE" Url="http://docs.oracle.com/database/121/SQLRF/statements_8027.htm" />
    <Statement Name="DROP PLUGGABLE DATABASE" Url="http://docs.oracle.com/database/121/SQLRF/statements_8028.htm" />
    <Statement Name="DROP PROCEDURE" Url="http://docs.oracle.com/database/121/SQLRF/statements_8029.htm" />
    <Statement Name="DROP PROFILE" Url="http://docs.oracle.com/database/121/SQLRF/statements_8030.htm" />
    <Statement Name="DROP RESTORE POINT" Url="http://docs.oracle.com/database/121/SQLRF/statements_8031.htm" />
    <Statement Name="DROP ROLE" Url="http://docs.oracle.com/database/121/SQLRF/statements_8032.htm" />
    <Statement Name="DROP ROLLBACK SEGMENT" Url="http://docs.oracle.com/database/121/SQLRF/statements_8033.htm" />
    <Statement Name="DROP SEQUENCE" Url="http://docs.oracle.com/database/121/SQLRF/statements_9001.htm" />
    <Statement Name="DROP SYNONYM" Url="http://docs.oracle.com/database/121/SQLRF/statements_9002.htm" />
    <Statement Name="DROP TABLE" Url="http://docs.oracle.com/database/121/SQLRF/statements_9003.htm" />
    <Statement Name="DROP TABLESPACE" Url="http://docs.oracle.com/database/121/SQLRF/statements_9004.htm" />
    <Statement Name="DROP TRIGGER" Url="http://docs.oracle.com/database/121/SQLRF/statements_9005.htm" />
    <Statement Name="DROP TYPE" Url="http://docs.oracle.com/database/121/SQLRF/statements_9006.htm" />
    <Statement Name="DROP TYPE BODY" Url="http://docs.oracle.com/database/121/SQLRF/statements_9007.htm" />
    <Statement Name="DROP USER" Url="http://docs.oracle.com/database/121/SQLRF/statements_9008.htm" />
    <Statement Name="DROP VIEW" Url="http://docs.oracle.com/database/121/SQLRF/statements_9009.htm" />
    <Statement Name="EXPLAIN PLAN" Url="http://docs.oracle.com/database/121/SQLRF/statements_9010.htm" />
    <Statement Name="FLASHBACK DATABASE" Url="http://docs.oracle.com/database/121/SQLRF/statements_9011.htm" />
    <Statement Name="FLASHBACK TABLE" Url="http://docs.oracle.com/database/121/SQLRF/statements_9012.htm" />
    <Statement Name="GRANT" Url="http://docs.oracle.com/database/121/SQLRF/statements_9013.htm" />
    <Statement Name="INSERT" Url="http://docs.oracle.com/database/121/SQLRF/statements_9014.htm" />
    <Statement Name="LOCK TABLE" Url="http://docs.oracle.com/database/121/SQLRF/statements_9015.htm" />
    <Statement Name="MERGE" Url="http://docs.oracle.com/database/121/SQLRF/statements_9016.htm" />
    <Statement Name="NOAUDIT" Url="http://docs.oracle.com/database/121/SQLRF/statements_9017.htm" />
    <Statement Name="NOAUDIT" Url="http://docs.oracle.com/database/121/SQLRF/statements_9018.htm" />
    <Statement Name="PURGE" Url="http://docs.oracle.com/database/121/SQLRF/statements_9019.htm" />
    <Statement Name="RENAME" Url="http://docs.oracle.com/database/121/SQLRF/statements_9020.htm" />
    <Statement Name="REVOKE" Url="http://docs.oracle.com/database/121/SQLRF/statements_9021.htm" />
    <Statement Name="ROLLBACK" Url="http://docs.oracle.com/database/121/SQLRF/statements_9022.htm" />
    <Statement Name="SAVEPOINT" Url="http://docs.oracle.com/database/121/SQLRF/statements_10001.htm" />
    <Statement Name="SELECT" Url="http://docs.oracle.com/database/121/SQLRF/statements_10002.htm" />
    <Statement Name="SET CONSTRAINT" Url="http://docs.oracle.com/database/121/SQLRF/statements_10003.htm" />
    <Statement Name="SET CONSTRAINTS" Url="http://docs.oracle.com/database/121/SQLRF/statements_10003.htm" />
    <Statement Name="SET ROLE" Url="http://docs.oracle.com/database/121/SQLRF/statements_10004.htm" />
    <Statement Name="SET TRANSACTION" Url="http://docs.oracle.com/database/121/SQLRF/statements_10005.htm" />
    <Statement Name="TRUNCATE CLUSTER" Url="http://docs.oracle.com/database/121/SQLRF/statements_10006.htm" />
    <Statement Name="TRUNCATE TABLE" Url="http://docs.oracle.com/database/121/SQLRF/statements_10007.htm" />
    <Statement Name="UPDATE" Url="http://docs.oracle.com/database/121/SQLRF/statements_10008.htm" />
  </Statements>
  <Packages>
    <Package Name="DBMS_ADDM" Url="http://docs.oracle.com/database/121/ARPLS/d_addm.htm">
      <Description>The DBMS_ADDM package facilitates the use of Advisor functionality regarding the Automatic Database Diagnostic Monitor.</Description>
      <SubPrograms>
        <SubProgram Name="ANALYZE_DB" ElementId="#CACECAHI">
          <Description>Creates an ADDM task for analyzing in database analysis mode and executes it</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the task to be created</Parameter>
            <Parameter Name="BEGIN_SNAPSHOT">Number of the snapshot that starts the analysis period</Parameter>
            <Parameter Name="END_SNAPSHOT">Number of the snapshot that ends the analysis period</Parameter>
            <Parameter Name="DB_ID">Database ID for the database you to analyze. By default, this is the database currently connected</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ANALYZE_INST" ElementId="#CACHCIHE">
          <Description>Creates an ADDM task for analyzing in instance analysis mode and executes it.</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the task to be created</Parameter>
            <Parameter Name="BEGIN_SNAPSHOT">Number of the snapshot that starts the analysis period</Parameter>
            <Parameter Name="END_SNAPSHOT">Number of the snapshot that ends the analysis period</Parameter>
            <Parameter Name="INSTANCE_NUMBER">Number of the instance to analyze. By default it is the instance currently connected</Parameter>
            <Parameter Name="DB_ID">Database ID for the database you to analyze. By default, this is the database currently connected</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ANALYZE_PARTIAL" ElementId="#CACEDJDH">
          <Description>Creates an ADDM task for analyzing a subset of instances in partial analysis mode and executes it</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the task to be created</Parameter>
            <Parameter Name="INSTANCE_NUMBER">Comma separated list of instance numbers to analyze</Parameter>
            <Parameter Name="BEGIN_SNAPSHOT">Number of the snapshot that starts the analysis period</Parameter>
            <Parameter Name="END_SNAPSHOT">Number of the snapshot that ends the analysis period</Parameter>
            <Parameter Name="DB_ID">Database ID for the database you to analyze. By default, this is the database currently connected</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="COMPARE_CAPTURE_REPLAY_REPORT" ElementId="#CIABGAAI">
          <Description>Produces a Compare Period ADDM report comparing the performance of a capture to a replay</Description>
          <Parameters>
            <Parameter Name="REPLAY_ID">Replay ID to use as the base period. The base period is the baseline period to compare in order to determine improvement or regression.</Parameter>
            <Parameter Name="REPORT_TYPE">'HTML' (the default) for an HTML active report, 'XML' for an XML report</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="COMPARE_DATABASES" ElementId="#CIAJABBF">
          <Description>Produces a Compare Period ADDM report for a database-wide performance comparison</Description>
          <Parameters>
            <Parameter Name="BASE_DBID">Database id (DBID) of the base period. The base period is the baseline period that we compare to in order to determine improvement or regression.</Parameter>
            <Parameter Name="BASE_BEGIN_SNAP_ID">Begin AWR snapshot ID of the base period.</Parameter>
            <Parameter Name="BASE_END_SNAP_ID">End AWR snapshot ID of the base period.</Parameter>
            <Parameter Name="COMP_DBID">Database id (DBID) of the comparison period. The comparison period is the period we compare to the base period.</Parameter>
            <Parameter Name="COMP_BEGIN_SNAP_ID">Begin AWR snapshot ID of the comparison period</Parameter>
            <Parameter Name="COMP_END_SNAP_ID">End AWR snapshot ID of the comparison period</Parameter>
            <Parameter Name="REPORT_TYPE">'HTML' (the default) for an HTML active report, 'XML' for an XML report</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="COMPARE_INSTANCES" ElementId="#CIAIBHCB">
          <Description>Produces a Compare Period ADDM report for an instance-level performance comparison</Description>
          <Parameters>
            <Parameter Name="BASE_DBID">Database id (DBID) of the base period. The base period is the baseline period that we compare to in order to determine improvement or regression.</Parameter>
            <Parameter Name="BASE_INSTANCE_ID">Instance number of the database instance to include from the base period</Parameter>
            <Parameter Name="BASE_BEGIN_SNAP_ID">Begin AWR snapshot ID of the base period.</Parameter>
            <Parameter Name="BASE_END_SNAP_ID">End AWR snapshot ID of the base period.</Parameter>
            <Parameter Name="COMP_DBID">Database id (DBID) of the comparison period. The comparison period is the period we compare to the base period.</Parameter>
            <Parameter Name="COMP_INSTANCE_ID">Instance number of the database instance to include from the comparison period</Parameter>
            <Parameter Name="COMP_BEGIN_SNAP_ID">Begin AWR snapshot ID of the comparison period</Parameter>
            <Parameter Name="COMP_END_SNAP_ID">End AWR snapshot ID of the comparison period</Parameter>
            <Parameter Name="REPORT_TYPE">'HTML' (the default) for an HTML active report, 'XML' for an XML report</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="COMPARE_REPLAY_REPLAY_REPORT" ElementId="#CIADBCJD">
          <Description>Produces a Compare Period ADDM report comparing the performance of a replay to another replay</Description>
          <Parameters>
            <Parameter Name="REPLAY_ID1">Replay ID to use as the base period. The base period is the baseline period to compare in order to determine improvement or regression.</Parameter>
            <Parameter Name="REPLAY_ID2">Replay ID to use as the comparison period. The comparison period is the period to compare to the base period in order to determine improvement or regression.</Parameter>
            <Parameter Name="REPORT_TYPE">'HTML' (the default) for an HTML active report, 'XML' for an XML report</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE" ElementId="#CACIBFDB">
          <Description>Deletes an already created ADDM task (of any kind)</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the task to be deleted</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_FINDING_DIRECTIVE" ElementId="#CACHFIJC">
          <Description>Deletes a finding directive</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the task this directive applies to. If the value is NULL, it is a system directive.</Parameter>
            <Parameter Name="DIR_NAME">Name of the directive. All directives must be given unique names.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_PARAMETER_DIRECTIVE" ElementId="#CACBBIJJ">
          <Description>Deletes a parameter directive</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the task this directive applies to. If the value is NULL, it is a system directive.</Parameter>
            <Parameter Name="DIR_NAME">Name of the directive. All directives must be given unique names.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_SEGMENT_DIRECTIVE" ElementId="#CACGDEED">
          <Description>Deletes a segment directive</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the task this directive applies to. If the value is NULL, it is a system directive.</Parameter>
            <Parameter Name="DIR_NAME">Name of the directive. All directives must be given unique names.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_SQL_DIRECTIVE" ElementId="#CACGGBBF">
          <Description>Deletes a SQL directive</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the task this directive applies to. If the value is NULL, it is a system directive.</Parameter>
            <Parameter Name="DIR_NAME">Name of the directive. All directives must be given unique names.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_ASH_QUERY" ElementId="#CIAGBAFE">
          <Description>Returns a string containing the SQL text of an ASH query identifying the rows in ASH with impact for the finding</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the task</Parameter>
            <Parameter Name="FINDING">ID of the finding within the task</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_REPORT" ElementId="#CACJDCBJ">
          <Description>Retrieves the default text report of an executed ADDM task</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the task</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="INSERT_FINDING_DIRECTIVE" ElementId="#CACBDJAI">
          <Description>Creates a directive to limit reporting of a specific finding type.</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the task this directive applies to. If the value is NULL, it applies to all subsequently created ADDM Tasks.</Parameter>
            <Parameter Name="DIR_NAME">Name of the directive. All directives must be given unique names.</Parameter>
            <Parameter Name="FINDING_NAME">Name of an ADDM finding to which this directive applies. All valid findings names appear in the NAME column of view DBA_ADVISOR_FINDING_NAMES.</Parameter>
            <Parameter Name="MIN_ACTIVE_SESSIONS">Minimal number of active sessions for the finding. If a finding has less than this number, it is filtered from the ADDM result.</Parameter>
            <Parameter Name="MIN_PERC_IMPACT">Minimal number for the "percent impact" of the finding relative to total database time in the analysis period. If the finding's impact is less than this number, it is filtered from the ADDM result.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="INSERT_PARAMETER_DIRECTIVE" ElementId="#CACIFJED">
          <Description>Creates a directive to prevent ADDM from creating actions to alter the value of a specific system parameter</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the task this directive applies to. If the value is NULL, it applies to all subsequently created ADDM Tasks.</Parameter>
            <Parameter Name="DIR_NAME">Name of the directive. All directives must be given unique names.</Parameter>
            <Parameter Name="PARAMETER_NAME">Specifies the parameter to use. Valid parameter names appear in V$PARAMETER.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="INSERT_SEGMENT_DIRECTIVE" ElementId="#CACECFCJ">
          <Description>Creates a directive to prevent ADDM from creating actions to "run Segment Advisor" for specific segments</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the task this directive applies to. If the value is NULL, it applies to all subsequently created ADDM Tasks.</Parameter>
            <Parameter Name="DIR_NAME">Name of the directive. All directives must be given unique names.</Parameter>
            <Parameter Name="OWNER_NAME">Specifies the owner of the segment/s to be filtered. A wildcard is allowed in the same syntax used for "like" constraints.</Parameter>
            <Parameter Name="OBJECT_NAME">Name of the main object to be filtered. Again, wildcards are allowed. The default value of NULL is equivalent to a value of '%'.</Parameter>
            <Parameter Name="SUB_OBJECT_NAME">Name of the part of the main object to be filtered. This could be a partition name, or even sub partitions (separated by a '.'). Again, wildcards are allowed. The default value of NULL is equivalent to a value of '%'.</Parameter>
            <Parameter Name="OBJECT_NUMBER">Object number of the SEGMENT that this directive is to filter, found in views DBA_OBJECTS or DBA_SEGMENTS</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="INSERT_SQL_DIRECTIVE" ElementId="#CACGEACB">
          <Description>Creates a directive to limit reporting of actions on specific SQL</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the task this directive applies to. If the value is NULL, it applies to all subsequently created ADDM Tasks.</Parameter>
            <Parameter Name="DIR_NAME">Name of the directive. All directives must be given unique names.</Parameter>
            <Parameter Name="SQL_ID">Identifies which SQL statement to filter. A valid value contains exactly 13 characters from '0' to '9' and 'a' to 'z'.</Parameter>
            <Parameter Name="MIN_ACTIVE_SESSIONS">Minimal number of active sessions for the SQL. If a SQL action has less than this number, it is filtered from the ADDM result.</Parameter>
            <Parameter Name="MIN_RESPONSE_TIME">Minimal value for response time of the SQL (in microseconds). If the SQL had lower response time, it is filtered from the ADDM result.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REAL_TIME_ADDM_REPORT" ElementId="#BABFHEEH">
          <Description>Produces a real-time report of ADDM activity</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_ADVANCED_REWRITE" Url="http://docs.oracle.com/database/121/ARPLS/d_advrwr.htm">
      <Description>DBMS_ADVANCED_REWRITE contains interfaces for advanced query rewrite users. Using this package, you can create, drop, and maintain functional equivalence declarations for query rewrite.</Description>
      <SubPrograms>
        <SubProgram Name="ALTER_REWRITE_EQUIVALENCE" ElementId="#i999545">
          <Description>Changes the mode of the rewrite equivalence declaration to the mode you specify</Description>
          <Parameters>
            <Parameter Name="NAME">A name for the equivalence declaration to alter. The name can be of the form owner.name, where owner complies with the rules for a schema name, and name compiles with the rules for a table name. Alternatively, a simple name that complies with the rules for a table name can be specified. In this case, the rewrite equivalence is altered in the current schema. The invoker must have the appropriate alter materialized view privileges to alter an equivalence declaration outside their own schema.</Parameter>
            <Parameter Name="REWRITE_MODE">The following modes are supported, in increasing order of power:disabled: Query rewrite does not use the equivalence declaration. Use this mode to temporarily disable use of the rewrite equivalence declaration.text_match: Query rewrite uses the equivalence declaration only in its text match modes. This mode is useful for simple transformations.general: Query rewrite uses the equivalence declaration in all of its transformation modes against the incoming request queries. However, query rewrite makes no attempt to rewrite the specified destination_query.recursive: Query rewrite uses the equivalence declaration in all of its transformation modes against the incoming request queries. Moreover, query rewrite further attempts to rewrite the specified destination_query for further performance enhancements whenever it uses the equivalence declaration.Oracle recommends you use the least powerful mode that is sufficient to solve your performance problem.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BUILD_SAFE_REWRITE_EQUIVALENCE" ElementId="#CFAGJHJB">
          <Description>Enables the rewrite of top-level materialized views using submaterialized views. Oracle Corporation does not recommend you directly use this procedure</Description>
        </SubProgram>
        <SubProgram Name="DECLARE_REWRITE_EQUIVALENCE" ElementId="#CFAJDGBJ">
          <Description>Creates a declaration indicating that source_stmt is functionally equivalent to destination_stmt for as long as the equivalence declaration remains enabled, and that destination_stmt is more favorable in terms of performance</Description>
          <Parameters>
            <Parameter Name="NAME">A name for the equivalence declaration. The name can be of the form owner.name, where owner complies with the rules for a schema name, and name compiles with the rules for a table name.Alternatively, a simple name that complies with the rules for a table name can be specified. In this case, the rewrite equivalence is created in the current schema. The invoker must have the appropriate CREATE MATERIALIZED VIEW privileges to alter an equivalence declaration.</Parameter>
            <Parameter Name="SOURCE_STMT">A sub-SELECT expression in either VARCHAR2 or CLOB format. This is the query statement that is the target of optimization.</Parameter>
            <Parameter Name="DESTINATION_STMT">A sub-SELECT expression in either VARCHAR2 or CLOB format.</Parameter>
            <Parameter Name="VALIDATE">A Boolean indicating whether to validate that the specified source_stmt is functionally equivalent to the specified destination_stmt. If validate is specified as TRUE, DECLARE_REWRITE_EQUIVALENCE evaluates the two sub-SELECTs and compares their results. If the results are not the same, DECLARE_REWRITE_EQUIVALENCE does not create the rewrite equivalence and returns an error condition. If FALSE, DECLARE_REWRITE_EQUIVALENCE does not validate the equivalence.</Parameter>
            <Parameter Name="REWRITE_MODE">The following modes are supported, in increasing order of power:disabled: Query rewrite does not use the equivalence declaration. Use this mode to temporarily disable use of the rewrite equivalence declaration.text_match: Query rewrite uses the equivalence declaration only in its text match modes. This mode is useful for simple transformations.general: Query rewrite uses the equivalence declaration in all of its transformation modes against the incoming request queries. However, query rewrite makes no attempt to rewrite the specified destination_query.recursive: Query rewrite uses the equivalence declaration in all of its transformation modes against the incoming request queries. Moreover, query rewrite further attempts to rewrite the specified destination_query for further performance enhancements whenever it uses the equivalence declaration.Oracle recommends you use the least powerful mode that is sufficient to solve your performance problem.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_REWRITE_EQUIVALENCE" ElementId="#i998647">
          <Description>Drops the specified rewrite equivalence declaration</Description>
          <Parameters>
            <Parameter Name="NAME">A name for the equivalence declaration to drop. The name can be of the form owner.name, where owner complies with the rules for a schema name, and name compiles with the rules for a table name. Alternatively, a simple name that complies with the rules for a table name can be specified. In this case, the rewrite equivalence is dropped in the current schema. The invoker must have the appropriate drop materialized view privilege to drop an equivalence declaration outside their own schema.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="VALIDATE_REWRITE_EQUIVALENCE" ElementId="#i998649">
          <Description>Validates the specified rewrite equivalence declaration using the same validation method as described with the validate parameter</Description>
          <Parameters>
            <Parameter Name="NAME">A name for the equivalence declaration to validate. The name can be of the form owner.name, where owner complies with the rules for a schema name, and name compiles with the rules for a table name. Alternatively, a simple name that complies with the rules for a table name can be specified. In this case, the rewrite equivalence is validated in the current schema. The invoker must have sufficient privileges to execute both the source_stmt and destination_stmt of the specified equivalence declaration.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_ADVISOR" Url="http://docs.oracle.com/database/121/ARPLS/d_advis.htm">
      <Description>DBMS_ADVISOR is part of the server manageability suite of advisors, a set of expert systems that identifies and helps resolve performance problems relating to database server components.</Description>
      <SubPrograms>
        <SubProgram Name="ADD_SQLWKLD_REF" ElementId="#i1010471">
          <Description>SQL Access Advisor</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">The SQL Access Advisor task name that uniquely identifies an existing task.</Parameter>
            <Parameter Name="WORKLOAD_NAME">The name of the workload object to be linked. Once a object has been linked to a task, it becomes read-only and cannot be deleted. There is no limit to the number of links to workload objects. To remove the link to the workload object, use the procedure DELETE_REFERENCE.</Parameter>
            <Parameter Name="IS_STS">Indicates the type of workload source. Possible values are:0 - SQL workload object1 - SQL tuning set</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADD_SQLWKLD_STATEMENT" ElementId="#i1010507">
          <Description>SQL Access Advisor</Description>
          <Parameters>
            <Parameter Name="WORKLOAD_NAME">The workload name that uniquely identifies an existing workload.</Parameter>
            <Parameter Name="MODULE">An optional business application module that will be associated with the SQL statement.</Parameter>
            <Parameter Name="ACTION">An optional application action that will be associated with the SQL statement.</Parameter>
            <Parameter Name="CPU_TIME">The total CPU time in seconds that is consumed by the SQL statement.</Parameter>
            <Parameter Name="ELAPSED_TIME">The total elapsed time in seconds that is consumed by the SQL statement.</Parameter>
            <Parameter Name="DISK_READS">The total disk-read operations that are consumed by the SQL statement.</Parameter>
            <Parameter Name="BUFFER_GETS">The total buffer-get operations that are consumed by the SQL statement.</Parameter>
            <Parameter Name="ROWS_PROCESSED">The average number of rows processed by the SQL statement.</Parameter>
            <Parameter Name="OPTIMIZER_COST">The optimizer's calculated cost value.</Parameter>
            <Parameter Name="EXECUTIONS">The total execution count by the SQL statement. This value should be greater than zero.</Parameter>
            <Parameter Name="PRIORITY">The relative priority of the SQL statement. The value must be one of the following: 1-HIGH, 2-MEDIUM, or 3-LOW.</Parameter>
            <Parameter Name="LAST_EXECUTION_DATE">The date and time at which the SQL statement last executed. If the value is NULL, then the current date and time will be used.</Parameter>
            <Parameter Name="STAT_PERIOD">Time interval in seconds from which statement statistics were calculated.</Parameter>
            <Parameter Name="USERNAME">The Oracle user name that executed the SQL statement. Because a user name is an Oracle identifier, the username value must be entered exactly as it is stored in the server. For example, if the user SCOTT is the executing user, then you must provide the user identifier SCOTT in all uppercase letters. It will not recognize the user scott as a match for SCOTT.</Parameter>
            <Parameter Name="SQL_TEXT">The complete SQL statement. To increase the quality of a recommendation, the SQL statement should not contain bind variables.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADD_STS_REF" ElementId="#CIHHGIAJ">
          <Description>SQL Access Advisor</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">The SQL Access Advisor task name that uniquely identifies an existing task.</Parameter>
            <Parameter Name="STS_OWNER">The owner of the SQL tuning set. The value of this parameter may be NULL, in which case the advisor assumes the SQL tuning set to be owned by the currently logged-in user.</Parameter>
            <Parameter Name="WORKLOAD_NAME">The name of the workload to be linked. A workload consists of one or more SQL statements, plus statistics and attributes that fully describe each statement. The database stores a workload as a SQL tuning set.After a workload has been linked to a task, it becomes read-only and cannot be deleted.There is no limit to the number of links to workloads.To remove the link to the workload, use the procedure DBMS_ADVISOR.DELETE_STS_REF.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CANCEL_TASK" ElementId="#i1001164">
          <Description>Segment Advisor, SQL Access Advisor</Description>
        </SubProgram>
        <SubProgram Name="COPY_SQLWKLD_TO_STS" ElementId="#CIHHBECG">
          <Description>SQL Access Advisor</Description>
        </SubProgram>
        <SubProgram Name="CREATE_FILE" ElementId="#i1010465">
          <Description>SQL Access Advisor</Description>
          <Parameters>
            <Parameter Name="BUFFER">A CLOB buffer containing report or script information.</Parameter>
            <Parameter Name="LOCATION">Specifies the directory that will contain the new file. You must use the directory alias as defined by the CREATE DIRECTORY statement. The Advisor will translate the alias into the actual directory location.</Parameter>
            <Parameter Name="FILENAME">Specifies the output file to receive the script commands. The filename can only contain the name and an optional file type of the form filename.filetype.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_OBJECT" ElementId="#i1017650">
          <Description>Segment Advisor</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">A valid Advisor task name that uniquely identifies an existing task.</Parameter>
            <Parameter Name="OBJECT_TYPE">Specifies the external object type.</Parameter>
            <Parameter Name="ATTR1">Advisor-specific data.</Parameter>
            <Parameter Name="ATTR2">Advisor-specific data.</Parameter>
            <Parameter Name="ATTR3">Advisor-specific data.</Parameter>
            <Parameter Name="ATTR4">Advisor-specific data.</Parameter>
            <Parameter Name="ATTR5">Advisor-specific data.</Parameter>
            <Parameter Name="OBJECT_ID">The advisor-assigned object identifier.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_SQLWKLD" ElementId="#i1010608">
          <Description>SQL Access Advisor</Description>
          <Parameters>
            <Parameter Name="WORKLOAD_NAME">A name that uniquely identifies the created workload. If not specified, the system will generate a unique name. Names can be up to 30 characters long.</Parameter>
            <Parameter Name="DESCRIPTION">Specifies an optional workload description. Descriptions can be up to 256 characters.</Parameter>
            <Parameter Name="TEMPLATE">An optional SQL Workload name of an existing workload data object or data object template.</Parameter>
            <Parameter Name="IS_TEMPLATE">An optional value that enables you to set the newly created workload as a template. Valid values are TRUE and FALSE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_TASK" ElementId="#i1001232">
          <Description>Segment Advisor, SQL Access Advisor</Description>
          <Parameters>
            <Parameter Name="ADVISOR_NAME">Specifies the unique advisor name as defined in the view DBA_ADVISOR_DEFINITIONS.</Parameter>
            <Parameter Name="TASK_ID">A number that uniquely identifies the created task. The number is generated by the procedure and returned to the user.</Parameter>
            <Parameter Name="TASK_NAME">Specifies a new task name. Names must be unique among all tasks for the user.When using the second form of the CREATE_TASK syntax listed above (with OUT), a unique name can be generated. Names can be up to 30 characters long.</Parameter>
            <Parameter Name="TASK_DESC">Specifies an optional task description. Descriptions can be up to 256 characters in length.</Parameter>
            <Parameter Name="TEMPLATE">An optional task name of an existing task or task template. To specify built-in SQL Access Advisor templates, use the template name as described earlier.</Parameter>
            <Parameter Name="IS_TEMPLATE">An optional value that allows the user to set the newly created task as template. Valid values are: TRUE and FALSE.</Parameter>
            <Parameter Name="HOW_CREATED">An optional value that identifies how the source was created.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_SQLWKLD" ElementId="#i1014034">
          <Description>SQL Access Advisor</Description>
          <Parameters>
            <Parameter Name="WORKLOAD_NAME">The workload object name that uniquely identifies an existing workload. The wildcard % is supported as a WORKLOAD_NAME. The rules of use are identical to the LIKE operator. For example, to delete all tasks for the current user, use the wildcard % as the WORKLOAD_NAME. If a wildcard is provided, the DELETE_SQLWKLD operation will not delete any workloads marked as READ_ONLY or TEMPLATE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_SQLWKLD_REF" ElementId="#i1011747">
          <Description>SQL Access Advisor</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">The SQL Access task name that uniquely identifies an existing task.</Parameter>
            <Parameter Name="WORKLOAD_NAME">The name of the workload object to be unlinked. The wildcard % is supported as a workload_name. The rules of use are identical to the LIKE operator. For example, to remove all links to workload objects, use the wildcard % as the workload_name.</Parameter>
            <Parameter Name="IS_STS">Indicates the type of workload source. Possible values are:0 - SQL workload object1 - SQL tuning set</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_SQLWKLD_STATEMENT" ElementId="#i1010722">
          <Description>SQL Access Advisor</Description>
          <Parameters>
            <Parameter Name="WORKLOAD_NAME">The workload object name that uniquely identifies an existing workload.</Parameter>
            <Parameter Name="SQL_ID">The Advisor-generated identifier number that is assigned to the statement. To specify all workload statements, use the constant ADVISOR_ALL.</Parameter>
            <Parameter Name="SEARCH">Disabled.</Parameter>
            <Parameter Name="DELETED">Returns the number of statements deleted by the searched deleted operation.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_STS_REF" ElementId="#CIHDFCBE">
          <Description>SQL Access Advisor</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">The SQL Access Advisor task name that uniquely identifies an existing task.</Parameter>
            <Parameter Name="STS_OWNER">The owner of the SQL tuning set. The value of this parameter may be NULL, in which case the advisor assumes the SQL tuning set to be owned by the currently logged-in user.</Parameter>
            <Parameter Name="WORKLOAD_NAME">The name of the workload to be unlinked. A workload consists of one or more SQL statements, plus statistics and attributes that fully describe each statement. The database stores a workload as a SQL tuning set.The wildcard % is supported as a workload name. The rules of use are identical to the SQL LIKE operator. For example, to remove all links to SQL tuning set objects, use the wildcard % as the STS_NAME.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_TASK" ElementId="#i1004958">
          <Description>SQL Access Advisor</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">A single Advisor task name that will be deleted from the repository.The wildcard % is supported as a TASK_NAME. The rules of use are identical to the LIKE operator. For example, to delete all tasks for the current user, use the wildcard % as the TASK_NAME.If a wildcard is provided, the DELETE_TASK operation will not delete any tasks marked as READ_ONLY or TEMPLATE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXECUTE_TASK" ElementId="#CIHDFJHD">
          <Description>Segment Advisor, SQL Access Advisor</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">The task name that uniquely identifies an existing task.</Parameter>
            <Parameter Name="EXECUTION_TYPE">The type of action to be performed by the function. If NULL, it will default to the value of the DEFAULT_EXECUTION_TYPE parameter.As an example, the SQL Performance Analyzer accepts the following possible values:EXPLAIN PLAN: Generate an explain plan for a SQL statement. This is similar to an EXPLAIN PLAN command. The resulting plans will be stored in the advisor framework in association with the task.TEST EXECUTE: Test execute the SQL statement and collect its execute plan and statistics. The resulting plans and statistics are stored in the advisor framework.ANALYZE PERFORMANCE: Analyze and compare two versions of SQL performance data. The performance data is generated by test executing a SQL statement or generating its explain plan.</Parameter>
            <Parameter Name="EXECUTION_NAME">A name to qualify and identify an execution. If not specified, it will be generated by the Advisor and returned by function.</Parameter>
            <Parameter Name="EXECUTION_PARAMS">A list of parameters (name, value) for the specified execution. Note that execution parameters are real task parameters, but they affect only the execution they are specified for.As an example, consider the following:</Parameter>
            <Parameter Name="EXECUTION_DESC">A 256-length string describing the execution.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_REC_ATTRIBUTES" ElementId="#i1012416">
          <Description>SQL Access Advisor</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">The task name that uniquely identifies an existing task.</Parameter>
            <Parameter Name="REC_ID">The Advisor-generated identifier number that is assigned to the recommendation.</Parameter>
            <Parameter Name="ACTION_ID">The Advisor-generated action identifier that is assigned to the particular command.</Parameter>
            <Parameter Name="ATTRIBUTE_NAME">Specifies the attribute to change.</Parameter>
            <Parameter Name="VALUE">The buffer to receive the requested attribute value.</Parameter>
            <Parameter Name="OWNER_NAME">Optional owner name of the target task. This permits access to task data not owned by the current user.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_TASK_REPORT" ElementId="#BCFDFJDJ">
          <Description />
          <Parameters>
            <Parameter Name="TASK_NAME">The name of the task from which the script will be created.</Parameter>
            <Parameter Name="TYPE">The only valid value is TEXT.</Parameter>
            <Parameter Name="LEVEL">The possible values are BASIC, TYPICAL, and ALL.</Parameter>
            <Parameter Name="SECTION">Advisor-specific report sections.</Parameter>
            <Parameter Name="OWNER_NAME">Owner of the task. If specified, the system will check to see if the current user has read privileges to the task data.</Parameter>
            <Parameter Name="EXECUTION_NAME">An identifier of a specific execution of the task. It is needed only for advisors that allow their tasks to be executed multiple times.</Parameter>
            <Parameter Name="OBJECT_ID">An identifier of an advisor object that can be targeted by the script.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_TASK_SCRIPT" ElementId="#i1012023">
          <Description>SQL Access Advisor</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">The task name that uniquely identifies an existing task.</Parameter>
            <Parameter Name="TYPE">Specifies the type of script to generate. The possible values are IMPLEMENTATION and UNDO.</Parameter>
            <Parameter Name="REC_ID">An optional recommendation identifier number that can be used to extract a subset of the implementation script.A zero or the value DBMS_ADVISOR.ADVISOR_ALL indicates all accepted recommendations would be included. The default is to include all accepted recommendations for the task.</Parameter>
            <Parameter Name="ACT_ID">Optional action identifier number that can be used to extract a single action as a DDL command.A zero or the value DBMS_ADVISOR.ADVISOR_ALL indicates all actions for the recommendation would be included. The default is to include all actions for a recommendation.</Parameter>
            <Parameter Name="OWNER_NAME">An optional task owner name.</Parameter>
            <Parameter Name="EXECUTION_NAME">An identifier of a specific execution of the task. It is needed only for advisors that allow their tasks to be executed multiple times.</Parameter>
            <Parameter Name="OBJECT_ID">An identifier of an advisor object that can be targeted by the script.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IMPLEMENT_TASK" ElementId="#BCFFIEAE">
          <Description>SQL Access Advisor</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">The name of the task.</Parameter>
            <Parameter Name="REC_ID">An optional recommendation ID.</Parameter>
            <Parameter Name="EXIT_ON_ERROR">An optional boolean to exit on the first error.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IMPORT_SQLWKLD_SCHEMA" ElementId="#i1012244">
          <Description>SQL Access Advisor</Description>
          <Parameters>
            <Parameter Name="WORKLOAD_NAME">The workload object name that uniquely identifies an existing workload.</Parameter>
            <Parameter Name="IMPORT_MODE">Specifies the action to be taken when storing the workload. Possible values are:APPEND Indicates that the collected workload will be added to any existing workload in the task.NEW Indicates that the collected workload will be the exclusive workload for the task. If an existing workload is found, an exception will be thrown.REPLACE Indicates the collected workload will be the exclusive workload for the task. If an existing workload is found, it will be deleted prior to saving the new workload.The default value is NEW.</Parameter>
            <Parameter Name="PRIORITY">Specifies the application priority for each statement that is saved in the workload object. The value must be one of the following: 1-HIGH, 2-MEDIUM, or 3-LOW.</Parameter>
            <Parameter Name="FAILED_ROWS">Returns the number or rows that were not saved due to syntax or validation errors</Parameter>
            <Parameter Name="SAVED_ROWS">Returns the number of rows actually saved in the repository.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IMPORT_SQLWKLD_SQLCACHE" ElementId="#i1010878">
          <Description>SQL Access Advisor</Description>
          <Parameters>
            <Parameter Name="WORKLOAD_NAME">The workload object name that uniquely identifies an existing workload.</Parameter>
            <Parameter Name="IMPORT_MODE">Specifies the action to be taken when storing the workload. Possible values are:APPEND Indicates that the collected workload will be added to any existing workload in the task.NEW Indicates that the collected workload will be the exclusive workload for the task. If an existing workload is found, an exception will be thrown.REPLACE Indicates the collected workload will be the exclusive workload for the task. If an existing workload is found, it will be deleted prior to saving the new workload.The default value is NEW.</Parameter>
            <Parameter Name="PRIORITY">Specifies the application priority for each statement that is saved in the workload object. The value must be one of the following 1-HIGH, 2-MEDIUM, or 3-LOW.</Parameter>
            <Parameter Name="SAVED_ROWS">Returns the number of rows saved as output parameters.</Parameter>
            <Parameter Name="FAILED_ROWS">Returns the number of rows that were not saved due to syntax or validation errors.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IMPORT_SQLWKLD_STS" ElementId="#i1012305">
          <Description>SQL Access Advisor</Description>
          <Parameters>
            <Parameter Name="WORKLOAD_NAME">The workload object name that uniquely identifies an existing workload.</Parameter>
            <Parameter Name="STS_OWNER">The optional owner of the SQL tuning set.</Parameter>
            <Parameter Name="STS_NAME">The name of an existing SQL tuning set workload from which the data will be imported. If the sts_owner value is not provided, the owner will default to the current user.</Parameter>
            <Parameter Name="IMPORT_MODE">Specifies the action to be taken when storing the workload. Possible values are:APPEND Indicates that the collected workload will be added to any existing workload in the task.NEW Indicates that the collected workload will be the exclusive workload for the task. If an existing workload is found, an exception will be thrown.REPLACE Indicates the collected workload will be the exclusive workload for the task. If an existing workload is found, it will be deleted prior to saving the new workload.The default value is NEW.</Parameter>
            <Parameter Name="PRIORITY">Specifies the application priority for each statement that is saved in the workload object. The value must be one of the following: 1-HIGH, 2-MEDIUM, or 3-LOW. The default value is 2.</Parameter>
            <Parameter Name="SAVED_ROWS">Returns the number of rows actually saved in the repository.</Parameter>
            <Parameter Name="FAILED_ROWS">Returns the number of rows that were not saved due to syntax or validation errors.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IMPORT_SQLWKLD_SUMADV" ElementId="#i1012320">
          <Description>SQL Access Advisor</Description>
          <Parameters>
            <Parameter Name="WORKLOAD_NAME">The workload object name that uniquely identifies an existing workload.</Parameter>
            <Parameter Name="IMPORT_MODE">Specifies the action to be taken when storing the workload. Possible values are:APPEND Indicates that the collected workload will be added to any existing workload in the task.NEW Indicates that the collected workload will be the exclusive workload for the task. If an existing workload is found, an exception will be thrown.REPLACE Indicates the collected workload will be the exclusive workload for the task. If an existing workload is found, it will be deleted prior to saving the new workload.The default value is NEW.</Parameter>
            <Parameter Name="PRIORITY">Specifies the default application priority for each statement that is saved in the workload object. If a Summary Advisor workload statement contains a priority of zero, the default priority will be applied. If the workload statement contains a valid priority, then the Summary Advisor priority will be converted to a comparable SQL Access Advisor priority. The value must be one of the following:1-HIGH, 2-MEDIUM, or 3-LOW.</Parameter>
            <Parameter Name="SUMADV_ID">Specifies the Summary Advisor workload identifier number.</Parameter>
            <Parameter Name="SAVED_ROWS">Returns the number of rows actually saved in the repository.</Parameter>
            <Parameter Name="FAILED_ROWS">Returns the number of rows that were not saved due to syntax or validation errors.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IMPORT_SQLWKLD_USER" ElementId="#i1012335">
          <Description>SQL Access Advisor</Description>
          <Parameters>
            <Parameter Name="WORKLOAD_NAME">The workload object name that uniquely identifies an existing workload.</Parameter>
            <Parameter Name="IMPORT_MODE">Specifies the action to be taken when storing the workload. Possible values are:APPEND Indicates that the collected workload will be added to any existing workload in the task.NEW Indicates that the collected workload will be the exclusive workload for the task. If an existing workload is found, an exception will be thrown.REPLACE Indicates the collected workload will be the exclusive workload for the task. If an existing workload is found, it will be deleted prior to saving the new workload.The default value is NEW.</Parameter>
            <Parameter Name="OWNER_NAME">Specifies the owner name of the table or view from which workload data will be collected.</Parameter>
            <Parameter Name="TABLE_NAME">Specifies the name of the table or view from which workload data will be collected.</Parameter>
            <Parameter Name="SAVED_ROWS">Returns the number of rows actually saved in the workload object.</Parameter>
            <Parameter Name="FAILED_ROWS">Returns the number of rows that were not saved due to syntax or validation errors.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="INTERRUPT_TASK" ElementId="#i1012149">
          <Description>Segment Advisor, SQL Access Advisor</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">A single Advisor task name that will be interrupted.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MARK_RECOMMENDATION" ElementId="#CIHGAHCJ">
          <Description>Segment Advisor, SQL Access Advisor</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the task.</Parameter>
            <Parameter Name="ID">The recommendation identifier number assigned by the Advisor.</Parameter>
            <Parameter Name="ACTION">The recommendation action setting. The possible actions are:ACCEPT Marks the recommendation as accepted. With this setting, the recommendation will appear in implementation and undo scripts.IGNORE Marks the recommendation as ignore. With this setting, the recommendation will not appear in an implementation or undo script.REJECT Marks the recommendation as rejected. With this setting, the recommendation will not appear in any implementation or undo scripts.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="QUICK_TUNE" ElementId="#i1011111">
          <Description>SQL Access Advisor</Description>
          <Parameters>
            <Parameter Name="ADVISOR_NAME">Name of the Advisor that will perform the analysis.</Parameter>
            <Parameter Name="TASK_NAME">Name of the task.</Parameter>
            <Parameter Name="ATTR1">Advisor-specific attribute in the form of a CLOB variable.</Parameter>
            <Parameter Name="ATTR2">Advisor-specific attribute in the form of a VARCHAR2 variable.</Parameter>
            <Parameter Name="ATTR3">Advisor-specific attribute in the form of a NUMBER.</Parameter>
            <Parameter Name="TASK_OR_TEMPLATE">An optional task name of an existing task or task template.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RESET_SQLWKLD" ElementId="#CIHHHDCJ">
          <Description>SQL Access Advisor</Description>
          <Parameters>
            <Parameter Name="WORKLOAD_NAME">The SQL Workload object name that uniquely identifies an existing workload.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RESET_TASK" ElementId="#i1001339">
          <Description>Segment Advisor, SQL Access Advisor</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">The task name that uniquely identifies an existing task.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_DEFAULT_SQLWKLD_PARAMETER" ElementId="#i1011235">
          <Description>SQL Access Advisor</Description>
          <Parameters>
            <Parameter Name="PARAMETER">The name of the data parameter to be modified. Parameter names are not case sensitive. Parameter names are unique to the workload object type, but not necessarily unique to all workload object types. Various object types may use the same parameter name for different purposes.</Parameter>
            <Parameter Name="VALUE">The value of the specified parameter. The value can be specified as a string or a number. If the value is DBMS_ADVISOR.DEFAULT, the value will be reset to the default value.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_DEFAULT_TASK_PARAMETER" ElementId="#i1011236">
          <Description>Segment Advisor, SQL Access Advisor</Description>
          <Parameters>
            <Parameter Name="ADVISOR_NAME">Specifies the unique advisor name as defined in the view DBA_ADVISOR_DEFINITIONS.</Parameter>
            <Parameter Name="PARAMETER">The name of the task parameter to be modified. Parameter names are not case sensitive. Parameter names are unique to the task type, but not necessarily unique to all task types. Various task types may use the same parameter name for different purposes.</Parameter>
            <Parameter Name="VALUE">The value of the specified task parameter. The value can be specified as a string or a number.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_SQLWKLD_PARAMETER" ElementId="#i1011237">
          <Description>SQL Access Advisor</Description>
          <Parameters>
            <Parameter Name="WORKLOAD_NAME">The SQL Workload object name that uniquely identifies an existing workload.</Parameter>
            <Parameter Name="PARAMETER">The name of the data parameter to be modified. Parameter names are not case sensitive.</Parameter>
            <Parameter Name="VALUE">The value of the specified parameter. The value can be specified as a string or a number. If the value is DBMS_ADVISOR.DEFAULT, the value will be reset to the default value.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_TASK_PARAMETER" ElementId="#i1001341">
          <Description>Segment Advisor, SQL Access Advisor</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">The Advisor task name that uniquely identifies an existing task.</Parameter>
            <Parameter Name="PARAMETER">The name of the task parameter to be modified. Parameter names are not case sensitive. Parameter names are unique to the task type, but not necessarily unique to all task types. Various task types may use the same parameter name for different purposes.</Parameter>
            <Parameter Name="VALUE">The value of the specified task parameter. The value can be specified as a string or a number. If the value is DEFAULT, the value will be reset to the default value.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="TUNE_MVIEW" ElementId="#i1001342">
          <Description>SQL Access Advisor</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">The task name for looking up the results in a catalog view. If not specified, the system will generate a name and return.</Parameter>
            <Parameter Name="MV_CREATE_STMT">The original materialized view creation statement.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UPDATE_OBJECT" ElementId="#i1017783">
          <Description>Segment Advisor</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">A valid advisor task name that uniquely identifies an existing task.</Parameter>
            <Parameter Name="OBJECT_ID">The advisor-assigned object identifier.</Parameter>
            <Parameter Name="ATTR1">Advisor-specific data. If set to NULL, there will be no effect on the target object.</Parameter>
            <Parameter Name="ATTR2">Advisor-specific data. If set to NULL, there will be no effect on the target object.</Parameter>
            <Parameter Name="ATTR3">Advisor-specific data. If set to NULL, there will be no effect on the target object.</Parameter>
            <Parameter Name="ATTR4">Advisor-specific data. If set to NULL, there will be no effect on the target object.</Parameter>
            <Parameter Name="ATTR5">Advisor-specific data. If set to null, there will be no effect on the target object.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UPDATE_REC_ATTRIBUTES" ElementId="#i1003104">
          <Description>SQL Access Advisor</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">The task name that uniquely identifies an existing task.</Parameter>
            <Parameter Name="REC_ID">The Advisor-generated identifier number that is assigned to the recommendation.</Parameter>
            <Parameter Name="ACTION_ID">The Advisor-generated action identifier that is assigned to the particular command.</Parameter>
            <Parameter Name="ATTRIBUTE_NAME">Name of the attribute to be changed. The valid values are:owner The new owner of the object.name The new name of the object.tablespace The new tablespace for the object.</Parameter>
            <Parameter Name="VALUE">Specifies the new value for the recommendation attribute.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UPDATE_SQLWKLD_ATTRIBUTES" ElementId="#i1011550">
          <Description>SQL Access Advisor</Description>
          <Parameters>
            <Parameter Name="WORKLOAD_NAME">The workload object name that uniquely identifies an existing workload.</Parameter>
            <Parameter Name="NEW_NAME">The new workload object name. If the value is NULL or contains the value ADVISOR_UNUSED, the workload will not be renamed. A task name can be up to 30 characters long.</Parameter>
            <Parameter Name="DESCRIPTION">A new workload description. If the value is NULL or contains the value ADVISOR_UNUSED, the description will not be changed. Names can be up to 256 characters long.</Parameter>
            <Parameter Name="READ_ONLY">Set to TRUE so it cannot be changed.</Parameter>
            <Parameter Name="IS_TEMPLATE">TRUE if workload is to be used as a template.</Parameter>
            <Parameter Name="HOW_CREATED">Indicates a source application name that initiated the workload creation. If the value is NULL or contains the value ADVISOR_UNUSED, the source will not be changed.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UPDATE_SQLWKLD_STATEMENT" ElementId="#i1011486">
          <Description>SQL Access Advisor</Description>
          <Parameters>
            <Parameter Name="WORKLOAD_NAME">The SQL Workload object name that uniquely identifies an existing workload.</Parameter>
            <Parameter Name="SQL_ID">The Advisor-generated identifier number that is assigned to the statement. To specify all workload statements, use the constant DBMS_ADVISOR.ADVISOR_ALL.</Parameter>
            <Parameter Name="UPDATED">Returns the number of statements changed by a searched update.</Parameter>
            <Parameter Name="APPLICATION">Specifies a business application name that will be associated with the SQL statement. If the value is NULL or contains the value ADVISOR_UNUSED, then the column will not be updated in the repository.</Parameter>
            <Parameter Name="ACTION">Specifies the application action for the statement. If the value is NULL or contains the value ADVISOR_UNUSED, then the column will not be updated in the repository.</Parameter>
            <Parameter Name="PRIORITY">The relative priority of the SQL statement. The value must be one of the following: 1 - HIGH, 2 - MEDIUM, or 3 - LOW.If the value is NULL or contains the value ADVISOR_UNUSED, then the column will not be updated in the repository.</Parameter>
            <Parameter Name="USERNAME">The Oracle user name that executed the SQL statement. If the value is NULL or contains the value ADVISOR_UNUSED, then the column will not be updated in the repository.Because a user name is an Oracle identifier, the username value must be entered exactly like it is stored in the database. For example, if the user SCOTT is the executing user, then you must provide the user identifier SCOTT in all uppercase letters. The database does not recognize the user scott as a match for SCOTT.</Parameter>
            <Parameter Name="SEARCH">Disabled.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UPDATE_TASK_ATTRIBUTES" ElementId="#CHDHDCCB">
          <Description>Segment Advisor, SQL Access Advisor</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">The Advisor task name that uniquely identifies an existing task.</Parameter>
            <Parameter Name="NEW_NAME">The new Advisor task name. If the value is NULL or contains the value ADVISOR_UNUSED, the task will not be renamed. A task name can be up to 30 characters long.</Parameter>
            <Parameter Name="DESCRIPTION">A new task description. If the value is NULL or contains the value ADVISOR_UNUSED, the description will not be changed. Names can be up to 256 characters long.</Parameter>
            <Parameter Name="READ_ONLY">Sets the task to read-only. Possible values are: TRUE and FALSE.If the value is NULL or contains the value ADVISOR_UNUSED, the setting will not be changed.</Parameter>
            <Parameter Name="IS_TEMPLATE">Marks the task as a template. Physically, there is no difference between a task and a template; however, a template cannot be executed. Possible values are: TRUE and FALSE. If the value is NULL or contains the value ADVISOR_UNUSED, the setting will not be changed.</Parameter>
            <Parameter Name="HOW_CREATED">Indicates a source application name that initiated the task creation. If the value is NULL or contains the value ADVISOR_UNUSED, the source will not be changed.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_ALERT" Url="http://docs.oracle.com/database/121/ARPLS/d_alert.htm">
      <Description>DBMS_ALERT supports asynchronous notification of database events (alerts). By appropriate use of this package and database triggers, an application can notify itself whenever values of interest in the database are changed.</Description>
      <SubPrograms>
        <SubProgram Name="REGISTER" ElementId="#CHDGHFAJ">
          <Description>Receives messages from an alert</Description>
          <Parameters>
            <Parameter Name="NAME">Name of the alert in which this session is interested</Parameter>
            <Parameter Name="CLEANUP">Specifies whether to perform cleanup of any extant orphaned pipes used by the DBMS_ALERT package. This cleanup is only performed on the first call to REGISTER for each package instantiation. The default for the parameter is TRUE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVE" ElementId="#i1001245">
          <Description>Disables notification from an alert</Description>
          <Parameters>
            <Parameter Name="NAME">Name of the alert (case-insensitive) to be removed from registration list.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVEALL" ElementId="#CIHDJEII">
          <Description>Removes all alerts for this session from the registration list</Description>
        </SubProgram>
        <SubProgram Name="SET_DEFAULTS" ElementId="#i997010">
          <Description>Sets the polling interval</Description>
          <Parameters>
            <Parameter Name="SENSITIVITY">Polling interval, in seconds, to sleep between polls. The default interval is five seconds.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SIGNAL" ElementId="#i997031">
          <Description>Signals an alert (send message to registered sessions)</Description>
          <Parameters>
            <Parameter Name="NAME">Name of the alert to signal.</Parameter>
            <Parameter Name="MESSAGE">Message, of 1800 bytes or less, to associate with this alert.This message is passed to the waiting session. The waiting session might be able to avoid reading the database after the alert occurs by using the information in the message.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="WAITANY" ElementId="#i997060">
          <Description>Waits timeout seconds to receive alert message from an alert registered for session</Description>
          <Parameters>
            <Parameter Name="NAME">Returns the name of the alert that occurred.</Parameter>
            <Parameter Name="MESSAGE">Returns the message associated with the alert.This is the message provided by the SIGNAL call. If multiple signals on this alert occurred before WAITANY, the message corresponds to the most recent SIGNAL call. Messages from prior SIGNAL calls are discarded.</Parameter>
            <Parameter Name="STATUS">Values returned:0 - alert occurred1 - timeout occurred</Parameter>
            <Parameter Name="TIMEOUT">Maximum time to wait for an alert.If no alert occurs before timeout seconds, this returns a status of 1.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="WAITONE" ElementId="#i997104">
          <Description>Waits timeout seconds to receive message from named alert</Description>
          <Parameters>
            <Parameter Name="NAME">Name of the alert to wait for.</Parameter>
            <Parameter Name="MESSAGE">Returns the message associated with the alert.This is the message provided by the SIGNAL call. If multiple signals on this alert occurred before WAITONE, the message corresponds to the most recent SIGNAL call. Messages from prior SIGNAL calls are discarded.</Parameter>
            <Parameter Name="STATUS">Values returned:0 - alert occurred1 - timeout occurred</Parameter>
            <Parameter Name="TIMEOUT">Maximum time to wait for an alert.If the named alert does not occurs before timeout seconds, this returns a status of 1.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_APP_CONT" Url="http://docs.oracle.com/database/121/ARPLS/d_app_cont.htm">
      <Description>The DBMS_APP_CONT package provides an interface to determine if the in-flight transaction on a now unavailable session committed or not, and if the last call on that session completed or not.</Description>
      <SubPrograms>
        <SubProgram Name="GET_LTXID_OUTCOME" ElementId="#BABHFHDG">
          <Description>Lets customer applications and third party application servers determine the transactional status of the last session when that session becomes unavailable.</Description>
          <Parameters>
            <Parameter Name="CLIENT_LTXID">Client-side logical transaction ID. Obtain the LTXID from the previous failed session using the client driver provided APIs - getLTXID for JDBC, and LogicalTransactionId for ODP.net., and OCI_ATTR_GET with LTXID for OCI.</Parameter>
            <Parameter Name="COMMITTED">Returns TRUE if the transaction with the named logical LTXID has COMMITTED. Returns FALSE if the logical LTXID has not COMMITTED. When returning FALSE, the procedure blocks the LTXID from further use so that there is no possibility of previous in-flight work committing this LTXID.</Parameter>
            <Parameter Name="USER_CALL_COMPLETED">Whether all information has been returned to the client. Examples of such messages are the number of rows processed when using autocommit or commit on success, parameter and function results when calling PL/SQL, or PL/SQL with more work to do after the COMMIT. Applications that expect to use data returned from the commit in order to function correctly must look at this second parameter.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_APPLICATION_INFO" Url="http://docs.oracle.com/database/121/ARPLS/d_appinf.htm">
      <Description>Application developers can use the DBMS_APPLICATION_INFO package with Oracle Trace and the SQL trace facility to record names of executing modules or transactions in the database for later use when tracking the performance of various modules and debugging.</Description>
      <SubPrograms>
        <SubProgram Name="READ_CLIENT_INFO" ElementId="#BABCHFIH">
          <Description>Reads the value of the client_info field of the current session</Description>
          <Parameters>
            <Parameter Name="CLIENT_INFO">Last client information value supplied to the SET_CLIENT_INFO procedure.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="READ_MODULE" ElementId="#i999292">
          <Description>Reads the values of the module and action fields of the current session</Description>
          <Parameters>
            <Parameter Name="MODULE_NAME">Last value that the module name was set to by calling SET_MODULE.</Parameter>
            <Parameter Name="ACTION_NAME">Last value that the action name was set to by calling SET_ACTION or SET_MODULE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_ACTION" ElementId="#i999254">
          <Description>Sets the name of the current action within the current module</Description>
          <Parameters>
            <Parameter Name="ACTION_NAME">The name of the current action within the current module. When the current action terminates, call this procedure with the name of the next action if there is one, or NULL if there is not. Names longer than 32 bytes are truncated.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_CLIENT_INFO" ElementId="#CHEJCFGG">
          <Description>Sets the client_info field of the session</Description>
          <Parameters>
            <Parameter Name="CLIENT_INFO">Supplies any additional information about the client application. This information is stored in the V$SESSION view. Information exceeding 64 bytes is truncated.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_MODULE" ElementId="#i996826">
          <Description>Sets the name of the module that is currently running to a new module</Description>
          <Parameters>
            <Parameter Name="MODULE_NAME">Name of module that is currently running. When the current module terminates, call this procedure with the name of the new module if there is one, or NULL if there is not. Names longer than 48 bytes are truncated.</Parameter>
            <Parameter Name="ACTION_NAME">Name of current action within the current module. If you do not want to specify an action, this value should be NULL. Names longer than 32 bytes are truncated.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_SESSION_LONGOPS" ElementId="#i996999">
          <Description>Sets a row in the V$SESSION_LONGOPS table</Description>
          <Parameters>
            <Parameter Name="RINDEX">A token which represents the v$session_longops row to update. Set this to set_session_longops_nohint to start a new row. Use the returned value from the prior call to reuse a row.</Parameter>
            <Parameter Name="SLNO">Saves information across calls to set_session_longops: It is for internal use and should not be modified by the caller.</Parameter>
            <Parameter Name="OP_NAME">Specifies the name of the long running task. It appears as the OPNAME column of v$session_longops. The maximum length is 64 bytes.</Parameter>
            <Parameter Name="TARGET">Specifies the object that is being worked on during the long running operation. For example, it could be a table ID that is being sorted. It appears as the TARGET column of v$session_longops.</Parameter>
            <Parameter Name="CONTEXT">Any number the client wants to store. It appears in the CONTEXT column of v$session_longops.</Parameter>
            <Parameter Name="SOFAR">Any number the client wants to store. It appears in the SOFAR column of v$session_longops. This is typically the amount of work which has been done so far.</Parameter>
            <Parameter Name="TOTALWORK">Any number the client wants to store. It appears in the TOTALWORK column of v$session_longops. This is typically an estimate of the total amount of work needed to be done in this long running operation.</Parameter>
            <Parameter Name="TARGET_DESC">Specifies the description of the object being manipulated in this long operation. This provides a caption for the target parameter. This value appears in the TARGET_DESC field of v$session_longops. The maximum length is 32 bytes.</Parameter>
            <Parameter Name="UNITS">Specifies the units in which sofar and totalwork are being represented. It appears as the UNITS field of v$session_longops. The maximum length is 32 bytes.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_APPLY_ADM" Url="http://docs.oracle.com/database/121/ARPLS/d_apply.htm">
      <Description>The DBMS_APPLY_ADM package provides subprograms to configure and manage Oracle Streams apply processes, XStream outbound servers, and XStream inbound servers.</Description>
      <SubPrograms>
        <SubProgram Name="ADD_STMT_HANDLER" ElementId="#BABDGCEF">
          <Description>Adds a statement DML handler for a specified operation on a specified database object to a single apply component or to all apply components in the database</Description>
          <Parameters>
            <Parameter Name="OBJECT_NAME">The name of the source object specified as [schema_name.]object_name. For example, hr.employees. If the schema is not specified, then the current user is the default. The specified object does not need to exist when you run this procedure.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="OPERATION_NAME">The name of the operation, which can be specified as:INSERTUPDATEDELETEIf NULL, then the procedure raises an error.Note: Statement DML handlers cannot be specified for LOB operations.</Parameter>
            <Parameter Name="HANDLER_NAME">The name of the statement DML handler.If the specified statement DML handler exists, then the statement in the statement parameter is added to the existing handler. Ensure that the existing statement DML handler is for the same operation on the same database object as the settings for the operation_name and object_name parameters, respectively. If the existing handler is for a different operation or database object, then an apply error results when the handler is invoked.If the specified statement DML handler does not exist and a non-NULL statement parameter is specified, then this procedure creates the statement DML handler.If the specified statement DML handler does not exist and the statement parameter is not specified or is NULL, then this procedure raises an error.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="STATEMENT">The text of the SQL statement to add to the statement DML handler.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="APPLY_NAME">The name of the apply component that uses the statement DML handler.If NULL, then the procedure adds the statement DML handler as a general handler to all apply components in the database.</Parameter>
            <Parameter Name="COMMENT">A comment for the statement DML handler.If NULL, then no comment is recorded for the statement DML handler.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ALTER_APPLY" ElementId="#BGBGGBJJ">
          <Description>Alters an apply component</Description>
          <Parameters>
            <Parameter Name="APPLY_NAME">The name of the apply component being altered. You must specify the name of an existing apply component. Do not specify an owner.</Parameter>
            <Parameter Name="RULE_SET_NAME">The name of the positive rule set for the apply component. The positive rule set contains the rules that instruct the apply component to apply messages.If you want to use a positive rule set for the apply component, then you must specify an existing rule set in the form [schema_name.]rule_set_name. For example, to specify a positive rule set in the hr schema named job_apply_rules, enter hr.job_apply_rules. If the schema is not specified, then the current user is the default.An error is returned if the specified rule set does not exist. You can create a rule set and add rules to it using the DBMS_STREAMS_ADM package or the DBMS_RULE_ADM package.If you specify NULL and the remove_rule_set parameter is set to FALSE, then this procedure retains any existing positive rule set for the specified apply component. If you specify NULL and the remove_rule_set parameter is set to TRUE, then this procedure removes any existing positive rule set from the specified apply component.</Parameter>
            <Parameter Name="REMOVE_RULE_SET">If TRUE, then the procedure removes the positive rule set for the specified apply component. If you remove the positive rule set for an apply component, and the apply component does not have a negative rule set, then the apply component dequeues all messages in its queue.If you remove the positive rule set for an apply component, and a negative rule set exists for the apply component, then the apply component dequeues all messages in its queue that are not discarded by the negative rule set.If FALSE, then the procedure retains the positive rule set for the specified apply component.If the rule_set_name parameter is non-NULL, then this parameter should be set to FALSE.</Parameter>
            <Parameter Name="MESSAGE_HANDLER">A user-defined procedure that processes non-LCR messages in the queue for the apply component.See "Usage Notes" in the CREATE_APPLY Procedure for more information about a message handler procedure.</Parameter>
            <Parameter Name="REMOVE_MESSAGE_HANDLER">If TRUE, then the procedure removes the message handler for the specified apply component.If FALSE, then the procedure retains any message handler for the specified apply component.If the message_handler parameter is non-NULL, then this parameter should be set to FALSE.</Parameter>
            <Parameter Name="DDL_HANDLER">A user-defined procedure that processes DDL logical change records (DDL LCRs) in the queue for the apply component.All applied DDL LCRs commit automatically. Therefore, if a DDL handler calls the EXECUTE member procedure of a DDL LCR, then a commit is performed automatically.See "Usage Notes" in the CREATE_APPLY Procedure for more information about a DDL handler procedure.</Parameter>
            <Parameter Name="REMOVE_DDL_HANDLER">If TRUE, then the procedure removes the DDL handler for the specified apply component.If FALSE, then the procedure retains any DDL handler for the specified apply component.If the ddl_handler parameter is non-NULL, then this parameter should be set to FALSE.</Parameter>
            <Parameter Name="APPLY_USER">The user in whose security domain an apply component dequeues messages that satisfy its rule sets, applies messages directly to database objects, runs custom rule-based transformations, and runs apply handlers. If NULL, then the apply user is not changed.If a non-NULL value is specified to change the apply user, then the user who invokes the ALTER_APPLY procedure must be granted the DBA role. Only the SYS user can set the apply_user to SYS.If you change the apply user, then this procedure grants the new apply user dequeue privilege on the queue used by the apply component. It also configures the user as a secure queue user of the queue.In addition to the privileges granted by this procedure, you also should grant the following privileges to the apply user:The necessary privileges to perform DML and DDL changes on the apply objectsEXECUTE privilege on the rule sets used by the apply componentEXECUTE privilege on all rule-based transformation functions used in the rule setEXECUTE privilege on all apply handler proceduresThese privileges can be granted directly to the apply user, or they can be granted through roles.In addition, the apply user must be granted the EXECUTE privilege on all packages, including Oracle-supplied packages, that are invoked in subprograms run by the apply component. These privileges must be granted directly to the apply user. They cannot be granted through roles.By default, this parameter is set to the user who created the apply component by running either the CREATE_APPLY procedure in this package or a procedure in the DBMS_STREAMS_ADM package.Note: If the apply user for an apply component is dropped using DROP USER. . . CASCADE, then the apply component is also dropped automatically.</Parameter>
            <Parameter Name="APPLY_TAG">A binary tag that is added to redo entries generated by the specified apply component. The tag is a binary value that can be used to track LCRs.The tag is relevant only if a capture process at the database where the apply component is running captures changes made by the apply component. If so, then the captured changes include the tag specified by this parameter.If NULL, the default, then the apply tag for the apply component is not changed.The following is an example of a tag with a hexadecimal value of 17:HEXTORAW('17')See Also: Oracle Streams Replication Administrator's Guide for more information about tags</Parameter>
            <Parameter Name="REMOVE_APPLY_TAG">If TRUE, then the procedure sets the apply tag for the specified apply component to NULL, and the apply component generates redo entries with NULL tags.If FALSE, then the procedure retains any apply tag for the specified apply component.If the apply_tag parameter is non-NULL, then this parameter should be set to FALSE.</Parameter>
            <Parameter Name="PRECOMMIT_HANDLER">A user-defined procedure that can receive internal commit directives in the queue for the apply component before they are processed by the apply component. Typically, precommit handlers are used for auditing commit information for transactions processed by an apply component.An internal commit directive is enqueued in the following ways:When a capture process captures row LCRs, the capture process enqueues the commit directive for the transaction that contains the row LCRs.When a user or application enqueues messages and then issues a COMMIT statement, the commit directive is enqueued automatically.For a captured row LCR, a commit directive contains the commit SCN of the transaction from the source database. For a user message, the commit SCN is generated by the apply component.The precommit handler procedure must conform to the following restrictions:Any work that commits must be an autonomous transaction.Any rollback must be to a named savepoint created in the procedure.If a precommit handler raises an exception, then the entire apply transaction is rolled back, and all of the messages in the transaction are moved to the error queue.See "Usage Notes" in the CREATE_APPLY Procedure for more information about a precommit handler procedure.</Parameter>
            <Parameter Name="REMOVE_PRECOMMIT_HANDLER">If TRUE, then the procedure removes the precommit handler for the specified apply component.If FALSE, then the procedure retains any precommit handler for the specified apply component.If the precommit_handler parameter is non-NULL, then this parameter should be set to FALSE.</Parameter>
            <Parameter Name="NEGATIVE_RULE_SET_NAME">The name of the negative rule set for the apply component. The negative rule set contains the rules that instruct the apply component to discard messages.If you want to use a negative rule set for the apply component, then you must specify an existing rule set in the form [schema_name.]rule_set_name. For example, to specify a negative rule set in the hr schema named neg_apply_rules, enter hr.neg_apply_rules. If the schema is not specified, then the current user is the default.An error is returned if the specified rule set does not exist. You can create a rule set and add rules to it using the DBMS_STREAMS_ADM package or the DBMS_RULE_ADM package.If you specify NULL and the remove_negative_rule_set parameter is set to FALSE, then the procedure retains any existing negative rule set. If you specify NULL and the remove_negative_rule_set parameter is set to TRUE, then the procedure removes any existing negative rule set.If you specify both a positive and a negative rule set for an apply component, then the negative rule set is always evaluated first.</Parameter>
            <Parameter Name="REMOVE_NEGATIVE_RULE_SET">If TRUE, then the procedure removes the negative rule set for the specified apply component. If you remove the negative rule set for an apply component, and the apply component does not have a positive rule set, then the apply component dequeues all messages in its queue.If you remove the negative rule set for an apply component, and a positive rule set exists for the apply component, then the apply component dequeues all messages in its queue that are not discarded by the positive rule set.If FALSE, then the procedure retains the negative rule set for the specified apply component.If the negative_rule_set_name parameter is non-NULL, then this parameter should be set to FALSE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="COMPARE_OLD_VALUES" ElementId="#i1006610">
          <Description>Specifies whether to compare the old value of one or more columns in a row logical change record (row LCR) with the current value of the corresponding columns at the destination site during apply</Description>
          <Parameters>
            <Parameter Name="OBJECT_NAME">The name of the source table specified as [schema_name.]object_name. For example, hr.employees. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="COLUMN_LIST">A comma-delimited list of column names in the table. There must be no spaces between entries.Specify * to include all nonkey columns.</Parameter>
            <Parameter Name="COLUMN_TABLE">A PL/SQL associative array of type DBMS_UTILITY.LNAME_ARRAY that contains names of columns in the table. The first column name should be at position 1, the second at position 2, and so on. The table does not need to be NULL terminated.</Parameter>
            <Parameter Name="OPERATION">The name of the operation, which can be specified as:UPDATE for UPDATE operationsDELETE for DELETE operations* for both UPDATE and DELETE operations</Parameter>
            <Parameter Name="COMPARE">If compare is TRUE, the old values of the specified columns are compared during apply.If compare is FALSE, the old values of the specified columns are not compared during apply.</Parameter>
            <Parameter Name="APPLY_DATABASE_LINK">The name of the database link to a non-Oracle database. This parameter should be set only when the destination database is a non-Oracle database.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_APPLY" ElementId="#i997054">
          <Description>Creates an apply component</Description>
          <Parameters>
            <Parameter Name="QUEUE_NAME">The name of the queue from which the apply component dequeues messages. You must specify an existing queue in the form [schema_name.]queue_name. For example, to specify a queue in the hr schema named streams_queue, enter hr.streams_queue. If the schema is not specified, then the current user is the default.Note: The queue_name setting cannot be altered after the apply component is created.</Parameter>
            <Parameter Name="APPLY_NAME">The name of the apply component being created. A NULL specification is not allowed. Do not specify an owner.The specified name must not match the name of an existing apply component or messaging client.Note: The apply_name setting cannot be altered after the apply component is created.</Parameter>
            <Parameter Name="RULE_SET_NAME">The name of the positive rule set for the apply component. The positive rule set contains the rules that instruct the apply component to apply messages.If you want to use a positive rule set for the apply component, then you must specify an existing rule set in the form [schema_name.]rule_set_name. For example, to specify a positive rule set in the hr schema named job_apply_rules, enter hr.job_apply_rules. If the schema is not specified, then the current user is the default.If you specify NULL, and no negative rule set is specified, then the apply component applies either all captured messages or all messages in the persistent queue, depending on the setting of the apply_captured parameter.An error is returned if the specified rule set does not exist. You can create a rule set and add rules to it using the DBMS_STREAMS_ADM package or the DBMS_RULE_ADM package.</Parameter>
            <Parameter Name="MESSAGE_HANDLER">A user-defined procedure that processes non-LCR messages in the queue for the apply component.See "Usage Notes" for more information about a message handler procedure.</Parameter>
            <Parameter Name="DDL_HANDLER">A user-defined procedure that processes DDL logical change record (DDL LCRs) in the queue for the apply component.All applied DDL LCRs commit automatically. Therefore, if a DDL handler calls the EXECUTE member procedure of a DDL LCR, then a commit is performed automatically.See "Usage Notes" for more information about a DDL handler procedure.</Parameter>
            <Parameter Name="APPLY_USER">The user who applies all DML and DDL changes that satisfy the apply component rule sets and who runs user-defined apply handlers. If NULL, then the user who runs the CREATE_APPLY procedure is used.The apply user is the user in whose security domain an apply component dequeues messages that satisfy its rule sets, applies messages directly to database objects, runs custom rule-based transformations configured for apply component rules, and runs apply handlers configured for the apply component. This user must have the necessary privileges to apply changes. This procedure grants the apply user dequeue privilege on the queue used by the apply component and configures the user as a secure queue user of the queue.In addition to the privileges granted by this procedure, you also should grant the following privileges to the apply user:The necessary privileges to perform DML and DDL changes on the apply objectsEXECUTE privilege on the rule sets used by the apply componentEXECUTE privilege on all rule-based transformation functions used in the rule setEXECUTE privilege on all apply handler proceduresThese privileges can be granted directly to the apply user, or they can be granted through roles.In addition, the apply user must be granted EXECUTE privilege on all packages, including Oracle-supplied packages, that are invoked in subprograms run by the apply component. These privileges must be granted directly to the apply user. They cannot be granted through roles.You can use the packages DBMS_STREAMS_AUTH and DBMS_XSTREAM_AUTH to grant and revoke administrative privileges in Oracle Streams and XStream configurations, respectively. These packages do not configure the necessary privileges to perform DML or DDL changes on the apply objects.Note: If the apply user for an apply component is dropped using DROP USER . . . CASCADE, then the apply component is also dropped automatically.See "Usage Notes" for more information about this parameter.</Parameter>
            <Parameter Name="APPLY_DATABASE_LINK">The database at which the apply component applies messages. This parameter is used by an apply component when applying changes from Oracle to non-Oracle systems, such as Sybase. Set this parameter to NULL to specify that the apply component applies messages at the local database.Note: The apply_database_link setting cannot be altered after the apply component is created.</Parameter>
            <Parameter Name="APPLY_TAG">A binary tag that is added to redo entries generated by the specified apply component. The tag is a binary value that can be used to track LCRs.The tag is relevant only if a capture process at the database where the apply component is running captures changes made by the apply component. If so, then the captured changes include the tag specified by this parameter.By default, the tag for an apply component is the hexadecimal equivalent of '00' (double zero).The following is an example of a tag with a hexadecimal value of 17:If NULL, then the apply component generates redo entries with NULL tags.See Also: Oracle Streams Replication Administrator's Guide for more information about tags</Parameter>
            <Parameter Name="APPLY_CAPTURED">Either TRUE or FALSE.If TRUE, then the apply component applies only the captured LCRs in the queue. Captured LCRs are LCRs that were captured by an Oracle Streams capture process.If FALSE, then the apply component applies only the messages in a persistent queue. These are messages that were not captured by an Oracle Streams capture process, such as persistent LCRs or user messages.To apply both captured LCRs and messages in a persistent queue, you must create at least two apply components.Note: The apply_captured setting cannot be altered after the apply component is created.See Also: Oracle Streams Concepts and Administration for more information about processing messages with an apply component</Parameter>
            <Parameter Name="PRECOMMIT_HANDLER">A user-defined procedure that can receive internal commit directives in the queue for the apply component before they are processed by the apply component. Typically, precommit handlers are used for auditing commit information for transactions processed by an apply component.An internal commit directive is enqueued in the following ways:When a capture process captures row LCRs, the capture process enqueues the commit directive for the transaction that contains the row LCRs.When a synchronous capture captures row LCRs, the persistent LCRs that were enqueued by the synchronous capture are organized into a message group. The synchronous capture records the transaction identifier in each persistent LCR in a transaction.When a user or application enqueues messages and then issues a COMMIT statement, the commit directive is enqueued automatically.For a row LCR captured by a capture process or synchronous capture, a commit directive contains the commit SCN of the transaction from the source database. For a message enqueued by a user or application, the commit SCN is generated by the apply component.The precommit handler procedure must conform to the following restrictions:Any work that commits must be an autonomous transaction.Any rollback must be to a named savepoint created in the procedure.If a precommit handler raises an exception, then the entire apply transaction is rolled back, and all of the messages in the transaction are moved to the error queue.See "Usage Notes" for more information about a precommit handler procedure.</Parameter>
            <Parameter Name="NEGATIVE_RULE_SET_NAME">The name of the negative rule set for the apply component. The negative rule set contains the rules that instruct the apply component to discard messages.If you want to use a negative rule set for the apply component, then you must specify an existing rule set in the form [schema_name.]rule_set_name. For example, to specify a negative rule set in the hr schema named neg_apply_rules, enter hr.neg_apply_rules. If the schema is not specified, then the current user is the default.If you specify NULL, and no positive rule set is specified, then the apply component applies either all captured LCRs or all of the messages in the persistent queue, depending on the setting of the apply_captured parameter.An error is returned if the specified rule set does not exist. You can create a rule set and add rules to it using the DBMS_STREAMS_ADM package or the DBMS_RULE_ADM package.If you specify both a positive and a negative rule set for an apply component, then the negative rule set is always evaluated first.</Parameter>
            <Parameter Name="SOURCE_DATABASE">The global name of the source database for the changes that will be applied by the apply component. The source database is the database where the changes originated. If an apply component applies captured messages, then the apply component can apply messages from only one capture process at one source database.If NULL, then the source database name of the first LCR received by the apply component is used for the source database.If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify DBS1 and the domain is NET, then the procedure specifies DBS1.NET automatically.The rules in the apply component rule sets determine which messages are dequeued by the apply component. If the apply component dequeues an LCR with a source database that is different than the source database for the apply component, then an error is raised. You can determine the source database for an apply component by querying the DBA_APPLY_PROGRESS data dictionary view.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_OBJECT_DEPENDENCY" ElementId="#BGBEFFJI">
          <Description>Creates an object dependency</Description>
          <Parameters>
            <Parameter Name="OBJECT_NAME">The name of the child database object, specified as [schema_name.]object_name. For example, hr.employees. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="PARENT_OBJECT_NAME">The name of the parent database object, specified as [schema_name.]object_name. For example, hr.departments. If the schema is not specified, then the current user is the default.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_ALL_ERRORS" ElementId="#i997195">
          <Description>Deletes all the error transactions for the specified apply component</Description>
        </SubProgram>
        <SubProgram Name="DELETE_ERROR" ElementId="#BGBBFIDA">
          <Description>Deletes the specified error transaction</Description>
        </SubProgram>
        <SubProgram Name="DROP_APPLY" ElementId="#i997247">
          <Description>Drops an apply component</Description>
          <Parameters>
            <Parameter Name="APPLY_NAME">The name of the apply component being dropped. You must specify an existing apply component name. Do not specify an owner.</Parameter>
            <Parameter Name="DROP_UNUSED_RULE_SETS">If TRUE, then the procedure drops any rule sets, positive and negative, used by the specified apply component if these rule sets are not used by any other Oracle Streams or XStream component. These components include capture processes, propagations, apply processes, inbound servers, and messaging clients. If this procedure drops a rule set, then this procedure also drops any rules in the rule set that are not in another rule set.If FALSE, then the procedure does not drop the rule sets used by the specified apply component, and the rule sets retain their rules.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_OBJECT_DEPENDENCY" ElementId="#BGBCEFDA">
          <Description>Drops an object dependency</Description>
          <Parameters>
            <Parameter Name="OBJECT_NAME">The name of the child database object, specified as [schema_name.]object_name. For example, hr.employees. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="PARENT_OBJECT_NAME">The name of the parent database object, specified as [schema_name.]object_name. For example, hr.departments. If the schema is not specified, then the current user is the default.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXECUTE_ALL_ERRORS" ElementId="#i997272">
          <Description>Reexecutes the error transactions for the specified apply component</Description>
          <Parameters>
            <Parameter Name="APPLY_NAME">The name of the apply component that raised the errors while processing the transactions. Do not specify an owner.If NULL, then all error transactions for all apply components are reexecuted.</Parameter>
            <Parameter Name="EXECUTE_AS_USER">If TRUE, then the procedure reexecutes the transactions in the security context of the current user.If FALSE, then the procedure reexecutes each transaction in the security context of the original receiver of the transaction. The original receiver is the user who was processing the transaction when the error was raised. The DBA_APPLY_ERROR data dictionary view lists the original receiver for each error transaction.The user who executes the transactions must have privileges to perform DML and DDL changes on the apply objects and to run any apply handlers. This user must also have dequeue privileges on the queue used by the apply component.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXECUTE_ERROR" ElementId="#i997305">
          <Description>Reexecutes the specified error transaction</Description>
          <Parameters>
            <Parameter Name="LOCAL_TRANSACTION_ID">The identification number of the error transaction to execute. If the specified transaction does not exist in the error queue, then an error is raised.</Parameter>
            <Parameter Name="EXECUTE_AS_USER">If TRUE, then the procedure reexecutes the transaction in the security context of the current user.If FALSE, then the procedure reexecutes the transaction in the security context of the original receiver of the transaction. The original receiver is the user who was processing the transaction when the error was raised. The DBA_APPLY_ERROR data dictionary view lists the original receiver for each error transaction.The user who executes the transaction must have privileges to perform DML and DDL changes on the apply objects and to run any apply handlers. This user must also have dequeue privileges on the queue used by the apply component.</Parameter>
            <Parameter Name="USER_PROCEDURE">A user-defined procedure that modifies the error transaction so that it can be successfully executed.Specify NULL to execute the error transaction without running a user procedure.See Also: "Usage Notes" for more information about the user procedure</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_ERROR_MESSAGE" ElementId="#i997336">
          <Description>Returns the message payload from the error queue for the specified message number and transaction identifier</Description>
          <Parameters>
            <Parameter Name="MESSAGE_NUMBER">The identification number of the message. This number identifies the position of the message in the transaction. Query the DBA_APPLY_ERROR data dictionary view to view the message number of each apply error.</Parameter>
            <Parameter Name="LOCAL_TRANSACTION_ID">Identifier of the error transaction for which to return a message</Parameter>
            <Parameter Name="DESTINATION_QUEUE_NAME">Contains the name of the queue into which the message should be enqueued. If the message should not be enqueued into a queue, then this parameter contains NULL.</Parameter>
            <Parameter Name="EXECUTE">Contains TRUE if the message should be executedContains FALSE if the message should not be executed</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVE_STMT_HANDLER" ElementId="#CHDIHIEJ">
          <Description>Removes a statement DML handler for a specified operation on a specified database object from a single apply component or from all apply components in the database</Description>
          <Parameters>
            <Parameter Name="OBJECT_NAME">The name of the source object specified as [schema_name.]object_name. For example, hr.employees. If the schema is not specified, then the current user is the default. The specified object does not need to exist when you run this procedure.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="OPERATION_NAME">The name of the operation, which can be specified as:INSERTUPDATEDELETEIf NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="HANDLER_NAME">The name of the statement DML handler.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="APPLY_NAME">The name of the apply component that uses the statement DML handler.If NULL, then the procedure removes the statement DML handler from all apply components in the database.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_CHANGE_HANDLER" ElementId="#BABIFHAI">
          <Description>Sets or unsets a statement DML handler that tracks changes for a specified operation on a specified database object for a single apply component</Description>
          <Parameters>
            <Parameter Name="CHANGE_TABLE_NAME">The table that records changes to the source table.Specify the table as [schema_name.]table_name. For example, hr.jobs_change_table. If the schema is not specified, then the current user is the default.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="SOURCE_TABLE_NAME">The table at the source database for which changes are recorded.Specify the table as [schema_name.]table_name. For example, hr.jobs. If the schema is not specified, then the current user is the default.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="CAPTURE_VALUES">Specify which values to record in the change table when update operations are performed on the source table:old - To record the original values for an updated column in the source tablenew - To record the new values for an updated column in the source table* - To record both the original and the new values for an updated column in the source tableIf NULL, then the procedure raises an error.Note: For insert operations, only new column values are captured. For delete operations, only old column values are captured.</Parameter>
            <Parameter Name="APPLY_NAME">The name of the apply component that applies changes to the change table. Do not specify an owner.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="OPERATION_NAME">The name of the operation, which can be specified as:INSERTUPDATEDELETEIf NULL, then the procedure raises an error.Note: Change handlers cannot be specified for LOB operations.</Parameter>
            <Parameter Name="CHANGE_HANDLER_NAME">The name of the change handler.If the specified change handler exists, then a statement is added to the existing handler. Ensure that the existing change handler is for the same operation on the same table as the settings for the operation_name and source_table_name parameters, respectively. If the existing handler is for a different operation or table, then an apply error results when the handler is invoked.If non-NULL and the specified change handler does not exist, then this procedure creates the change handler.If NULL and a change handler exists for the same operation on the same table as the settings for the operation_name and source_table_name parameters, respectively, then the existing change handler is removed.If NULL and the specified change handler does not exist, then the procedure raises an error.See Also: "Usage Notes" for more information about this parameter.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_DML_HANDLER" ElementId="#i997367">
          <Description>Sets a user procedure as a procedure DML handler for a specified operation on a specified database object for a single apply component or for all apply components in the database</Description>
          <Parameters>
            <Parameter Name="OBJECT_NAME">The name of the source object specified as [schema_name.]object_name. For example, hr.employees. If the schema is not specified, then the current user is the default. The specified object does not need to exist when you run this procedure.</Parameter>
            <Parameter Name="OBJECT_TYPE">The type of the source object. Currently, TABLE is the only possible source object type.</Parameter>
            <Parameter Name="OPERATION_NAME">The name of the operation, which can be specified as:INSERTUPDATEDELETELOB_UPDATEDEFAULTFor example, suppose you run this procedure twice for the hr.employees table. In one call, you set operation_name to UPDATE and user_procedure to employees_update. In another call, you set operation_name to INSERT and user_procedure to employees_insert. Both times, you set error_handler to FALSE. In this case, the employees_update procedure is run for UPDATE operations on the hr.employees table, and the employees_insert procedure is run for INSERT operations on the hr.employees table.Specify DEFAULT to set the procedure as the default procedure DML handler for the database object. In this case, the procedure DML handler is used for any INSERT, UPDATE, DELETE, and LOB_WRITE on the database object, if another procedure DML handler is not specifically set for the operation on the database object.</Parameter>
            <Parameter Name="ERROR_HANDLER">If TRUE, then the specified user procedure is run when a row logical change record (row LCR) involving the specified operation on the specified object raises an apply error. You can code the user procedure to resolve possible error conditions, notify administrators of the error, log the error, or any combination of these actions.If FALSE, then the handler being set is run for all row LCRs involving the specified operation on the specified object.</Parameter>
            <Parameter Name="USER_PROCEDURE">A user-defined procedure that is invoked during apply for the specified operation on the specified object. If the procedure is a procedure DML handler, then it is invoked instead of the default apply performed by Oracle. If the procedure is an error handler, then it is invoked when an apply error is encountered.Specify NULL to unset a procedure DML handler that is set for the specified operation on the specified object.</Parameter>
            <Parameter Name="APPLY_DATABASE_LINK">The name of the database link to a non-Oracle database. This parameter should be set only when the destination database is a non-Oracle database.</Parameter>
            <Parameter Name="APPLY_NAME">The name of the apply component that uses the procedure DML handler or error handler.If NULL, then the procedure sets the procedure DML handler or error handler as a general handler for all apply components in the database.If the user_procedure parameter is set to NULL to unset a handler, and the handler being unset is set for a specific apply component, then use the apply_name parameter to specify the apply component to unset the handler.</Parameter>
            <Parameter Name="ASSEMBLE_LOBS">If TRUE, then LOB assembly is used for LOB columns in LCRs processed by the handler. LOB assembly combines multiple LCRs for a LOB column resulting from a single row change into one row LCR before passing the LCR to the handler. Database compatibility must be 10.2.0 or higher to use LOB assembly.If FALSE, then LOB assembly is not used for LOB columns in LCRs processed by the handler.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_ENQUEUE_DESTINATION" ElementId="#i1008434">
          <Description>Sets the queue where the apply component automatically enqueues a message that satisfies the specified rule</Description>
          <Parameters>
            <Parameter Name="RULE_NAME">The name of the rule, specified as [schema_name.]rule_name. For example, to specify a rule named hr5 in the hr schema, enter hr.hr5 for this parameter. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="DESTINATION_QUEUE_NAME">The name of the queue into which the apply component enqueues the message. Specify the queue in the form [schema_name.]queue_name. Only local queues can be specified.For example, to specify a queue in the hr schema named streams_queue, enter hr.streams_queue. If the schema is not specified, then the current user is the default.If NULL, then an existing name-value pair with the name APPLY$_ENQUEUE is removed. If no name-value pair exists with the name APPLY$_ENQUEUE for the rule, then no action is taken.If non-NULL and a name-value pair exists for the rule with the name APPLY$_ENQUEUE, then it is removed, and a new name-value pair with the value specified by this parameter is added.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_EXECUTE" ElementId="#i1008473">
          <Description>Specifies whether a message that satisfies the specified rule is executed by an apply component</Description>
          <Parameters>
            <Parameter Name="RULE_NAME">The name of the rule, specified as [schema_name.]rule_name. For example, to specify a rule named hr5 in the hr schema, enter hr.hr5 for this parameter. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="EXECUTE">If TRUE, then the procedure removes the name-value pair with the name APPLY$_EXECUTE for the specified rule. Removing the name-value pair means that the apply component executes messages that satisfy the rule. If no name-value pair with name APPLY$_EXECUTE exists for the rule, then no action is taken.If FALSE, then the procedure adds a name-value pair to the rule's action context. The name is APPLY$_EXECUTE and the value is NO. An apply component does not execute a message that satisfies the rule and does not send the message to any apply handler. If a name-value pair exists for the rule with the name APPLY$_EXECUTE, then it is removed, and a new one with the value NO is added.If NULL, then the procedure raises an error.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_GLOBAL_INSTANTIATION_SCN" ElementId="#BGBHIICJ">
          <Description>Records the specified instantiation SCN for the specified source database and, optionally, for the schemas at the source database and the tables owned by these schemas</Description>
          <Parameters>
            <Parameter Name="SOURCE_DATABASE_NAME">The global name of the source database. For example, DBS1.NET.If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify DBS1 and the domain is NET, then the procedure specifies DBS1.NET automatically.</Parameter>
            <Parameter Name="INSTANTIATION_SCN">The instantiation SCN. Specify NULL to remove the instantiation SCN metadata for the source database from the data dictionary.</Parameter>
            <Parameter Name="APPLY_DATABASE_LINK">The name of the database link to a non-Oracle database. This parameter should be set only when the destination database of a local apply component is a non-Oracle database.</Parameter>
            <Parameter Name="RECURSIVE">If TRUE, then the procedure sets the instantiation SCN for the source database, all schemas in the source database, and all tables owned by the schemas in the source database. This procedure selects the schemas and tables from the ALL_USERS and ALL_TABLES data dictionary views, respectively, at the source database under the security context of the current user.If FALSE, then the procedure sets the global instantiation SCN for the source database, but does not set the instantiation SCN for any schemas or tablesNote: If recursive is set to TRUE, then a database link from the destination database to the source database is required. This database link must have the same name as the global name of the source database and must be accessible to the current user. Also, a table must be accessible to the current user in either the ALL_TABLES or DBA_TABLES data dictionary view at the source database for this procedure to set the instantiation SCN for the table at the destination database.</Parameter>
            <Parameter Name="SOURCE_ROOT_NAME">The global name of the source root database.In a non-CDB, this parameter must be NULL.In a CDB, if you want to do the instantiation for a specific container than you must specify both source_database and source_root_name. If you want to do the instantiation for all the containers in the CDB, specify the source_root_name for the database and leave the source_database name as NULL.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_KEY_COLUMNS" ElementId="#i997574">
          <Description>Records the set of columns to be used as the substitute primary key for local apply purposes and removes existing substitute primary key columns for the specified object if they exist</Description>
          <Parameters>
            <Parameter Name="OBJECT_NAME">The name of the table specified as [schema_name.]object_name. For example, hr.employees. If the schema is not specified, then the current user is the default. If the apply component is applying changes to a non-Oracle database in a heterogeneous environment, then the object name is not verified.</Parameter>
            <Parameter Name="COLUMN_LIST">A comma-delimited list of the columns in the table to use as the substitute primary key, with no spaces between the column names.If the column_list parameter is empty or NULL, then the current set of key columns is removed.</Parameter>
            <Parameter Name="COLUMN_TABLE">A PL/SQL associative array of type DBMS_UTILITY.NAME_ARRAY of the columns in the table to use as the substitute primary key. The index for column_table must be 1-based, increasing, dense, and terminated by a NULL.If the column_table parameter is empty or NULL, then the current set of key columns is removed.</Parameter>
            <Parameter Name="APPLY_DATABASE_LINK">The name of the database link to a non-Oracle database. This parameter should be set only when the destination database is a non-Oracle database.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_PARAMETER" ElementId="#i997629">
          <Description>Sets an apply parameter to the specified value</Description>
          <Parameters>
            <Parameter Name="APPLY_NAME">The apply component name. Do not specify an owner.</Parameter>
            <Parameter Name="PARAMETER">The name of the parameter you are setting. See "Apply Component Parameters" for a list of these parameters.</Parameter>
            <Parameter Name="VALUE">The value to which the parameter is set.If NULL, then the parameter is set to its default value.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_SCHEMA_INSTANTIATION_SCN" ElementId="#i1008880">
          <Description>Records the specified instantiation SCN for the specified schema in the specified source database and, optionally, for the tables owned by the schema at the source database</Description>
          <Parameters>
            <Parameter Name="SOURCE_SCHEMA_NAME">The name of the source schema. For example, hr.When setting an instantiation SCN for schema, always specify the name of the schema at the source database, even if a rule-based transformation or apply handler is configured to change the schema name.</Parameter>
            <Parameter Name="SOURCE_DATABASE_NAME">The global name of the source database. For example, DBS1.NET.If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify DBS1 and the domain is NET, then the procedure specifies DBS1.NET automatically.</Parameter>
            <Parameter Name="INSTANTIATION_SCN">The instantiation SCN. Specify NULL to remove the instantiation SCN metadata for the source schema from the data dictionary.</Parameter>
            <Parameter Name="APPLY_DATABASE_LINK">The name of the database link to a non-Oracle database. This parameter should be set only when the destination database of a local apply component is a non-Oracle database.</Parameter>
            <Parameter Name="RECURSIVE">If TRUE, then the procedure sets the instantiation SCN for the specified schema and all tables owned by the schema in the source database. This procedure selects the tables owned by the specified schema from the ALL_TABLES data dictionary view at the source database under the security context of the current user.If FALSE, then the procedure sets the instantiation SCN for specified schema, but does not set the instantiation SCN for any tablesNote: If recursive is set to TRUE, then a database link from the destination database to the source database is required. This database link must have the same name as the global name of the source database and must be accessible to the current user. Also, a table must be accessible to the current user in either the ALL_TABLES or DBA_TABLES data dictionary view at the source database for this procedure to set the instantiation SCN for the table at the destination database.</Parameter>
            <Parameter Name="SOURCE_ROOT_NAME">The global name of the source root database.In a non-CDB, this parameter must be NULL.In a CDB, both source_database and source_root_name must be specified to identify a specific container.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_TABLE_INSTANTIATION_SCN" ElementId="#i997895">
          <Description>Records the specified instantiation SCN for the specified table in the specified source database</Description>
          <Parameters>
            <Parameter Name="SOURCE_OBJECT_NAME">The name of the source object specified as [schema_name.]object_name. For example, hr.employees. If the schema is not specified, then the current user is the default.When setting an instantiation SCN for a database object, always specify the name of the schema and database object at the source database, even if a rule-based transformation or apply handler is configured to change the schema name or database object name.</Parameter>
            <Parameter Name="SOURCE_DATABASE_NAME">The global name of the source database. For example, DBS1.NET.If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify DBS1 and the domain is NET, then the procedure specifies DBS1.NET automatically.</Parameter>
            <Parameter Name="INSTANTIATION_SCN">The instantiation SCN. Specify NULL to remove the instantiation SCN metadata for the source table from the data dictionary.</Parameter>
            <Parameter Name="APPLY_DATABASE_LINK">The name of the database link to a non-Oracle database. This parameter should be set only when the destination database of a local apply component is a non-Oracle database.Note: This parameter must be NULL when the procedure is invoked from the root of a CDB.</Parameter>
            <Parameter Name="SOURCE_ROOT_NAME">The global name of the source root database.In a non-CDB, this parameter must be NULL.In a CDB, both source_database and source_root_name must be specified to identify a specific container.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_UPDATE_CONFLICT_HANDLER" ElementId="#i997985">
          <Description>Adds, updates, or drops an update conflict handler for the specified object</Description>
          <Parameters>
            <Parameter Name="OBJECT_NAME">The schema and name of the table, specified as [schema_name.]object_name, for which an update conflict handler is being added, modified, or removed.For example, if an update conflict handler is being added for table employees owned by user hr, then specify hr.employees. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="METHOD_NAME">Type of update conflict handler to create.You can specify one of the prebuilt handlers, which determine whether the column list from the source database is applied for the row or whether the values in the row at the destination database are retained:MAXIMUM: Applies the column list from the source database if it has the greater value for the resolution column. Otherwise, retains the values at the destination database.MINIMUM: Applies the column list from the source database if it has the lesser value for the resolution column. Otherwise, retains the values at the destination database.OVERWRITE: Applies the column list from the source database, overwriting the column values at the destination database.DISCARD: Retains the column list from the destination database, discarding the column list from the source database.If NULL, then the procedure removes any existing update conflict handler with the same object_name, resolution_column, and column_list. If non-NULL, then the procedure replaces any existing update conflict handler with the same object_name and resolution_column.</Parameter>
            <Parameter Name="RESOLUTION_COLUMN">Name of the column used to uniquely identify an update conflict handler. For the MAXIMUM and MINIMUM prebuilt methods, the resolution column is also used to resolve the conflict. The resolution column must be one of the columns listed in the column_list parameter.NULL is not allowed for this parameter. For the OVERWRITE and DISCARD prebuilt methods, you can specify any column in the column list.</Parameter>
            <Parameter Name="COLUMN_LIST">List of columns for which the conflict handler is called.The same column cannot be in more than one column list.If a conflict occurs for one or more of the columns in the list when an apply component tries to apply a row logical change record (row LCR), then the conflict handler is called to resolve the conflict. The conflict handler is not called if a conflict occurs only for columns that are not in the list.Note: Prebuilt update conflict handlers do not support LOB, LONG, LONG RAW, user-defined type, and Oracle-suppled type columns. Therefore, you should not include these types of columns in the column_list parameter.</Parameter>
            <Parameter Name="APPLY_DATABASE_LINK">The name of the database link to a non-Oracle database. This parameter should be set only when the destination database is a non-Oracle database.Note: Currently, conflict handlers are not supported when applying changes to a non-Oracle database.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_VALUE_DEPENDENCY" ElementId="#BGBIFHEH">
          <Description>Sets or removes a value dependency</Description>
          <Parameters>
            <Parameter Name="DEPENDENCY_NAME">The name of the value dependency.If a dependency with the specified name does not exist, then it is created.If a dependency with the specified name exists, then the specified object and attributes are added to the dependency.If NULL, an error is raised.</Parameter>
            <Parameter Name="OBJECT_NAME">The name of the table, specified as [schema_name.]table_name. For example, hr.employees. If the schema is not specified, then the current user is the default.If NULL and the specified dependency exists, then the dependency is removed. If NULL and the specified dependency does not exist, then an error is raised.If NULL, then attribute_list and attribute_table also must be NULL.</Parameter>
            <Parameter Name="ATTRIBUTE_LIST">A comma-delimited list of column names in the table. There must be no spaces between entries.</Parameter>
            <Parameter Name="ATTRIBUTE_TABLE">A PL/SQL associative array of type DBMS_UTILITY.NAME_ARRAY that contains names of columns in the table. The first column name should be at position 1, the second at position 2, and so on. The table does not need to be NULL terminated.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="START_APPLY" ElementId="#i998078">
          <Description>Directs the apply component to start applying messages</Description>
        </SubProgram>
        <SubProgram Name="STOP_APPLY" ElementId="#i998119">
          <Description>Stops the apply component from applying any messages and rolls back any unfinished transactions being applied</Description>
          <Parameters>
            <Parameter Name="APPLY_NAME">The apply component name. A NULL setting is not allowed. Do not specify an owner.</Parameter>
            <Parameter Name="FORCE">If TRUE, then the procedure stops the apply component as soon as possible.If FALSE, then the procedure stops the apply component after ensuring that there are no gaps in the set of applied transactions.The behavior of the apply component depends on the setting specified for the force parameter and the setting specified for the commit_serialization apply component parameter. See "Usage Notes" for more information.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_AQ" Url="http://docs.oracle.com/database/121/ARPLS/d_aq.htm">
      <Description>The DBMS_AQ package provides an interface to Oracle Streams Advanced Queuing (AQ).</Description>
      <SubPrograms>
        <SubProgram Name="BIND_AGENT" ElementId="#i1001600">
          <Description>Creates an entry for an Oracle Database Advanced Queuing agent in the LDAP directory</Description>
          <Parameters>
            <Parameter Name="AGENT">Agent that is to be registered in LDAP server.</Parameter>
            <Parameter Name="CERTIFICATE">Location (LDAP distinguished name) of the "organizationalperson" entry in LDAP whose digital certificate (attribute usercertificate) is to be used for this agent. Example: "cn=OE, cn=ACME, cn=com" is a distinguished name for a OrganizationalPerson OE whose certificate will be used with the specified agent.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DEQUEUE" ElementId="#i1000252">
          <Description>Dequeues a message from the specified queue</Description>
          <Parameters>
            <Parameter Name="QUEUE_NAME">Specifies the name of the queue.</Parameter>
            <Parameter Name="DEQUEUE_OPTIONS">See DEQUEUE_OPTIONS_T Type.</Parameter>
            <Parameter Name="MESSAGE_PROPERTIES">See MESSAGE_PROPERTIES_T Type.</Parameter>
            <Parameter Name="PAYLOAD">Not interpreted by Oracle Database Advanced Queuing. The payload must be specified according to the specification in the associated queue table. For the definition of type_name refer to Type Name.</Parameter>
            <Parameter Name="MSGID">System generated identification of the message.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DEQUEUE_ARRAY" ElementId="#i1000850">
          <Description>Dequeues an array of messages from the specified queue</Description>
          <Parameters>
            <Parameter Name="QUEUE_NAME">The queue name from which messages are dequeued (same as single-row dequeue).</Parameter>
            <Parameter Name="DEQUEUE_OPTIONS">The set of options which will be applied to all messages in the array (same as single-row dequeue).</Parameter>
            <Parameter Name="ARRAY_SIZE">The number of elements to dequeue.</Parameter>
            <Parameter Name="MESSAGE_PROPERTIES_ARRAY">A record containing an array corresponding to each message property. Each payload element has a corresponding set of message properties. See MESSAGE_PROPERTIES_ARRAY_T Type.</Parameter>
            <Parameter Name="PAYLOAD_ARRAY">An array of dequeued payload data. "&lt;COLLECTION_1&gt;" can be an associative array, varray or nested table in its PL/SQL representation.</Parameter>
            <Parameter Name="MSGID_ARRAY">An array of message IDs of the dequeued messages. See MSGID_ARRAY_T Type.</Parameter>
            <Parameter Name="ERROR_ARRAY">Currently not implemented</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ENQUEUE" ElementId="#i1001648">
          <Description>Adds a message to the specified queue</Description>
          <Parameters>
            <Parameter Name="QUEUE_NAME">Specifies the name of the queue to which this message should be enqueued. The queue cannot be an exception queue.</Parameter>
            <Parameter Name="ENQUEUE_OPTIONS">See ENQUEUE_OPTIONS_T Type.</Parameter>
            <Parameter Name="MESSAGE_PROPERTIES">See MESSAGE_PROPERTIES_T Type.</Parameter>
            <Parameter Name="PAYLOAD">Not interpreted by Oracle Database Advanced Queuing. The payload must be specified according to the specification in the associated queue table. NULL is an acceptable parameter. For the definition of type_name refer to Type Name.</Parameter>
            <Parameter Name="MSGID">System generated identification of the message. This is a globally unique identifier that can be used to identify the message at dequeue time.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ENQUEUE_ARRAY" ElementId="#i1001754">
          <Description>Adds an array of messages to the specified queue</Description>
          <Parameters>
            <Parameter Name="QUEUE_NAME">The queue name in which messages are enqueued (same as single-row enqueue).</Parameter>
            <Parameter Name="ENQUEUE_OPTIONS">See ENQUEUE_OPTIONS_T Type.</Parameter>
            <Parameter Name="ARRAY_SIZE">The number of elements to enqueue.</Parameter>
            <Parameter Name="MESSAGE_PROPERTIES_ARRAY">A record containing an array corresponding to each message property. For each property, the user must allocate array_size elements. See MESSAGE_PROPERTIES_ARRAY_T Type.</Parameter>
            <Parameter Name="PAYLOAD_ARRAY">An array of payload data. "&lt;COLLECTION_1&gt;" can be an associative array, VARRAY, or nested table in its PL/SQL representation.</Parameter>
            <Parameter Name="MSGID_ARRAY">An array of message IDs for the enqueued messages. If an error occurs for a particular message, then its corresponding message ID is null. See MSGID_ARRAY_T Type.</Parameter>
            <Parameter Name="ERROR_ARRAY">Currently not implemented</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LISTEN" ElementId="#i997325">
          <Description>Listen to one or more queues on behalf of a list of agents</Description>
          <Parameters>
            <Parameter Name="AGENT_LIST">List of agents to listen for</Parameter>
            <Parameter Name="WAIT">Time out for the listen call in seconds. By default, the call will block forever.</Parameter>
            <Parameter Name="LISTEN_DELIVERY_MODE">The caller specifies whether it is interested in persistent, buffered messages or both types of messages, specifying a delivery mode of DBMS_AQ.PERSISTENT or DBMS_AQ.BUFFERED or DBMS_AQ.PERSISTENT_OR_BUFFERED</Parameter>
            <Parameter Name="AGENT">Agent with a message available for consumption</Parameter>
            <Parameter Name="MESSAGE_DELIVERY_MODE">Returns the message type along with the queue and consumer for which there is a message</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="POST" ElementId="#i1001949">
          <Description>Posts to a anonymous subscription which allows all clients who are registered for the subscription to get notifications</Description>
          <Parameters>
            <Parameter Name="POST_LIST">Specifies the list of anonymous subscriptions to which you want to post. It is a list of AQ$_POST_INFO_LIST Type.</Parameter>
            <Parameter Name="POST_COUNT">Specifies the number of entries in the post_list.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REGISTER" ElementId="#i997366">
          <Description>Registers for message notifications</Description>
          <Parameters>
            <Parameter Name="REG_LIST">Specifies the list of subscriptions to which you want to register for message notifications. It is a list of AQ$_REG_INFO Type.</Parameter>
            <Parameter Name="COUNT">Specifies the number of entries in the reg_list.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UNBIND_AGENT" ElementId="#i1001993">
          <Description>Removes an entry for an Oracle Database Advanced Queuing agent from the LDAP directory</Description>
        </SubProgram>
        <SubProgram Name="UNREGISTER" ElementId="#CBACHAFB">
          <Description>Unregisters a subscription which turns off notification</Description>
          <Parameters>
            <Parameter Name="REG_LIST">Specifies the list of subscriptions to which you want to register for message notifications. It is a list of AQ$_REG_INFO Type.</Parameter>
            <Parameter Name="REG_COUNT">Specifies the number of entries in the reg_list.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_AQADM" Url="http://docs.oracle.com/database/121/ARPLS/d_aqadm.htm">
      <Description>The DBMS_AQADM package provides procedures to manage Oracle Database Advanced Queuing (AQ) configuration and administration information.</Description>
      <SubPrograms>
        <SubProgram Name="ADD_ALIAS_TO_LDAP" ElementId="#i1016021">
          <Description>Creates an alias for a queue, agent, or a JMS ConnectionFactory in LDAP</Description>
          <Parameters>
            <Parameter Name="ALIAS">Name of the alias. Example: west_shipping.</Parameter>
            <Parameter Name="OBJ_LOCATION">The distinguished name of the object (queue, agent or connection factory) to which alias refers.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADD_SUBSCRIBER" ElementId="#i1015125">
          <Description>Adds a default subscriber to a queue</Description>
          <Parameters>
            <Parameter Name="QUEUE_NAME">Name of the queue.</Parameter>
            <Parameter Name="SUBSCRIBER">Agent on whose behalf the subscription is being defined.</Parameter>
            <Parameter Name="RULE">A conditional expression based on the message properties, the message data properties and PL/SQL functions. A rule is specified as a Boolean expression using syntax similar to the WHERE clause of a SQL query. This Boolean expression can include conditions on message properties, user data properties (object payloads only), and PL/SQL or SQL functions (as specified in the where clause of a SQL query). Currently supported message properties are priority and corrid.To specify rules on a message payload (object payload), use attributes of the object type in clauses. You must prefix each attribute with tab.user_data as a qualifier to indicate the specific column of the queue table that stores the payload. The rule parameter cannot exceed 4000 characters.</Parameter>
            <Parameter Name="TRANSFORMATION">Specifies a transformation that will be applied when this subscriber dequeues the message. The source type of the transformation must match the type of the queue. If the subscriber is remote, then the transformation is applied before propagation to the remote queue.</Parameter>
            <Parameter Name="QUEUE_TO_QUEUE">If TRUE, propagation is from queue-to-queue.</Parameter>
            <Parameter Name="DELIVERY_MODE">The administrator may specify one of DBMS_AQADM.PERSISTENT, DBMS_AQADM.BUFFERED, or DBMS_AQADM.PERSISTENT_OR_BUFFERED for the delivery mode of the messages the subscriber is interested in. This parameter will not be modifiable by ALTER_SUBSCRIBER.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ALTER_AQ_AGENT" ElementId="#CACDGDCB">
          <Description>Alters an agent registered for Oracle Database Advanced Queuing Internet access, and an Oracle Database Advanced Queuing agent that accesses secure queues</Description>
          <Parameters>
            <Parameter Name="AGENT_NAME">Specifies the username of the Oracle Database Advanced Queuing Internet agent.</Parameter>
            <Parameter Name="CERTIFICATION_LOCATION">Agent's certificate location in LDAP (default is NULL). If the agent is allowed to access Oracle Database Advanced Queuing through SMTP, then its certificate must be registered in LDAP. For access through HTTP, the certificate location is not required.</Parameter>
            <Parameter Name="ENABLE_HTTP">TRUE means the agent can access Oracle Database Advanced Queuing through HTTP. FALSE means the agent cannot access Oracle Database Advanced Queuing through HTTP.</Parameter>
            <Parameter Name="ENABLE_SMTP">TRUE means the agent can access Oracle Database Advanced Queuing through SMTP (e-mail). FALSE means the agent cannot access Oracle Database Advanced Queuing through SMTP.</Parameter>
            <Parameter Name="ENABLE_ANYP">TRUE means the agent can access Oracle Database Advanced Queuing through any protocol (HTTP or SMTP).</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ALTER_PROPAGATION_SCHEDULE" ElementId="#i1015375">
          <Description>Alters parameters for a propagation schedule</Description>
          <Parameters>
            <Parameter Name="QUEUE_NAME">Name of the source queue whose messages are to be propagated, including the schema name. If the schema name is not specified, then it defaults to the schema name of the user.</Parameter>
            <Parameter Name="DESTINATION">Destination database link. Messages in the source queue for recipients at this destination are propagated. If it is NULL, then the destination is the local database and messages are propagated to other queues in the local database. The length of this field is currently limited to 128 bytes, and if the name is not fully qualified, then the default domain name is used.</Parameter>
            <Parameter Name="DURATION">Duration of the propagation window in seconds. A NULL value means the propagation window is forever or until the propagation is unscheduled.</Parameter>
            <Parameter Name="NEXT_TIME">Date function to compute the start of the next propagation window from the end of the current window. If this value is NULL, then propagation is stopped at the end of the current window. For example, to start the window at the same time every day, next_time should be specified as SYSDATE + 1 - duration/86400.</Parameter>
            <Parameter Name="LATENCY">Maximum wait, in seconds, in the propagation window for a message to be propagated after it is enqueued. The default value is 60. Caution: if latency is not specified for this call, then latency will over-write any existing value with the default value.For example, if the latency is 60 seconds and there are no messages to be propagated during the propagation window, then messages from that queue for the destination are not propagated for at least 60 more seconds. It will be at least 60 seconds before the queue will be checked again for messages to be propagated for the specified destination. If the latency is 600, then the queue will not be checked for 10 minutes and if the latency is 0, then a job queue process will be waiting for messages to be enqueued for the destination and as soon as a message is enqueued it will be propagated.</Parameter>
            <Parameter Name="DESTINATION_QUEUE">Name of the target queue to which messages are to be propagated in the form of a dblink</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ALTER_QUEUE" ElementId="#i1014785">
          <Description>Alters existing properties of a queue</Description>
          <Parameters>
            <Parameter Name="QUEUE_NAME">Name of the queue that is to be altered</Parameter>
            <Parameter Name="MAX_RETRIES">Limits the number of times a dequeue with REMOVE mode can be attempted on a message. The maximum value of max_retries is 2**31 -1.A message is moved to an exception queue if RETRY_COUNT is greater than MAX_RETRIES. RETRY_COUNT is incremented when the application issues a rollback after executing the dequeue. If a dequeue transaction fails because the server process dies (including ALTER SYSTEM KILL SESSION) or SHUTDOWN ABORT on the instance, then RETRY_COUNT is not incremented.Note that max_retries is supported for all single consumer queues and 8.1-compatible or higher multiconsumer queues but not for 8.0-compatible multiconsumer queues.</Parameter>
            <Parameter Name="RETRY_DELAY">Delay time in seconds before this message is scheduled for processing again after an application rollback. The default is NULL, which means that the value will not be altered.Note that retry_delay is supported for single consumer queues and 8.1-compatible or higher multiconsumer queues but not for 8.0-compatible multiconsumer queues.</Parameter>
            <Parameter Name="RETENTION_TIME">Retention time in seconds for which a message is retained in the queue table after being dequeued. The default is NULL, which means that the value will not be altered.</Parameter>
            <Parameter Name="AUTO_COMMIT">TRUE causes the current transaction, if any, to commit before the ALTER_QUEUE operation is carried out. The ALTER_QUEUE operation become persistent when the call returns. This is the default. FALSE means the operation is part of the current transaction and becomes persistent only when the caller enters a commit.Caution: This parameter has been deprecated.</Parameter>
            <Parameter Name="COMMENT">User-specified description of the queue. This user comment is added to the queue catalog. The default value is NULL, which means that the value will not be changed.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ALTER_QUEUE_TABLE" ElementId="#i1014529">
          <Description>Alters the existing properties of a queue table</Description>
          <Parameters>
            <Parameter Name="QUEUE_TABLE">Name of a queue table to be created.</Parameter>
            <Parameter Name="COMMENT">Modifies the user-specified description of the queue table. This user comment is added to the queue catalog. The default value is NULL which means that the value will not be changed.</Parameter>
            <Parameter Name="PRIMARY_INSTANCE">This is the primary owner of the queue table. Queue monitor scheduling and propagation for the queues in the queue table will be done in this instance. The default value is NULL, which means that the current value will not be changed.</Parameter>
            <Parameter Name="SECONDARY_INSTANCE">The queue table fails over to the secondary instance if the primary instance is not available. The default value is NULL, which means that the current value will not be changed.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ALTER_SUBSCRIBER" ElementId="#i1015198">
          <Description>Alters existing properties of a subscriber to a specified queue</Description>
          <Parameters>
            <Parameter Name="QUEUE_NAME">Name of the queue.</Parameter>
            <Parameter Name="SUBSCRIBER">Agent on whose behalf the subscription is being altered. See "AQ$_AGENT Type".</Parameter>
            <Parameter Name="RULE">A conditional expression based on the message properties, the message data properties and PL/SQL functions. The rule parameter cannot exceed 4000 characters. To eliminate the rule, set the rule parameter to NULL.</Parameter>
            <Parameter Name="TRANSFORMATION">Specifies a transformation that will be applied when this subscriber dequeues the message. The source type of the transformation must match the type of the queue. If the subscriber is remote, then the transformation is applied before propagation to the remote queue.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_AQ_AGENT" ElementId="#i1015539">
          <Description>Registers an agent for Oracle Database Advanced Queuing Internet access using HTTP/SMTP protocols, and creates an Oracle Database Advanced Queuing agent to access secure queues</Description>
          <Parameters>
            <Parameter Name="AGENT_NAME">Specifies the username of the Oracle Database Advanced Queuing Internet agent.</Parameter>
            <Parameter Name="CERTIFICATION_LOCATION">Agent's certificate location in LDAP (default is NULL). If the agent is allowed to access Oracle Database Advanced Queuing through SMTP, then its certificate must be registered in LDAP. For access through HTTP, the certificate location is not required.</Parameter>
            <Parameter Name="ENABLE_HTTP">TRUE means the agent can access Oracle Database Advanced Queuing through HTTP. FALSE means the agent cannot access Oracle Database Advanced Queuing through HTTP.</Parameter>
            <Parameter Name="ENABLE_SMTP">TRUE means the agent can access Oracle Database Advanced Queuing through SMTP (e-mail). FALSE means the agent cannot access Oracle Database Advanced Queuing through SMTP.</Parameter>
            <Parameter Name="ENABLE_ANYP">TRUE means the agent can access Oracle Database Advanced Queuing through any protocol (HTTP or SMTP).</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_NP_QUEUE" ElementId="#i1014730">
          <Description>Creates a nonpersistent RAW queue</Description>
          <Parameters>
            <Parameter Name="QUEUE_NAME">Name of the nonpersistent queue that is to be created. The name must be unique within a schema and must follow object name guidelines in Oracle Database SQL Language Reference.</Parameter>
            <Parameter Name="MULTIPLE_CONSUMERS">FALSE means queues created in the table can only have one consumer for each message. This is the default. TRUE means queues created in the table can have multiple consumers for each message.Note that this parameter is distinguished at the queue level, because a nonpersistent queue does not inherit this characteristic from any user-created queue table.</Parameter>
            <Parameter Name="COMMENT">User-specified description of the queue. This user comment is added to the queue catalog.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_QUEUE" ElementId="#i1015639">
          <Description>Creates a queue in the specified queue table</Description>
          <Parameters>
            <Parameter Name="QUEUE_NAME">Name of the queue that is to be created. The name must be unique within a schema and must follow object name guidelines in Oracle Database SQL Language Reference with regard to reserved characters.</Parameter>
            <Parameter Name="QUEUE_TABLE">Name of the queue table that will contain the queue.</Parameter>
            <Parameter Name="QUEUE_TYPE">Specifies whether the queue being created is an exception queue or a normal queue. NORMAL_QUEUE means the queue is a normal queue. This is the default. EXCEPTION_QUEUE means it is an exception queue. Only the dequeue operation is allowed on the exception queue.</Parameter>
            <Parameter Name="MAX_RETRIES">Limits the number of times a dequeue with the REMOVE mode can be attempted on a message. The maximum value of max_retries is 2**31 -1.A message is moved to an exception queue if RETRY_COUNT is greater than MAX_RETRIES. RETRY_COUNT is incremented when the application issues a rollback after executing the dequeue. If a dequeue transaction fails because the server process dies (including ALTER SYSTEM KILL SESSION) or SHUTDOWN ABORT on the instance, then RETRY_COUNT is not incremented.Note that max_retries is supported for all single consumer queues and 8.1-compatible or higher multiconsumer queues but not for 8.0-compatible multiconsumer queues.</Parameter>
            <Parameter Name="RETRY_DELAY">Delay time, in seconds, before this message is scheduled for processing again after an application rollback.The default is 0, which means the message can be retried as soon as possible. This parameter has no effect if max_retries is set to 0. Note that retry_delay is supported for single consumer queues and 8.1-compatible or higher multiconsumer queues but not for 8.0-compatible multiconsumer queues.</Parameter>
            <Parameter Name="RETENTION_TIME">Number of seconds for which a message is retained in the queue table after being dequeued from the queue. INFINITE means the message is retained forever. NUMBER is the number of seconds for which to retain the messages. The default is 0, no retention.</Parameter>
            <Parameter Name="DEPENDENCY_TRACKING">Reserved for future use. FALSE is the default. TRUE is not permitted in this release.</Parameter>
            <Parameter Name="COMMENT">User-specified description of the queue. This user comment is added to the queue catalog.</Parameter>
            <Parameter Name="AUTO_COMMIT">TRUE causes the current transaction, if any, to commit before the CREATE_QUEUE operation is carried out. The CREATE_QUEUE operation becomes persistent when the call returns. This is the default. FALSE means the operation is part of the current transaction and becomes persistent only when the caller enters a commit.Caution: This parameter has been deprecated.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_SHARDED_QUEUE" ElementId="#CHDEDBEF">
          <Description>Creates a queue and its queue table for a sharded queue all together.</Description>
          <Parameters>
            <Parameter Name="QUEUE_NAME">This required parameter specifies the name of the new queue.</Parameter>
            <Parameter Name="STORAGE_CLAUSE">The storage parameter is included in the CREATE TABLE statement when the queue table is created. The storage_clause argument can take any text that can be used in a standard CREATE TABLE storage_clause argument.The storage parameter can be made up of any combinations of the following parameters: PCTFREE, PCTUSED, INITRANS, MAXTRANS, TABLESPACE, LOB, and a table storage clause.If a tablespace is not specified here, then the queue table and all its related objects are created in the default user tablespace. If a tablespace is specified here, then the queue table and all its related objects are created in the tablespace specified in the storage clause. See Oracle Database SQL Language Reference for the usage of these parameters.</Parameter>
            <Parameter Name="MULTIPLE_CONSUMERS">FALSE means queues can only have one consumer for each message. This is the default. TRUE means queues created in the table can have multiple consumers for each message.</Parameter>
            <Parameter Name="MAX_RETRIES">This optional parameter limits the number of times that a dequeue can reattempted on a message after a failure. The maximum value of max_retries is 2**31 -1. After the retry limit has been exceeded, the message will be purged from the queue. RETRY_COUNT is incremented when the application issues a rollback after executing the dequeue. If a dequeue transaction fails because the server process dies (including ALTER SYSTEM KILL SESSION) or SHUTDOWN ABORT on the instance, then RETRY_COUNT is not incremented.</Parameter>
            <Parameter Name="COMMENT">This optional parameter is a user-specified description of the queue table. This user comment is added to the queue catalog.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_QUEUE_TABLE" ElementId="#i1014381">
          <Description>Creates a queue table for messages of a predefined type</Description>
          <Parameters>
            <Parameter Name="QUEUE_TABLE">Name of a queue table to be created</Parameter>
            <Parameter Name="QUEUE_PAYLOAD_TYPE">Type of the user data stored. See Type Name for valid values for this parameter.</Parameter>
            <Parameter Name="STORAGE_CLAUSE">Storage parameter. The storage parameter is included in the CREATE TABLE statement when the queue table is created. The storage_clause argument can take any text that can be used in a standard CREATE TABLE storage_clause argument.The storage parameter can be made up of any combinations of the following parameters: PCTFREE, PCTUSED, INITRANS, MAXTRANS, TABLESPACE, LOB, and a table storage clause.If a tablespace is not specified here, then the queue table and all its related objects are created in the default user tablespace. If a tablespace is specified here, then the queue table and all its related objects are created in the tablespace specified in the storage clause. See Oracle Database SQL Language Reference for the usage of these parameters.</Parameter>
            <Parameter Name="SORT_LIST">The columns to be used as the sort key in ascending order. This parameter has the following format:'sort_column_1,sort_column_2'The allowed column names are priority, enq_time, and commit_time.If both columns are specified, then sort_column_1 defines the most significant order.After a queue table is created with a specific ordering mechanism, all queues in the queue table inherit the same defaults. The order of a queue table cannot be altered after the queue table has been created.If no sort list is specified, then all the queues in this queue table are sorted by the enqueue time in ascending order. This order is equivalent to FIFO order.Even with the default ordering defined, a dequeuer is allowed to choose a message to dequeue by specifying its msgid or correlation. msgid, correlation, and sequence_deviation take precedence over the default dequeueing order, if they are specified.When commit_time is specified for the sort_list parameter the resulting queue table uses commit-time ordering. See "Commit-Time Queues" in Oracle Streams Concepts and Administration for more information about commit-time ordering.See also "Priority and Ordering of Messages" in Oracle Database Advanced Queuing User's Guide for information about message ordering in Oracle Database Advanced Queuing.</Parameter>
            <Parameter Name="MULTIPLE_CONSUMERS">FALSE means queues created in the table can only have one consumer for each message. This is the default. TRUE means queues created in the table can have multiple consumers for each message.</Parameter>
            <Parameter Name="MESSAGE_GROUPING">Message grouping behavior for queues created in the table. NONE means each message is treated individually. TRANSACTIONAL means messages enqueued as part of one transaction are considered part of the same group and can be dequeued as a group of related messages.</Parameter>
            <Parameter Name="COMMENT">User-specified description of the queue table. This user comment is added to the queue catalog.</Parameter>
            <Parameter Name="AUTO_COMMIT">TRUE causes the current transaction, if any, to commit before the CREATE_QUEUE_TABLE operation is carried out. The CREATE_QUEUE_TABLE operation becomes persistent when the call returns. This is the default. FALSE means the operation is part of the current transaction and becomes persistent only when the caller enters a commit.Note: This parameter has been deprecated.</Parameter>
            <Parameter Name="PRIMARY_INSTANCE">The primary owner of the queue table. Queue monitor scheduling and propagation for the queues in the queue table are done in this instance.The default value for primary instance is 0, which means queue monitor scheduling and propagation will be done in any available instance.</Parameter>
            <Parameter Name="SECONDARY_INSTANCE">The queue table fails over to the secondary instance if the primary instance is not available. The default value is 0, which means that the queue table will fail over to any available instance.</Parameter>
            <Parameter Name="COMPATIBLE">The lowest database version with which the queue is compatible. Currently the possible values are either 8.0, 8.1, or 10.0. If the database is in 10.1-compatible mode, the default value is 10.0. If the database is in 8.1-compatible or 9.2-compatible mode, the default value is 8.1. If the database is in 8.0 compatible mode, the default value is 8.0.</Parameter>
            <Parameter Name="SECURE">This parameter must be set to TRUE if you want to use the queue table for secure queues. Secure queues are queues for which AQ agents must be associated explicitly with one or more database users who can perform queue operations, such as enqueue and dequeue. The owner of a secure queue can perform all queue operations on the queue, but other users cannot perform queue operations on a secure queue, unless they are configured as secure queue users.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_SHARDED_QUEUE" ElementId="#BABBGHGI">
          <Description>Drops an existing sharded queue from the database queuing system</Description>
        </SubProgram>
        <SubProgram Name="DEL_ALIAS_FROM_LDAP" ElementId="#i1016072">
          <Description>Drops an alias for a queue, agent, or JMS ConnectionFactory in LDAP</Description>
          <Parameters>
            <Parameter Name="ALIAS">The alias to be removed.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DISABLE_DB_ACCESS" ElementId="#i1015964">
          <Description>Revokes the privileges of a specific database user from an Oracle Database Advanced Queuing Internet agent</Description>
          <Parameters>
            <Parameter Name="AGENT_NAME">Specifies the username of the Oracle Database Advanced Queuing Internet agent.</Parameter>
            <Parameter Name="DB_USERNAME">Specifies the database user whose privileges are to be revoked from the Oracle Database Advanced Queuing Internet agent.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DISABLE_PROPAGATION_SCHEDULE" ElementId="#i1015488">
          <Description>Disables a propagation schedule</Description>
          <Parameters>
            <Parameter Name="QUEUE_NAME">Name of the source queue whose messages are to be propagated, including the schema name. If the schema name is not specified, then it defaults to the schema name of the user.</Parameter>
            <Parameter Name="DESTINATION">Destination database link. Messages in the source queue for recipients at this destination are propagated. If it is NULL, then the destination is the local database and messages are propagated to other queues in the local database. The length of this field is currently limited to 128 bytes, and if the name is not fully qualified, then the default domain name is used.</Parameter>
            <Parameter Name="DESTINATION_QUEUE">Name of the target queue to which messages are to be propagated in the form of a dblink</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_AQ_AGENT" ElementId="#i1015851">
          <Description>Drops an agent that was previously registered for Oracle Database Advanced Queuing Internet access</Description>
          <Parameters>
            <Parameter Name="AGENT_NAME">Specifies the username of the Oracle Database Advanced Queuing Internet agent</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_QUEUE" ElementId="#i1014867">
          <Description>Drops an existing queue</Description>
          <Parameters>
            <Parameter Name="QUEUE_NAME">Name of the queue that is to be dropped.</Parameter>
            <Parameter Name="AUTO_COMMIT">TRUE causes the current transaction, if any, to commit before the DROP_QUEUE operation is carried out. The DROP_QUEUE operation becomes persistent when the call returns. This is the default. FALSE means the operation is part of the current transaction and becomes persistent only when the caller enters a commit.Caution: This parameter has been deprecated.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_QUEUE_TABLE" ElementId="#i1011453">
          <Description>Drops an existing queue table</Description>
          <Parameters>
            <Parameter Name="QUEUE_TABLE">Name of a queue table to be dropped.</Parameter>
            <Parameter Name="FORCE">FALSE means the operation does not succeed if there are any queues in the table. This is the default. TRUE means all queues in the table are stopped and dropped automatically.</Parameter>
            <Parameter Name="AUTO_COMMIT">TRUE causes the current transaction, if any, to commit before the DROP_QUEUE_TABLE operation is carried out. The DROP_QUEUE_TABLE operation becomes persistent when the call returns. This is the default. FALSE means the operation is part of the current transaction and becomes persistent only when the caller enters a commit.Caution: This parameter has been deprecated.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ENABLE_DB_ACCESS" ElementId="#i1015894">
          <Description>Grants an Oracle Database Advanced Queuing Internet agent the privileges of a specific database user</Description>
          <Parameters>
            <Parameter Name="AGENT_NAME">Specifies the username of the Oracle Database Advanced Queuing Internet agent.</Parameter>
            <Parameter Name="DB_USERNAME">Specified the database user whose privileges are to be granted to the Oracle Database Advanced Queuing Internet agent.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ENABLE_JMS_TYPES" ElementId="#i1016404">
          <Description>A precondition for the enqueue of JMS types and XML types</Description>
          <Parameters>
            <Parameter Name="QUEUE_TABLE">Specifies name of the queue table to be enabled for JMS and XML types.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ENABLE_PROPAGATION_SCHEDULE" ElementId="#i1015435">
          <Description>Enables a previously disabled propagation schedule</Description>
          <Parameters>
            <Parameter Name="QUEUE_NAME">Name of the source queue whose messages are to be propagated, including the schema name. If the schema name is not specified, then it defaults to the schema name of the user.</Parameter>
            <Parameter Name="DESTINATION">Destination database link. Messages in the source queue for recipients at this destination are propagated. If it is NULL, then the destination is the local database and messages are propagated to other queues in the local database. The length of this field is currently limited to 128 bytes, and if the name is not fully qualified, then the default domain name is used.</Parameter>
            <Parameter Name="DESTINATION_QUEUE">Name of the target queue to which messages are to be propagated in the form of a dblink</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_WATERMARK" ElementId="#BABDIFDJ">
          <Description>Retrieves the value of watermark set by the SET_WATERMARK Procedure</Description>
        </SubProgram>
        <SubProgram Name="GET_MAX_STREAMS_POOL" ElementId="#i1016831">
          <Description>Retrieves the value of Oracle Database Advanced Queuing maximum streams pool memory limit</Description>
        </SubProgram>
        <SubProgram Name="GET_MIN_STREAMS_POOL" ElementId="#BABFEFIJ">
          <Description>Retrieves the value of Oracle Database Advanced Queuing minimum streams pool memory limit</Description>
        </SubProgram>
        <SubProgram Name="GRANT_QUEUE_PRIVILEGE" ElementId="#i1014966">
          <Description>Grants privileges on a queue to users and roles</Description>
          <Parameters>
            <Parameter Name="PRIVILEGE">The Oracle Database Advanced Queuing queue privilege to grant. The options are ENQUEUE, DEQUEUE, and ALL. ALL means both ENQUEUE and DEQUEUE.</Parameter>
            <Parameter Name="QUEUE_NAME">Name of the queue.</Parameter>
            <Parameter Name="GRANTEE">Grantee(s). The grantee(s) can be a user, a role, or the PUBLIC role.</Parameter>
            <Parameter Name="GRANT_OPTION">Specifies if the access privilege is granted with the GRANT option or not. If the privilege is granted with the GRANT option, then the grantee is allowed to use this procedure to grant the access privilege to other users or roles, regardless of the ownership of the queue table. The default is FALSE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GRANT_SYSTEM_PRIVILEGE" ElementId="#i1014912">
          <Description>Grants Oracle Database Advanced Queuing system privileges to users and roles</Description>
          <Parameters>
            <Parameter Name="PRIVILEGE">The Oracle Database Advanced Queuing system privilege to grant. The options are ENQUEUE_ANY, DEQUEUE_ANY, and MANAGE_ANY. ENQUEUE_ANY means users granted this privilege are allowed to enqueue messages to any queues in the database. DEQUEUE_ANY means users granted this privilege are allowed to dequeue messages from any queues in the database. MANAGE_ANY means users granted this privilege are allowed to run DBMS_AQADM calls on any schemas in the database.</Parameter>
            <Parameter Name="GRANTEE">Grantee(s). The grantee(s) can be a user, a role, or the PUBLIC role.</Parameter>
            <Parameter Name="ADMIN_OPTION">Specifies if the system privilege is granted with the ADMIN option or not.If the privilege is granted with the ADMIN option, then the grantee is allowed to use this procedure to grant the system privilege to other users or roles. The default is FALSE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MIGRATE_QUEUE_TABLE" ElementId="#i1014582">
          <Description>Upgrades an 8.0-compatible queue table to an 8.1-compatible or higher queue table, or downgrades an 8.1-compatible or higher queue table to an 8.0-compatible queue table</Description>
          <Parameters>
            <Parameter Name="QUEUE_TABLE">Specifies name of the queue table to be migrated.</Parameter>
            <Parameter Name="COMPATIBLE">Set this to 8.1 to upgrade an 8.0-compatible queue table, or set this to 8.0 to downgrade an 8.1-compatible queue table.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PURGE_QUEUE_TABLE" ElementId="#i1014013">
          <Description>Purges messages from queue tables</Description>
          <Parameters>
            <Parameter Name="QUEUE_TABLE">Specifies the name of the queue table to be purged.</Parameter>
            <Parameter Name="PURGE_CONDITION">Specifies the purge condition to use when purging the queue table. The purge condition must be in the format of a SQL WHERE clause, and it is case-sensitive. The condition is based on the columns of aq$queue_table_name view.When specifying the purge_condition, qualify the column names in aq$queue_table_name view with qtview.To purge all queues in a queue table, set purge_condition to either NULL (a bare null word, no quotes) or'' (two single quotes).</Parameter>
            <Parameter Name="PURGE_OPTIONS">Type aq$_purge_options_t contains a block parameter and a delivery_mode parameter.If block is TRUE, then an exclusive lock on all the queues in the queue table is held while purging the queue table. This will cause concurrent enqueuers and dequeuers to block while the queue table is purged. The purge call always succeeds if block is TRUE. The default for block is FALSE. This will not block enqueuers and dequeuers, but it can cause the purge to fail with an error during high concurrency times.delivery_mode is used to specify whether DBMS_AQADM.PERSISTENT, DBMS_AQADM.BUFFERED or DBMS_AQADM.PERSISTENT_OR_BUFFERED types of messages are to be purged. You cannot implement arbitrary purge conditions if buffered messages have to be purged.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="QUEUE_SUBSCRIBERS" ElementId="#i1016768">
          <Description>Returns the subscribers to an 8.0-compatible multiconsumer queue in the PL/SQL index by table collection type DBMS_AQADM.AQ$_subscriber_list_t</Description>
          <Parameters>
            <Parameter Name="QUEUE_NAME">Specifies the queue whose subscribers are to be printed.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVE_SUBSCRIBER" ElementId="#i1015258">
          <Description>Removes a default subscriber from a queue</Description>
          <Parameters>
            <Parameter Name="QUEUE_NAME">Name of the queue.</Parameter>
            <Parameter Name="SUBSCRIBER">Agent who is being removed. See AQ$_AGENT Type.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REVOKE_QUEUE_PRIVILEGE" ElementId="#i1015021">
          <Description>Revokes privileges on a queue from users and roles</Description>
          <Parameters>
            <Parameter Name="PRIVILEGE">The Oracle Database Advanced Queuing queue privilege to revoke. The options are ENQUEUE, DEQUEUE, and ALL. ALL means both ENQUEUE and DEQUEUE.</Parameter>
            <Parameter Name="QUEUE_NAME">Name of the queue.</Parameter>
            <Parameter Name="GRANTEE">Grantee(s). The grantee(s) can be a user, a role, or the PUBLIC role. If the privilege has been propagated by the grantee through the GRANT option, then the propagated privilege is also revoked.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REVOKE_SYSTEM_PRIVILEGE" ElementId="#i1015074">
          <Description>Revokes Oracle Database Advanced Queuing system privileges from users and roles</Description>
          <Parameters>
            <Parameter Name="PRIVILEGE">The Oracle Database Advanced Queuing system privilege to revoke. The options are ENQUEUE_ANY, DEQUEUE_ANY, and MANAGE_ANY. The ADMIN option for a system privilege cannot be selectively revoked.</Parameter>
            <Parameter Name="GRANTEE">Grantee(s). The grantee(s) can be a user, a role, or the PUBLIC role.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SCHEDULE_PROPAGATION" ElementId="#i1015306">
          <Description>Schedules propagation of messages from a queue to a destination identified by a specific database link</Description>
          <Parameters>
            <Parameter Name="QUEUE_NAME">Name of the source queue whose messages are to be propagated, including the schema name. If the schema name is not specified, then it defaults to the schema name of the administrative user.</Parameter>
            <Parameter Name="DESTINATION">Destination database link. Messages in the source queue for recipients at this destination are propagated. If it is NULL, then the destination is the local database and messages are propagated to other queues in the local database. The length of this field is currently limited to 128 bytes, and if the name is not fully qualified, then the default domain name is used.</Parameter>
            <Parameter Name="START_TIME">Initial start time for the propagation window for messages from the source queue to the destination.</Parameter>
            <Parameter Name="DURATION">Duration of the propagation window in seconds. A NULL value means the propagation window is forever or until the propagation is unscheduled.</Parameter>
            <Parameter Name="NEXT_TIME">Date function to compute the start of the next propagation window from the end of the current window. If this value is NULL, then propagation is stopped at the end of the current window. For example, to start the window at the same time every day, next_time should be specified as SYSDATE + 1 - duration/86400.</Parameter>
            <Parameter Name="LATENCY">Maximum wait, in seconds, in the propagation window for a message to be propagated after it is enqueued.For example, if the latency is 60 seconds and there are no messages to be propagated during the propagation window, then messages from that queue for the destination are not propagated for at least 60 more seconds.It is at least 60 seconds before the queue is checked again for messages to be propagated for the specified destination. If the latency is 600, then the queue is not checked for 10 minutes, and if the latency is 0, then a job queue process will be waiting for messages to be enqueued for the destination. As soon as a message is enqueued, it is propagated.</Parameter>
            <Parameter Name="DESTINATION_QUEUE">Name of the target queue to which messages are to be propagated in the form of a dblink</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_WATERMARK" ElementId="#BABBJFJA">
          <Description>Used for Oracle Database Advanced Queuing notification to specify and limit memory use</Description>
        </SubProgram>
        <SubProgram Name="SET_MAX_STREAMS_POOL" ElementId="#i1016938">
          <Description>Used for Oracle Database Advanced Queuing to specify and limit maximum streams pool memory use</Description>
        </SubProgram>
        <SubProgram Name="SET_MIN_STREAMS_POOL" ElementId="#BABFJBAH">
          <Description>used for Oracle Database Advanced Queuing to specify and limit minimum streams pool memory use</Description>
        </SubProgram>
        <SubProgram Name="START_QUEUE" ElementId="#i1011806">
          <Description>Enables the specified queue for enqueuing or dequeuing</Description>
          <Parameters>
            <Parameter Name="QUEUE_NAME">Name of the queue to be enabled</Parameter>
            <Parameter Name="ENQUEUE">Specifies whether ENQUEUE should be enabled on this queue. TRUE means enable ENQUEUE. This is the default. FALSE means do not alter the current setting.</Parameter>
            <Parameter Name="DEQUEUE">Specifies whether DEQUEUE should be enabled on this queue. TRUE means enable DEQUEUE. This is the default. FALSE means do not alter the current setting.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="STOP_QUEUE" ElementId="#i1011844">
          <Description>Disables enqueuing or dequeuing on the specified queue</Description>
          <Parameters>
            <Parameter Name="QUEUE_NAME">Name of the queue to be disabled</Parameter>
            <Parameter Name="ENQUEUE">Specifies whether ENQUEUE should be disabled on this queue. TRUE means disable ENQUEUE. This is the default. FALSE means do not alter the current setting.</Parameter>
            <Parameter Name="DEQUEUE">Specifies whether DEQUEUE should be disabled on this queue. TRUE means disable DEQUEUE. This is the default. FALSE means do not alter the current setting.</Parameter>
            <Parameter Name="WAIT">Specifies whether to wait for the completion of outstanding transactions. TRUE means wait if there are any outstanding transactions. In this state no new transactions are allowed to enqueue to or dequeue from this queue. FALSE means return immediately either with a success or an error.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UNSCHEDULE_PROPAGATION" ElementId="#i1014138">
          <Description>Unschedules previously scheduled propagation of messages from a queue to a destination identified by a specific database link</Description>
          <Parameters>
            <Parameter Name="QUEUE_NAME">Name of the source queue whose messages are to be propagated, including the schema name. If the schema name is not specified, then it defaults to the schema name of the administrative user.</Parameter>
            <Parameter Name="DESTINATION">Destination database link. Messages in the source queue for recipients at this destination are propagated. If it is NULL, then the destination is the local database and messages are propagated to other queues in the local database. The length of this field is currently limited to 128 bytes, and if the name is not fully qualified, then the default domain name is used.</Parameter>
            <Parameter Name="DESTINATION_QUEUE">Name of the target queue to which messages are to be propagated in the form of a dblink</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="VERIFY_QUEUE_TYPES" ElementId="#i1012328">
          <Description>Verifies that the source and destination queues have identical types</Description>
          <Parameters>
            <Parameter Name="SRC_QUEUE_NAME">Name of the source queue whose messages are to be propagated, including the schema name. If the schema name is not specified, then it defaults to the schema name of the user.</Parameter>
            <Parameter Name="DEST_QUEUE_NAME">Name of the destination queue where messages are to be propagated, including the schema name. If the schema name is not specified, then it defaults to the schema name of the user.</Parameter>
            <Parameter Name="DESTINATION">Destination database link. Messages in the source queue for recipients at this destination are propagated. If it is NULL, then the destination is the local database and messages are propagated to other queues in the local database. The length of this field is currently limited to 128 bytes, and if the name is not fully qualified, then the default domain name is used.</Parameter>
            <Parameter Name="RC">Return code for the result of the procedure. If there is no error, and if the source and destination queue types match, then the result is 1. If they do not match, then the result is 0. If an Oracle error is encountered, then it is returned in rc.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_AQELM" Url="http://docs.oracle.com/database/121/ARPLS/d_aqelm.htm">
      <Description>The DBMS_AQELM package provides subprograms to manage the configuration of Oracle Streams Advanced Queuing (AQ) asynchronous notification by e-mail and HTTP.</Description>
    </Package>
    <Package Name="DBMS_AQIN" Url="http://docs.oracle.com/database/121/ARPLS/d_aquin.htm">
      <Description>The DBMS_AQIN package plays a part in providing secure access to the Oracle JMS interfaces.</Description>
    </Package>
    <Package Name="DBMS_ASSERT" Url="http://docs.oracle.com/database/121/ARPLS/d_assert.htm">
      <Description>The DBMS_ASSERT package provides an interface to validate properties of the input value.</Description>
    </Package>
    <Package Name="DBMS_AUDIT_MGMT" Url="http://docs.oracle.com/database/121/ARPLS/d_audit_mgmt.htm">
      <Description>The DBMS_AUDIT_MGMT package provides subprograms to manage audit trail records. These subprograms enable audit administrators to manage the audit trail. In a mixed-mode environment, these audit trails comprise the database, operating system (OS), and XML audit trails. In a unified auditing environment, this comprises the unified audit trail.</Description>
      <SubPrograms>
        <SubProgram Name="CLEAN_AUDIT_TRAIL" ElementId="#BABIAEAH">
          <Description>Deletes audit trail records that have been archived</Description>
          <Parameters>
            <Parameter Name="AUDIT_TRAIL_TYPE">The audit trail type for which the cleanup operation needs to be performed. Audit trail types are listed in Table 29-1, "DBMS_AUDIT_MGMT Constants - Audit Trail Types" .</Parameter>
            <Parameter Name="USE_LAST_ARCH_TIMESTAMP">Specifies whether the last archived timestamp should be used for deciding on the records that should be deleted.A value of TRUE indicates that only audit records created before the last archive timestamp should be deleted.A value of FALSE indicates that all audit records should be deleted.The default value is TRUE. Oracle recommends using this value, as this helps guard against inadvertent deletion of records.</Parameter>
            <Parameter Name="CONTAINER">Values: CONTAINER_CURRENT for the connected pluggable database (PDB) or CONTAINER_ALL for all pluggable databases (PDBs). When CONTAINER is set to CONTAINER_ALL, this purges the audit trail in all the PDBs, otherwise it only purges from the connected PDB.</Parameter>
            <Parameter Name="DATABASE_ID">Database ID (DBID) of the audit records to cleanup</Parameter>
            <Parameter Name="CONTAINER_GUID">Container GUID of the audit records to cleanup</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CLEAR_AUDIT_TRAIL_PROPERTY" ElementId="#BABHFBJG">
          <Description>Clears the value for the audit trail property that you specify</Description>
          <Parameters>
            <Parameter Name="AUDIT_TRAIL_TYPE">The audit trail type for which the property needs to be cleared. Audit trail types are listed in Table 29-1, "DBMS_AUDIT_MGMT Constants - Audit Trail Types"</Parameter>
            <Parameter Name="AUDIT_TRAIL_PROPERTY">The audit trail property whose value needs to be cleared. You cannot clear the value for the CLEANUP_INTERVAL property.Audit trail properties are listed in Table 29-2, "DBMS_AUDIT_MGMT Constants - Audit Trail Properties"</Parameter>
            <Parameter Name="USE_DEFAULT_VALUES">Specifies whether the default value of the audit_trail_property should be used in place of the cleared value. A value of TRUE causes the default value of the parameter to be used. A value of FALSE causes the audit_trail_property to have no value.The default value for this parameter is FALSE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CLEAR_LAST_ARCHIVE_TIMESTAMP" ElementId="#BABFJEAI">
          <Description>Clears the timestamp set by the SET_LAST_ARCHIVE_TIMESTAMP Procedure</Description>
          <Parameters>
            <Parameter Name="AUDIT_TRAIL_TYPE">The audit trail type for which the timestamp needs to be cleared. Audit trail types are listed in Table 29-1, "DBMS_AUDIT_MGMT Constants - Audit Trail Types" .</Parameter>
            <Parameter Name="RAC_INSTANCE_NUMBER">The instance number for the Oracle Real Application Clusters (Oracle RAC) instance. The default value is NULL. The rac_instance_number is not relevant for single instance databases. You can find the instance number by issuing the SHOW PARAMETER INSTANCE_NUMBER command in SQL*Plus.</Parameter>
            <Parameter Name="CONTAINER">Values: CONTAINER_CURRENT for the connected pluggable database (PDB) or CONTAINER_ALL for all pluggable databases (PDBs). When CONTAINER is set to CONTAINER_ALL, this clears the last archive timestamp from all the PDBs, otherwise it clears from only the connected PDB.</Parameter>
            <Parameter Name="DATABASE_ID">Database ID (DBID) of the audit records to cleanup</Parameter>
            <Parameter Name="CONTAINER_GUID">Container GUID of the audit records to cleanup</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_PURGE_JOB" ElementId="#BABFJHCB">
          <Description>Creates a purge job for periodically deleting the audit trail records</Description>
          <Parameters>
            <Parameter Name="AUDIT_TRAIL_TYPE">The audit trail type for which the purge job needs to be created. Audit trail types are listed in Table 29-1, "DBMS_AUDIT_MGMT Constants - Audit Trail Types" .</Parameter>
            <Parameter Name="AUDIT_TRAIL_PURGE_INTERVAL">The interval, in hours, at which the clean up procedure is called. A lower value means that the cleanup is performed more often.</Parameter>
            <Parameter Name="AUDIT_TRAIL_PURGE_NAME">A name to identify the purge job.</Parameter>
            <Parameter Name="USE_LAST_ARCH_TIMESTAMP">Specifies whether the last archived timestamp should be used for deciding on the records that should be deleted.A value of TRUE indicates that only audit records created before the last archive timestamp should be deleted.A value of FALSE indicates that all audit records should be deleted.The default value is TRUE.</Parameter>
            <Parameter Name="CONTAINER">Values: CONTAINER_CURRENT for the connected pluggable database (PDB) or CONTAINER_ALL for all pluggable databases (PDBs). When CONTAINER is set to CONTAINER_ALL, it creates one job in the Root PDB and the invocation of this job will invoke cleanup in all the PDBs.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DEINIT_CLEANUP" ElementId="#BABGCGDD">
          <Description>Undoes the setup and initialization performed by the INIT_CLEANUP Procedure</Description>
          <Parameters>
            <Parameter Name="AUDIT_TRAIL_TYPE">The audit trail type for which the procedure needs to be called.Audit trail types are listed in Table 29-1, "DBMS_AUDIT_MGMT Constants - Audit Trail Types"</Parameter>
            <Parameter Name="CONTAINER">Values: CONTAINER_CURRENT for the connected pluggable database (PDB) or CONTAINER_ALL for all pluggable databases (PDBs). When CONTAINER is set to CONTAINER_ALL, this de-initializes the audit trail from cleanup in all the pluggable databases, otherwise it de-initializes the audit trail from cleanup in the connected PDB only.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_OLD_UNIFIED_AUDIT_TABLES" ElementId="#BABGHBCB">
          <Description>Drops old unified audit tables following the cloning of a pluggable database (PDB)</Description>
          <Parameters>
            <Parameter Name="CONTAINER_GUID">Container GUID of the old unified audit tables</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_PURGE_JOB" ElementId="#BABGIHAG">
          <Description>Drops the purge job created using the CREATE_PURGE_JOB Procedure</Description>
          <Parameters>
            <Parameter Name="AUDIT_TRAIL_PURGE_NAME">The name of the purge job which is being deleted. This is the purge job name that you specified with the CREATE_PURGE_JOB Procedure.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="FLUSH_UNIFIED_AUDIT_TRAIL" ElementId="#BABBFBHG">
          <Description>Writes the unified audit trail records in the SGA queue to disk</Description>
          <Parameters>
            <Parameter Name="FLUSH_TYPE">Takes one of the following two arguments:FLUSH_CURRENT_INSTANCE - Flushes the audit records from SGA queues in that particular RAC instanceFLUSH_ALL_INSTANCES - Flushes the audit records from SGA queues in all the RAC instances</Parameter>
            <Parameter Name="CONTAINER">The containers where the SGA queues should be flushed. It takes one of the following two arguments:CONTAINER_CURRENT - Flushes the audit records from SGA queues in that particular PDBCONTAINER_ALL - Flushes the audit records from SGA queues in all the active PDBs.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_AUDIT_COMMIT_DELAY" ElementId="#BABGGHGG">
          <Description>Returns the audit commit delay time as the number of seconds. This is the maximum time that it takes to COMMIT an audit record to the database audit trail.</Description>
        </SubProgram>
        <SubProgram Name="GET_" ElementId="#BABHEHDC">
          <Description>Returns the property value set by the SET_AUDIT_TRAIL_PROPERTY Procedure</Description>
        </SubProgram>
        <SubProgram Name="GET_LAST_ARCHIVE_TIMESTAMP" ElementId="#BABGIGDC">
          <Description>Returns the timestamp set by the SET_LAST_ARCHIVE_TIMESTAMP Procedure in that database instance</Description>
          <Parameters>
            <Parameter Name="AUDIT_TRAIL_TYPE">The audit trail type for the timestamp to be retrieved. Audit trail types are listed in Table 29-1, "DBMS_AUDIT_MGMT Constants - Audit Trail Types" .</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="INIT_CLEANUP" ElementId="#BABFHEFH">
          <Description>Sets up the audit management infrastructure and sets a default cleanup interval for audit trail records</Description>
          <Parameters>
            <Parameter Name="AUDIT_TRAIL_TYPE">The audit trail type for which the clean up operation needs to be initialized.Audit trail types are listed in Table 29-1, "DBMS_AUDIT_MGMT Constants - Audit Trail Types" except AUDIT_TRAIL_UNIFIED</Parameter>
            <Parameter Name="DEFAULT_CLEANUP_INTERVAL">The default time interval, in hours, after which the cleanup procedure should be called. The minimum value is 1 and the maximum is 999.</Parameter>
            <Parameter Name="CONTAINER">Values: CONTAINER_CURRENT for the connected pluggable database (PDB) or CONTAINER_ALL for all pluggable databases (PDBs). When CONTAINER is set to CONTAINER_ALL, this initializes the audit trails for clean up in all the pluggable databases, otherwise this initializes the audit trail in the connected PDB only.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IS_CLEANUP_INITIALIZED" ElementId="#BABDGBCC">
          <Description>Checks to see if the INIT_CLEANUP Procedure has been run for an audit trail type</Description>
          <Parameters>
            <Parameter Name="AUDIT_TRAIL_TYPE">The audit trail type for which the function needs to be called. Note that this does not apply to AUDIT_TRAIL_UNIFIED.Audit trail types are listed in Table 29-1, "DBMS_AUDIT_MGMT Constants - Audit Trail Types"</Parameter>
            <Parameter Name="CONTAINER">Values: CONTAINER_CURRENT for the connected pluggable database (PDB) or CONTAINER_ALL for all pluggable databases (PDBs).When CONTAINER is set to CONTAINER_ALL, this function returns the initialization status of all the pluggable databases. The function returns FALSE even if one of the PDBs is not initialized.When CONTAINER is set to CONTAINER_CURRENT, this returns the initialization status of the connected PDB.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LOAD_UNIFIED_AUDIT_FILES" ElementId="#BABEJFEA">
          <Description>Loads the data from the spillover OS audit files in a unified audit trail into the designated unified audit trail tablespace</Description>
          <Parameters>
            <Parameter Name="CONTAINER">Values: CONTAINER_CURRENT for the connected pluggable database (PDB) or CONTAINER_ALL for all pluggable databases (PDBs).CONTAINER_CURRENT - loads the unified audit files from $ORACLE_BASE/audit/$ORACLE_SID OS directory to the tables in only current PDBCONTAINER_ALL - loads the unified audit files from $ORACLE_BASE/audit/$ORACLE_SID OS directory to the tables in the respective PDBs, but for all the active PDBs</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_AUDIT_TRAIL_LOCATION" ElementId="#BABDAHBG">
          <Description>Moves the audit trail tables from their current tablespace to a user-specified tablespace</Description>
          <Parameters>
            <Parameter Name="AUDIT_TRAIL_TYPE">The audit trail type for which the audit trail location needs to be set.Audit trail types are listed in Table 29-1, "DBMS_AUDIT_MGMT Constants - Audit Trail Types"</Parameter>
            <Parameter Name="AUDIT_TRAIL_LOCATION_VALUE">Target location or tablespace for the audit trail records</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_AUDIT_TRAIL_PROPERTY" ElementId="#BABBBBJE">
          <Description>Sets the audit trail properties for the audit trail type that you specify</Description>
          <Parameters>
            <Parameter Name="AUDIT_TRAIL_TYPE">The audit trail type for which the property needs to be set. Audit trail types are listed in Table 29-1, "DBMS_AUDIT_MGMT Constants - Audit Trail Types"</Parameter>
            <Parameter Name="AUDIT_TRAIL_PROPERTY">The audit trail property that is being set. Audit trail properties are listed in Table 29-2, "DBMS_AUDIT_MGMT Constants - Audit Trail Properties"</Parameter>
            <Parameter Name="AUDIT_TRAIL_PROPERTY_VALUE">The value of the property specified using audit_trail_property. The following are valid values for audit trail properties:OS_FILE_MAX_SIZE can have a minimum value of 1 and maximum value of 2000000. The default value is 10000. OS_FILE_MAX_SIZE is measured in kilobytes (KB).OS_FILE_MAX_AGE can have a minimum value of 1 and a maximum value of 497. The default value is 5. OS_FILE_MAX_AGE is measured in days.DB_DELETE_BATCH_SIZE can have a minimum value of 100 and a maximum value of 1000000. The default value is 10000. DB_DELETE_BATCH_SIZE is measured as the number of audit records that are deleted in one batch.FILE_DELETE_BATCH_SIZE can have a minimum value of 100 and a maximum value of 1000000. The default value is 1000. FILE_DELETE_BATCH_SIZE is measured as the number of audit files that are deleted in one batch.CLEANUP_INTERVAL can have a minimum value of 1 and a maximum value of 999. The default value is set using the INIT_CLEANUP Procedure. CLEANUP_INTERVAL is measured in hours.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_LAST_ARCHIVE_TIMESTAMP" ElementId="#BABBHHGC">
          <Description>Sets a timestamp indicating when the audit records were last archived</Description>
          <Parameters>
            <Parameter Name="AUDIT_TRAIL_TYPE">The audit trail type for which the timestamp needs to be set. Audit trail types are listed in Table 29-1, "DBMS_AUDIT_MGMT Constants - Audit Trail Types" .</Parameter>
            <Parameter Name="LAST_ARCHIVE_TIME">The TIMESTAMP value based on which the audit records or files should be deleted. This indicates the last time when the audit records or files were archived.</Parameter>
            <Parameter Name="RAC_INSTANCE_NUMBER">The instance number for the Oracle Real Application Clusters (Oracle RAC) instance.The default value is NULL.The rac_instance_number is not relevant for the database audit trail type, as the database audit trail tables are shared by all Oracle RAC instances. The rac_instance_number is also not relevant for a single-instance database.</Parameter>
            <Parameter Name="CONTAINER">Values: CONTAINER_CURRENT for the connected pluggable database (PDB) or CONTAINER_ALL for all pluggable databases (PDBs). When CONTAINER is set to CONTAINER_ALL, this sets the value for last archive timestamp in all the pluggable databases, otherwise it sets the value in the connected PDB only.</Parameter>
            <Parameter Name="DATABASE_ID">Database ID (DBID) of the audit records to cleanup</Parameter>
            <Parameter Name="CONTAINER_GUID">Container GUID of the audit records to cleanup</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_PURGE_JOB_INTERVAL" ElementId="#BABFJBGE">
          <Description>Sets the interval at which the CLEAN_AUDIT_TRAIL Procedure is called for the purge job that you specify</Description>
          <Parameters>
            <Parameter Name="AUDIT_TRAIL_PURGE_NAME">The name of the purge job for which the interval is being set. This is the purge job name that you specified with the CREATE_PURGE_JOB Procedure.</Parameter>
            <Parameter Name="AUDIT_TRAIL_INTERVAL_VALUE">The interval, in hours, at which the clean up procedure should be called. This value modifies the audit_trail_purge_interval parameter set using the CREATE_PURGE_JOB Procedure</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_PURGE_JOB_STATUS" ElementId="#BABGDFAJ">
          <Description>Enables or disables the purge job that you specify</Description>
          <Parameters>
            <Parameter Name="AUDIT_TRAIL_PURGE_NAME">The name of the purge job for which the status is being set. This is the purge job name that you specified with the CREATE_PURGE_JOB Procedure.</Parameter>
            <Parameter Name="AUDIT_TRAIL_STATUS_VALUE">One of the values specified in DBMS_AUDIT_MGMT Constants - Purge Job Status.The value PURGE_JOB_ENABLE enables the specified purge job.The value PURGE_JOB_DISABLE disables the specified purge job.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_AUTO_REPORT" Url="http://docs.oracle.com/database/121/ARPLS/d_auto_report.htm">
      <Description>The DBMS_AUTO_REPORT package provides an interface to view SQL Monitoring and Real-time Automatic Database Diagnostic Monitor (ADDM) data that has been captured into Automatic Workload Repository (AWR). It also provides subprograms to control the behavior of how these data are captured to AWR.</Description>
      <SubPrograms>
        <SubProgram Name="FINISH_REPORT_CAPTURE" ElementId="#CIHIEBDI">
          <Description>Ends the complete capture of SQL monitor data that was started with the START_REPORT_CAPTURE Procedure.</Description>
        </SubProgram>
        <SubProgram Name="REPORT_REPOSITORY_DETAIL" ElementId="#CIHHCIDJ">
          <Description>Obtains the stored report for a given report ID</Description>
          <Parameters>
            <Parameter Name="RID">ID of the stored report which returned by the function</Parameter>
            <Parameter Name="TYPE">Desired format of the report. Values can be 'XML', 'TEXT', 'HTML', 'EM' or 'ACTIVE'. The last two options generate a report in the same format called active HTML. Default value is 'XML'.</Parameter>
            <Parameter Name="BASE_PATH">Unused/Non-operative</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REPORT_REPOSITORY_DETAIL_XML" ElementId="#CIHEBHCC">
          <Description>Obtains the stored XML report for a given report ID</Description>
          <Parameters>
            <Parameter Name="RID">ID of the stored report which returned by the function</Parameter>
            <Parameter Name="BASE_PATH">Unused/Non-operative</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REPORT_REPOSITORY_LIST_XML" ElementId="#CIHICHEB">
          <Description>Obtains an XML report of the list of SQL Monitor and Real-time ADDM data captured in AWR</Description>
          <Parameters>
            <Parameter Name="ACTIVE_SINCE">Start of a time range used to select data. When a time range is specified, only those data are included in the list that were active during the time range. When no value is specified the time range is chosen as the last 24 hours ending at the current system time.</Parameter>
            <Parameter Name="ACTIVE_UPTO">Same as active_since except that it is the end of the time range</Parameter>
            <Parameter Name="SNAPSHOT_ID">If a value is specified, only those data captured during the specified snapshot ID are included in the list report. If no value is specified, no filtering is performed on snapshot ID.</Parameter>
            <Parameter Name="DBID">If a value is specified, only those data captured for the specified database ID are included in the list report. If no value is specified, no filtering is performed on database ID</Parameter>
            <Parameter Name="INST_ID">If a value is specified, only those data captured on the specified instance number are included in the list report. If no value is specified, no filtering is performed on the instance ID.</Parameter>
            <Parameter Name="CON_DBID">If a value is specified, only those data captured on the specified container DBID are included in the list report. If no value is specified, no filtering is performed on the container DBID.</Parameter>
            <Parameter Name="SESSION_ID">If a value is specified, only those data captured for the specified session ID are included in the list report. If no value is specified, no filtering is performed on session ID.</Parameter>
            <Parameter Name="SESSION_SERIAL">If a value is specified, only those data captured for the specified session are included in the list report. If no value is specified, no filtering is performed on session serial number. This parameter should be used in conjunction with the session_id parameter.</Parameter>
            <Parameter Name="COMPONENT_NAME">Can be 'sqlmonitor' for SQL Monitor data or 'rtaddm' for Real-time ADDM data. If a value is specified then data pertaining only to the specified component will be included in the list report. If no value is specified, no filtering is performed.</Parameter>
            <Parameter Name="KEY1">Key value relevant to a component. For SQL Monitor, key1 is the SQL ID of the captured SQL statement. If a value is specified, only those data having specified value for key1 are included, else no filtering is performed on key1.</Parameter>
            <Parameter Name="KEY2">Key value relevant to a component. For SQL Monitor, key2 is the SQL execution ID of the captured SQL statement. If a value is specified, only those data having specified value for key2 are included, else no filtering is performed on key2.</Parameter>
            <Parameter Name="KEY3">Key value relevant to a component. For SQL Monitor, key3 is the SQL execution start time of the captured SQL statement. If a value is specified, then only those data having specified value for key3 are included, else no filtering is performed on key3.</Parameter>
            <Parameter Name="REPORT_LEVEL">Currently only 'TYPICAL' is used</Parameter>
            <Parameter Name="BASE_PATH">Unused/Non-operative</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="START_REPORT_CAPTURE" ElementId="#CIHCGDDG">
          <Description>Captures SQL monitor data of any newly monitored SQLs every minute since the last run of the capture cycle, and stores it in AWR.</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_AUTO_SQLTUNE" Url="http://docs.oracle.com/database/121/ARPLS/d_autosta.htm">
      <Description>The DBMS_AUTO_SQLTUNE package is the interface for managing the Automatic SQL Tuning task. Unlike DBMS_SQLTUNE, the DBMS_AUTO_SQLTUNE package requires the DBA role.</Description>
      <SubPrograms>
        <SubProgram Name="EXECUTE_AUTO_TUNING_TASK" ElementId="#CIAHBDCA">
          <Description>Executes the Automatic SQL Tuning task immediately (SYS only)</Description>
        </SubProgram>
        <SubProgram Name="REPORT_AUTO_TUNING_TASK" ElementId="#CIAEHBGA">
          <Description>Displays a text report of the automatic tuning task's history</Description>
        </SubProgram>
        <SubProgram Name="SET_AUTO_TUNING_TASK_PARAMETER" ElementId="#BGBCGEJA">
          <Description>Changes a task parameter value for the daily automatic runs</Description>
          <Parameters>
            <Parameter Name="PARAMETER">Name of the parameter to set. The possible tuning parameters that can be set by this procedure using the parameter in the form VARCHAR2:MODE: tuning scope (comprehensive, limited)USERNAME: username under which the statement is parsedDAYS_TO_EXPIRE: number of days until the task is deletedEXECUTION_DAYS_TO_EXPIRE: number of days until the tasks's executions is deleted (without deleting the task)DEFAULT_EXECUTION_TYPE: the task defaults to this type of execution when none is specified by the EXECUTE_AUTO_TUNING_TASK Function &amp; Procedure.TIME_LIMIT: global time out (seconds)LOCAL_TIME_LIMIT: per-statement time out (seconds)TEST_EXECUTE: FULL/AUTO/OFF.* FULL - test-execute for as much time as necessary, up to the local time limit for the SQL (or the global task time limit if no SQL time limit is set)* AUTO - test-execute for an automatically-chosen time proportional to the tuning time* OFF - do not test-executeBASIC_FILTER: basic filter for SQL tuning setOBJECT_FILTER: object filter for SQL tuning setPLAN_FILTER: plan filter for SQL tuning set (see SELECT_SQLSET for possible values)RANK_MEASURE1: first ranking measure for SQL tuning setRANK_MEASURE2: second possible ranking measure for SQL tuning setRANK_MEASURE3: third possible ranking measure for SQL tuning setRESUME_FILTER: a extra filter for SQL tuning sets besides BASIC_FILTERSQL_LIMIT: maximum number of SQL statements to tuneSQL_PERCENTAGE: percentage filter of SQL tuning set statementsThe following parameters are supported for the automatic tuning task only:ACCEPT_SQL_PROFILES: TRUE/FALSE: whether the task should accept SQL profiles automaticallyMAX_AUTO_SQL_PROFILES: maximum number of automatic SQL profiles allowed on the system, in sumMAX_SQL_PROFILES_PER_EXEC: maximum number of SQL profiles that can be automatically implemented per execution of the task.</Parameter>
            <Parameter Name="VALUE">New value of the specified parameter</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_AUTO_TASK_ADMIN" Url="http://docs.oracle.com/database/121/ARPLS/d_autotaskadm.htm">
      <Description>The DBMS_AUTO_TASK_ADMIN package provides an interface to AUTOTASK functionality. It is used by the DBA as well as Enterprise Manager to access the AUTOTASK controls. Enterprise Manager also uses the AUTOTASK Advisor.</Description>
    </Package>
    <Package Name="DBMS_AW_STATS" Url="http://docs.oracle.com/database/121/ARPLS/d_aw_stats.htm">
      <Description>DBMS_AW_STATS contains subprograms for managing optimizer statistics for cubes and dimensions. Generating the statistics does not have a significant performance cost.</Description>
      <SubPrograms>
        <SubProgram Name="ANALYZE" ElementId="#CHDCBFHG">
          <Description>Generates optimizer statistics on cubes and cube dimensions.</Description>
          <Parameters>
            <Parameter Name="INNAME">The qualified name of a cube or a dimension.For a cube, the format of a qualified name is owner.cube_name.For a dimension, the format is owner.dimension_name.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CLEAR" ElementId="#CIHGHBFG">
          <Description>Clears optimizer statistics from cubes and cube dimensions.</Description>
          <Parameters>
            <Parameter Name="INNAME">The qualified name of a cube or a dimension.For a cube, the format of a qualified name is owner.cube_name.For a dimension, the format is owner.dimension_name.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_CAPTURE_ADM" Url="http://docs.oracle.com/database/121/ARPLS/d_cap_a.htm">
      <Description>The DBMS_CAPTURE_ADM package, one of a set of Oracle Streams packages, provides subprograms for starting, stopping, and configuring a capture process. The source of the captured changes is the redo logs, and the repository for the captured changes is a queue.</Description>
      <SubPrograms>
        <SubProgram Name="ABORT_GLOBAL_INSTANTIATION" ElementId="#i996899">
          <Description>Reverses the effects of running the PREPARE_GLOBAL_INSTANTIATION, PREPARE_SCHEMA_INSTANTIATION, and PREPARE_TABLE_INSTANTIATION procedures</Description>
        </SubProgram>
        <SubProgram Name="ABORT_SCHEMA_INSTANTIATION" ElementId="#BGBFECAG">
          <Description>Reverses the effects of running the PREPARE_SCHEMA_INSTANTIATION and PREPARE_TABLE_INSTANTIATION procedures</Description>
        </SubProgram>
        <SubProgram Name="ABORT_SYNC_INSTANTIATION" ElementId="#BGBHGABG">
          <Description>Reverses the effects of running the PREPARE_SYNC_INSTANTIATION procedure</Description>
        </SubProgram>
        <SubProgram Name="ABORT_TABLE_INSTANTIATION" ElementId="#i996936">
          <Description>Reverses the effects of running the PREPARE_TABLE_INSTANTIATION procedure</Description>
        </SubProgram>
        <SubProgram Name="ALTER_CAPTURE" ElementId="#i996962">
          <Description>Alters a capture process</Description>
          <Parameters>
            <Parameter Name="CAPTURE_NAME">The name of the capture process being altered. You must specify an existing capture process name. Do not specify an owner.</Parameter>
            <Parameter Name="RULE_SET_NAME">The name of the positive rule set for the capture process. The positive rule set contains the rules that instruct the capture process to capture changes.To change the positive rule set for the capture process, specify an existing rule set in the form [schema_name.]rule_set_name. For example, to specify a positive rule set in the hr schema named job_capture_rules, enter hr.job_capture_rules. If the schema is not specified, then the current user is the default.An error is returned if the specified rule set does not exist. You can create a rule set and add rules to it using the DBMS_STREAMS_ADM package or the DBMS_RULE_ADM package.If you specify NULL and the remove_rule_set parameter is set to FALSE, then the procedure retains any existing positive rule set. If you specify NULL and the remove_rule_set parameter is set to TRUE, then the procedure removes any existing positive rule set.See Also: Oracle Streams Concepts and Administration for more information about the changes that can be captured by a capture process</Parameter>
            <Parameter Name="REMOVE_RULE_SET">If TRUE, then the procedure removes the positive rule set for the specified capture process. If you remove a positive rule set for a capture process, and the capture process does not have a negative rule set, then the capture process captures all supported changes to all objects in the database, excluding database objects in the SYS and SYSTEM schemas.If you remove a positive rule set for a capture process, and the capture process has a negative rule set, then the capture process captures all supported changes that are not discarded by the negative rule set.If FALSE, then the procedure retains the positive rule set for the specified capture process.If the rule_set_name parameter is non-NULL, then ensure that this parameter is set to FALSE.</Parameter>
            <Parameter Name="START_SCN">A valid SCN for the database from which the capture process starts capturing changes. The SCN value must be greater than or equal to the first SCN for the capture process. Also, the capture process must be stopped before resetting its start SCN.An error is returned if an invalid SCN is specified or if the capture process is enabled.</Parameter>
            <Parameter Name="USE_DATABASE_LINK">If TRUE, then the capture process at a downstream database uses a database link to the source database for administrative purposes relating to the capture process. If you want a capture process that is not using a database link currently to begin using a database link, then specify TRUE. In this case, a database link with the same name as the global name of the source database must exist at the downstream database.If FALSE, then either the capture process is running on the source database, or the capture process at a downstream database does not use a database link to the source database. If you want a capture process that is using a database link currently to stop using a database link, then specify FALSE. In this case, you must prepare source database objects for instantiation manually when you add or change capture process rules that pertain to these objects.If NULL, then the current value of this parameter for the capture process is not changed.</Parameter>
            <Parameter Name="FIRST_SCN">The lowest SCN in the redo log from which a capture process can capture changes. If you specify a new first SCN for the capture process, then the specified first SCN must meet the following requirements:It must be greater than the current first SCN for the capture process.It must be less than or equal to the current applied SCN for the capture process. However, this requirement does not apply if the current applied SCN for the capture process is zero.It must be less than or equal to the required checkpoint SCN for the capture process.An error is returned if the specified SCN does not meet the first three requirements. See "Usage Notes" for information about determining an SCN value that meets all of these conditions.When the first SCN is modified, the capture process purges information from its LogMiner data dictionary that is required to restart it at an earlier SCN. See BUILD Procedure for more information about a LogMiner data dictionary.If the specified first SCN is higher than the current start SCN for the capture process, then the start SCN is set automatically to the new value of the first SCN.</Parameter>
            <Parameter Name="NEGATIVE_RULE_SET_NAME">The name of the negative rule set for the capture process. The negative rule set contains the rules that instruct the capture process to discard changes.To change the negative rule set for the capture process, specify an existing rule set in the form [schema_name.]rule_set_name. For example, to specify a negative rule set in the hr schema named neg_capture_rules, enter hr.neg_capture_rules. If the schema is not specified, then the current user is the default.An error is returned if the specified rule set does not exist. You can create a rule set and add rules to it using the DBMS_STREAMS_ADM package or the DBMS_RULE_ADM package.If you specify NULL and the remove_negative_rule_set parameter is set to FALSE, then the procedure retains any existing negative rule set. If you specify NULL and the remove_negative_rule_set parameter is set to TRUE, then the procedure removes any existing negative rule set.If you specify both a positive and a negative rule set for a capture process, then the negative rule set is always evaluated first.</Parameter>
            <Parameter Name="REMOVE_NEGATIVE_RULE_SET">If TRUE, then the procedure removes the negative rule set for the specified capture process. If you remove a negative rule set for a capture process, and the capture process does not have a positive rule set, then the capture process captures all supported changes to all objects in the database, excluding database objects in the SYS and SYSTEM schemas.If you remove a negative rule set for a capture process, and a positive rule set exists for the capture process, then the capture process captures all changes that are not discarded by the positive rule set.If FALSE, then the procedure retains the negative rule set for the specified capture process.If the negative_rule_set_name parameter is non-NULL, then ensure that this parameter is set to FALSE.</Parameter>
            <Parameter Name="CAPTURE_USER">The user in whose security domain a capture process captures changes that satisfy its rule sets and runs custom rule-based transformations configured for capture process rules. If NULL, then the capture user is not changed.To change the capture user, the user who invokes the ALTER_CAPTURE procedure must be granted the DBA role. Only the SYS user can set the capture_user to SYS.If you change the capture user, then this procedure grants the new capture user enqueue privilege on the queue used by the capture process and configures the user as a secure queue user of the queue. In addition, ensure that the capture user has the following privileges:EXECUTE privilege on the rule sets used by the capture processEXECUTE privilege on all rule-based transformation functions used in the rule setThese privileges can be granted directly to the capture user, or they can be granted through roles.In addition, the capture user must be granted EXECUTE privilege on all packages, including Oracle-supplied packages, that are invoked in rule-based transformations run by the capture process. These privileges must be granted directly to the capture user. They cannot be granted through roles.The capture process is stopped and restarted automatically when you change the value of this parameter.Note: If the capture user for a capture process is dropped using DROP USER . . . CASCADE, then the capture process is also dropped automatically.</Parameter>
            <Parameter Name="CHECKPOINT_RETENTION_TIME">Either the number of days that a capture process retains checkpoints before purging them automatically, or DBMS_CAPTURE_ADM.INFINITE if checkpoints should not be purged automatically. If NULL, then the checkpoint retention time is not changed.If a number is specified, then a capture process purges a checkpoint the specified number of days after the checkpoint was taken. Partial days can be specified using decimal values. For example, .25 specifies 6 hours.When a checkpoint is purged, LogMiner data dictionary information for the archived redo log file that corresponds to the checkpoint is purged, and the first_scn of the capture process is reset to the SCN value corresponding to the first change in the next archived redo log file.See Also: Oracle Streams Concepts and Administration for more information about checkpoint retention time</Parameter>
            <Parameter Name="START_TIME">A valid time from which the capture process starts capturing changes. The capture process must be stopped before resetting its start time.An error is returned if an invalid time is specified or if the capture process is enabled.The start_scn and start_time parameters are mutually exclusive.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ALTER_SYNC_CAPTURE" ElementId="#BGBHGBAF">
          <Description>Alters a synchronous capture</Description>
          <Parameters>
            <Parameter Name="CAPTURE_NAME">The name of the synchronous capture being altered. You must specify an existing synchronous capture name. Do not specify an owner.</Parameter>
            <Parameter Name="RULE_SET_NAME">The name of the positive rule set for the synchronous capture. The positive rule set contains the rules that instruct the synchronous capture to capture changes.To change the rule set for the synchronous capture, specify an existing rule set in the form [schema_name.]rule_set_name. For example, to specify a positive rule set in the strmadmin schema named sync_cap_rules, enter strmadmin.sync_cap_rules. If the schema is not specified, then the current user is the default.An error is returned if the specified rule set does not exist. You must specify a rule set that was created using the DBMS_STREAMS_ADM package.If NULL, then the rule set is not changed.See Also: Oracle Streams Concepts and Administration for more information about the changes that can be captured by a synchronous capture</Parameter>
            <Parameter Name="CAPTURE_USER">The user in whose security domain a synchronous capture captures changes that satisfy its rule set and runs custom rule-based transformations configured for synchronous capture rules. If NULL, then the capture user is not changed.To change the capture user, the user who invokes the ALTER_SYNC_CAPTURE procedure must be granted the DBA role. Only the SYS user can set the capture_user to SYS.If you change the capture user, then this procedure grants the new capture user enqueue privilege on the queue used by the synchronous capture and configures the user as a secure queue user of the queue. In addition, ensure that capture user has the following privileges:EXECUTE privilege on the rule sets used by the synchronous captureEXECUTE privilege on all rule-based transformation functions used in the rule setThese privileges can be granted directly to the capture user, or they can be granted through roles.In addition, the capture user must be granted EXECUTE privilege on all packages, including Oracle-supplied packages, that are invoked in rule-based transformations run by the synchronous capture. These privileges must be granted directly to the capture user. They cannot be granted through roles.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BUILD" ElementId="#i1003124">
          <Description>Extracts the data dictionary of the current database to the redo logs and automatically specifies database supplemental logging for all primary key and unique key columns</Description>
        </SubProgram>
        <SubProgram Name="CREATE_CAPTURE" ElementId="#i997066">
          <Description>Creates a capture process</Description>
          <Parameters>
            <Parameter Name="QUEUE_NAME">The name of the queue into which the capture process enqueues changes. You must specify an existing queue in the form [schema_name.]queue_name. For example, to specify a queue in the hr schema named streams_queue, enter hr.streams_queue. If the schema is not specified, then the current user is the default.Note: The queue_name setting cannot be altered after the capture process is created.</Parameter>
            <Parameter Name="CAPTURE_NAME">The name of the capture process being created. A NULL specification is not allowed. Do not specify an owner.Note: The capture_name setting cannot be altered after the capture process is created.</Parameter>
            <Parameter Name="RULE_SET_NAME">The name of the positive rule set for the capture process. The positive rule set contains the rules that instruct the capture process to capture changes.If you want to use a positive rule set for the capture process, then you must specify an existing rule set in the form [schema_name.]rule_set_name. For example, to specify a positive rule set in the hr schema named job_capture_rules, enter hr.job_capture_rules. If the schema is not specified, then the current user is the default.An error is returned if the specified rule set does not exist. You can create a rule set and add rules to it using the DBMS_STREAMS_ADM package or the DBMS_RULE_ADM package.If you specify NULL, and no negative rule set is specified, then the capture process captures all supported changes to all objects in the database, excluding database objects in the SYS and SYSTEM schemas.If you specify NULL, and a negative rule set exists for the capture process, then the capture process captures all changes that are not discarded by the negative rule set.See Also: Oracle Streams Concepts and Administration for more information about the changes that can be captured by a capture process</Parameter>
            <Parameter Name="START_SCN">A valid SCN for the database from which the capture process starts capturing changes.An error is returned if an invalid SCN is specified.The start_scn and start_time parameters are mutually exclusive.See Also: "Usage Notes" for more information setting the start_scn parameter</Parameter>
            <Parameter Name="SOURCE_DATABASE">The global name of the source database. The source database is where the changes to be captured originated.If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify DBS1 and the domain is .EXAMPLE.COM, then the procedure specifies DBS1.EXAMPLE.COM automatically.If NULL, or if the specified name is the same as the global name of the current database, then local capture is assumed and only the default values for use_database_link and first_scn can be specified.</Parameter>
            <Parameter Name="USE_DATABASE_LINK">If TRUE, then the capture process at a downstream database uses a database link to the source database for administrative purposes relating to the capture process. A database link with the same name as the global name of the source database must exist at the downstream database.The capture process uses the database link to prepare database objects for instantiation at the source database and run the DBMS_CAPTURE_ADM.BUILD procedure at the source database, if necessary.During the creation of a downstream capture process, if the first_scn parameter is set to NULL, then the use_database_link parameter must be set to TRUE. Otherwise, an error is returned.If FALSE, then either the capture process is running on the source database, or the capture process at a downstream database does not use a database link to the source database. In this case, you must perform the following administrative tasks manually:Run the DBMS_CAPTURE_ADM.BUILD procedure at the source database to extract the data dictionary at the source database to the redo log when a capture process is created.Obtain the first SCN for the downstream capture process if the first SCN is not specified during capture process creation. The first SCN is needed to create and maintain a capture process.Prepare source database objects for instantiation.</Parameter>
            <Parameter Name="FIRST_SCN">The lowest SCN in the redo log from which a capture process can capture changes. A non-NULL value for this parameter is valid only if the DBMS_CAPTURE_ADM.BUILD procedure has been run at least once at the source database.You can query the FIRST_CHANGE# column of the V$ARCHIVED_LOG dynamic performance view where the DICTIONARY_BEGIN column is YES to determine whether the DBMS_CAPTURE_ADM.BUILD procedure has been run on a source database. Any of the values returned by such a query can be used as a first_scn value if the redo log containing that SCN value is still available.See Also: "Usage Notes" for more information setting the first_scn parameter</Parameter>
            <Parameter Name="LOGFILE_ASSIGNMENT">If implicit, which is the default, then the capture process at a downstream database scans all redo log files added by redo transport services or manually from the source database to the downstream database.If explicit, then a redo log file is scanned by a capture process at a downstream database only if the capture process name is specified in the FOR logminer_session_name clause. If explicit, then the redo log file must be added manually to the downstream database, and redo transport services cannot be used to add redo log files to the capture process being created.If you specify explicit for this parameter for a local capture process, then the local capture process cannot use the online redo log to find changes. In this case, the capture process must use the archived redo log.See Also: "Usage Notes" for information about adding redo log files manually</Parameter>
            <Parameter Name="NEGATIVE_RULE_SET_NAME">The name of the negative rule set for the capture process. The negative rule set contains the rules that instruct the capture process to discard changes.If you want to use a negative rule set for the capture process, then you must specify an existing rule set in the form [schema_name.]rule_set_name. For example, to specify a negative rule set in the hr schema named neg_capture_rules, enter hr.neg_capture_rules. If the schema is not specified, then the current user is the default.If you specify NULL, and no positive rule set is specified, then the capture process captures all supported changes to all objects in the database, excluding database objects in the SYS and SYSTEM schemas.If you specify NULL, and a positive rule set exists for the capture process, then the capture process captures all changes that are not discarded by the positive rule set.An error is returned if the specified rule set does not exist. You can create a rule set and add rules to it using the DBMS_STREAMS_ADM package or the DBMS_RULE_ADM package.If you specify both a positive and a negative rule set for a capture process, then the negative rule set is always evaluated first.</Parameter>
            <Parameter Name="CAPTURE_USER">The user in whose security domain a capture process captures changes that satisfy its rule sets and runs custom rule-based transformations configured for capture process rules. If NULL, then the user who runs the CREATE_CAPTURE procedure is used.Note: If the capture user for a capture process is dropped using DROP USER . . . CASCADE, then the capture process is also dropped automatically.See Also: "Usage Notes" for more information about this parameter.</Parameter>
            <Parameter Name="CHECKPOINT_RETENTION_TIME">Either specify the number of days that a capture process retains checkpoints before purging them automatically, or specify DBMS_CAPTURE_ADM.INFINITE if checkpoints should not be purged automatically.If a number is specified, then a capture process purges a checkpoint the specified number of days after the checkpoint was taken. Partial days can be specified using decimal values. For example, .25 specifies 6 hours.When a checkpoint is purged, LogMiner data dictionary information for the archived redo log file that corresponds to the checkpoint is purged, and the first_scn of the capture process is reset to the SCN value corresponding to the first change in the next archived redo log file.See Also: Oracle Streams Concepts and Administration for more information about checkpoint retention time</Parameter>
            <Parameter Name="START_TIME">A valid time from which the capture process starts capturing changes.An error is returned if an invalid time is specified.The start_scn and start_time parameters are mutually exclusive.See Also: "Usage Notes" for more information setting the start_time parameter</Parameter>
            <Parameter Name="SOURCE_ROOT_NAME">The global name of the root in the source CDB.If you specify NULL, or if the specified name is the same as the global name of the current root, then local capture is assumed.If not NULL, then remote capture is assumed and a condition is added to the generated rules to filter the LCRs based on the root in the source CDB.Note: In a downstream capture configuration, if the capture database is CDB and the source database is a non-CDB, then specify the same value for source_root_name and source_database. The source_root_name parameter does not need to be specified for local capture for either a CDB or a non-CDB.</Parameter>
            <Parameter Name="CAPTURE_CLASS">The valid values are 'Streams', 'XStream' or 'GoldenGate'.If NULL is specified, then 'Streams' is assumed.Note: The capture_class parameter cannot be set to 'Streams' or NULL when the capture database is a CDB.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_SYNC_CAPTURE" ElementId="#BGBCAHCG">
          <Description>Creates a synchronous capture</Description>
          <Parameters>
            <Parameter Name="QUEUE_NAME">The name of the queue into which the synchronous capture enqueues changes. You must specify an existing queue in the form [schema_name.]queue_name. For example, to specify a queue in the strmadmin schema named streams_queue, enter strmadmin.streams_queue. If the schema is not specified, then the current user is the default.Note: The queue_name setting cannot be altered after the synchronous capture is created.</Parameter>
            <Parameter Name="CAPTURE_NAME">The name of the synchronous capture being created. A NULL specification is not allowed. Do not specify an owner.Note: The capture_name setting cannot be altered after the synchronous capture is created.</Parameter>
            <Parameter Name="RULE_SET_NAME">The name of the positive rule set for the synchronous capture. The positive rule set contains the rules that instruct the synchronous capture to capture changes.Specify an existing rule set in the form [schema_name.]rule_set_name. For example, to specify a positive rule set in the strmadmin schema named sync_cap_rules, enter strmadmin.sync_cap_rules. If the schema is not specified, then the current user is the default.An error is returned if the specified rule set does not exist. You must specify a rule set that was created using the DBMS_STREAMS_ADM package.If NULL, then an error is returned.Note: Synchronous capture rules must be added to the synchronous capture rule set using the ADD_TABLE_RULES or ADD_SUBSET_RULES procedure in the DBMS_STREAMS_ADM package. A synchronous capture ignores rules added to the rule set with other procedures.See Also: Oracle Streams Concepts and Administration for more information about the changes that can be captured by a synchronous capture</Parameter>
            <Parameter Name="CAPTURE_USER">The user in whose security domain the synchronous capture captures changes that satisfy its rule set and runs custom rule-based transformations configured for synchronous capture rules. If NULL, then the user who runs the CREATE_SYNC_CAPTURE procedure is used.Only a user who is granted the DBA role can set a capture user. Only the SYS user can set the capture_user to SYS.Note: If the capture user for a synchronous capture is dropped using DROP USER . . . CASCADE, then the synchronous capture is also dropped automatically.See Also: "Usage Notes" for more information about this parameter.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_CAPTURE" ElementId="#i997167">
          <Description>Drops a capture process</Description>
          <Parameters>
            <Parameter Name="CAPTURE_NAME">The name of the capture process being dropped. Specify an existing capture process name. Do not specify an owner.</Parameter>
            <Parameter Name="DROP_UNUSED_RULE_SETS">If TRUE, then the procedure drops any rule sets, positive and negative, used by the specified capture process if these rule sets are not used by any other Oracle Streams client. Oracle Streams clients include capture processes, propagations, apply processes, and messaging clients. If this procedure drops a rule set, then this procedure also drops any rules in the rule set that are not in another rule set.If FALSE, then the procedure does not drop the rule sets used by the specified capture process, and the rule sets retain their rules.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="INCLUDE_EXTRA_ATTRIBUTE" ElementId="#i1000175">
          <Description>Includes or excludes an extra attribute in logical change records (LCRs) captured by the specified capture process or synchronous capture</Description>
          <Parameters>
            <Parameter Name="CAPTURE_NAME">The name of the capture process or synchronous capture. Specify an existing capture process name or synchronous capture name. Do not specify an owner.</Parameter>
            <Parameter Name="ATTRIBUTE_NAME">The name of the attribute to be included in or excluded from LCRs captured by the capture process or synchronous capture. The following names are valid settings:row_idThe rowid of the row changed in a row LCR. This attribute is not included in DDL LCRs, or in row LCRs for index-organized tables. The type is VARCHAR2.serial#The serial number of the session that performed the change captured in the LCR. The type is NUMBER.session#The identifier of the session that performed the change captured in the LCR. The type is NUMBER.thread#The thread number of the instance in which the change captured in the LCR was performed. Typically, the thread number is relevant only in an Oracle Real Application Clusters (Oracle RAC) environment. The type is NUMBER.tx_nameThe name of the transaction that includes the LCR. The type is VARCHAR2.usernameThe name of the user who performed the change captured in the LCR. The type is VARCHAR2.</Parameter>
            <Parameter Name="INCLUDE">If TRUE, then the specified attribute is included in LCRs captured by the capture process or synchronous capture.If FALSE, then the specified attribute is excluded from LCRs captured by the capture process or synchronous capture.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PREPARE_GLOBAL_INSTANTIATION" ElementId="#BGBDGIEG">
          <Description>Performs the synchronization necessary for instantiating all the tables in the database at another database and can enable supplemental logging for key columns or all columns in these tables</Description>
        </SubProgram>
        <SubProgram Name="PREPARE_SCHEMA_INSTANTIATION" ElementId="#BGBCHBDG">
          <Description>Performs the synchronization necessary for instantiating all tables in the schema at another database and can enable supplemental logging for key columns or all columns in these tables</Description>
          <Parameters>
            <Parameter Name="SCHEMA_NAME">The name of the schema. For example, hr.</Parameter>
            <Parameter Name="SUPPLEMENTAL_LOGGING">Either NONE, KEYS, or ALL.If NONE is specified, then this procedure does not enable supplemental logging for any columns in the tables in the schema. This procedure does not remove existing supplemental logging specifications for these tables.If KEYS is specified, then this procedure enables supplemental logging for primary key, unique key, bitmap index, and foreign key columns in the tables in the schema and for any table added to this schema in the future. Primary key columns are logged unconditionally. Unique key, bitmap index, and foreign key columns are logged conditionally. Specifying KEYS does not enable supplemental logging of bitmap join index columns.If ALL is specified, then this procedure enables supplemental logging for all columns in the tables in the schema and for any table added to this schema in the future. The columns are logged unconditionally. Supplemental logging is not enabled for columns of the following types: LOB, LONG, LONG RAW, user-defined types, and Oracle-supplied types.</Parameter>
            <Parameter Name="CONTAINER">Either CURRENT , ALL, or pdb_name.If CURRENT is specified, then this procedure adds supplemental logging for the current container.If ALL is specified, then this procedure adds supplemental logging for all of the containers in the current CDB.If pdb_name is specified, then this procedure adds supplemental logging for the specified PDBALL and pdb_name are valid only when you invoke the procedure from the root.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PREPARE_SYNC_INSTANTIATION" ElementId="#BGBFEICF">
          <Description>Performs the synchronization necessary for instantiating one or more tables at another database and returns the prepare SCN</Description>
        </SubProgram>
        <SubProgram Name="PREPARE_TABLE_INSTANTIATION" ElementId="#i997227">
          <Description>Performs the synchronization necessary for instantiating the table at another database and can enable supplemental logging for key columns or all columns in the table</Description>
          <Parameters>
            <Parameter Name="TABLE_NAME">The name of the table specified as [schema_name.]object_name. For example, hr.employees. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="SUPPLEMENTAL_LOGGING">Either NONE, KEYS, or ALL.If NONE is specified, then this procedure does not enable supplemental logging for any columns in the table. This procedure does not remove existing supplemental logging specifications for the table.If KEYS is specified, then this procedure enables supplemental logging for primary key, unique key, bitmap index, and foreign key columns in the table. The procedure places the key columns for the table in three separate log groups: the primary key columns in an unconditional log group, the unique key columns and bitmap index columns in a conditional log group, and the foreign key columns in a conditional log group. Specifying KEYS does not enable supplemental logging of bitmap join index columns.If ALL is specified, then this procedure enables supplemental logging for all columns in the table. The procedure places all of the columns for the table in an unconditional log group. Supplemental logging is not enabled for columns of the following types: LOB, LONG, LONG RAW, user-defined types, and Oracle-supplied types.</Parameter>
            <Parameter Name="CONTAINER">Either CURRENT , ALL, or pdb_name.If CURRENT is specified, then this procedure adds supplemental logging for the current container.If ALL is specified, then this procedure adds supplemental logging for all of the containers in the current CDB.If pdb_name is specified, then this procedure adds supplemental logging for the specified PDB.ALL and pdb_name are valid only when you invoke the procedure from the root.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_PARAMETER" ElementId="#i997253">
          <Description>Sets a capture process parameter to the specified value</Description>
          <Parameters>
            <Parameter Name="CAPTURE_NAME">The name of the capture process. Do not specify an owner.</Parameter>
            <Parameter Name="PARAMETER">The name of the parameter you are setting. See "Capture Process Parameters" for a list of these parameters.</Parameter>
            <Parameter Name="VALUE">The value to which the parameter is set.If NULL, then the parameter is set to its default value.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="START_CAPTURE" ElementId="#BGBHAJGJ">
          <Description>Starts the capture process, which mines redo logs and enqueues the mined redo information into the associated queue</Description>
        </SubProgram>
        <SubProgram Name="STOP_CAPTURE" ElementId="#i997449">
          <Description>Stops the capture process from mining redo logs</Description>
          <Parameters>
            <Parameter Name="CAPTURE_NAME">The name of the capture process. A NULL setting is not allowed. Do not specify an owner.</Parameter>
            <Parameter Name="FORCE">If TRUE, then the procedure stops the capture process as soon as possible. If the capture process cannot stop normally, then it aborts.If FALSE, then the procedure stops the capture process as soon as possible. If the capture process cannot stop normally, then an ORA-26672 error is returned, and the capture process might continue to run.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_COMPARISON" Url="http://docs.oracle.com/database/121/ARPLS/d_comparison.htm">
      <Description>The DBMS_COMPARISON package provides interfaces to compare and converge database objects at different databases.</Description>
      <SubPrograms>
        <SubProgram Name="COMPARE" ElementId="#CHDDFJBH">
          <Description>Performs the specified comparison</Description>
          <Parameters>
            <Parameter Name="COMPARISON_NAME">The name of the comparison.</Parameter>
            <Parameter Name="SCAN_INFO">Information about the compare operation returned in the COMPARISON_TYPE datatype.See COMPARISON_TYPE Record Type.</Parameter>
            <Parameter Name="MIN_VALUE">When the scan mode for the comparison is set to CMP_SCAN_MODE_CUSTOM, specify the minimum index column value for the range of rows that are being compared. To determine the index column for a comparison, query the DBA_COMPARISON_COLUMNS data dictionary view. For a composite index, specify a value for the column with column_position equal to 1 in the DBA_COMPARISON_COLUMNS view. See "Index Column Requirements for the DBMS_COMPARISON Package".If the scan mode is set to a value other than CMP_SCAN_MODE_CUSTOM, then this parameter must be set to NULL.If NULL and the scan_mode parameter is set to CMP_SCAN_MODE_CUSTOM, then an error is raised.To determine the scan mode for the comparison, query the DBA_COMPARISON data dictionary view.See Constants for information about scan modes.</Parameter>
            <Parameter Name="MAX_VALUE">When the scan mode for the comparison is set to CMP_SCAN_MODE_CUSTOM, specify the maximum index column value for the range of rows that are being compared. To determine the index column for a comparison, query the DBA_COMPARISON_COLUMNS data dictionary view. For a composite index, specify a value for the column with column_position equal to 1 in the DBA_COMPARISON_COLUMNS view. See "Index Column Requirements for the DBMS_COMPARISON Package".If the scan mode is set to a value other than CMP_SCAN_MODE_CUSTOM, then this parameter must be set to NULL.If NULL and the scan_mode parameter is set to CMP_SCAN_MODE_CUSTOM, then an error is raised.To determine the scan mode for the comparison, query the DBA_COMPARISON data dictionary view.See Constants for information about scan modes.</Parameter>
            <Parameter Name="PERFORM_ROW_DIF">If TRUE, then compares each row individually in the database object being compared after reaching the smallest possible bucket for the comparison.If FALSE, then compares buckets for differences but does not compare each row individually when differences are found in the smallest possible bucket.See "Overview" for information about buckets.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CONVERGE" ElementId="#CHDGIBFI">
          <Description>Executes data manipulation language (DML) changes to synchronize the portion of the database object that was compared in the specified scan</Description>
          <Parameters>
            <Parameter Name="COMPARISON_NAME">The name of the comparison.</Parameter>
            <Parameter Name="SCAN_ID">The identifier for the scan that contains the differences between the database objects being converged.See "Overview" for more information about specifying a scan ID in this parameter.</Parameter>
            <Parameter Name="SCAN_INFO">Information about the converge operation returned in the COMPARISON_TYPE datatype.See COMPARISON_TYPE Record Type.</Parameter>
            <Parameter Name="CONVERGE_OPTIONS">Either the CMP_CONVERGE_LOCAL_WINS constant or the CMP_CONVERGE_REMOTE_WINS constant.See "Constants" for information about these constants.</Parameter>
            <Parameter Name="PERFORM_COMMIT">If TRUE, then performs a COMMIT periodically while making the DML changes. The CONVERGE procedure might perform more than one COMMIT when this parameter is set to TRUE.If FALSE, then does not perform a COMMIT after making DML changes.</Parameter>
            <Parameter Name="LOCAL_CONVERGE_TAG">The Oracle Streams tag to set in the session on the local database before performing any changes to converge the data in the database objects being converged.If non-NULL, then this parameter setting takes precedence over the local_converge_tag parameter in the CREATE_COMPARISON procedure that created the comparison.If NULL, then this parameter is ignored, and the local_converge_tag parameter in the CREATE_COMPARISON procedure that created the comparison is used.See "Security Model" for information about security requirement related to this parameter, and see the Oracle Streams Replication Administrator's Guide for more information about tags.</Parameter>
            <Parameter Name="REMOTE_CONVERGE_TAG">The Oracle Streams tag to set in the session on the remote database before performing any changes to converge the data in the database objects being converged.If non-NULL, then this parameter setting takes precedence over the remote_converge_tag parameter in the CREATE_COMPARISON procedure that created the comparison.If NULL, then this parameter is ignored, and the remote_converge_tag parameter in the CREATE_COMPARISON procedure that created the comparison is used.See "Security Model" for information about security requirement related to this parameter, and see the Oracle Streams Replication Administrator's Guide for more information about tags.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_COMPARISON" ElementId="#CHDCJIFD">
          <Description>Creates a comparison</Description>
          <Parameters>
            <Parameter Name="COMPARISON_NAME">The name of the comparison.</Parameter>
            <Parameter Name="SCHEMA_NAME">The name of the schema that contains the local database object to compare.</Parameter>
            <Parameter Name="OBJECT_NAME">The name of the local database object to compare.</Parameter>
            <Parameter Name="DBLINK_NAME">Database link to the remote database. The specified database object in the remote database is compared with the database object in the local database.If NULL, then the comparison is configured to compare two database objects in the local database. In this case, parameters that specify the remote database object apply to the second database object in the comparison and to operations on the second database object. For example, specify the second database object in this procedure by using the remote_schema_name and remote_object_name parameters.</Parameter>
            <Parameter Name="INDEX_SCHEMA_NAME">The name of the schema that contains the index.If NULL, then the schema specified in the schema_name parameter is used.</Parameter>
            <Parameter Name="INDEX_NAME">The name of the index.If NULL, then the system determines the index columns for the comparison automatically.If the index_schema_name parameter is non-NULL, then the index_name parameter must also be non-NULL. Otherwise, an error is raised.See Also: "Usage Notes" for more information about specifying an index</Parameter>
            <Parameter Name="REMOTE_SCHEMA_NAME">The name of the schema that contains the database object at the remote database. Specify a non-NULL value if the schema names are different at the two databases.If NULL, then the schema specified in the schema_name parameter is used.</Parameter>
            <Parameter Name="REMOTE_OBJECT_NAME">The name of the database object at the remote database. Specify a non-NULL value if the database object names are different at the two databases.If NULL, then the database object specified in the object_name parameter is used.</Parameter>
            <Parameter Name="COMPARISON_MODE">Specify the default value CMP_COMPARE_MODE_OBJECT. Additional modes might be added in future releases.</Parameter>
            <Parameter Name="COLUMN_LIST">Specify '*' to include all of the columns in the database objects being compared.To compare a subset of columns in the database objects, specify a comma-delimited list of the columns to check. Any columns that are not in the list are ignored during a comparison and convergence.See "Usage Notes" for information about columns that are required in the column_list parameter.</Parameter>
            <Parameter Name="SCAN_MODE">Either CMP_SCAN_MODE_FULL, CMP_SCAN_MODE_RANDOM, CMP_SCAN_MODE_CYCLIC, or CMP_SCAN_MODE_CUSTOM.If you specify CMP_SCAN_MODE_CUSTOM, then make sure you specify an index using the index_schema_name and index_name parameters. Specifying an index ensures that you can specify the correct min_value and max_value for the lead index column when you run the COMPARE or RECHECK function.See "Constants" for information about these constants.</Parameter>
            <Parameter Name="SCAN_PERCENT">The percentage of the database object to scan for comparison when the scan_mode parameter is set to either CMP_SCAN_MODE_RANDOM or CMP_SCAN_MODE_CYCLIC. For these scan_mode settings, a non-NULL value that is greater than 0 (zero) and less than 100 is required.If NULL and the scan_mode parameter is set to CMP_SCAN_MODE_FULL, then the entire database object is scanned for comparison.If NULL and the scan_mode parameter is set to CMP_SCAN_MODE_CUSTOM, then the portion of the database object scanned for comparison is specified when the COMPARE function is run.If non-NULL and the scan_mode parameter is set to either CMP_SCAN_MODE_FULL or CMP_SCAN_MODE_CUSTOM, then the scan_percent parameter is ignored.Note: When the scan_percent parameter is non-NULL, and the lead index column for the comparison does not distribute the rows in the database object evenly, the portion of the database object that is compared might be smaller or larger than the specified scan_percent value. See "Index Column Requirements for the DBMS_COMPARISON Package" for more information about the lead index column.</Parameter>
            <Parameter Name="NULL_VALUE">The value to substitute for each NULL in the database objects being compared. Specify a value or use the CMP_NULL_VALUE_DEF constant.If a column being compared can contain NULLs, then the value specified for this parameter must be different than any non-NULL value in the column. Otherwise, if the value specified for this parameter can appear in the column, some row differences might not be found.See "Constants" for information about this constant.</Parameter>
            <Parameter Name="LOCAL_CONVERGE_TAG">The Oracle Streams tag to set in the session on the local database before performing any changes to converge the data in the database objects being compared.If the local_converge_tag parameter is non-NULL in the CONVERGE procedure when comparison results for this comparison are converged, then the setting in the CONVERGE procedure takes precedence. See CONVERGE Procedure for more information.See the Oracle Streams Replication Administrator's Guide for more information about tags.</Parameter>
            <Parameter Name="REMOTE_CONVERGE_TAG">The Oracle Streams tag to set in the session on the remote database before performing any changes to converge the data in the database objects being compared.If the remote_converge_tag parameter is non-NULL in the CONVERGE procedure when comparison results for this comparison are converged, then the setting in the CONVERGE procedure takes precedence. See CONVERGE Procedure for more information.See the Oracle Streams Replication Administrator's Guide for more information about tags.</Parameter>
            <Parameter Name="MAX_NUM_BUCKETS">Specify the maximum number of buckets to use. Specify a value or use the CMP_MAX_NUM_BUCKETS constant. See "Constants" for information about this constant.See "Overview" for information about buckets.Note: If an index column for a comparison is a VARCHAR2 or CHAR column, then the number of buckets might exceed the value specified for the max_num_buckets parameter.</Parameter>
            <Parameter Name="MIN_ROWS_IN_BUCKET">Specify the minimum number of rows in each bucket. Specify a value or use the CMP_MIN_ROWS_IN_BUCKET constant. See "Constants" for information about this constant.See "Overview" for information about buckets.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_COMPARISON" ElementId="#CHDJGDIF">
          <Description>Drops a comparison</Description>
          <Parameters>
            <Parameter Name="COMPARISON_NAME">The name of the comparison.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PURGE_COMPARISON" ElementId="#CHDGJFJB">
          <Description>Purges the comparison results, or a subset of the comparison results, for a comparison</Description>
          <Parameters>
            <Parameter Name="COMPARISON_NAME">The name of the comparison.</Parameter>
            <Parameter Name="SCAN_ID">The scan ID of the scan for which results are purged. The scan ID must identify a root scan. If the scan ID does not identify a root scan, then an error is raised. When a root scan ID is specified, it is purged, and all direct and indirect child scans of the specified root scan are purged.If NULL, then no scan ID is considered when purging comparison results for the comparison.See "Overview" for information about scans.</Parameter>
            <Parameter Name="PURGE_TIME">The date before which results are purged.If NULL, then no date is considered when purging comparison results for the comparison.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RECHECK" ElementId="#CHDEJHCF">
          <Description>Rechecks the differences in a specified scan for a comparison</Description>
          <Parameters>
            <Parameter Name="COMPARISON_NAME">The name of the comparison.</Parameter>
            <Parameter Name="SCAN_ID">The scan ID of the scan to recheck.See "Overview" for more information about specifying a scan ID in this parameter.</Parameter>
            <Parameter Name="PERFORM_ROW_DIF">If TRUE, then compares each row individually in the database objects being compared after reaching the smallest possible bucket for the comparison.If FALSE, then compares buckets for differences but does not compare each row individually when differences are found in the smallest possible bucket.See "Overview" for information about buckets.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_COMPRESSION" Url="http://docs.oracle.com/database/121/ARPLS/d_compress.htm">
      <Description>The DBMS_COMPRESSION package provides an interface to facilitate choosing the correct compression level for an application.</Description>
      <SubPrograms>
        <SubProgram Name="GET_COMPRESSION_RATIO" ElementId="#BEIBEEJC">
          <Description>Analyzes the compression ratio of a table, and gives information about compressibility of a table</Description>
          <Parameters>
            <Parameter Name="SCRATCHTBSNAME">Temporary scratch tablespace that can be used for analysis</Parameter>
            <Parameter Name="OWNNAME">Schema of the table to analyze</Parameter>
            <Parameter Name="TABNAME">Name of the table to analyze</Parameter>
            <Parameter Name="OBJNAME">Name of the object</Parameter>
            <Parameter Name="SUBOBJNAME">Name of the partition or sub-partition of the object</Parameter>
            <Parameter Name="COMPTYPE">Compression types for which analysis should be performed</Parameter>
            <Parameter Name="BLKCNT_CMP">Number of blocks used by compressed sample of the table</Parameter>
            <Parameter Name="BLKCNT_UNCMP">Number of blocks used by uncompressed sample of the table</Parameter>
            <Parameter Name="ROW_CMP">Number of rows in a block in compressed sample of the table</Parameter>
            <Parameter Name="ROW_UNCMP">Number of rows in a block in uncompressed sample of the table</Parameter>
            <Parameter Name="CMP_RATIO">Compression ratio, blkcnt_uncmp divided by blkcnt_cmp</Parameter>
            <Parameter Name="COMPTYPE_STR">String describing the compression type</Parameter>
            <Parameter Name="SUBSET_NUMROWS">Number of rows sampled to estimate compression ratio.</Parameter>
            <Parameter Name="OBJTYPE">Type of the object. Should be a constant to indicate object types defined in this package.</Parameter>
            <Parameter Name="LOBNAME">Name of the LOB column</Parameter>
            <Parameter Name="PARTNAME">In case of partitioned tables, the related partition name</Parameter>
            <Parameter Name="LOBCNT">Number of lobs actually sampled to estimate compression ratio</Parameter>
            <Parameter Name="INDEX_CR">List of indexes and their estimated compression ratios</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_COMPRESSION_TYPE" ElementId="#BEIFFAHJ">
          <Description>Returns the compression type for a specified row</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Schema name of the table</Parameter>
            <Parameter Name="TABNAME">Name of table</Parameter>
            <Parameter Name="ROWID">Rowid of the row</Parameter>
            <Parameter Name="SUBOBJNAME">Name of the table partition or subpartition</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_CONNECTION_POOL" Url="http://docs.oracle.com/database/121/ARPLS/d_connection_pool.htm">
      <Description>The DBMS_CONNECTION_POOL package provides an interface to manage Database Resident Connection Pool.</Description>
      <SubPrograms>
        <SubProgram Name="ALTER_PARAM" ElementId="#BABJAIGJ">
          <Description>Alters a specific configuration parameter as a standalone unit and does not affect other parameters</Description>
          <Parameters>
            <Parameter Name="POOL_NAME">Pool to be configured. Currently only the default pool name is supported.</Parameter>
            <Parameter Name="PARAM_NAME">Any parameter name from CONFIGURE_POOL</Parameter>
            <Parameter Name="PARAM_VALUE">Parameter value for param_name.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CONFIGURE_POOL" ElementId="#BABCECIF">
          <Description>Configures the pool with advanced options</Description>
          <Parameters>
            <Parameter Name="POOL_NAME">Pool to be configured. Currently only the default pool name is supported.</Parameter>
            <Parameter Name="MINSIZE">Minimum number of pooled servers in the pool</Parameter>
            <Parameter Name="MAXSIZE">Maximum allowed pooled servers in the pool</Parameter>
            <Parameter Name="INCRSIZE">Pool would increment by this number of pooled server when pooled server are unavailable at application request time</Parameter>
            <Parameter Name="SESSION_CACHED_CURSORS">Turn on SESSION_CACHED_CURSORS for all connections in the pool. This is an existing init.ora parameter</Parameter>
            <Parameter Name="INACTIVITY_TIMEOUT">TTL (Time to live) for an idle session in the pool. This parameter helps to shrink the pool when it is not used to its maximum capacity. If a connection remains in the pool idle for this time, it is killed.</Parameter>
            <Parameter Name="MAX_THINK_TIME">Maximum time of inactivity by the client after getting a session from the pool. If the client does not issue a database call after grabbing a server from the pool, the client will be forced to relinquish control of the pooled server and will get an ORA-xxxxx error. The freed up server may or may not be returned to the pool.</Parameter>
            <Parameter Name="MAX_USE_SESSION">Maximum number of times a connection can be taken and released to the pool</Parameter>
            <Parameter Name="MAX_LIFETIME_SESSION">TTL (Time to live) for a pooled session</Parameter>
            <Parameter Name="NUM_CBROK">Number of brokers to be started at pool start</Parameter>
            <Parameter Name="MAXCONN_BROK">Maximum number of connections for each broker</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="START_POOL" ElementId="#BABJIAIH">
          <Description>Starts the pool for operations. It is only after this call that the pool could be used by connection clients for creating sessions</Description>
          <Parameters>
            <Parameter Name="POOL_NAME">Pool to be started. Currently only the default pool name is supported.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="STOP_POOL" ElementId="#BABBGICE">
          <Description>Stops the pool and makes it unavailable for the registered connection clients</Description>
          <Parameters>
            <Parameter Name="POOL_NAME">Pool to be stopped. Currently only the default pool name is supported.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RESTORE_DEFAULTS" ElementId="#BABGFGAG">
          <Description>Restores the pool to default settings</Description>
          <Parameters>
            <Parameter Name="POOL_NAME">Pool to be restored. Currently only the default pool name is supported.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_CQ_NOTIFICATION" Url="http://docs.oracle.com/database/121/ARPLS/d_cqnotif.htm">
      <Description>The DBMS_CQ_NOTIFICATION package is part of the database change notification feature that provides the functionality to create registration on queries designated by a client application and so to receive notifications in response to DML or DDL changes on the objects associated with the queries. The notifications are published by the database when the DML or DDL transaction commits.</Description>
      <SubPrograms>
        <SubProgram Name="CQ_NOTIFICATION_QUERYID" ElementId="#CIHEDDIB">
          <Description>Returns the queryid of the most recent query that was attempted to be registered in a registration block</Description>
        </SubProgram>
        <SubProgram Name="DEREGISTER" ElementId="#CHDGHEBB">
          <Description>De-subscribes the client with the supplied registration identifier (ID)</Description>
          <Parameters>
            <Parameter Name="REGID">Client registration ID</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ENABLE_REG" ElementId="#CIHDAAAF">
          <Description>Begins a registration block using an existing registration identifier (ID)</Description>
          <Parameters>
            <Parameter Name="REGID">Client registration ID</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="NEW_REG_START" ElementId="#CIHDJEJF">
          <Description>Begins a new registration block</Description>
          <Parameters>
            <Parameter Name="SYS.CHNF$_REG_INFO">Registration descriptor describing the notification handler and other properties of the registration</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REG_END" ElementId="#CIHGIACA">
          <Description>Ends the registration boundary</Description>
        </SubProgram>
        <SubProgram Name="SET_ROWID_THRESHOLD" ElementId="#CHDDIFDI">
          <Description>Configures the maximum number of rows of a table published in a change notification if the rows of the table are modified in a transaction</Description>
          <Parameters>
            <Parameter Name="TBNAME">Table name qualified by the schema name in the form schemaname.tablename</Parameter>
            <Parameter Name="THRESHOLD">Maximum number of modified rows of the table to be published in the change notification</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_CREDENTIAL" Url="http://docs.oracle.com/database/121/ARPLS/d_credential.htm">
      <Description>The DBMS_CREDENTIAL package provides an interface for authenticating and impersonating EXTPROC callout functions, as well as external jobs, remote jobs and file watchers from the SCHEDULER.</Description>
      <SubPrograms>
        <SubProgram Name="CREATE_CREDENTIAL" ElementId="#CIHDCEFH">
          <Description>Creates a stored username/password pair in a database object called an Oracle credential</Description>
          <Parameters>
            <Parameter Name="CREDENTIAL_NAME">Name of the credential. It can optionally be prefixed with a schema. This cannot be set to NULL. It is converted to upper case unless enclosed in double quotes.</Parameter>
            <Parameter Name="USERNAME">User name to login to the operating system or remote database to run a job if this credential is chosen. This cannot be set to NULL.</Parameter>
            <Parameter Name="PASSWORD">Password to login to the remote operating system to run a job if this credential is chosen. It is case sensitive.</Parameter>
            <Parameter Name="DATABASE_ROLE">Whether a database job using this credential should attempt to log in with administrative privileges. Values: SYSDBA, SYSDG, SYSADMIN or SYSBACKUP.</Parameter>
            <Parameter Name="WINDOWS_DOMAIN">For a Windows remote executable target, this is the domain that the specified user belongs to. The domain will be converted to uppercase automatically.</Parameter>
            <Parameter Name="COMMENTS">A text string that can be used to describe the credential to the user. The Scheduler does not use this field.</Parameter>
            <Parameter Name="ENABLED">Determines whether the credential is enabled or not</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DISABLE_CREDENTIAL" ElementId="#BABCIHFJ">
          <Description>Disables an Oracle credential</Description>
          <Parameters>
            <Parameter Name="CREDENTIAL_NAME">Name of the credential. It can optionally be prefixed with a schema. This cannot be set to NULL. It is converted to upper case unless enclosed in double quotes.</Parameter>
            <Parameter Name="FORCE">If FALSE, the credential is not disabled provided it has no dependency on any existing scheduler job or PL/SQL library. An error is returned if the dependency is observed.If TRUE, the credential is disabled whether or not there is any scheduler job or PL/SQL library referencing it.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_CREDENTIAL" ElementId="#BABHBABD">
          <Description>Drops an Oracle credential</Description>
          <Parameters>
            <Parameter Name="CREDENTIAL_NAME">Name of the credential. It can optionally be prefixed with a schema. This cannot be set to NULL.</Parameter>
            <Parameter Name="FORCE">If set to FALSE, the credential must not be referenced by any EXTPROC alias library or an error is raised. If set to TRUE, the credential is dropped whether or not there are extproc alias libraries referencing it. EXTPROC alias libraries that reference the dropped credential become invalid.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ENABLE_CREDENTIAL" ElementId="#BABCGFEA">
          <Description>Enables an Oracle credential</Description>
          <Parameters>
            <Parameter Name="CREDENTIAL_NAME">Name of the credential. It can optionally be prefixed with a schema. This cannot be set to NULL. It is converted to upper case unless enclosed in double quotes.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UPDATE_CREDENTIAL" ElementId="#BABHHIDH">
          <Description>Updates an existing Oracle credential</Description>
          <Parameters>
            <Parameter Name="CREDENTIAL_NAME">Name of the credential. It can optionally be prefixed with a schema. This cannot be set to NULL. It is converted to upper case unless enclosed in double quotation marks.</Parameter>
            <Parameter Name="ATTRIBUTE">Name of attribute to update: USERNAME, PASSWORD, WINDOWS_DOMAIN, DATABASE_ROLE or COMMENTS</Parameter>
            <Parameter Name="VALUE">New value for the selected attribute</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_CRYPTO" Url="http://docs.oracle.com/database/121/ARPLS/d_crypto.htm">
      <Description>DBMS_CRYPTO provides an interface to encrypt and decrypt stored data, and can be used in conjunction with PL/SQL programs running network communications. It provides support for several industry-standard encryption and hashing algorithms, including the Advanced Encryption Standard (AES) encryption algorithm. AES has been approved by the National Institute of Standards and Technology (NIST) to replace the Data Encryption Standard (DES).</Description>
      <SubPrograms>
        <SubProgram Name="DECRYPT" ElementId="#i1004325">
          <Description>Decrypts RAW data using a stream or block cipher with a user supplied key and optional IV (initialization vector)</Description>
          <Parameters>
            <Parameter Name="SRC">RAW data to be decrypted.</Parameter>
            <Parameter Name="TYP">Stream or block cipher type and modifiers to be used.</Parameter>
            <Parameter Name="KEY">Key to be used for decryption.</Parameter>
            <Parameter Name="IV">Optional initialization vector for block ciphers. Default is NULL.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DECRYPT" ElementId="#i1004271">
          <Description>Decrypts LOB data using a stream or block cipher with a user supplied key and optional IV</Description>
          <Parameters>
            <Parameter Name="SRC">RAW data to be decrypted.</Parameter>
            <Parameter Name="TYP">Stream or block cipher type and modifiers to be used.</Parameter>
            <Parameter Name="KEY">Key to be used for decryption.</Parameter>
            <Parameter Name="IV">Optional initialization vector for block ciphers. Default is NULL.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ENCRYPT" ElementId="#i1002112">
          <Description>Encrypts RAW data using a stream or block cipher with a user supplied key and optional IV</Description>
          <Parameters>
            <Parameter Name="SRC">RAW data to be encrypted.</Parameter>
            <Parameter Name="TYP">Stream or block cipher type and modifiers to be used.</Parameter>
            <Parameter Name="KEY">Encryption key to be used for encrypting data.</Parameter>
            <Parameter Name="IV">Optional initialization vector for block ciphers. Default is NULL.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ENCRYPT" ElementId="#i1003081">
          <Description>Encrypts LOB data using a stream or block cipher with a user supplied key and optional IV</Description>
          <Parameters>
            <Parameter Name="SRC">RAW data to be encrypted.</Parameter>
            <Parameter Name="TYP">Stream or block cipher type and modifiers to be used.</Parameter>
            <Parameter Name="KEY">Encryption key to be used for encrypting data.</Parameter>
            <Parameter Name="IV">Optional initialization vector for block ciphers. Default is NULL.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="HASH" ElementId="#i1002022">
          <Description>Applies one of the supported cryptographic hash algorithms (MD4, MD5, SHA-1, or SHA-2) to data</Description>
          <Parameters>
            <Parameter Name="SRC">The source data to be hashed.</Parameter>
            <Parameter Name="TYP">The hash algorithm to be used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MAC" ElementId="#i1000594">
          <Description>Applies Message Authentication Code algorithms (MD5, SHA-1, or SHA-2) to data to provide keyed message protection</Description>
          <Parameters>
            <Parameter Name="SRC">Source data to which MAC algorithms are to be applied.</Parameter>
            <Parameter Name="TYP">MAC algorithm to be used.</Parameter>
            <Parameter Name="KEY">Key to be used for MAC algorithm.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RANDOMBYTES" ElementId="#i1000605">
          <Description>Returns a RAW value containing a cryptographically secure pseudo-random sequence of bytes, and can be used to generate random material for encryption keys</Description>
        </SubProgram>
        <SubProgram Name="RANDOMINTEGER" ElementId="#i1003214">
          <Description>Returns a random BINARY_INTEGER</Description>
        </SubProgram>
        <SubProgram Name="RANDOMNUMBER" ElementId="#i1004384">
          <Description>Returns a random 128-bit integer of the NUMBER datatype</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_CSX_ADMIN" Url="http://docs.oracle.com/database/121/ARPLS/d_csx_admin.htm">
      <Description>The DBMS_CSX_ADMIN package provides an interface to customize the setup when transporting a tablespace containing binary XML data.</Description>
      <SubPrograms>
        <SubProgram Name="GETTOKENTABLEINFO" ElementId="#CDCJIGCA">
          <Description>Returns the GUID of the token table set where token mappings for this table</Description>
        </SubProgram>
        <SubProgram Name="GETTOKENTABLEINFOBYTABLESPACE" ElementId="#CDCCAFJF">
          <Description>Returns the GUID and the token table names for this tablespace</Description>
          <Parameters>
            <Parameter Name="TSNAME">Tablespace name</Parameter>
            <Parameter Name="TABLESPACENO">Tablespace number</Parameter>
            <Parameter Name="GUID">GUID of the token table set associated with this tablespace (if any)</Parameter>
            <Parameter Name="QNAMETABLE">Name of the qname-ID table</Parameter>
            <Parameter Name="NMSPCTABLE">Name of the namespace-ID table</Parameter>
            <Parameter Name="ISDEFAULT">TRUE if the token table is the default one</Parameter>
            <Parameter Name="CONTAINTOKTAB">TRUE if the tablespace contains its own token table set</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="NAMESPACEIDTABLE" ElementId="#CDCIFICC">
          <Description>Returns default namespace-ID token table</Description>
        </SubProgram>
        <SubProgram Name="PATHIDTABLE" ElementId="#CDCEBIBJ">
          <Description>Returns the default path-ID token table</Description>
        </SubProgram>
        <SubProgram Name="QNAMEIDTABLE" ElementId="#CDCIAICI">
          <Description>Returns the default qname-ID token table.</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_CUBE" Url="http://docs.oracle.com/database/121/ARPLS/d_cube.htm">
      <Description>DBMS_CUBE contains subprograms that create OLAP cubes and dimensions, and that load and process the data for querying.</Description>
    </Package>
    <Package Name="DBMS_CUBE_ADVISE" Url="http://docs.oracle.com/database/121/ARPLS/d_cube_advise.htm">
      <Description>DBMS_CUBE_ADVISE contains subprograms for evaluating cube materialized views to support log-based fast refresh and query rewrite.</Description>
    </Package>
    <Package Name="DBMS_CUBE_LOG" Url="http://docs.oracle.com/database/121/ARPLS/d_cube_log.htm">
      <Description>DBMS_CUBE_LOG contains subprograms for creating and managing logs for cubes and cube dimensions.</Description>
    </Package>
    <Package Name="DBMS_DATA_MINING" Url="http://docs.oracle.com/database/121/ARPLS/d_datmin.htm">
      <Description>The DBMS_DATA_MINING package is the application programming interface for creating, evaluating, and querying data mining models.</Description>
      <SubPrograms>
        <SubProgram Name="ADD_COST_MATRIX" ElementId="#CACGCHCE">
          <Description>Adds a cost matrix to a classification model</Description>
          <Parameters>
            <Parameter Name="MODEL_NAME">Name of the model in the form [schema_name.]model_name. If you do not specify a schema, your own schema is assumed.</Parameter>
            <Parameter Name="COST_MATRIX_TABLE_NAME">Name of the cost matrix table (described in Table 45-25).</Parameter>
            <Parameter Name="COST_MATRIX_SCHEMA_NAME">Schema of the cost matrix table. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ALTER_REVERSE_EXPRESSION" ElementId="#CACCBBJG">
          <Description>Changes the reverse transformation expression to an expression that you specify</Description>
          <Parameters>
            <Parameter Name="MODEL_NAME">Name of the model in the form [schema_name.]model_name. If you do not specify a schema, your own schema is used.</Parameter>
            <Parameter Name="EXPRESSION">An expression to replace the reverse transformation associated with the attribute.</Parameter>
            <Parameter Name="ATTRIBUTE_NAME">Name of the attribute. Specify NULL if you wish to apply expression to a cluster, feature, or One-Class SVM prediction.</Parameter>
            <Parameter Name="ATTRIBUTE_SUBNAME">Name of the nested attribute if attribute_name is a nested column, otherwise NULL.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="APPLY" ElementId="#i1038691">
          <Description>Applies a model to a data set (scores the data)</Description>
          <Parameters>
            <Parameter Name="MODEL_NAME">Name of the model in the form [schema_name.]model_name. If you do not specify a schema, your own schema is used.</Parameter>
            <Parameter Name="DATA_TABLE_NAME">Name of table or view containing the data to be scored</Parameter>
            <Parameter Name="CASE_ID_COLUMN_NAME">Name of the case identifier column</Parameter>
            <Parameter Name="RESULT_TABLE_NAME">Name of the table in which to store apply results</Parameter>
            <Parameter Name="DATA_SCHEMA_NAME">Name of the schema containing the data to be scored</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="COMPUTE_CONFUSION_MATRIX" ElementId="#i1038990">
          <Description>Computes the confusion matrix for a classification model</Description>
          <Parameters>
            <Parameter Name="ACCURACY">Output parameter containing the overall percentage accuracy of the predictions.</Parameter>
            <Parameter Name="APPLY_RESULT_TABLE_NAME">Table containing the predictions.</Parameter>
            <Parameter Name="TARGET_TABLE_NAME">Table containing the known target values from the test data.</Parameter>
            <Parameter Name="CASE_ID_COLUMN_NAME">Case ID column in the apply results table. Must match the case identifier in the targets table.</Parameter>
            <Parameter Name="TARGET_COLUMN_NAME">Target column in the targets table. Contains the known target values from the test data.</Parameter>
            <Parameter Name="CONFUSION_MATRIX_TABLE_NAME">Table containing the confusion matrix. The table will be created by the procedure in the user's schema.The columns in the confusion matrix table are described in the Usage Notes.</Parameter>
            <Parameter Name="SCORE_COLUMN_NAME">Column containing the predictions in the apply results table.The default column name is PREDICTION, which is the default name created by the APPLY procedure (See "APPLY Procedure").</Parameter>
            <Parameter Name="SCORE_CRITERION_COLUMN_NAME">Column containing the scoring criterion in the apply results table. Contains either the probabilities or the costs that determine the predictions.By default, scoring is based on probability; the class with the highest probability is predicted for each case. If scoring is based on cost, the class with the lowest cost is predicted.The score_criterion_type parameter indicates whether probabilities or costs will be used for scoring.The default column name is 'PROBABILITY', which is the default name created by the APPLY procedure (See "APPLY Procedure").See the Usage Notes for additional information.</Parameter>
            <Parameter Name="COST_MATRIX_TABLE_NAME">(Optional) Table that defines the costs associated with misclassifications. If a cost matrix table is provided and the score_criterion_type parameter is set to 'COSTS', the costs in this table will be used as the scoring criteria.The columns in a cost matrix table are described in the Usage Notes.</Parameter>
            <Parameter Name="APPLY_RESULT_SCHEMA_NAME">Schema of the apply results table.If null, the user's schema is assumed.</Parameter>
            <Parameter Name="TARGET_SCHEMA_NAME">Schema of the table containing the known targets.If null, the user's schema is assumed.</Parameter>
            <Parameter Name="COST_MATRIX_SCHEMA_NAME">Schema of the cost matrix table, if one is provided.If null, the user's schema is assumed.</Parameter>
            <Parameter Name="SCORE_CRITERION_TYPE">Whether to use probabilities or costs as the scoring criterion. Probabilities or costs are passed in the column identified in the score_criterion_column_name parameter.The default value of score_criterion_type is 'PROBABILITY'. To use costs as the scoring criterion, specify 'COST'.If score_criterion_type is set to 'COST' but no cost matrix is provided and if there is a scoring cost matrix associated with the model, then the associated costs are used for scoring.See the Usage Notes and the Examples.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="COMPUTE_LIFT" ElementId="#i1042043">
          <Description>Computes lift for a a classification model</Description>
          <Parameters>
            <Parameter Name="APPLY_RESULT_TABLE_NAME">Table containing the predictions.</Parameter>
            <Parameter Name="TARGET_TABLE_NAME">Table containing the known target values from the test data.</Parameter>
            <Parameter Name="CASE_ID_COLUMN_NAME">Case ID column in the apply results table. Must match the case identifier in the targets table.</Parameter>
            <Parameter Name="TARGET_COLUMN_NAME">Target column in the targets table. Contains the known target values from the test data.</Parameter>
            <Parameter Name="LIFT_TABLE_NAME">Table containing the lift statistics. The table will be created by the procedure in the user's schema.The columns in the lift table are described in the Usage Notes.</Parameter>
            <Parameter Name="POSITIVE_TARGET_VALUE">The positive class. This should be the class of interest, for which you want to calculate lift.If the target column is a NUMBER, you can use the TO_CHAR() operator to provide the value as a string.</Parameter>
            <Parameter Name="SCORE_COLUMN_NAME">Column containing the predictions in the apply results table.The default column name is 'PREDICTION', which is the default name created by the APPLY procedure (See "APPLY Procedure").</Parameter>
            <Parameter Name="SCORE_CRITERION_COLUMN_NAME">Column containing the scoring criterion in the apply results table. Contains either the probabilities or the costs that determine the predictions.By default, scoring is based on probability; the class with the highest probability is predicted for each case. If scoring is based on cost, the class with the lowest cost is predicted.The score_criterion_type parameter indicates whether probabilities or costs will be used for scoring.The default column name is 'PROBABILITY', which is the default name created by the APPLY procedure (See "APPLY Procedure").See the Usage Notes for additional information.</Parameter>
            <Parameter Name="NUM_QUANTILES">Number of quantiles to be used in calculating lift. The default is 10.</Parameter>
            <Parameter Name="COST_MATRIX_TABLE_NAME">(Optional) Table that defines the costs associated with misclassifications. If a cost matrix table is provided and the score_criterion_type parameter is set to 'COST', the costs will be used as the scoring criteria.The columns in a cost matrix table are described in the Usage Notes.</Parameter>
            <Parameter Name="APPLY_RESULT_SCHEMA_NAME">Schema of the apply results table.If null, the user's schema is assumed.</Parameter>
            <Parameter Name="TARGET_SCHEMA_NAME">Schema of the table containing the known targets.If null, the user's schema is assumed.</Parameter>
            <Parameter Name="COST_MATRIX_SCHEMA_NAME">Schema of the cost matrix table, if one is provided.If null, the user's schema is assumed.</Parameter>
            <Parameter Name="SCORE_CRITERION_TYPE">Whether to use probabilities or costs as the scoring criterion. Probabilities or costs are passed in the column identified in the score_criterion_column_name parameter.The default value of score_criterion_type is 'PROBABILITY'. To use costs as the scoring criterion, specify 'COST'.If score_criterion_type is set to 'COST' but no cost matrix is provided and if there is a scoring cost matrix associated with the model, then the associated costs are used for scoring.See the Usage Notes and the Examples.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="COMPUTE_ROC" ElementId="#i1039323">
          <Description>Computes Receiver Operating Characteristic (ROC) for a classification model</Description>
          <Parameters>
            <Parameter Name="ROC_AREA_UNDER_THE_CURVE">Output parameter containing the area under the ROC curve (AUC). The AUC measures the likelihood that an actual positive will be predicted as positive.The greater the AUC, the greater the flexibility of the model in accommodating trade-offs between positive and negative class predictions. AUC can be especially important when one target class is rarer or more important to identify than another.</Parameter>
            <Parameter Name="APPLY_RESULT_TABLE_NAME">Table containing the predictions.</Parameter>
            <Parameter Name="TARGET_TABLE_NAME">Table containing the known target values from the test data.</Parameter>
            <Parameter Name="CASE_ID_COLUMN_NAME">Case ID column in the apply results table. Must match the case identifier in the targets table.</Parameter>
            <Parameter Name="TARGET_COLUMN_NAME">Target column in the targets table. Contains the known target values from the test data.</Parameter>
            <Parameter Name="ROC_TABLE_NAME">Table containing the ROC output. The table will be created by the procedure in the user's schema.The columns in the ROC table are described in the Usage Notes.</Parameter>
            <Parameter Name="POSITIVE_TARGET_VALUE">The positive class. This should be the class of interest, for which you want to calculate ROC.If the target column is a NUMBER, you can use the TO_CHAR() operator to provide the value as a string.</Parameter>
            <Parameter Name="SCORE_COLUMN_NAME">Column containing the predictions in the apply results table.The default column name is 'PREDICTION', which is the default name created by the APPLY procedure (See "APPLY Procedure").</Parameter>
            <Parameter Name="SCORE_CRITERION_COLUMN_NAME">Column containing the scoring criterion in the apply results table. Contains the probabilities that determine the predictions.The default column name is 'PROBABILITY', which is the default name created by the APPLY procedure (See "APPLY Procedure").</Parameter>
            <Parameter Name="APPLY_RESULT_SCHEMA_NAME">Schema of the apply results table.If null, the user's schema is assumed.</Parameter>
            <Parameter Name="TARGET_SCHEMA_NAME">Schema of the table containing the known targets.If null, the user's schema is assumed.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_MODEL" ElementId="#i1038828">
          <Description>Creates a model</Description>
          <Parameters>
            <Parameter Name="MODEL_NAME">Name of the model in the form [schema_name.]model_name. If you do not specify a schema, your own schema is used.See the Usage Notes for model naming restrictions.</Parameter>
            <Parameter Name="MINING_FUNCTION">The mining function. Values are listed in Table 45-3, "Mining Functions".</Parameter>
            <Parameter Name="DATA_TABLE_NAME">Table or view containing the build data.</Parameter>
            <Parameter Name="CASE_ID_COLUMN_NAME">Case identifier column in the build data.</Parameter>
            <Parameter Name="TARGET_COLUMN_NAME">For supervised models, the target column in the build data. NULL for unsupervised models.</Parameter>
            <Parameter Name="SETTINGS_TABLE_NAME">Table containing build settings for the model. NULL if there is no settings table (only default settings are used).</Parameter>
            <Parameter Name="DATA_SCHEMA_NAME">Schema hosting the build data. If NULL, the user's schema is assumed.</Parameter>
            <Parameter Name="SETTINGS_SCHEMA_NAME">Schema hosting the settings table. If NULL, the user's schema is assumed.</Parameter>
            <Parameter Name="XFORM_LIST">A list of transformations to be used in addition to or instead of automatic transformations, depending on the value of the PREP_AUTO setting. (See "Automatic Data Preparation".)The datatype of xform_list is TRANSFORM_LIST, which consists of records of type TRANSFORM_REC. Each TRANSFORM_REC specifies the transformation information for a single attribute.The expression field stores a SQL expression for transforming the attribute. The reverse_expression field stores a SQL expression for reversing the transformation in model details and, if the attribute is a target, in the results of scoring. The SQL expressions are manipulated by routines in the DBMS_DATA_MINING_TRANSFORM package:SET_EXPRESSION ProcedureGET_EXPRESSION FunctionSET_TRANSFORM ProcedureThe attribute_spec field identifies individualized treatment for the attribute. See the Usage Notes for details.See Table 46-1, "Datatypes in DBMS_DATA_MINING_TRANSFORM"for details about the TRANSFORM_REC type.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_MODEL" ElementId="#i1039535">
          <Description>Drops a model</Description>
          <Parameters>
            <Parameter Name="MODEL_NAME">Name of the mining model in the form [schema_name.]model_name. If you do not specify a schema, your own schema is used.</Parameter>
            <Parameter Name="FORCE">Forces the mining model to be dropped even if it is invalid. A mining model may be invalid if a serious system error interrupted the model build process.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXPORT_MODEL" ElementId="#i1039591">
          <Description>Exports a model to a dump file</Description>
          <Parameters>
            <Parameter Name="FILENAME">Name of the dump file set to which the models should be exported. The name must be unique within the schema.The dump file set can contain one or more files. The number of files in a dump file set is determined by the size of the models being exported (both metadata and data) and a specified or estimated maximum file size. You can specify the file size in the filesize parameter, or you can use the operation parameter to cause Oracle Data Pump to estimate the file size. If the size of the models to export is greater than the maximum file size, one or more additional files are created.When the export operation completes successfully, the name of the dump file set is automatically expanded to filename01.dmp, even if there is only one file in the dump set. If there are additional files, they are named sequentially as filename02.dmp, filename03.dmp, and so forth.</Parameter>
            <Parameter Name="DIRECTORY">Name of a pre-defined directory object that specifies where the dump file set should be created.The exporting user must have read/write privileges on the directory object and on the file system directory that it identifies.See Oracle Database SQL Language Reference for information about directory objects.</Parameter>
            <Parameter Name="MODEL_FILTER">Optional parameter that specifies which model or models to export. If you do not specify a value for model_filter, all models in the schema are exported. You can also specify NULL (the default) or 'ALL' to export all models.You can export individual models by name and groups of models based on mining function or algorithm. For instance, you could export all regression models or all Naive Bayes models. Examples are provided in Table 45-44.</Parameter>
            <Parameter Name="FILESIZE">Optional parameter that specifies the maximum size of a file in the dump file set. The size may be specified in bytes, kilobytes (K), megabytes (M), or gigabytes (G). The default size is 50 MB.If the size of the models to export is larger than filesize, one or more additional files are created within the dump set. See the description of the filename parameter for more information.</Parameter>
            <Parameter Name="OPERATION">Optional parameter that specifies whether or not to estimate the size of the files in the dump set. By default the size is not estimated and the value of the filesize parameter determines the size of the files.You can specify either of the following values for operation:'EXPORT' — Export all or the specified models. (Default)'ESTIMATE' — Estimate the size of the exporting models.</Parameter>
            <Parameter Name="REMOTE_LINK">Optional parameter that specifies the name of a database link to a remote system. The default value is NULL. A database link is a schema object in a local database that enables access to objects in a remote database. When you specify a value for remote_link, you can export the models in the remote database. The EXP_FULL_DATABASE role is required for exporting the remote models. The EXP_FULL_DATABASE privilege, the CREATE DATABASE LINK privilege, and other privileges may also be required.</Parameter>
            <Parameter Name="JOBNAME">Optional parameter that specifies the name of the export job. By default, the name has the form username_exp_nnnn, where nnnn is a number. For example, a job name in the SCOTT schema might be SCOTT_exp_134.If you specify a job name, it must be unique within the schema. The maximum length of the job name is 30 characters.A log file for the export job, named jobname.log, is created in the same directory as the dump file set.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_ASSOCIATION_RULES" ElementId="#i1039753">
          <Description>Returns the rules from an association model</Description>
          <Parameters>
            <Parameter Name="MODEL_NAME">Name of the model in the form [schema_name.]model_name. If you do not specify a schema, your own schema is used.This is the only required parameter of GET_ASSOCIATION_RULES. All other parameters specify optional filters on the rules to return.</Parameter>
            <Parameter Name="TOPN">Return the n top rules ordered by confidence and then support, both descending. If you specify a sort order, the top n rules are derived after the sort is performed.If topn is specified and no maximum or minimum rule length is specified, then the only columns allowed in the sort order are RULE_CONFIDENCE and RULE_SUPPORT. If topn is specified and a maximum or minimum rule length is specified, then RULE_CONFIDENCE, RULE_SUPPORT, and NUMBER_OF_ITEMS are allowed in the sort order.</Parameter>
            <Parameter Name="RULE_ID">Identifier of the rule to return. If you specify a value for rule_id, do not specify values for the other filtering parameters.</Parameter>
            <Parameter Name="MIN_CONFIDENCE">Return the rules with confidence greater than or equal to this number.</Parameter>
            <Parameter Name="MIN_SUPPORT">Return the rules with support greater than or equal to this number.</Parameter>
            <Parameter Name="MAX_RULE_LENGTH">Return the rules with a length less than or equal to this number.Rule length refers to the number of items in the rule (See NUMBER_OF_ITEMS in Table 45-46). For example, in the rule A=&gt;B (if A, then B), the number of items is 2.If max_rule_length is specified, then the NUMBER_OF_ITEMS column is permitted in the sort order.</Parameter>
            <Parameter Name="MIN_RULE_LENGTH">Return the rules with a length greater than or equal to this number. See max_rule_length for a description of rule length.If min_rule_length is specified, then the NUMBER_OF_ITEMS column is permitted in the sort order.</Parameter>
            <Parameter Name="SORT_ORDER">Sort the rules by the values in one or more of the returned columns. Specify one or more column names, each followed by ASC for ascending order or DESC for descending order. (See Table 45-46, "GET_ASSOCIATION RULES Function Return Values" for the column names.)For example, to sort the result set in descending order first by the NUMBER_OF_ITEMS column, then by the RULE_CONFIDENCE column, you would specify:ORA_MINING_VARCHAR2_NT('NUMBER_OF_ITEMS DESC', 'RULE_CONFIDENCE DESC')If you specify topn, the results will vary depending on the sort order.By default, the results are sorted by confidence in descending order, then by support in descending order.</Parameter>
            <Parameter Name="ANTECEDENT_ITEMS">Return the rules with these items in the antecedent.</Parameter>
            <Parameter Name="CONSEQUENT_ITEMS">Return the rules with this item in the consequent.</Parameter>
            <Parameter Name="MIN_LIFT">Return the rules with lift greater than or equal to this number.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_FREQUENT_ITEMSETS" ElementId="#i1039941">
          <Description>Returns the frequent itemsets for an association model</Description>
          <Parameters>
            <Parameter Name="MODEL_NAME">Name of the model in the form [schema_name.]model_name. If you do not specify a schema, your own schema is used.</Parameter>
            <Parameter Name="TOPN">When not NULL, return the top n rows ordered by support in descending order</Parameter>
            <Parameter Name="MAX_ITEMSET_LENGTH">Maximum length of an item set.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_MODEL_COST_MATRIX" ElementId="#CACGJGDJ">
          <Description>Returns the cost matrix for a model</Description>
          <Parameters>
            <Parameter Name="MODEL_NAME">Name of the model in the form [schema_name.]model_name. If you do not specify a schema, your own schema is used.</Parameter>
            <Parameter Name="MATRIX_TYPE">The type of cost matrix.COST_MATRIX_TYPE_SCORE — cost matrix used for scoring. (Default.)COST_MATRIX_TYPE_CREATE — cost matrix used to create the model (Decision Tree only).</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_MODEL_DETAILS_AI" ElementId="#CACGDHGJ">
          <Description>Returns details about an Attribute Importance model</Description>
          <Parameters>
            <Parameter Name="MODEL_NAME">Name of the model in the form [schema_name.]model_name. If you do not specify a schema, your own schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_MODEL_DETAILS_EM" ElementId="#CACIHDHB">
          <Description>Returns details about an Expectation Maximization model</Description>
          <Parameters>
            <Parameter Name="MODEL_NAME">Name of the model in the form [schema_name.]model_name. If you do not specify a schema, your own schema is used.</Parameter>
            <Parameter Name="CLUSTER_ID">The ID of a cluster in the model. When a valid cluster ID is specified, only the details of this cluster are returned. Otherwise the details for all clusters are returned.</Parameter>
            <Parameter Name="ATTRIBUTE">The name of an attribute. When a valid attribute name is specified, only the details of this attribute are returned. Otherwise the details for all attributes are returned</Parameter>
            <Parameter Name="CENTROID">This parameter accepts the following values:1 — Details about centroids are returned (default)0 — Details about centroids are not returned</Parameter>
            <Parameter Name="HISTOGRAM">This parameter accepts the following values:1 — Details about histograms are returned (default)0 — Details about histograms are not returned</Parameter>
            <Parameter Name="RULES">This parameter accepts the following values:2 — Details about rules are returned (default)1 — Rule summaries are returned0 — No information about rules is returned</Parameter>
            <Parameter Name="ATTRIBUTE_SUBNAME">The name of a nested attribute. The full name of a nested attribute has the form:attribute_name.attribute_subnamewhere attribute_name is the name of the column and attribute_subname is the name of the nested attribute in that column. If the attribute is not nested, attribute_subname is null.</Parameter>
            <Parameter Name="TOPN_ATTRIBUTES">Restricts the number of attributes returned in the centroid, histogram, and rules objects. Only the n attributes with the highest confidence values in the rules are returned.If the number of attributes included in the rules is less than topn, then up to n additional attributes in alphabetical order are returned.If both the attribute and topn_attributes parameters are specified, then topn_attributes is ignored.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_MODEL_DETAILS_EM_COMP" ElementId="#CACHIBCG">
          <Description>Returns details about the parameters of an Expectation Maximization model</Description>
          <Parameters>
            <Parameter Name="MODEL_NAME">Name of the model in the form [schema_name.]model_name. If you do not specify a schema, your own schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_MODEL_DETAILS_EM_PROJ" ElementId="#CACHDDCF">
          <Description>Returns details about the projects of an Expectation Maximization model</Description>
          <Parameters>
            <Parameter Name="MODEL_NAME">Name of the model in the form [schema_name.]model_name. If you do not specify a schema, your own schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_MODEL_DETAILS_GLM" ElementId="#CACECDHF">
          <Description>Returns details about a Generalized Linear Model</Description>
          <Parameters>
            <Parameter Name="MODEL_NAME">Name of the model in the form [schema_name.]model_name. If you do not specify a schema, your own schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_MODEL_DETAILS_GLOBAL" ElementId="#CACICAIJ">
          <Description>Returns high-level statistics about a model</Description>
          <Parameters>
            <Parameter Name="MODEL_NAME">Name of the model in the form [schema_name.]model_name. If you do not specify a schema, your own schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_MODEL_DETAILS_KM" ElementId="#CACIIEAA">
          <Description>Returns details about a k-Means model</Description>
          <Parameters>
            <Parameter Name="MODEL_NAME">Name of the model in the form [schema_name.]model_name. If you do not specify a schema, your own schema is used.</Parameter>
            <Parameter Name="CLUSTER_ID">The ID of a cluster in the model. When a valid cluster ID is specified, only the details of this cluster are returned. Otherwise the details for all clusters are returned.</Parameter>
            <Parameter Name="ATTRIBUTE">The name of an attribute. When a valid attribute name is specified, only the details of this attribute are returned. Otherwise the details for all attributes are returned</Parameter>
            <Parameter Name="CENTROID">This parameter accepts the following values:1 — Details about centroids are returned (default)0 — Details about centroids are not returned</Parameter>
            <Parameter Name="HISTOGRAM">This parameter accepts the following values:1 — Details about histograms are returned (default)0 — Details about histograms are not returned</Parameter>
            <Parameter Name="RULES">This parameter accepts the following values:2 — Details about rules are returned (default)1 — Rule summaries are returned0 — No information about rules is returned</Parameter>
            <Parameter Name="ATTRIBUTE_SUBNAME">The name of a nested attribute. The full name of a nested attribute has the form:attribute_name.attribute_subnamewhere attribute_name is the name of the column and attribute_subname is the name of the nested attribute in that column.If the attribute is not nested, attribute_subname is null.</Parameter>
            <Parameter Name="TOPN_ATTRIBUTES">Restricts the number of attributes returned in the centroid, histogram, and rules objects. Only the n attributes with the highest confidence values in the rules are returned.If the number of attributes included in the rules is less than topn, then up to n additional attributes in alphabetical order are returned.If both the attribute and topn_attributes parameters are specified, then topn_attributes is ignored.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_MODEL_DETAILS_NB" ElementId="#i1040352">
          <Description>Returns details about a Naive Bayes model</Description>
          <Parameters>
            <Parameter Name="MODEL_NAME">Name of the model in the form [schema_name.]model_name. If you do not specify a schema, your own schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_MODEL_DETAILS_NMF" ElementId="#i1040515">
          <Description>Returns details about a Non-Negative Matrix Factorization model</Description>
          <Parameters>
            <Parameter Name="MODEL_NAME">Name of the model in the form [schema_name.]model_name. If you do not specify a schema, your own schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_MODEL_DETAILS_OC" ElementId="#CACDAIAE">
          <Description>Returns details about an O-Cluster model</Description>
          <Parameters>
            <Parameter Name="MODEL_NAME">Name of the model in the form [schema_name.]model_name. If you do not specify a schema, your own schema is used.</Parameter>
            <Parameter Name="CLUSTER_ID">The ID of a cluster in the model. When a valid cluster ID is specified, only the details of this cluster are returned. Otherwise the details for all clusters are returned.</Parameter>
            <Parameter Name="ATTRIBUTE">The name of an attribute. When a valid attribute name is specified, only the details of this attribute are returned. Otherwise the details for all attributes are returned</Parameter>
            <Parameter Name="CENTROID">This parameter accepts the following values:1 — Details about centroids are returned (default)0 — Details about centroids are not returned</Parameter>
            <Parameter Name="HISTOGRAM">This parameter accepts the following values:1 — Details about histograms are returned (default)0 — Details about histograms are not returned</Parameter>
            <Parameter Name="RULES">This parameter accepts the following values:2 — Details about rules are returned (default)1 — Rule summaries are returned0 — No information about rules is returned</Parameter>
            <Parameter Name="TOPN_ATTRIBUTES">Restricts the number of attributes returned in the centroid, histogram, and rules objects. Only the n attributes with the highest confidence values in the rules are returned.If the number of attributes included in the rules is less than topn, then up to n additional attributes in alphabetical order are returned.If both the attribute and topn_attributes parameters are specified, then topn_attributes is ignored.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_MODEL_DETAILS_SVD" ElementId="#CACEABEH">
          <Description>Returns details about a Singular Value Decomposition model</Description>
          <Parameters>
            <Parameter Name="MODEL_NAME">Name of the model in the form [schema_name.]model_name. If you do not specify a schema, your own schema is used.</Parameter>
            <Parameter Name="MATRIX_TYPE">Specifies which of the three SVD matrix types to return. Values are: U, S, V, and NULL. When matrix_type is null (default), all matrices are returned.The U matrix is only computed when the SVDS_U_MATRIX_OUTPUT setting is enabled. It is not computed by default. If the model does not contain U matrices and you set matrix_type to U, an empty set of rows is returned. See Table 45-20, "Singular Value Decomposition Settings".</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_MODEL_DETAILS_SVM" ElementId="#i1040615">
          <Description>Returns details about a Support Vector Machine model with a linear kernel</Description>
          <Parameters>
            <Parameter Name="MODEL_NAME">Name of the model in the form [schema_name.]model_name. If you do not specify a schema, your own schema is used.</Parameter>
            <Parameter Name="REVERSE_COEF">Whether or not GET_MODEL_DETAILS_SVM should transform the attribute coefficients using the original attribute transformations.When reverse_coef is set to 0 (default), GET_MODEL_DETAILS_SVM returns the coefficients directly from the model without applying transformations.When reverse_coef is set to 1, GET_MODEL_DETAILS_SVM transforms the coefficients and bias by applying the normalization shifts and scales that were generated using automatic data preparation.See Usage Note 4.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_MODEL_DETAILS_XML" ElementId="#CACFGFDB">
          <Description>Returns details about a Decision Tree model</Description>
          <Parameters>
            <Parameter Name="MODEL_NAME">Name of the model in the form [schema_name.]model_name. If you do not specify a schema, your own schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_MODEL_TRANSFORMATIONS" ElementId="#CACJDBCE">
          <Description>Returns the transformations embedded in a model</Description>
          <Parameters>
            <Parameter Name="MODEL_NAME">Name of the model in the form [schema_name.]model_name. If you do not specify a schema, your own schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_TRANSFORM_LIST" ElementId="#CACBGIDA">
          <Description>Converts between two different transformation specification formats</Description>
          <Parameters>
            <Parameter Name="XFORM_LIST">A list of transformation specifications that can be embedded in a model. Accepted as a parameter to the CREATE_MODEL Procedure.The TRANSFORM_LIST type is a table of TRANSFORM_REC objects. Each TRANSFORM_REC has these fields:For details about the TRANSFORM_LIST collection type, see Table 46-1, "Datatypes in DBMS_DATA_MINING_TRANSFORM".</Parameter>
            <Parameter Name="MODEL_XFORMS">A list of embedded transformation expressions returned by the GET_MODEL_TRANSFORMATIONS Function for a specific model.The DM_TRANSFORMS type is a table of DM_TRANSFORM objects. Each DM_TRANSFORM has these fields:</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IMPORT_MODEL" ElementId="#i1040882">
          <Description>Imports a model into a user schema</Description>
          <Parameters>
            <Parameter Name="FILENAME">Name of the dump file set from which the models should be imported. The dump file set must have been created by the EXPORT_MODEL procedure or the expdp export utility of Oracle Data Pump.The dump file set can contain one or more files. (Refer to "EXPORT_MODEL Procedure" for details.) If the dump file set contains multiple files, you can specify 'filename%U' instead of listing them. For example, if your dump file set contains 3 files, archive01.dmp, archive02.dmp, and archive03.dmp, you can import them by specifying 'archive%U'.</Parameter>
            <Parameter Name="DIRECTORY">Name of a pre-defined directory object that specifies where the dump file set is located. Both the exporting and the importing user must have read/write access to the directory object and to the file system directory that it identifies.Note: The target database must have also have read/write access to the file system directory.</Parameter>
            <Parameter Name="MODEL_FILTER">Optional parameter that specifies one or more models to import. If you do not specify a value for model_filter, all models in the dump file set are imported. You can also specify NULL (the default) or 'ALL' to import all models.The value of model_filter can be one or more model names. The following are valid filters.The first causes IMPORT_MODEL to import a single model named mymodel1. The second causes IMPORT_MODEL to import two models, mymodel2 and mymodel3.</Parameter>
            <Parameter Name="OPERATION">Optional parameter that specifies whether to import the models or the SQL statements that create the models. By default, the models are imported.You can specify either of the following values for operation:'IMPORT' — Import the models (Default)'SQL_FILE'— Write the SQL DDL for creating the models to a text file. The text file is named job_name.sql and is located in the dump set directory.</Parameter>
            <Parameter Name="REMOTE_LINK">Optional parameter that specifies the name of a database link to a remote system. The default value is NULL. A database link is a schema object in a local database that enables access to objects in a remote database. When you specify a value for remote_link, you can import models into the local database from the remote database. The import is fileless; no dump file is involved. The IMP_FULL_DATABASE role is required for importing the remote models. The EXP_FULL_DATABASE privilege, the CREATE DATABASE LINK privilege, and other privileges may also be required. (See Example 2.)</Parameter>
            <Parameter Name="JOBNAME">Optional parameter that specifies the name of the import job. By default, the name has the form username_imp_nnnn, where nnnn is a number. For example, a job name in the SCOTT schema might be SCOTT_imp_134.If you specify a job name, it must be unique within the schema. The maximum length of the job name is 30 characters.A log file for the import job, named jobname.log, is created in the same directory as the dump file set.</Parameter>
            <Parameter Name="SCHEMA_REMAP">Optional parameter for importing into a different schema. By default, models are exported and imported within the same schema.If the dump file set belongs to a different schema, you must specify a schema mapping in the form export_user:import_user. For example, you would specify 'SCOTT:MARY' to import a model exported by SCOTT into the MARY schema.Note: In some cases, you may need to have the IMP_FULL_DATABASE privilege or the SYS role to import a model from a different schema.</Parameter>
            <Parameter Name="TABLESPACE_REMAP">Optional parameter for importing into a different tablespace. By default, models are exported and imported within the same tablespace.If the dump file set belongs to a different tablespace, you must specify a tablespace mapping in the form export_tablespace:import_tablespace. For example, you would specify 'TBLSPC01:TBLSPC02' to import a model that was exported from tablespace TBLSPC01 into tablespace TBLSPC02.Note: In some cases, you may need to have the IMP_FULL_DATABASE privilege or the SYS role to import a model from a different tablespace.</Parameter>
            <Parameter Name="MODEL_NAME">Name for the new model that will be created in the database as a result of an import from PMML The name must be unique within the user's schema.</Parameter>
            <Parameter Name="PMMLDOC">The PMML document representing the model to be imported. The PMML document has an XMLTYPE object type. See Chapter 285, "XMLTYPE" for details.</Parameter>
            <Parameter Name="STRICT_CHECK">Whether or not an error occurs when the PMML document contains sections that are not part of core PMML (for example, Output or Targets). Oracle Data Mining supports only core PMML; any non-core features may affect the scoring representation.If the PMML does not strictly conform to core PMML and strict_check is set to TRUE, then IMPORT_MODEL returns an error. If strict_check is FALSE (the default), then the error is suppressed. The model may be imported and scored.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RANK_APPLY" ElementId="#i1041086">
          <Description>Ranks the predictions from the APPLY results for a classification model</Description>
          <Parameters>
            <Parameter Name="APPLY_RESULT_TABLE_NAME">Name of the table or view containing the results of an APPLY operation on the test data set (see Usage Notes)</Parameter>
            <Parameter Name="CASE_ID_COLUMN_NAME">Name of the case identifier column. This must be the same as the one used for generating APPLY results.</Parameter>
            <Parameter Name="SCORE_COLUMN_NAME">Name of the prediction column in the apply results table</Parameter>
            <Parameter Name="SCORE_CRITERION_COLUMN_NAME">Name of the probability column in the apply results table</Parameter>
            <Parameter Name="RANKED_APPLY_RESULT_TAB_NAME">Name of the table containing the ranked apply results</Parameter>
            <Parameter Name="TOP_N">Top N predictions to be considered from the APPLY results for precision recall computation</Parameter>
            <Parameter Name="COST_MATRIX_TABLE_NAME">Name of the cost matrix table</Parameter>
            <Parameter Name="APPLY_RESULT_SCHEMA_NAME">Name of the schema hosting the APPLY results table</Parameter>
            <Parameter Name="COST_MATRIX_SCHEMA_NAME">Name of the schema hosting the cost matrix table</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVE_COST_MATRIX" ElementId="#CACFCAIH">
          <Description>Removes a cost matrix from a model</Description>
        </SubProgram>
        <SubProgram Name="RENAME_MODEL" ElementId="#i1041237">
          <Description>Renames a model</Description>
          <Parameters>
            <Parameter Name="MODEL_NAME">Model to be renamed.</Parameter>
            <Parameter Name="NEW_MODEL_NAME">New name for the model model_name.</Parameter>
            <Parameter Name="VERSIONED_MODEL_NAME">New name for the model new_model_name if it already exists.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_DATA_MINING_TRANSFORM" Url="http://docs.oracle.com/database/121/ARPLS/d_dmtran.htm">
      <Description>DBMS_DATA_MINING_TRANSFORM implements a set of transformations that are commonly used in data mining.</Description>
      <SubPrograms>
        <SubProgram Name="CREATE_BIN_CAT" ElementId="#BABHJHJF">
          <Description>Creates a transformation definition table for categorical binning</Description>
          <Parameters>
            <Parameter Name="BIN_TABLE_NAME">Name of the transformation definition table to be created</Parameter>
            <Parameter Name="BIN_SCHEMA_NAME">Schema of bin_table_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_BIN_NUM" ElementId="#BABCJBCG">
          <Description>Creates a transformation definition table for numerical binning</Description>
          <Parameters>
            <Parameter Name="BIN_TABLE_NAME">Name of the transformation definition table to be created</Parameter>
            <Parameter Name="BIN_SCHEMA_NAME">Schema of bin_table_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_CLIP" ElementId="#BABCFGBC">
          <Description>Creates a transformation definition table for clipping</Description>
          <Parameters>
            <Parameter Name="CLIP_TABLE_NAME">Name of the transformation definition table to be created</Parameter>
            <Parameter Name="CLIP_SCHEMA_NAME">Schema of clip_table_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_COL_REM" ElementId="#BABGCDCC">
          <Description>Creates a transformation definition table for column removal</Description>
          <Parameters>
            <Parameter Name="REM_TABLE_NAME">Name of the transformation definition table to be created</Parameter>
            <Parameter Name="REM_SCHEMA_NAME">Schema of rem_table_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_MISS_CAT" ElementId="#BABHJFDC">
          <Description>Creates a transformation definition table for categorical missing value treatment</Description>
          <Parameters>
            <Parameter Name="MISS_TABLE_NAME">Name of the transformation definition table to be created</Parameter>
            <Parameter Name="MISS_SCHEMA_NAME">Schema of miss_table_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_MISS_NUM" ElementId="#BABIEAGA">
          <Description>Creates a transformation definition table for numerical missing values treatment</Description>
          <Parameters>
            <Parameter Name="MISS_TABLE_NAME">Name of the transformation definition table to be created</Parameter>
            <Parameter Name="MISS_SCHEMA_NAME">Schema of miss_table_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_NORM_LIN" ElementId="#BABGBDGB">
          <Description>Creates a transformation definition table for linear normalization</Description>
          <Parameters>
            <Parameter Name="NORM_TABLE_NAME">Name of the transformation definition table to be created</Parameter>
            <Parameter Name="NORM_SCHEMA_NAME">Schema of norm_table_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DESCRIBE_STACK" ElementId="#BABIIFEF">
          <Description>Describes the transformation list</Description>
          <Parameters>
            <Parameter Name="XFORM_LIST">A list of transformations. See Table 46-1 for a description of the TRANSFORM_LIST object type.</Parameter>
            <Parameter Name="DATA_TABLE_NAME">Name of the table containing the data to be transformed</Parameter>
            <Parameter Name="DESCRIBE_LIST">Descriptions of the columns in the data table after the transformations specified in xform_list have been applied. See Table 46-1 for a description of the DESCRIBE_LIST object type.</Parameter>
            <Parameter Name="DATA_SCHEMA_NAME">Schema of data_table_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_EXPRESSION" ElementId="#BABGDGIA">
          <Description>Returns a VARCHAR2 chunk from a transformation expression</Description>
          <Parameters>
            <Parameter Name="EXPRESSION">An expression record (EXPRESSION_REC) that specifies a transformation expression or a reverse transformation expression for an attribute. Each expression record includes a VARCHAR2 array and index fields for specifying upper and lower boundaries within the array.There are two EXPRESSION_REC fields within a transformation record (TRANSFORM_REC): one for the transformation expression; the other for the reverse transformation expression.See Table 46-1 for a description of the EXPRESSION_REC type.</Parameter>
            <Parameter Name="CHUNK">A VARCHAR2 chunk (row) to be appended to expression.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="INSERT_AUTOBIN_NUM_EQWIDTH" ElementId="#BABJDGIA">
          <Description>Inserts numeric automatic equi-width binning definitions in a transformation definition table</Description>
          <Parameters>
            <Parameter Name="BIN_TABLE_NAME">Name of the transformation definition table for numerical binning. You can use the CREATE_BIN_NUM Procedure to create the definition table. The following columns are required:CREATE_BIN_NUM creates an additional column, ATT, which may be used for specifying nested attributes. This column is not used by INSERT_AUTOBIN_NUM_EQWIDTH.</Parameter>
            <Parameter Name="DATA_TABLE_NAME">Name of the table containing the data to be transformed</Parameter>
            <Parameter Name="BIN_NUM">Minimum number of bins. If bin_num is 0 or NULL, it is ignored.The default value of bin_num is 3.</Parameter>
            <Parameter Name="MAX_BIN_NUM">Maximum number of bins. If max_bin_num is 0 or NULL, it is ignored.The default value of max_bin_num is 100.</Parameter>
            <Parameter Name="EXCLUDE_LIST">List of numerical columns to be excluded from the binning process. If you do not specify exclude_list, all numerical columns in the data source are binned.The format of exclude_list is:</Parameter>
            <Parameter Name="ROUND_NUM">Specifies how to round the number in the VAL column of the transformation definition table.When round_num is positive, it specifies the most significant digits to retain. When round_num is negative, it specifies the least significant digits to remove. In both cases, the result is rounded to the specified number of digits. See the Usage Notes for an example.The default value of round_num is 6.</Parameter>
            <Parameter Name="SAMPLE_SIZE">Size of the data sample. If sample_size is less than the total number of non-NULL values in the column, then sample_size is used instead of the SQL COUNT function in computing the number of bins. If sample_size is 0 or NULL, it is ignored. See the Usage Notes.The default value of sample_size is 50,000.</Parameter>
            <Parameter Name="BIN_SCHEMA_NAME">Schema of bin_table_name. If no schema is specified, the current schema is used.</Parameter>
            <Parameter Name="DATA_SCHEMA_NAME">Schema of data_table_name. If no schema is specified, the current schema is used.</Parameter>
            <Parameter Name="REM_TABLE_NAME">Name of a transformation definition table for column removal. The table must have the columns described in "CREATE_COL_REM Procedure".INSERT_AUTOBIN_NUM_EQWIDTH ignores columns with all nulls or only one unique value. If you specify a value for rem_table_name, these columns are removed from the mining data. If you do not specify a value for rem_table_name, these unbinned columns remain in the data.</Parameter>
            <Parameter Name="REM_SCHEMA_NAME">Schema of rem_table_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="INSERT_BIN_CAT_FREQ" ElementId="#BABCIBEH">
          <Description>Inserts categorical frequency-based binning definitions in a transformation definition table</Description>
          <Parameters>
            <Parameter Name="BIN_TABLE_NAME">Name of the transformation definition table for categorical binning. You can use the CREATE_BIN_CAT Procedure to create the definition table.The following columns are required:CREATE_BIN_CAT creates an additional column, ATT, which may be used for specifying nested attributes. This column is not used by INSERT_BIN_CAT_FREQ.</Parameter>
            <Parameter Name="DATA_TABLE_NAME">Name of the table containing the data to be transformed</Parameter>
            <Parameter Name="BIN_NUM">The number of bins to fill using frequency-based binning The total number of bins will be bin_num+1. The additional bin is the default bin. Classes that are not assigned to a frequency-based bin will be assigned to the default bin.The default binning order is from highest to lowest: the most frequently occurring class is assigned to the first bin, the second most frequently occurring class is assigned to the second bin, and so on.You can reverse the binning order by specifying a negative number for bin_num. The negative sign causes the binning order to be from lowest to highest.If the total number of distinct values (classes) in the column is less than bin_num, then a separate bin will be created for each value and the default bin will be empty.If you specify NULL or 0 for bin_num, no binning is performed.The default value of bin_num is 9.</Parameter>
            <Parameter Name="EXCLUDE_LIST">List of categorical columns to be excluded from the binning process. If you do not specify exclude_list, all categorical columns in the data source are binned.The format of exclude_list is:</Parameter>
            <Parameter Name="DEFAULT_NUM">The number of class occurrences (rows of the same class) required for assignment to the default binBy default, default_num is the minimum number of occurrences required for assignment to the default bin. For example, if default_num is 3 and a given class occurs only once, it will not be assigned to the default bin. You can change the occurrence requirement from minimum to maximum by specifying a negative number for default_num. For example, if default_num is -3 and a given class occurs only once, it will be assigned to the default bin, but a class that occurs four or more times will not be included.If you specify NULL or 0 for default_bin, there are no requirements for assignment to the default bin.The default value of default_num is 2.</Parameter>
            <Parameter Name="BIN_SUPPORT">The number of class occurrences (rows of the same class) required for assignment to a frequency-based bin. bin_support is expressed as a fraction of the total number of rows.By default, bin_support is the minimum percentage required for assignment to a frequency-based bin. For example, if there are twenty rows of data and you specify.2 for bin_support, then there must be four or more occurrences of a class (.2*20) in order for it to be assigned to a frequency-based bin. You can change bin_support from a minimum percentage to a maximum percentage by specifying a negative number for bin_support. For example, if there are twenty rows of data and you specify -.2 for bin_support, then there must be four or less occurrences of a class in order for it to be assigned to a frequency-based bin.Classes that occur less than a positive bin_support or more than a negative bin_support will be assigned to the default bin.If you specify NULL or 0 for bin_support, then there is no support requirement for frequency-based binning.The default value of bin_support is NULL.</Parameter>
            <Parameter Name="BIN_SCHEMA_NAME">Schema of bin_table_name. If no schema is specified, the current schema is used.</Parameter>
            <Parameter Name="DATA_SCHEMA_NAME">Schema of data_table_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="INSERT_BIN_NUM_EQWIDTH" ElementId="#BABEFAIC">
          <Description>Inserts numeric equi-width binning definitions in a transformation definition table</Description>
          <Parameters>
            <Parameter Name="BIN_TABLE_NAME">Name of the transformation definition table for numerical binning. You can use the CREATE_BIN_NUM Procedure to create the definition table. The following columns are required:CREATE_BIN_NUM creates an additional column, ATT, which may be used for specifying nested attributes. This column is not used by INSERT_BIN_NUM_EQWIDTH.</Parameter>
            <Parameter Name="DATA_TABLE_NAME">Name of the table containing the data to be transformed</Parameter>
            <Parameter Name="BIN_NUM">Number of bins. No binning occurs if bin_num is 0 or NULL.The default number of bins is 10.</Parameter>
            <Parameter Name="EXCLUDE_LIST">List of numerical columns to be excluded from the binning process. If you do not specify exclude_list, all numerical columns in the data source are binned.The format of exclude_list is:</Parameter>
            <Parameter Name="ROUND_NUM">Specifies how to round the number in the VAL column of the transformation definition table.When round_num is positive, it specifies the most significant digits to retain. When round_num is negative, it specifies the least significant digits to remove. In both cases, the result is rounded to the specified number of digits. See the Usage Notes for an example.The default value of round_num is 6.</Parameter>
            <Parameter Name="BIN_SCHEMA_NAME">Schema of bin_table_name. If no schema is specified, the current schema is used.</Parameter>
            <Parameter Name="DATA_SCHEMA_NAME">Schema of data_table_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="INSERT_BIN_NUM_QTILE" ElementId="#BABEDFDH">
          <Description>Inserts numeric quantile binning expressions in a transformation definition table</Description>
          <Parameters>
            <Parameter Name="BIN_TABLE_NAME">Name of the transformation definition table for numerical binning. You can use the CREATE_BIN_NUM Procedure to create the definition table. The following columns are required:CREATE_BIN_NUM creates an additional column, ATT, which may be used for specifying nested attributes. This column is not used by INSERT_BIN_NUM_QTILE.</Parameter>
            <Parameter Name="DATA_TABLE_NAME">Name of the table containing the data to be transformed</Parameter>
            <Parameter Name="BIN_NUM">Number of bins. No binning occurs if bin_num is 0 or NULL.The default number of bins is 10.</Parameter>
            <Parameter Name="EXCLUDE_LIST">List of numerical columns to be excluded from the binning process. If you do not specify exclude_list, all numerical columns in the data source are binned.The format of exclude_list is:</Parameter>
            <Parameter Name="BIN_SCHEMA_NAME">Schema of bin_table_name. If no schema is specified, the current schema is used.</Parameter>
            <Parameter Name="DATA_SCHEMA_NAME">Schema of data_table_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="INSERT_BIN_SUPER" ElementId="#BABEHBCE">
          <Description>Inserts supervised binning definitions in numerical and categorical transformation definition tables</Description>
          <Parameters>
            <Parameter Name="NUM_TABLE_NAME">Name of the transformation definition table for numerical binning. You can use the CREATE_BIN_NUM Procedure to create the definition table. The following columns are required:CREATE_BIN_NUM creates an additional column, ATT, which may be used for specifying nested attributes. This column is not used by INSERT_BIN_SUPER.</Parameter>
            <Parameter Name="CAT_TABLE_NAME">Name of the transformation definition table for categorical binning. You can use the CREATE_BIN_CAT Procedure to create the definition table. The following columns are required:CREATE_BIN_CAT creates an additional column, ATT, which is used for specifying nested attributes. This column is not used by INSERT_BIN_SUPER.</Parameter>
            <Parameter Name="DATA_TABLE_NAME">Name of the table containing the data to be transformed</Parameter>
            <Parameter Name="TARGET_COLUMN_NAME">Name of a column to be used as the target for the decision tree models</Parameter>
            <Parameter Name="MAX_BIN_NUM">The maximum number of bins. The default is 1000.</Parameter>
            <Parameter Name="EXCLUDE_LIST">List of columns to be excluded from the binning process. If you do not specify exclude_list, all numerical and categorical columns in the data source are binned.The format of exclude_list is:</Parameter>
            <Parameter Name="NUM_SCHEMA_NAME">Schema of num_table_name. If no schema is specified, the current schema is used.</Parameter>
            <Parameter Name="CAT_SCHEMA_NAME">Schema of cat_table_name. If no schema is specified, the current schema is used.</Parameter>
            <Parameter Name="DATA_SCHEMA_NAME">Schema of data_table_name. If no schema is specified, the current schema is used.</Parameter>
            <Parameter Name="REM_TABLE_NAME">Name of a column removal definition table. The table must have the columns described in "CREATE_COL_REM Procedure". You can use CREATE_COL_REM to create the table. See Usage Notes.</Parameter>
            <Parameter Name="REM_SCHEMA_NAME">Schema of rem_table_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="INSERT_CLIP_TRIM_TAIL" ElementId="#BABIIJFA">
          <Description>Inserts numerical trimming definitions in a transformation definition table</Description>
          <Parameters>
            <Parameter Name="CLIP_TABLE_NAME">Name of the transformation definition table for numerical clipping. You can use the CREATE_CLIP Procedure to create the definition table. The following columns are required:CREATE_CLIP creates an additional column, ATT, which may be used for specifying nested attributes. This column is not used by INSERT_CLIP_TRIM_TAIL.</Parameter>
            <Parameter Name="DATA_TABLE_NAME">Name of the table containing the data to be transformed</Parameter>
            <Parameter Name="TAIL_FRAC">The percentage of non-null values to be designated as outliers at each end of the data. For example, if tail_frac is .01, then 1% of the data at the low end and 1% of the data at the high end will be treated as outliers.If tail_frac is greater than or equal to .5, no clipping occurs.The default value of tail_frac is 0.025.</Parameter>
            <Parameter Name="EXCLUDE_LIST">List of numerical columns to be excluded from the clipping process. If you do not specify exclude_list, all numerical columns in the data are clipped.The format of exclude_list is:</Parameter>
            <Parameter Name="CLIP_SCHEMA_NAME">Schema of clip_table_name. If no schema is specified, the current schema is used.</Parameter>
            <Parameter Name="DATA_SCHEMA_NAME">Schema of data_table_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="INSERT_CLIP_WINSOR_TAIL" ElementId="#BABIIFED">
          <Description>Inserts numerical winsorizing definitions in a transformation definition table</Description>
          <Parameters>
            <Parameter Name="CLIP_TABLE_NAME">Name of the transformation definition table for numerical clipping. You can use the CREATE_CLIP Procedure to create the definition table. The following columns are required:CREATE_CLIP creates an additional column, ATT, which may be used for specifying nested attributes. This column is not used by INSERT_CLIP_WINSOR_TAIL.</Parameter>
            <Parameter Name="DATA_TABLE_NAME">Name of the table containing the data to be transformed</Parameter>
            <Parameter Name="TAIL_FRAC">The percentage of non-null values to be designated as outliers at each end of the data. For example, if tail_frac is .01, then 1% of the data at the low end and 1% of the data at the high end will be treated as outliers.If tail_frac is greater than or equal to .5, no clipping occurs.The default value of tail_frac is 0.025.</Parameter>
            <Parameter Name="EXCLUDE_LIST">List of numerical columns to be excluded from the clipping process. If you do not specify exclude_list, all numerical columns in the data are clipped.The format of exclude_list is:</Parameter>
            <Parameter Name="CLIP_SCHEMA_NAME">Schema of clip_table_name. If no schema is specified, the current schema is used.</Parameter>
            <Parameter Name="DATA_SCHEMA_NAME">Schema of data_table_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="INSERT_MISS_CAT_MODE" ElementId="#BABJCGCA">
          <Description>Inserts categorical missing value treatment definitions in a transformation definition table</Description>
          <Parameters>
            <Parameter Name="MISS_TABLE_NAME">Name of the transformation definition table for categorical missing value treatment. You can use the CREATE_MISS_CAT Procedure to create the definition table. The following columns are required:CREATE_MISS_CAT creates an additional column, ATT, which may be used for specifying nested attributes. This column is not used by INSERT_MISS_CAT_MODE.</Parameter>
            <Parameter Name="DATA_TABLE_NAME">Name of the table containing the data to be transformed</Parameter>
            <Parameter Name="EXCLUDE_LIST">List of categorical columns to be excluded from missing value treatment. If you do not specify exclude_list, all categorical columns are transformed.The format of exclude_list is:</Parameter>
            <Parameter Name="MISS_SCHEMA_NAME">Schema of miss_table_name. If no schema is specified, the current schema is used.</Parameter>
            <Parameter Name="DATA_SCHEMA_NAME">Schema of data_table_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="INSERT_MISS_NUM_MEAN" ElementId="#BABHAHEJ">
          <Description>Inserts numerical missing value treatment definitions in a transformation definition table</Description>
          <Parameters>
            <Parameter Name="MISS_TABLE_NAME">Name of the transformation definition table for numerical missing value treatment. You can use the CREATE_MISS_NUM Procedure to create the definition table.The following columns are required by INSERT_MISS_NUM_MEAN:CREATE_MISS_NUM creates an additional column, ATT, which may be used for specifying nested attributes. This column is not used by INSERT_MISS_NUM_MEAN.</Parameter>
            <Parameter Name="DATA_TABLE_NAME">Name of the table containing the data to be transformed</Parameter>
            <Parameter Name="EXCLUDE_LIST">List of numerical columns to be excluded from missing value treatment. If you do not specify exclude_list, all numerical columns are transformed.The format of exclude_list is:</Parameter>
            <Parameter Name="ROUND_NUM">The number of significant digits to use for the mean.The default number is 6.</Parameter>
            <Parameter Name="MISS_SCHEMA_NAME">Schema of miss_table_name. If no schema is specified, the current schema is used.</Parameter>
            <Parameter Name="DATA_SCHEMA_NAME">Schema of data_table_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="INSERT_NORM_LIN_MINMAX" ElementId="#BABDFACD">
          <Description>Inserts linear min-max normalization definitions in a transformation definition table</Description>
          <Parameters>
            <Parameter Name="NORM_TABLE_NAME">Name of the transformation definition table for linear normalization. You can use the CREATE_NORM_LIN Procedure to create the definition table. The following columns are required:CREATE_NORM_LIN creates an additional column, ATT, which may be used for specifying nested attributes. This column is not used by INSERT_NORM_LIN_MINMAX.</Parameter>
            <Parameter Name="DATA_TABLE_NAME">Name of the table containing the data to be transformed</Parameter>
            <Parameter Name="EXCLUDE_LIST">List of numerical columns to be excluded from normalization. If you do not specify exclude_list, all numerical columns are transformed.The format of exclude_list is:</Parameter>
            <Parameter Name="ROUND_NUM">The number of significant digits to use for the minimum and maximum. The default number is 6.</Parameter>
            <Parameter Name="NORM_SCHEMA_NAME">Schema of norm_table_name. If no schema is specified, the current schema is used.</Parameter>
            <Parameter Name="DATA_SCHEMA_NAME">Schema of data_table_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="INSERT_NORM_LIN_SCALE" ElementId="#BABHAFJC">
          <Description>Inserts linear scale normalization definitions in a transformation definition table</Description>
          <Parameters>
            <Parameter Name="NORM_TABLE_NAME">Name of the transformation definition table for linear normalization. You can use the CREATE_NORM_LIN Procedure to create the definition table. The following columns are required:CREATE_NORM_LIN creates an additional column, ATT, which may be used for specifying nested attributes. This column is not used by INSERT_NORM_LIN_SCALE.</Parameter>
            <Parameter Name="DATA_TABLE_NAME">Name of the table containing the data to be transformed</Parameter>
            <Parameter Name="EXCLUDE_LIST">List of numerical columns to be excluded from normalization. If you do not specify exclude_list, all numerical columns are transformed.The format of exclude_list is:</Parameter>
            <Parameter Name="ROUND_NUM">The number of significant digits to use for scale. The default number is 6.</Parameter>
            <Parameter Name="NORM_SCHEMA_NAME">Schema of norm_table_name. If no schema is specified, the current schema is used.</Parameter>
            <Parameter Name="DATA_SCHEMA_NAME">Schema of data_table_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="INSERT_NORM_LIN_ZSCORE" ElementId="#BABDCGGH">
          <Description>Inserts linear zscore normalization definitions in a transformation definition table</Description>
          <Parameters>
            <Parameter Name="NORM_TABLE_NAME">Name of the transformation definition table for linear normalization. You can use the CREATE_NORM_LIN Procedure to create the definition table. The following columns are required:CREATE_NORM_LIN creates an additional column, ATT, which may be used for specifying nested attributes. This column is not used by INSERT_NORM_LIN_ZSCORE.</Parameter>
            <Parameter Name="DATA_TABLE_NAME">Name of the table containing the data to be transformed</Parameter>
            <Parameter Name="EXCLUDE_LIST">List of numerical columns to be excluded from normalization. If you do not specify exclude_list, all numerical columns are transformed.The format of exclude_list is:</Parameter>
            <Parameter Name="ROUND_NUM">The number of significant digits to use for scale. The default number is 6.</Parameter>
            <Parameter Name="NORM_SCHEMA_NAME">Schema of norm_table_name. If no schema is specified, the current schema is used.</Parameter>
            <Parameter Name="DATA_SCHEMA_NAME">Schema of data_table_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_EXPRESSION" ElementId="#CACJDFJC">
          <Description>Adds a VARCHAR2 chunk to an expression</Description>
          <Parameters>
            <Parameter Name="EXPRESSION">An expression record (EXPRESSION_REC) that specifies a transformation expression or a reverse transformation expression for an attribute. Each expression record includes a VARCHAR2 array and index fields for specifying upper and lower boundaries within the array.There are two EXPRESSION_REC fields within a transformation record (TRANSFORM_REC): one for the transformation expression; the other for the reverse transformation expression.See Table 46-1 for a description of the EXPRESSION_REC type.</Parameter>
            <Parameter Name="CHUNK">A VARCHAR2 chunk (row) to be appended to expression.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_TRANSFORM" ElementId="#BABJIIIE">
          <Description>Adds a transformation record to a transformation list</Description>
          <Parameters>
            <Parameter Name="XFORM_LIST">A transformation list. See Table 46-1for a description of the TRANSFORM_LIST object type.</Parameter>
            <Parameter Name="ATTRIBUTE_NAME">Name of the attribute to be transformed</Parameter>
            <Parameter Name="ATTRIBUTE_SUBNAME">Name of the nested attribute if attribute_name is a nested column, otherwise NULL.</Parameter>
            <Parameter Name="EXPRESSION">A SQL expression that specifies the transformation of the attribute.</Parameter>
            <Parameter Name="REVERSE_EXPRESSION">A SQL expression that reverses the transformation for readability in model details and in the target of a supervised model (if the attribute is a target)</Parameter>
            <Parameter Name="ATTRIBUTE_SPEC">One or more keywords that identify special treatment for the attribute during model build. Values are:NOPREP — When ADP is on, prevents automatic transformation of the attribute. If ADP is not on, this value has no effect.TEXT — Causes the attribute to be treated as unstructured text dataFORCE_IN — Forces the inclusion of the attribute in the model build. Applies only to GLM models with feature selection enabled (ftr_selection_enable = yes). Feature selection is disabled by default.If the model is not using GLM with feature selection, this value has no effect.See "Specifying Transformation Instructions for an Attribute" in Oracle Data Mining User's Guide for more information about attribute_spec.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="STACK_BIN_CAT" ElementId="#CACJCHHI">
          <Description>Adds a categorical binning expression to a transformation list</Description>
          <Parameters>
            <Parameter Name="BIN_TABLE_NAME">Name of the transformation definition table for categorical binning. You can use the CREATE_BIN_CAT Procedure to create the definition table. The table must be populated with transformation definitions before you call STACK_BIN_CAT. To populate the table, you can use one of the INSERT procedures for categorical binning or you can write your own SQL.See Table 46-4, "Columns in a Transformation Definition Table for Categorical Binning"</Parameter>
            <Parameter Name="XFORM_LIST">A transformation list. See Table 46-1 for a description of the TRANSFORM_LIST object type.</Parameter>
            <Parameter Name="LITERAL_FLAG">Indicates whether the values in the bin column in the transformation definition table are valid SQL literals. When literal_flag is FALSE (the default), the bin identifiers will be transformed to SQL literals by surrounding them with single quotes.Set literal_flag to TRUE if the bin identifiers are numbers that should have a numeric datatype, as is the case for an O-Cluster model.See "INSERT_BIN_NUM_EQWIDTH Procedure" for an example.</Parameter>
            <Parameter Name="BIN_SCHEMA_NAME">Schema of bin_table_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="STACK_BIN_NUM" ElementId="#CACEGEHI">
          <Description>Adds a numerical binning expression to a transformation list</Description>
          <Parameters>
            <Parameter Name="BIN_TABLE_NAME">Name of the transformation definition table for numerical binning. You can use the CREATE_BIN_NUM Procedure to create the definition table. The table must be populated with transformation definitions before you call STACK_BIN_NUM. To populate the table, you can use one of the INSERT procedures for numerical binning or you can write your own SQL.See Table 46-6, "Columns in a Transformation Definition Table for Numerical Binning".</Parameter>
            <Parameter Name="XFORM_LIST">A transformation list. See Table 46-1 for a description of the TRANSFORM_LIST object type.</Parameter>
            <Parameter Name="LITERAL_FLAG">Indicates whether the values in the bin column in the transformation definition table are valid SQL literals. When literal_flag is FALSE (the default), the bin identifiers will be transformed to SQL literals by surrounding them with single quotes.Set literal_flag to TRUE if the bin identifiers are numbers that should have a numeric datatype, as is the case for an O-Cluster model.See "INSERT_BIN_NUM_EQWIDTH Procedure" for an example.</Parameter>
            <Parameter Name="BIN_SCHEMA_NAME">Schema of bin_table_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="STACK_CLIP" ElementId="#CACHGHIG">
          <Description>Adds a clipping expression to a transformation list</Description>
          <Parameters>
            <Parameter Name="CLIP_TABLE_NAME">Name of the transformation definition table for clipping.You can use the CREATE_CLIP Procedure to create the definition table. The table must be populated with transformation definitions before you call STACK_CLIP. To populate the table, you can use one of the INSERT procedures for clipping or you can write your own SQL.See Table 46-8, "Columns in a Transformation Definition Table for Clipping or Winsorizing"</Parameter>
            <Parameter Name="XFORM_LIST">A transformation list. See Table 46-1 for a description of the TRANSFORM_LIST object type.</Parameter>
            <Parameter Name="CLIP_SCHEMA_NAME">Schema of clip_table_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="STACK_COL_REM" ElementId="#CACHCDCH">
          <Description>Adds a column removal expression to a transformation list</Description>
          <Parameters>
            <Parameter Name="REM_TABLE_NAME">Name of the transformation definition table for column removal. You can use the CREATE_COL_REM Procedure to create the definition table. See Table 46-10, "Columns in a Transformation Definition Table for Column Removal".The table must be populated with column names before you call STACK_COL_REM. The INSERT_BIN_SUPER Procedure and the INSERT_AUTOBIN_NUM_EQWIDTH Procedure can optionally be used to populate the table. You can also use SQL INSERT statements.</Parameter>
            <Parameter Name="XFORM_LIST">A transformation list. See Table 46-1 for a description of the TRANSFORM_LIST object type.</Parameter>
            <Parameter Name="REM_SCHEMA_NAME">Schema of rem_table_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="STACK_MISS_CAT" ElementId="#BABJGBGH">
          <Description>Adds a categorical missing value treatment expression to a transformation list</Description>
          <Parameters>
            <Parameter Name="MISS_TABLE_NAME">Name of the transformation definition table for categorical missing value treatment. You can use the CREATE_MISS_CAT Procedure to create the definition table. The table must be populated with transformation definitions before you call STACK_MISS_CAT. To populate the table, you can use the INSERT_MISS_CAT_MODE Procedure or you can write your own SQL.See Table 46-12, "Columns in a Transformation Definition Table for Categorical Missing Value Treatment".</Parameter>
            <Parameter Name="XFORM_LIST">A transformation list. See Table 46-1 for a description of the TRANSFORM_LIST object type.</Parameter>
            <Parameter Name="MISS_SCHEMA_NAME">Schema of miss_table_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="STACK_MISS_NUM" ElementId="#BABFIBFF">
          <Description>Adds a numerical missing value treatment expression to a transformation list</Description>
          <Parameters>
            <Parameter Name="MISS_TABLE_NAME">Name of the transformation definition table for numerical missing value treatment. You can use the CREATE_MISS_NUM Procedure to create the definition table. The table must be populated with transformation definitions before you call STACK_MISS_NUM. To populate the table, you can use the INSERT_MISS_NUM_MEAN Procedure or you can write your own SQL.See Table 46-14, "Columns in a Transformation Definition Table for Numerical Missing Value Treatment".</Parameter>
            <Parameter Name="XFORM_LIST">A transformation list. See Table 46-1 for a description of the TRANSFORM_LIST object type.</Parameter>
            <Parameter Name="MISS_SCHEMA_NAME">Schema of miss_table_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="STACK_NORM_LIN" ElementId="#BABFAFCH">
          <Description>Adds a linear normalization expression to a transformation list</Description>
          <Parameters>
            <Parameter Name="NORM_TABLE_NAME">Name of the transformation definition table for linear normalization. You can use the CREATE_NORM_LIN Procedure to create the definition table. The table must be populated with transformation definitions before you call STACK_NORM_LIN.To populate the table, you can use one of the INSERT procedures for normalization or you can write your own SQL.See Table 46-16, "Columns in a Transformation Definition Table for Linear Normalization".</Parameter>
            <Parameter Name="XFORM_LIST">A transformation list. See Table 46-1 for a description of the TRANSFORM_LIST object type.</Parameter>
            <Parameter Name="NORM_SCHEMA_NAME">Schema of norm_table_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="XFORM_BIN_CAT" ElementId="#BABHHBCI">
          <Description>Creates a view of the data table with categorical binning transformations</Description>
          <Parameters>
            <Parameter Name="BIN_TABLE_NAME">Name of the transformation definition table for categorical binning. You can use the CREATE_BIN_CAT Procedure to create the definition table. The table must be populated with transformation definitions before you call XFORM_BIN_CAT. To populate the table, you can use one of the INSERT procedures for categorical binning or you can write your own SQL.See Table 46-4, "Columns in a Transformation Definition Table for Categorical Binning".</Parameter>
            <Parameter Name="DATA_TABLE_NAME">Name of the table containing the data to be transformed.</Parameter>
            <Parameter Name="XFORM_VIEW_NAME">Name of the view to be created. The view presents columns in data_table_name with the transformations specified in bin_table_name.</Parameter>
            <Parameter Name="LITERAL_FLAG">Indicates whether the values in the bin column in the transformation definition table are valid SQL literals. When literal_flag is FALSE (the default), the bin identifiers will be transformed to SQL literals by surrounding them with single quotes.Set literal_flag to TRUE if the bin identifiers are numbers that should have a numeric datatype, as is the case for an O-Cluster model.See "INSERT_BIN_NUM_EQWIDTH Procedure" for an example.</Parameter>
            <Parameter Name="BIN_SCHEMA_NAME">Schema of bin_table_name. If no schema is specified, the current schema is used.</Parameter>
            <Parameter Name="DATA_SCHEMA_NAME">Schema of data_table_name. If no schema is specified, the current schema is used.</Parameter>
            <Parameter Name="XFORM_SCHEMA_NAME">Schema of xform_view_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="XFORM_BIN_NUM" ElementId="#BABJDHDF">
          <Description>Creates a view of the data table with numerical binning transformations</Description>
          <Parameters>
            <Parameter Name="BIN_TABLE_NAME">Name of the transformation definition table for numerical binning. You can use the CREATE_BIN_NUM Procedure to create the definition table. The table must be populated with transformation definitions before you call XFORM_BIN_NUM. To populate the table, you can use one of the INSERT procedures for numerical binning or you can write your own SQL.See "Columns in a Transformation Definition Table for Numerical Binning".</Parameter>
            <Parameter Name="DATA_TABLE_NAME">Name of the table containing the data to be transformed</Parameter>
            <Parameter Name="XFORM_VIEW_NAME">Name of the view to be created. The view presents columns in data_table_name with the transformations specified in bin_table_name.</Parameter>
            <Parameter Name="LITERAL_FLAG">Indicates whether the values in the bin column in the transformation definition table are valid SQL literals. When literal_flag is FALSE (the default), the bin identifiers will be transformed to SQL literals by surrounding them with single quotes.Set literal_flag to TRUE if the bin identifiers are numbers that should have a numeric datatype, as is the case for an O-Cluster model.See "INSERT_BIN_NUM_EQWIDTH Procedure" for an example.</Parameter>
            <Parameter Name="BIN_SCHEMA_NAME">Schema of bin_table_name. If no schema is specified, the current schema is used.</Parameter>
            <Parameter Name="DATA_SCHEMA_NAME">Schema of data_table_name. If no schema is specified, the current schema is used.</Parameter>
            <Parameter Name="XFORM_SCHEMA_NAME">Schema of xform_view_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="XFORM_CLIP" ElementId="#BABDFGDG">
          <Description>Creates a view of the data table with clipping transformations</Description>
          <Parameters>
            <Parameter Name="CLIP_TABLE_NAME">Name of the transformation definition table for clipping. You can use the CREATE_CLIP Procedure to create the definition table. The table must be populated with transformation definitions before you call XFORM_CLIP. To populate the table, you can use one of the INSERT procedures for clipping you can write your own SQL.See Table 46-8, "Columns in a Transformation Definition Table for Clipping or Winsorizing".</Parameter>
            <Parameter Name="DATA_TABLE_NAME">Name of the table containing the data to be transformed</Parameter>
            <Parameter Name="XFORM_VIEW_NAME">Name of the view to be created. The view presents columns in data_table_name with the transformations specified in clip_table_name.</Parameter>
            <Parameter Name="CLIP_SCHEMA_NAME">Schema of clip_table_name. If no schema is specified, the current schema is used.</Parameter>
            <Parameter Name="DATA_SCHEMA_NAME">Schema of data_table_name. If no schema is specified, the current schema is used.</Parameter>
            <Parameter Name="XFORM_SCHEMA_NAME">Schema of xform_view_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="XFORM_COL_REM" ElementId="#BABHFHGH">
          <Description>Creates a view of the data table with column removal transformations</Description>
          <Parameters>
            <Parameter Name="REM_TABLE_NAME">Name of the transformation definition table for column removal. You can use the CREATE_COL_REM Procedure to create the definition table. See Table 46-10, "Columns in a Transformation Definition Table for Column Removal".The table must be populated with column names before you call XFORM_COL_REM. The INSERT_BIN_SUPER Procedure and the INSERT_AUTOBIN_NUM_EQWIDTH Procedure can optionally be used to populate the table. You can also use SQL INSERT statements.</Parameter>
            <Parameter Name="DATA_TABLE_NAME">Name of the table containing the data to be transformed</Parameter>
            <Parameter Name="XFORM_VIEW_NAME">Name of the view to be created. The view presents the columns in data_table_name that are not specified in rem_table_name.</Parameter>
            <Parameter Name="REM_SCHEMA_NAME">Schema of rem_table_name. If no schema is specified, the current schema is used.</Parameter>
            <Parameter Name="DATA_SCHEMA_NAME">Schema of data_table_name. If no schema is specified, the current schema is used.</Parameter>
            <Parameter Name="XFORM_SCHEMA_NAME">Schema of xform_view_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="XFORM_EXPR_NUM" ElementId="#BABJHGCG">
          <Description>Creates a view of the data table with the specified numeric transformations</Description>
          <Parameters>
            <Parameter Name="EXPR_PATTERN">A numeric transformation expression</Parameter>
            <Parameter Name="DATA_TABLE_NAME">Name of the table containing the data to be transformed</Parameter>
            <Parameter Name="XFORM_VIEW_NAME">Name of the view to be created. The view presents columns in data_table_name with the transformations specified in expr_pattern and col_pattern.</Parameter>
            <Parameter Name="EXCLUDE_LIST">List of numerical columns to exclude. If NULL, no numerical columns are excluded.The format of exclude_list is:</Parameter>
            <Parameter Name="INCLUDE_LIST">List of numeric columns to include. If NULL, all numeric columns are included.The format of include_list is:</Parameter>
            <Parameter Name="COL_PATTERN">The value within expr_pattern that will be replaced with a column name. The value of col_pattern is case-sensitive.The default value of col_pattern is ':col'</Parameter>
            <Parameter Name="DATA_SCHEMA_NAME">Schema of data_table_name. If no schema is specified, the current schema is used.</Parameter>
            <Parameter Name="XFORM_SCHEMA_NAME">Schema of xform_view_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="XFORM_EXPR_STR" ElementId="#BABHGAJH">
          <Description>Creates a view of the data table with the specified categorical transformations</Description>
          <Parameters>
            <Parameter Name="EXPR_PATTERN">A character transformation expression</Parameter>
            <Parameter Name="DATA_TABLE_NAME">Name of the table containing the data to be transformed</Parameter>
            <Parameter Name="XFORM_VIEW_NAME">Name of the view to be created. The view presents columns in data_table_name with the transformations specified in expr_pattern and col_pattern.</Parameter>
            <Parameter Name="EXCLUDE_LIST">List of categorical columns to exclude. If NULL, no categorical columns are excluded.The format of exclude_list is:</Parameter>
            <Parameter Name="INCLUDE_LIST">List of character columns to include. If NULL, all character columns are included.The format of include_list is:</Parameter>
            <Parameter Name="COL_PATTERN">The value within expr_pattern that will be replaced with a column name. The value of col_pattern is case-sensitive.The default value of col_pattern is ':col'</Parameter>
            <Parameter Name="DATA_SCHEMA_NAME">Schema of data_table_name. If no schema is specified, the current schema is used.</Parameter>
            <Parameter Name="XFORM_SCHEMA_NAME">Schema of xform_view_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="XFORM_MISS_CAT" ElementId="#BABBEDBE">
          <Description>Creates a view of the data table with categorical missing value treatment</Description>
          <Parameters>
            <Parameter Name="MISS_TABLE_NAME">Name of the transformation definition table for categorical missing value treatment. You can use the CREATE_MISS_CAT Procedure to create the definition table. The table must be populated with transformation definitions before you call XFORM_MISS_CAT. To populate the table, you can use the INSERT_MISS_CAT_MODE Procedure or you can write your own SQL.See Table 46-12, "Columns in a Transformation Definition Table for Categorical Missing Value Treatment".</Parameter>
            <Parameter Name="DATA_TABLE_NAME">Name of the table containing the data to be transformed</Parameter>
            <Parameter Name="XFORM_VIEW_NAME">Name of the view to be created. The view presents columns in data_table_name with the transformations specified in miss_table_name.</Parameter>
            <Parameter Name="MISS_SCHEMA_NAME">Schema of miss_table_name. If no schema is specified, the current schema is used.</Parameter>
            <Parameter Name="DATA_SCHEMA_NAME">Schema of data_table_name. If no schema is specified, the current schema is used.</Parameter>
            <Parameter Name="XFORM_SCHEMA_NAME">Schema of xform_view_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="XFORM_MISS_NUM" ElementId="#BABCFDAA">
          <Description>Creates a view of the data table with numerical missing value treatment</Description>
          <Parameters>
            <Parameter Name="MISS_TABLE_NAME">Name of the transformation definition table for numerical missing value treatment. You can use the CREATE_MISS_NUM Procedure to create the definition table. The table must be populated with transformation definitions before you call XFORM_MISS_NUM. To populate the table, you can use the INSERT_MISS_NUM_MEAN Procedure or you can write your own SQL.See Table 46-14, "Columns in a Transformation Definition Table for Numerical Missing Value Treatment".</Parameter>
            <Parameter Name="DATA_TABLE_NAME">Name of the table containing the data to be transformed</Parameter>
            <Parameter Name="XFORM_VIEW_NAME">Name of the view to be created. The view presents columns in data_table_name with the transformations specified in miss_table_name.</Parameter>
            <Parameter Name="MISS_SCHEMA_NAME">Schema of miss_table_name. If no schema is specified, the current schema is used.</Parameter>
            <Parameter Name="DATA_SCHEMA_NAME">Schema of data_table_name. If no schema is specified, the current schema is used.</Parameter>
            <Parameter Name="XFORM_SCHEMA_NAME">Schema of xform_view_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="XFORM_NORM_LIN" ElementId="#BABIHHGG">
          <Description>Creates a view of the data table with linear normalization transformations</Description>
          <Parameters>
            <Parameter Name="NORM_TABLE_NAME">Name of the transformation definition table for linear normalization. You can use the CREATE_NORM_LIN Procedure to create the definition table. The table must be populated with transformation definitions before you call XFORM_NORM_LIN. To populate the table, you can use one of the INSERT procedures for normalization or you can write your own SQL.See Table 46-12, "Columns in a Transformation Definition Table for Categorical Missing Value Treatment".</Parameter>
            <Parameter Name="DATA_TABLE_NAME">Name of the table containing the data to be transformed</Parameter>
            <Parameter Name="XFORM_VIEW_NAME">Name of the view to be created. The view presents columns in data_table_name with the transformations specified in miss_table_name.</Parameter>
            <Parameter Name="NORM_SCHEMA_NAME">Schema of miss_table_name. If no schema is specified, the current schema is used.</Parameter>
            <Parameter Name="DATA_SCHEMA_NAME">Schema of data_table_name. If no schema is specified, the current schema is used.</Parameter>
            <Parameter Name="XFORM_SCHEMA_NAME">Schema of xform_view_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="XFORM_STACK" ElementId="#BABIHDCC">
          <Description>Creates a view of the transformation list</Description>
          <Parameters>
            <Parameter Name="XFORM_LIST">The transformation list. See Table 46-1 for a description of the TRANSFORM_LIST object type.</Parameter>
            <Parameter Name="DATA_TABLE_NAME">Name of the table containing the data to be transformed</Parameter>
            <Parameter Name="XFORM_VIEW_NAME">Name of the view to be created. The view applies the transformations in xform_list to data_table_name.</Parameter>
            <Parameter Name="DATA_SCHEMA_NAME">Schema of data_table_name. If no schema is specified, the current schema is used.</Parameter>
            <Parameter Name="XFORM_SCHEMA_NAME">Schema of xform_view_name. If no schema is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_DATAPUMP" Url="http://docs.oracle.com/database/121/ARPLS/d_datpmp.htm">
      <Description>The DBMS_DATAPUMP package is used to move all, or part of, a database between databases, including both data and metadata.</Description>
      <SubPrograms>
        <SubProgram Name="ADD_FILE" ElementId="#i997139">
          <Description>Adds dump files to the dump file set for an Export, Import, or SQL_FILE operation. In addition to dump files, other types of files can also be added by using the FILETYPE parameter provided with this procedure.</Description>
          <Parameters>
            <Parameter Name="HANDLE">The handle of a job. The current session must have previously attached to the handle through a call to either the OPEN or ATTACH function.</Parameter>
            <Parameter Name="FILENAME">The name of the file being added. filename must be a simple filename without any directory path information. For dump files, the filename can include a substitution variable, %U, which indicates that multiple files may be generated with the specified filename as a template. The %U is expanded in the resulting file names into a two-character, fixed-width, incrementing integer starting at 01. For example, the dump filename of export%U would cause export01, export02, export03, and so on, to be created depending on how many files are needed to perform the export. For filenames containing the % character, the % must be represented as %% to avoid ambiguity. Any % in a filename must be followed by either a % or a U.</Parameter>
            <Parameter Name="DIRECTORY">The name of a directory object within the database that is used to locate filename. A directory must be specified. See the Data Pump Export chapter in Oracle Database Utilities for information about the DIRECTORY command-line parameter.</Parameter>
            <Parameter Name="FILESIZE">The size of the dump file that is being added. It may be specified as the number of bytes, number of kilobytes (if followed by K), number of megabytes (if followed by M), number of gigabytes (if followed by G) or number of terabytes (if followed by T). An Export operation will write no more than the specified number of bytes to the file. Once the file is full, it will be closed. If there is insufficient space on the device to write the specified number of bytes, the Export operation will fail, but it can be restarted. If not specified, filesize will default to an unlimited size. For Import and SQL_FILE operations, filesize is ignored. The minimum value for filesize is ten times the default Data Pump block size, which is 4 kilobytes. A filesize can only be specified for dump files.</Parameter>
            <Parameter Name="FILETYPE">The type of the file to be added. The legal values are as follows and must be preceded by DBMS_DATAPUMP.:KU$_FILE_TYPE_DUMP_FILE (dump file for a job)KU$_FILE_TYPE_LOG_FILE (log file for a job)KU$_FILE_TYPE_SQL_FILE (output for SQL_FILE job)</Parameter>
            <Parameter Name="REUSEFILE">If 0, a preexisting file will cause an error. If 1, a preexisting file will be overwritten. If NULL, the default action for the file type will be applied (that is, dump files will not be overwritten). This parameter should only be non-NULL for dump files. The reusefile parameter is restricted to export jobs.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ATTACH" ElementId="#i997216">
          <Description>Used to gain access to a Data Pump job that is in the Defining, Executing, Idling, or Stopped state</Description>
          <Parameters>
            <Parameter Name="JOB_NAME">The name of the job. The default is the job name owned by the user who is specified in the job_owner parameter (assuming that user has only one job in the Defining, Executing, or Idling states).</Parameter>
            <Parameter Name="JOB_OWNER">The user who originally started the job. If NULL, the value defaults to the owner of the current session. To specify a job owner other than yourself, you must have either the DATAPUMP_EXP_FULL_DATABASE role (for export operations) or the DATAPUMP_IMP_FULL_DATABASE role (for import and SQL_FILE operations). Being a privileged user allows you to monitor another user's job, but you cannot restart another user's job.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DATA_FILTER" ElementId="#i997260">
          <Description>Specifies restrictions on the rows that are to be retrieved</Description>
          <Parameters>
            <Parameter Name="HANDLE">The handle that is returned from the OPEN function</Parameter>
            <Parameter Name="NAME">The name of the filter</Parameter>
            <Parameter Name="VALUE">The value of the filter</Parameter>
            <Parameter Name="TABLE_NAME">The name of the table on which the data filter is applied. If no table name is supplied, the filter applies to all tables in the job.</Parameter>
            <Parameter Name="SCHEMA_NAME">The name of the schema that owns the table on which the filter is applied. If no schema name is specified, the filter applies to all schemas in the job. If you supply a schema name you must also supply a table name.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DATA_REMAP" ElementId="#CEGFJHIC">
          <Description>Specifies transformations to be applied to column data as it is exported from, or imported into, a database.</Description>
          <Parameters>
            <Parameter Name="HANDLE">The handle of the current job. The current session must have previously attached to the handle through a call to an OPEN function.</Parameter>
            <Parameter Name="NAME">The name of the remap</Parameter>
            <Parameter Name="TABLE_NAME">The table containing the column to be remapped</Parameter>
            <Parameter Name="COLUMN">The name of the column to be remapped</Parameter>
            <Parameter Name="REMAP_FUNCTION">The meaning of remap_function is dependent upon the value of name. See Table 47-7 for a list of possible names.</Parameter>
            <Parameter Name="SCHEMA">The schema containing the column to be remapped. If NULL, the remapping applies to all schemas moved in the job that contain the specified table.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DETACH" ElementId="#i997382">
          <Description>Specifies that the user has no further interest in using the handle</Description>
          <Parameters>
            <Parameter Name="HANDLE">The handle of the job. The current session must have previously attached to the handle through a call to either an OPEN or ATTACH function.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_DUMPFILE_INFO" ElementId="#BABJBADB">
          <Description>Retrieves information about a specified dump file</Description>
          <Parameters>
            <Parameter Name="FILENAME">A simple filename with no directory path information</Parameter>
            <Parameter Name="DIRECTORY">A directory object that specifies where the file can be found</Parameter>
            <Parameter Name="INFO_TABLE">A PL/SQL table for storing information about the dump file</Parameter>
            <Parameter Name="FILETYPE">The type of file (Data Pump dump file, original Export dump file, external tables dump file, or unknown)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_STATUS" ElementId="#i997417">
          <Description>Monitors the status of a job or waits for the completion of a job or for more details on API errors</Description>
          <Parameters>
            <Parameter Name="HANDLE">The handle of a job. The current session must have previously attached to the handle through a call to either the OPEN or ATTACH function. A null handle can be used to retrieve error information after OPEN and ATTACH failures.</Parameter>
            <Parameter Name="MASK">A bit mask that indicates which of four types of information to return:KU$_STATUS_WIPKU$_STATUS_JOB_DESCKU$_STATUS_JOB_STATUSKU$_STATUS_JOB_ERROREach status has a numerical value. You can request multiple types of information by adding together different combinations of values. See Data Structures - Object Types.</Parameter>
            <Parameter Name="TIMEOUT">Maximum number of seconds to wait before returning to the user. A value of 0 requests an immediate return. A value of -1 requests an infinite wait. If KU$_STATUS_WIP or KU$_STATUS_JOB_ERROR information is requested and becomes available during the timeout period, then the procedure returns before the timeout period is over.</Parameter>
            <Parameter Name="JOB_STATE">Current state of the job. If only the job state is needed, it is much more efficient to use this parameter than to retrieve the full ku$_Status structure.</Parameter>
            <Parameter Name="STATUS">A ku$_Status is returned. The ku$_Status mask indicates what kind of information is included. This could be none if only KU$_STATUS_WIP or KU$_STATUS_JOB_ERROR information is requested and the timeout period expires.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LOG_ENTRY" ElementId="#i997488">
          <Description>Inserts a message into the log file</Description>
          <Parameters>
            <Parameter Name="HANDLE">The handle of a job. The current session must have previously attached to the handle through a call to either the OPEN or ATTACH function.</Parameter>
            <Parameter Name="MESSAGE">A text line to be added to the log file</Parameter>
            <Parameter Name="LOG_FILE_ONLY">Specified text should be written only to the log file. It should not be returned in GET_STATUS work-in-progress (KU$_STATUS_WIP) messages.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="METADATA_FILTER" ElementId="#BABJACDG">
          <Description>Provides filters that allow you to restrict the items that are included in a job</Description>
          <Parameters>
            <Parameter Name="HANDLE">The handle returned from the OPEN function</Parameter>
            <Parameter Name="NAME">The name of the filter. See Table 47-14 for descriptions of the available filters.</Parameter>
            <Parameter Name="VALUE">The value of the filter</Parameter>
            <Parameter Name="OBJECT_PATH">The object path to which the filter applies. If the default is used, the filter applies to all applicable objects. Lists of the object paths supported for each mode are contained in the catalog views for DATABASE_EXPORT_OBJECTS, SCHEMA_EXPORT_OBJECTS, and TABLE_EXPORT_OBJECTS. (Note that the TABLE_EXPORT_OBJECTS view is applicable to both Table and Tablespace mode because their object paths are the same.)For an import operation, object paths reference the mode used to create the dump file rather than the mode being used for the import.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="METADATA_REMAP" ElementId="#i1007115">
          <Description>Specifies a remapping to be applied to objects as they are processed in the specified job</Description>
          <Parameters>
            <Parameter Name="HANDLE">The handle for the current job. The current session must have previously attached to the handle through a call to the OPEN function.</Parameter>
            <Parameter Name="NAME">The name of the remap. See Table 47-16 for descriptions of the available remaps.</Parameter>
            <Parameter Name="OLD_VALUE">Specifies which value in the dump file set should be reset to value</Parameter>
            <Parameter Name="VALUE">The value of the parameter for the remap. This signifies the new value that old_value should be translated into.</Parameter>
            <Parameter Name="OBJECT_TYPE">Designates the object type to which the remap applies. The list of object types supported for each mode are contained in the DATABASE_EXPORT_OBJECTS, SCHEMA_EXPORT_OBJECTS, TABLE_EXPORT_OBJECTS, and TABLESPACE_EXPORT_OBJECTS catalog views.By default, the remap applies to all applicable objects within the job. The object_type parameter allows a caller to specify different parameters for different object types within a job. Remaps that explicitly specify an object type override remaps that apply to all object types.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="METADATA_TRANSFORM" ElementId="#i1006886">
          <Description>Specifies transformations to be applied to objects as they are processed in the specified job</Description>
          <Parameters>
            <Parameter Name="HANDLE">The handle for the current job. The current session must have previously attached to the handle through a call to the OPEN function.</Parameter>
            <Parameter Name="NAME">The name of the transformation. See Table 47-18 for descriptions of the available transforms.</Parameter>
            <Parameter Name="VALUE">The value of the parameter for the transform</Parameter>
            <Parameter Name="OBJECT_TYPE">Designates the object type to which the transform applies. The list of object types supported for each mode are contained in the DATABASE_EXPORT_OBJECTS, SCHEMA_EXPORT_OBJECTS, TABLE_EXPORT_OBJECTS, and TABLESPACE_EXPORT_OBJECTS catalog views.By default, the transform applies to all applicable objects within the job. The object_type parameter allows a caller to specify different transform parameters for different object types within a job. Transforms that explicitly specify an object type override transforms that apply to all object types.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="OPEN" ElementId="#i997806">
          <Description>Declares a new job using the Data Pump API, the handle returned being used as a parameter for calls to all other procedures (but not to the ATTACH function)</Description>
          <Parameters>
            <Parameter Name="OPERATION">The type of operation to be performed. Table 47-20 contains descriptions of valid operation types.</Parameter>
            <Parameter Name="JOB_MODE">The scope of the operation to be performed. Table 47-21 contains descriptions of valid modes. Specifying NULL generates an error.</Parameter>
            <Parameter Name="REMOTE_LINK">If the value of this parameter is non-null, it provides the name of a database link to the remote database that will be the source of data and metadata for the current job.</Parameter>
            <Parameter Name="JOB_NAME">The name of the job. The name is limited to 30 characters; it will be truncated if more than 30 characters are used. It may consist of printable characters and spaces. It is implicitly qualified by the schema of the user executing the OPEN function and must be unique to that schema (that is, there cannot be other Data Pump jobs using the same name).The name is used to identify the job both within the API and with other database components such as identifying the job in the DBA_RESUMABLE view if the job becomes suspended through lack of resources. If no name is supplied, a system generated name will be provided for the job in the following format: "SYS_&lt;OPERATION&gt;_&lt;MODE&gt;_%N".The default job name is formed where %N expands to a two-digit incrementing integer starting at '01' (for example, "SYS_IMPORT_FULL_03"). The name supplied for the job will also be used to name the master table and other resources associated with the job.</Parameter>
            <Parameter Name="VERSION">The version of database objects to be extracted. This option is only valid for Export, network Import, and SQL_FILE operations. Database objects or attributes that are incompatible with the version will not be extracted. Legal values for this parameter are as follows:COMPATIBLE - (default) the version of the metadata corresponds to the database compatibility level and the compatibility release level for feature (as given in the V$COMPATIBILITY view). Database compatibility must be set to 9.2 or higher.LATEST - the version of the metadata corresponds to the database version.A specific database version, for example, '11.0.0'.Specify a value of 12 to allow all existing database features, components, and options to be exported from Oracle Database 11g release 2 (11.2.0.3) or later into an Oracle Database 12 c Release 1 (12.1) (either a multitenant container database (CDB) or a non-CDB).</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_PARALLEL" ElementId="#i1011791">
          <Description>Adjusts the degree of parallelism within a job</Description>
          <Parameters>
            <Parameter Name="HANDLE">The handle of a job. The current session must have previously attached to the handle through a call to either the OPEN or ATTACH function.</Parameter>
            <Parameter Name="DEGREE">The maximum number of worker processes that can be used for the job. You use this parameter to adjust the amount of resources used for a job.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_PARAMETER" ElementId="#i1011813">
          <Description>Specifies job-processing options</Description>
          <Parameters>
            <Parameter Name="HANDLE">The handle of a job. The current session must have previously attached to the handle through a call to the OPEN function.</Parameter>
            <Parameter Name="NAME">The name of the parameter. Table 47-24 describes the valid parameter names.</Parameter>
            <Parameter Name="VALUE">The value for the specified parameter</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="START_JOB" ElementId="#i998298">
          <Description>Begins or resumes execution of a job</Description>
          <Parameters>
            <Parameter Name="HANDLE">The handle of a job. The current session must have previously attached to the handle through a call to either the OPEN or ATTACH function.</Parameter>
            <Parameter Name="SKIP_CURRENT">If nonzero, causes actions that were 'in progress' on a previous execution of the job to be skipped when the job restarts. The skip will only be honored for Import jobs. This mechanism allows the user to skip actions that trigger fatal bugs and cause the premature termination of a job. Multiple actions can be skipped on a restart. The log file will identify which actions are skipped. If a domain index was being processed, all pieces of the domain index are skipped even if the error occurred in only a subcomponent of the domain index.A description of the actions skipped is entered into the log file. skip_current is ignored for the initial START_JOB in a job.If zero, no data or metadata is lost upon a restart.</Parameter>
            <Parameter Name="ABORT_STEP">Value must be 0. Inserting values other than 0 into this argument will have unintended consequences.</Parameter>
            <Parameter Name="CLUSTER_OK">If = 0, all workers are started on the current instance. Otherwise, workers are started on instances usable by the job.</Parameter>
            <Parameter Name="SERVICE_NAME">If specified, indicates a service name used to constrain the job to specific instances or to a specific resource group.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="STOP_JOB" ElementId="#i998351">
          <Description>Terminates a job, but optionally, preserves the state of the job</Description>
          <Parameters>
            <Parameter Name="HANDLE">The handle of a job. The current session must have previously attached to the handle through a call to either the OPEN or ATTACH function. At the end of the procedure, the user is detached from the handle.</Parameter>
            <Parameter Name="IMMEDIATE">If nonzero, the worker processes are aborted immediately. This halts the job quickly, but parts of the job will have to be rerun if the job is ever restarted.If zero, the worker processes are allowed to complete their current work item (either metadata or table data) before they are terminated. The job is placed in a Stop Pending state while the workers finish their current work.</Parameter>
            <Parameter Name="KEEP_MASTER">If nonzero, the master table is retained when the job is stopped. If zero, the master table is dropped when the job is stopped. If the master table is dropped, the job will not be restartable. If the master table is dropped during an export job, the created dump files are deleted.</Parameter>
            <Parameter Name="DELAY">The number of seconds to wait until other attached sessions are forcibly detached. The delay allows other sessions attached to the job to be notified that a stop has been performed. The job keeps running until either all clients have detached or the delay has been satisfied. If no delay is specified, then the default delay is 60 seconds. If a shorter delay is used, clients might not be able to retrieve the final messages for the job through the GET_STATUS procedure.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="WAIT_FOR_JOB" ElementId="#BABJHGAC">
          <Description>Runs a job until it either completes normally or stops for some other reason</Description>
          <Parameters>
            <Parameter Name="HANDLE">The handle of the job. The current session must have previously attached to the handle through a call to either the OPEN or ATTACH function. At the end of the procedure, the user is detached from the handle.</Parameter>
            <Parameter Name="JOB_STATE">The state of the job when it has stopped executing; either STOPPED or COMPLETED.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_DB_VERSION" Url="http://docs.oracle.com/database/121/ARPLS/d_dbver.htm">
      <Description>The DBMS_DB_VERSION package specifies the Oracle version numbers and other information useful for simple conditional compilation selections based on Oracle versions.</Description>
    </Package>
    <Package Name="DBMS_DBFS_CONTENT" Url="http://docs.oracle.com/database/121/ARPLS/d_dbfs_content.htm">
      <Description>The DBMS_DBFS_CONTENT package provides an interface comprising a file system-like abstraction backed by one or more Store Providers.</Description>
      <SubPrograms>
        <SubProgram Name="CHECKACCESS" ElementId="#CIHICEDH">
          <Description>Reports if the user (principal) can perform the specified operation on the given path</Description>
          <Parameters>
            <Parameter Name="PATH">Name of path to check for access</Parameter>
            <Parameter Name="PATHTYPE">Type of object path represents (see DBMS_DBFS_CONTENT Constants - Path Name Types)</Parameter>
            <Parameter Name="OPERATION">Operation to be checked (see DBMS_DBFS_CONTENT Constants - Optional Properties)</Parameter>
            <Parameter Name="PRINCIPAL">File system user for whom the access check is made</Parameter>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CHECKSPI" ElementId="#CIHEDCIJ">
          <Description>Checks if a user-provided package implements all of the DBMS_DBFS_CONTENT_SPI subprograms with the proper signatures, and reports on the conformance.</Description>
          <Parameters>
            <Parameter Name="PACKAGE_NAME">Name of package</Parameter>
            <Parameter Name="SCHEMA_NAME">Name of schema</Parameter>
            <Parameter Name="CHK">CLOB that contains the evaluation results</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATEDIRECTORY" ElementId="#CIHCCAGI">
          <Description>Creates a directory</Description>
          <Parameters>
            <Parameter Name="PATH">Name of path to the directory</Parameter>
            <Parameter Name="PROPERTIES">One or more properties and their values to be set, returned, or both, depending on prop_flags (see DBMS_DBFS_CONTENT_PROPERTIES_T Table Type)</Parameter>
            <Parameter Name="PROP_FLAGS">Determines which properties are set, returned, or both. Default is PROP_STD. Specify properties to be returned by setting PROP_SPC (see DBMS_DBFS_CONTENT Constants - Property Access Flags), and providing an instance of the DBMS_DBFS_CONTENT_PROPERTIES_T Table Type with properties whose values are of interest.</Parameter>
            <Parameter Name="RECURSE">If 0, do not execute recursively; otherwise, recursively create the directories above the given directory</Parameter>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="PRINCIPAL">File system user for whom the access check is made</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATEFILE" ElementId="#CIHCGCHB">
          <Description>Creates a file</Description>
          <Parameters>
            <Parameter Name="PATH">Name of path to the file</Parameter>
            <Parameter Name="PROPERTIES">One or more properties and their values to be set, returned, or both, depending on prop_flags (see DBMS_DBFS_CONTENT_PROPERTIES_T Table Type)</Parameter>
            <Parameter Name="CONTENT">BLOB holding data with which to populate the file (optional)</Parameter>
            <Parameter Name="PROP_FLAGS">Determines which properties are set, returned, or both. Default is PROP_STD. Specify properties to be returned by setting prop_spec, and providing an instance of the DBMS_DBFS_CONTENT_PROPERTIES_T Table Type with properties whose values are of interest.</Parameter>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="PRINCIPAL">File system user for whom the access check is made</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATELINK" ElementId="#CIHJIEHA">
          <Description>Creates a new reference to the source file system element</Description>
          <Parameters>
            <Parameter Name="SRCPATH">File system entry to create.</Parameter>
            <Parameter Name="DSTPATH">Value to associate with srcPath.</Parameter>
            <Parameter Name="PROPERTIES">One or more properties and their values to be set, returned depending, or both, on prop_flags (see DBMS_DBFS_CONTENT_PROPERTIES_T Table Type)</Parameter>
            <Parameter Name="PROP_FLAGS">Determines which properties are set, returned, or both. Default is PROP_STD. Specify properties to be returned by setting prop_spec, and providing an instance of the DBMS_DBFS_CONTENT_PROPERTIES_T Table Type with properties whose values are of interest.</Parameter>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="PRINCIPAL">File system user for whom the access check is made</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATEREFERENCE" ElementId="#CIHFBAAB">
          <Description>Creates a physical link to an already existing file system element</Description>
          <Parameters>
            <Parameter Name="SRCPATH">File system entry to create.</Parameter>
            <Parameter Name="DSTPATH">Path that is the reference to srcPath.</Parameter>
            <Parameter Name="PROPERTIES">One or more properties and their values to be set, returned, or both, depending on prop_flags (see DBMS_DBFS_CONTENT_PROPERTIES_T Table Type)</Parameter>
            <Parameter Name="PROP_FLAGS">Determines which properties are set, returned. Default is PROP_STD. Specify properties to be returned by setting prop_spec, and providing an instance of the DBMS_DBFS_CONTENT_PROPERTIES_T Table Type with properties whose values are of interest.</Parameter>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="PRINCIPAL">File system user for whom the access check is made</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DECODEFEATURES" ElementId="#CIHIHJBD">
          <Description>Given a feature bit set integer value, returns a FEATURES_T table of the feature bits as FEATURE_T records</Description>
          <Parameters>
            <Parameter Name="FEATURESET">Feature set</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETECONTENT" ElementId="#CIHFIJCF">
          <Description>Deletes the file specified by the given contentID</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="CONTENTID">Unique identifier for the file to be deleted</Parameter>
            <Parameter Name="FILTER">A filter, if any, to be applied</Parameter>
            <Parameter Name="SOFT_DELETE">If 0, execute a hard (permanent) delete. For any value other than 0, perform a soft delete (see Oracle Database SecureFiles and Large Objects Developer's Guide, Deletion Operations).</Parameter>
            <Parameter Name="PRINCIPAL">File system user for whom the access check is made</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETEDIRECTORY" ElementId="#CIHIJHHE">
          <Description>Deletes a directory</Description>
          <Parameters>
            <Parameter Name="PATH">Name of path to the directory</Parameter>
            <Parameter Name="FILTER">A filter, if any, to be applied</Parameter>
            <Parameter Name="SOFT_DELETE">If 0, execute a hard (permanent) delete. For any value other than 0, perform a soft delete see Oracle Database SecureFiles and Large Objects Developer's Guide, Deletion Operations.</Parameter>
            <Parameter Name="RECURSE">If 0, do not execute recursively. Otherwise, recursively delete the directories and files below the given directory.</Parameter>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="PRINCIPAL">File system user for whom the access check is made</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETEFILE" ElementId="#CIHIHFHC">
          <Description>Deletes a file</Description>
          <Parameters>
            <Parameter Name="PATH">Name of path to the file</Parameter>
            <Parameter Name="FILTER">A filter, if any, to be applied</Parameter>
            <Parameter Name="SOFT_DELETE">If 0, execute a hard (permanent) delete. For any value other than 0, perform a soft delete (see Oracle Database SecureFiles and Large Objects Developer's Guide, Deletion Operations).</Parameter>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="PRINCIPAL">File system user for whom the access check is made</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="FEATURENAME" ElementId="#CIHIJJAA">
          <Description>Given a feature bit, returns a VARCHAR2 of that feature's name</Description>
          <Parameters>
            <Parameter Name="FEATUREBIT">Bit representation of the feature (see DBMS_DBFS_CONTENT Constants - Store Features)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="FLUSHSTATS" ElementId="#CIHHFBDH">
          <Description>Flushes DBMS_DBFS_CONTENT statistics to disk</Description>
        </SubProgram>
        <SubProgram Name="GETDEFAULTACL" ElementId="#CIHEHCFB">
          <Description>Returns the ACL parameter of the default context</Description>
          <Parameters>
            <Parameter Name="ACL">ACL for all new elements created (implicitly or explicitly) by the current operation</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETDEFAULTASOF" ElementId="#CIHCJFDD">
          <Description>Returns the asof parameter of the default context</Description>
          <Parameters>
            <Parameter Name="ASOF">The "as of" timestamp at which the underlying read-only operation (or its read-only sub-components) executes</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETTDEFAULTCONTEXT" ElementId="#CIHIHFDG">
          <Description>Returns the default context</Description>
          <Parameters>
            <Parameter Name="PRINCIPAL">Agent (principal) invoking the current operation</Parameter>
            <Parameter Name="OWNER">Owner for new elements created (implicitly or explicitly) by the current operation</Parameter>
            <Parameter Name="ACL">ACL for all new elements created (implicitly or explicitly) by the current operation</Parameter>
            <Parameter Name="ASOF">The "as of" timestamp at which the underlying read-only operation (or its read-only sub-components) executes</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETDEFAULTOWNER" ElementId="#CIHDGBHB">
          <Description>Returns the owner parameter of the default context</Description>
          <Parameters>
            <Parameter Name="OWNER">Owner for new elements created (implicitly or explicitly) by the current operation</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETDEFAULTPRINCIPAL" ElementId="#CIHGCGFA">
          <Description>Returns the principal parameter of the default context</Description>
          <Parameters>
            <Parameter Name="PRINCIPAL">Agent (principal) invoking the current operation</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETFEATURESBYMOUNT" ElementId="#CIHGHFCE">
          <Description>Returns features of a store by mount point</Description>
          <Parameters>
            <Parameter Name="STORE_MOUNT">Mount point</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETFEATURESBYNAME" ElementId="#CIHFEIJI">
          <Description>Returns features of a store by store name</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETFEATURESBYPATH" ElementId="#CIHDHIFI">
          <Description>Returns features of a store by path</Description>
          <Parameters>
            <Parameter Name="PATH">PATH_T</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETPATHBYMOUNTID" ElementId="#CIHICJIC">
          <Description>Returns the full absolute path name</Description>
          <Parameters>
            <Parameter Name="STORE_MOUNT">Mount point in which the path item with guid resides</Parameter>
            <Parameter Name="GUID">Unique ID for the path item</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETPATH" ElementId="#CIHBEIBE">
          <Description>Returns existing path items (such as files and directories)</Description>
          <Parameters>
            <Parameter Name="PATH">Name of path to path items</Parameter>
            <Parameter Name="PROPERTIES">One or more properties and their values to be returned depending on prop_flags (see DBMS_DBFS_CONTENT_PROPERTIES_T Table Type)</Parameter>
            <Parameter Name="CONTENT">BLOB holding data which populates the file (optional)</Parameter>
            <Parameter Name="ITEM_TYPE">Type of the path item specified (see DBMS_DBFS_CONTENT Constants - Path Name Types)</Parameter>
            <Parameter Name="AMOUNT">On input, number of bytes to be read. On output, number of bytes read</Parameter>
            <Parameter Name="OFFSET">Byte offset from which to begin reading</Parameter>
            <Parameter Name="BUFFER">Buffer to which to write</Parameter>
            <Parameter Name="BUFFERS">Buffers to which to write</Parameter>
            <Parameter Name="PROP_FLAGS">Determines which properties are set, returned, or both. Default is PROP_STD. Specify properties to be returned by setting prop_spec, and providing an instance of the DBMS_DBFS_CONTENT_PROPERTIES_T Table Type with properties whose values are of interest.</Parameter>
            <Parameter Name="ASOF">The "as of" timestamp at which the underlying read-only operation (or its read-only sub-components) executes</Parameter>
            <Parameter Name="FORUPDATE">Specifies that a lock should be taken to signify exclusive write access to the path item</Parameter>
            <Parameter Name="DEREF">If nonzero, attempts to resolve the given path item to actual data provided it is a reference</Parameter>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="PRINCIPAL">Agent (principal) invoking the current operation</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETPATHBYSTOREID" ElementId="#CIHDFFIF">
          <Description>If the underlying GUID is found in the underlying store, returns the store-qualified path name</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="GUID">Unique ID representing the desired path item</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETPATHNOWAIT" ElementId="#CIHCDGDA">
          <Description>Implies that the operation is for an update, and, if implemented, allows providers to return an exception (ORA-00054) rather than wait for row locks.</Description>
          <Parameters>
            <Parameter Name="PATH">Name of path to path items</Parameter>
            <Parameter Name="PROPERTIES">One or more properties and their values to be returned depending on prop_flags (see DBMS_DBFS_CONTENT_PROPERTIES_T Table Type)</Parameter>
            <Parameter Name="CONTENT">BLOB holding data which populates the file (optional)</Parameter>
            <Parameter Name="ITEM_TYPE">Type of the path item specified (see DBMS_DBFS_CONTENT Constants - Path Name Types)</Parameter>
            <Parameter Name="PROP_FLAGS">Determines which properties are returned. Default is PROP_STD. Specify properties to be returned by setting prop_spec, and providing an instance of the DBMS_DBFS_CONTENT_PROPERTIES_T Table Type with properties whose values are of interest.</Parameter>
            <Parameter Name="ASOF">The "as of" timestamp at which the underlying read-only operation (or its read-only sub-components) executes</Parameter>
            <Parameter Name="DEREF">If nonzero, attempts to resolve the given path item to actual data provided it is a reference</Parameter>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="PRINCIPAL">Agent (principal) invoking the current operation</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETSTOREBYMOUNT" ElementId="#CIHCGCFD">
          <Description>Returns a store by way of its mount point</Description>
          <Parameters>
            <Parameter Name="STORE_MOUNT">Location at which the store instance is mounted</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETSTOREBYNAME" ElementId="#CIHCFIJA">
          <Description>Returns a store by way of its name</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETSTOREBYPATH" ElementId="#CIHCCHEJ">
          <Description>Returns a store by way of its path</Description>
          <Parameters>
            <Parameter Name="PATH">PATH_T s</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETSTATS" ElementId="#CIHEIIDH">
          <Description>Returns information about DBMS_DBFS_CONTENT statistics collection</Description>
          <Parameters>
            <Parameter Name="ENABLED">Whether statistics collection is enabled</Parameter>
            <Parameter Name="FLUSH_TIME">How often to flush the statistics to disk in centiseconds</Parameter>
            <Parameter Name="FLUSH_COUNT">Number of operations to allow between statistics flushes</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETTRACE" ElementId="#CIHCCCFJ">
          <Description>Returns whether or not DBMS_DBFS_CONTENT tracing is turned on</Description>
        </SubProgram>
        <SubProgram Name="GETVERSION" ElementId="#CIHHJAAB">
          <Description>Returns the version of the DBMS_DBFS_CONTENT interface in a standardized format associated with a store</Description>
        </SubProgram>
        <SubProgram Name="LIST" ElementId="#CIHJGDGF">
          <Description>Lists the path items in the specified path meeting the specified filter and other criteria</Description>
          <Parameters>
            <Parameter Name="PATH">Name of path to directories</Parameter>
            <Parameter Name="FILTER">A filter, if any, to be applied</Parameter>
            <Parameter Name="RECURSE">If 0, do not execute recursively. Otherwise, recursively list the contents of directories and files below the given directory.</Parameter>
            <Parameter Name="ASOF">The "as of" timestamp at which the underlying read-only operation (or its read-only sub-components) executes</Parameter>
            <Parameter Name="STORE_NAME">Name of repository</Parameter>
            <Parameter Name="PRINCIPAL">Agent (principal) invoking the current operation</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LISTALLCONTENT" ElementId="#CIHIGJBI">
          <Description>Lists all path items in all mounts</Description>
        </SubProgram>
        <SubProgram Name="LISTALLPROPERTIES" ElementId="#CIHEAEEA">
          <Description>Returns a table of all properties for all path items in all mounts</Description>
        </SubProgram>
        <SubProgram Name="LISTMOUNTS" ElementId="#CIHFFBIB">
          <Description>Lists all available mount points, their backing stores, and the store features</Description>
        </SubProgram>
        <SubProgram Name="LISTSTORES" ElementId="#CIHFCIGI">
          <Description>Lists all available stores and their features</Description>
        </SubProgram>
        <SubProgram Name="LOCKPATH" ElementId="#CIHHFAGA">
          <Description>Applies user-level locks to the given valid path name</Description>
          <Parameters>
            <Parameter Name="PATH">Name of path to file items</Parameter>
            <Parameter Name="LOCK_TYPE">One of the available lock types (see DBMS_DBFS_CONTENT Constants - Lock Types)</Parameter>
            <Parameter Name="LOCK_DATA">Optional user data to be associated with the lock</Parameter>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="PRINCIPAL">Agent (principal) invoking the current operation</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MOUNTSTORE" ElementId="#CIHDBCJI">
          <Description>Mounts a previously registered store and binds it to the mount point</Description>
          <Parameters>
            <Parameter Name="STORE_MOUNT">Path name to use to mount this store</Parameter>
            <Parameter Name="SINGLETON">Whether the mount is a single backend store on the system</Parameter>
            <Parameter Name="PRINCIPAL">Agent (principal) invoking the current operation</Parameter>
            <Parameter Name="OWNER">Owner for new elements created (implicitly or explicitly) by the current operation</Parameter>
            <Parameter Name="ACL">ACL for all new elements created (implicitly or explicitly) by the current operation</Parameter>
            <Parameter Name="ASOF">The "as of" timestamp at which the underlying read-only operation (or its read-only sub-components) executes</Parameter>
            <Parameter Name="READ_ONLY">Whether the mount is read-only</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="NORMALIZEPATH" ElementId="#CIHJGGAH">
          <Description>Converts a store-specific or full-absolute path name into normalized form</Description>
          <Parameters>
            <Parameter Name="PATH">Name of path to file items</Parameter>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="PARENT">Parent path name</Parameter>
            <Parameter Name="TPATH">Name of trailing path item</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PROPANY" ElementId="#CIHJJFGD">
          <Description>Provides constructors that take one of a variety of types and return a PROPERTY_T</Description>
          <Parameters>
            <Parameter Name="VAL">Value</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PROPERTIESH2T" ElementId="#CIHGCBFD">
          <Description>Converts a PROPERTY_T hash to a DBMS_DBFS_CONTENT_PROPERTIES_T table</Description>
        </SubProgram>
        <SubProgram Name="PROPERTIEST2H" ElementId="#CIHBAIHH">
          <Description>Converts a DBMS_DBFS_CONTENT_PROPERTIES_T table to a PROPERTY_T hash</Description>
          <Parameters>
            <Parameter Name="SPROPS">A PROPERTIES_T hash</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PROPNUMBER" ElementId="#CIHDEIDD">
          <Description>Is a constructor that takes a NUMBER and returns a PROPERTY_T</Description>
          <Parameters>
            <Parameter Name="VAL">Value</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PROPRAW" ElementId="#CIHIGGHD">
          <Description>Is a constructor that takes a RAW and returns a PROPERTY_T</Description>
          <Parameters>
            <Parameter Name="VAL">Value</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PROPTIMESTAMP" ElementId="#CIHFHABG">
          <Description>Is a constructor that takes a TIMESTAMP and returns a PROPERTY_T</Description>
          <Parameters>
            <Parameter Name="VAL">Value</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PROPVARCHAR2" ElementId="#CIHDIAEI">
          <Description>Is a constructor that takes a VARCAHR2 and returns a PROPERTY_T</Description>
        </SubProgram>
        <SubProgram Name="PURGEALL" ElementId="#CIHJHFIB">
          <Description>Purges all soft-deleted entries matching the path and optional filter criteria</Description>
          <Parameters>
            <Parameter Name="PATH">Name of path to file items</Parameter>
            <Parameter Name="FILTER">A filter, if any, to be applied based on specified criteria</Parameter>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="PRINCIPAL">Agent (principal) invoking the current operation</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PURGEPATH" ElementId="#CIHIFCBF">
          <Description>Purges any soft-deleted versions of the given path item</Description>
          <Parameters>
            <Parameter Name="PATH">Name of path to file items</Parameter>
            <Parameter Name="FILTER">A filter, if any, to be applied</Parameter>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="PRINCIPAL">Agent (principal) invoking the current operation</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PUTPATH" ElementId="#CIHHAJGE">
          <Description>Creates a new path item</Description>
          <Parameters>
            <Parameter Name="PATH">Name of path to file items</Parameter>
            <Parameter Name="PROPERTIES">One or more properties and their values to be set depending on prop_flags (see DBMS_DBFS_CONTENT_PROPERTIES_T Table Type)</Parameter>
            <Parameter Name="CONTENT">BLOB holding data which populates the file (optional)</Parameter>
            <Parameter Name="ITEM_TYPE">Type of the path item specified (see DBMS_DBFS_CONTENT Constants - Path Name Types)</Parameter>
            <Parameter Name="AMOUNT">Number of bytes to be read</Parameter>
            <Parameter Name="OFFSET">Byte offset from which to begin reading</Parameter>
            <Parameter Name="BUFFER">Buffer to which to write</Parameter>
            <Parameter Name="BUFFERS">Buffers to which to write</Parameter>
            <Parameter Name="PROP_FLAGS">Determines which properties are set. Default is PROP_STD. Specify properties to be returned by setting prop_spec, and providing an instance of the DBMS_DBFS_CONTENT_PROPERTIES_T Table Type with properties whose values are of interest.</Parameter>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="PRINCIPAL">Agent (principal) invoking the current operation</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REGISTERSTORE" ElementId="#CIHIDCJH">
          <Description>Registers a new store</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store, must be unique</Parameter>
            <Parameter Name="PROVIDER_NAME">Name of provider</Parameter>
            <Parameter Name="PROVIDER_PACKAGE">Store provider</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RENAMEPATH" ElementId="#CIHGHJFE">
          <Description>Renames or moves a path</Description>
          <Parameters>
            <Parameter Name="OLDPATH">Name of path prior to renaming</Parameter>
            <Parameter Name="NEWPATH">Name of path after renaming</Parameter>
            <Parameter Name="PROPERTIES">One or more properties and their values to be set depending on prop_flags (see DBMS_DBFS_CONTENT_PROPERTIES_T Table Type)</Parameter>
            <Parameter Name="STORE_NAME">Name of store, must be unique</Parameter>
            <Parameter Name="PRINCIPAL">Agent (principal) invoking the current operation</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RESTOREALL" ElementId="#CIHEHDCJ">
          <Description>Restores all soft-deleted path items meeting the path and filter criteria</Description>
          <Parameters>
            <Parameter Name="PATH">Name of path to file items</Parameter>
            <Parameter Name="FILTER">A filter, if any, to be applied</Parameter>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="PRINCIPAL">Agent (principal) invoking the current operation</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RESTOREPATH" ElementId="#CIHDEFEB">
          <Description>Restores all soft-deleted path items that match the given path and filter criteria</Description>
          <Parameters>
            <Parameter Name="PATH">Name of path to file items</Parameter>
            <Parameter Name="FILTER">A filter, if any, to be applied</Parameter>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="PRINCIPAL">Agent (principal) invoking the current operation</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETDEFAULTACL" ElementId="#CIHHCHGF">
          <Description>Sets the ACL parameter of the default context</Description>
          <Parameters>
            <Parameter Name="ACL">ACL for all new elements created (implicitly or explicitly) by the current operation</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETDEFAULTASOF" ElementId="#CIHJDDGC">
          <Description>Sets the "as of" parameter of the default context</Description>
          <Parameters>
            <Parameter Name="ASOF">The "as of" timestamp at which the underlying read-only operation (or its read-only sub-components) executes</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETDEFAULTCONTEXT" ElementId="#CIHHBAJE">
          <Description>Sets the default context</Description>
          <Parameters>
            <Parameter Name="PRINCIPAL">Agent (principal) invoking the current operation</Parameter>
            <Parameter Name="OWNER">Owner for new elements created (implicitly or explicitly) by the current operation</Parameter>
            <Parameter Name="ACL">ACL for all new elements created (implicitly or explicitly) by the current operation</Parameter>
            <Parameter Name="ASOF">The "as of" timestamp at which the underlying read-only operation (or its read-only sub-components) executes</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETDEFAULTOWNER" ElementId="#CIHCIIDJ">
          <Description>Sets the "owner" parameter of the default context</Description>
          <Parameters>
            <Parameter Name="OWNER">Owner for new elements created (implicitly or explicitly) by the current operation</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETDEFAULTPRINCIPAL" ElementId="#CIHIICHD">
          <Description>Sets the "principal" parameter of the default context</Description>
          <Parameters>
            <Parameter Name="PRINCIPAL">Agent (principal) invoking the current operation</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETPATH" ElementId="#CIHFBFDB">
          <Description>Assigns a path name to a path item represented by contentID</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of the store</Parameter>
            <Parameter Name="CONTENTID">Unique identifier for the item to be associated</Parameter>
            <Parameter Name="PATH">Name of path to path item</Parameter>
            <Parameter Name="PROPERTIES">One or more properties and their values to be set depending on prop_flags (see DBMS_DBFS_CONTENT_PROPERTIES_T Table Type)</Parameter>
            <Parameter Name="PRINCIPAL">Agent (principal) invoking the current operation</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETSTATS" ElementId="#CIHJBDJB">
          <Description>Enables and disables statistics collection</Description>
          <Parameters>
            <Parameter Name="ENABLE">If TRUE, enable statistics collection. If FALSE, disable statistics collection.</Parameter>
            <Parameter Name="FLUSH_TIME">How often to flush the statistics to disk in centiseconds</Parameter>
            <Parameter Name="FLUSH_COUNT">Number of operations to allow between statistics flushes</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETTRACE" ElementId="#BABFJJCC">
          <Description>Sets DBMS_DBFS_CONTENT tracing on or off</Description>
          <Parameters>
            <Parameter Name="TRCLVL">Level of the tracing, higher values implying more tracing</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SPACEUSAGE" ElementId="#CIHGDHIC">
          <Description>Queries file system space usage statistics</Description>
          <Parameters>
            <Parameter Name="PATH">Name of path to file items</Parameter>
            <Parameter Name="BLKSIZE">Natural tablespace blocksize that holds the store. If multiple tablespaces with different blocksizes are used, any valid blocksize is acceptable.</Parameter>
            <Parameter Name="TBYTES">Total size of the store in bytes computed over all segments that comprise the store</Parameter>
            <Parameter Name="FBYTES">Free or unused size of the store in bytes computed over all segments that comprise the store</Parameter>
            <Parameter Name="NFILE">Number of currently available files in the store</Parameter>
            <Parameter Name="NDIR">Number of currently available directories in the store</Parameter>
            <Parameter Name="NLINK">Number of currently available links in the store</Parameter>
            <Parameter Name="NREF">Number of currently available references in the store</Parameter>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="TRACE" ElementId="#CIHCFDIC">
          <Description>Returns a CLOB that contains the evaluation results</Description>
          <Parameters>
            <Parameter Name="SEV">Severity at which trace message is output</Parameter>
            <Parameter Name="MSG*">One or more message strings to be output. If more than one message is specified, all are output.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="TRACEENABLED" ElementId="#CIHIIBJI">
          <Description>Determines if the current trace "severity" set by the SETTRACE Procedure is at least as high as the given trace level</Description>
          <Parameters>
            <Parameter Name="SEV">Severity at which trace message is output</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UNLOCKPATH" ElementId="#CIHGHCGH">
          <Description>Unlocks path items that were previously locked with the LOCKPATH Procedure</Description>
          <Parameters>
            <Parameter Name="PATH">Name of path to file items</Parameter>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="PRINCIPAL">Agent (principal) invoking the current operation</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UNMOUNTSTORE" ElementId="#CIHCHIDC">
          <Description>Unmounts a registered store</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="STORE_MOUNT">Location at which the store instance is mounted</Parameter>
            <Parameter Name="IGNORE_UNKNOWN">If TRUE, attempts to unregister unknown stores will not raise an exception.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UNREGISTERSTORE" ElementId="#CIHCDJJI">
          <Description>Unregisters a store</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="IGNORE_UNKNOWN">If TRUE, attempts to unregister unknown stores will not raise an exception.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_DBFS_CONTENT_SPI" Url="http://docs.oracle.com/database/121/ARPLS/d_dbfs_content_spi.htm">
      <Description>The DBMS_DBFS_CONTENT_SPI package is a specification for DBMS_DBFS_CONTENT store providers, which must be implemented. Application designers can create PL/SQL packages conforming to this specification to extend DBMS_DBFS_CONTENT to use custom store providers.</Description>
      <SubPrograms>
        <SubProgram Name="CHECKACCESS" ElementId="#BGBHICAE">
          <Description>Reports if the user (principal) can perform the specified operation on the given path</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="PATH">Name of path to check for access</Parameter>
            <Parameter Name="PATHTYPE">Type of object path represents (see DBMS_DBFS_CONTENT Constants - Path Name Types)</Parameter>
            <Parameter Name="OPERATION">Operation to be checked (see DBMS_DBFS_CONTENT Constants - Optional Properties)</Parameter>
            <Parameter Name="PRINCIPAL">File system user for whom the access check is made</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATEDIRECTORY" ElementId="#BGBBIGIB">
          <Description>Creates a directory</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="PATH">Name of path to the directory</Parameter>
            <Parameter Name="PROPERTIES">One or more properties and their values to be set, returned, or both, depending on prop_flags (see DBMS_DBFS_CONTENT_PROPERTIES_T Table Type)</Parameter>
            <Parameter Name="PROP_FLAGS">Determines which properties are set, returned, or both. Default is PROP_STD. Specify properties to be returned by setting PROP_SPC (see DBMS_DBFS_CONTENT Constants - Property Access Flags), and providing an instance of the DBMS_DBFS_CONTENT_PROPERTIES_T Table Type with properties whose values are of interest.</Parameter>
            <Parameter Name="RECURSE">If 0, do not execute recursively; otherwise, recursively create the directories above the given directory</Parameter>
            <Parameter Name="CTX">Context with which to create the directory (see DBMS_DBFS_CONTENT_CONTEXT_T Object Type)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATEFILE" ElementId="#BGBDACFI">
          <Description>Creates a file</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="PATH">Name of path to the file</Parameter>
            <Parameter Name="PROPERTIES">One or more properties and their values to be set, returned or both depending, or both on prop_flags (see DBMS_DBFS_CONTENT_PROPERTIES_T Table Type)</Parameter>
            <Parameter Name="CONTENT">BLOB holding data with which to populate the file (optional)</Parameter>
            <Parameter Name="PROP_FLAGS">Determines which properties are set, returned, or both. Default is PROP_STD. Specify properties to be returned by setting prop_spec, and providing an instance of the DBMS_DBFS_CONTENT_PROPERTIES_T Table Type with properties whose values are of interest.</Parameter>
            <Parameter Name="CTX">Context with which to create the file (see DBMS_DBFS_CONTENT_CONTEXT_T Object Type)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATELINK" ElementId="#BGBBFDEI">
          <Description>Creates a physical link to an already existing file system element</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="SRCPATH">File system entry with which to link</Parameter>
            <Parameter Name="DSTPATH">Path of the new link element to be created</Parameter>
            <Parameter Name="PROPERTIES">One or more properties and their values to be set, returned, or both, depending on prop_flags (see DBMS_DBFS_CONTENT_PROPERTIES_T Table Type)</Parameter>
            <Parameter Name="PROP_FLAGS">Determines which properties are set, returned, or both. Default is PROP_STD. Specify properties to be returned by setting prop_spec, and providing an instance of the DBMS_DBFS_CONTENT_PROPERTIES_T Table Type with properties whose values are of interest.</Parameter>
            <Parameter Name="CTX">Context with which to create the link (see DBMS_DBFS_CONTENT_CONTEXT_T Object Type)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATEREFERENCE" ElementId="#BGBHHAFD">
          <Description>Creates a new reference to the source file system element</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="SRCPATH">File system entry with which to link</Parameter>
            <Parameter Name="DSTPATH">Path of the new link element to be created</Parameter>
            <Parameter Name="PROPERTIES">One or more properties and their values to be set, returned, or both, depending on prop_flags (see DBMS_DBFS_CONTENT_PROPERTIES_T Table Type)</Parameter>
            <Parameter Name="PROP_FLAGS">Determines which properties are set, returned, or both. Default is PROP_STD. Specify properties to be returned by setting prop_spec, and providing an instance of the DBMS_DBFS_CONTENT_PROPERTIES_T Table Type with properties whose values are of interest.</Parameter>
            <Parameter Name="CTX">Context with which to create the reference (see DBMS_DBFS_CONTENT_CONTEXT_T Object Type)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETECONTENT" ElementId="#BGBIFDGG">
          <Description>Deletes the file specified by the given contentID</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="CONTENTID">Unique identifier for the file to be deleted</Parameter>
            <Parameter Name="FILTER">A filter, if any, to be applied</Parameter>
            <Parameter Name="SOFT_DELETE">If 0, execute a hard (permanent) delete. For any value other than 0, perform a soft delete see Oracle Database SecureFiles and Large Objects Developer's Guide, Deletion Operations).</Parameter>
            <Parameter Name="CTX">Context with which to delete the file (see DBMS_DBFS_CONTENT_CONTEXT_T Object Type)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETEDIRECTORY" ElementId="#BGBDEFIE">
          <Description>Deletes a directory</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="PATH">Name of path to the directory</Parameter>
            <Parameter Name="FILTER">A filter, if any, to be applied</Parameter>
            <Parameter Name="SOFT_DELETE">If 0, execute a hard (permanent) delete. For any value other than 0, perform a soft delete see Oracle Database SecureFiles and Large Objects Developer's Guide, Deletion Operations).</Parameter>
            <Parameter Name="RECURSE">If 0, do not execute recursively. Otherwise, recursively delete the directories and files below the given directory.</Parameter>
            <Parameter Name="CTX">Context with which to delete the directory (see DBMS_DBFS_CONTENT_CONTEXT_T Object Type)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETEFILE" ElementId="#BGBGFJEB">
          <Description>Deletes a file</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="PATH">Name of path to the file</Parameter>
            <Parameter Name="FILTER">A filter, if any, to be applied</Parameter>
            <Parameter Name="SOFT_DELETE">If 0, execute a hard (permanent) delete. For any value other than 0, perform a soft delete see Oracle Database SecureFiles and Large Objects Developer's Guide, Deletion Operations).</Parameter>
            <Parameter Name="CTX">Context with which to delete the file (see DBMS_DBFS_CONTENT_CONTEXT_T Object Type)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETFEATURES" ElementId="#BGBGGAFG">
          <Description>Returns the features of a store</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETPATH" ElementId="#BGBFJGFJ">
          <Description>Returns existing path items (such as files and directories)</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="PATH">Name of path to path items</Parameter>
            <Parameter Name="PROPERTIES">One or more properties and their values to be returned depending on prop_flags (see DBMS_DBFS_CONTENT_PROPERTIES_T Table Type)</Parameter>
            <Parameter Name="CONTENT">BLOB holding data which populates the file (optional)</Parameter>
            <Parameter Name="ITEM_TYPE">Type of the path item specified (see DBMS_DBFS_CONTENT Constants - Path Name Types)</Parameter>
            <Parameter Name="AMOUNT">On input, number of bytes to be read. On output, number of bytes read</Parameter>
            <Parameter Name="OFFSET">Byte offset from which to begin reading</Parameter>
            <Parameter Name="BUFFER">Buffer to which to write</Parameter>
            <Parameter Name="BUFFERS">Buffers to which to write</Parameter>
            <Parameter Name="PROP_FLAGS">Determines which properties are set, returned, or both. Default is PROP_STD. Specify properties to be returned by setting prop_spec, and providing an instance of the DBMS_DBFS_CONTENT_PROPERTIES_T Table Type with properties whose values are of interest.</Parameter>
            <Parameter Name="FORUPDATE">Specifies that a lock should be taken to signify exclusive write access to the path item</Parameter>
            <Parameter Name="DEREF">If nonzero, attempts to resolve the given path item to actual data provided it is a reference (symbolic link)</Parameter>
            <Parameter Name="CTX">Context with which to access the path items (see DBMS_DBFS_CONTENT_CONTEXT_T Object Type)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETPATHBYSTOREID" ElementId="#BGBBCBHI">
          <Description>If the underlying GUID is found in the underlying store, returns the store-qualified path name</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="GUID">Unique ID representing the desired path item</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETPATHNOWAIT" ElementId="#BGBIHGBC">
          <Description>Implies that the operation is for an update, and, if implemented, allows providers to return an exception (ORA-00054) rather than wait for row locks.</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="PATH">Name of path to path items</Parameter>
            <Parameter Name="PROPERTIES">One or more properties and their values to be returned depending on prop_flags (see DBMS_DBFS_CONTENT_PROPERTIES_T Table Type)</Parameter>
            <Parameter Name="CONTENT">BLOB holding data which populates the file (optional)</Parameter>
            <Parameter Name="ITEM_TYPE">Type of the path item specified (see DBMS_DBFS_CONTENT Constants - Path Name Types)</Parameter>
            <Parameter Name="PROP_FLAGS">Determines which properties are returned. Default is PROP_STD. Specify properties to be returned by setting prop_spec, and providing an instance of the DBMS_DBFS_CONTENT_PROPERTIES_T Table Type with properties whose values are of interest.</Parameter>
            <Parameter Name="DEREF">If nonzero, attempts to resolve the given path item to actual data provided it is a reference (symbolic link)</Parameter>
            <Parameter Name="CTX">Context with which to access the path items (see DBMS_DBFS_CONTENT_CONTEXT_T Object Type)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETSTOREID" ElementId="#BGBFABCE">
          <Description>Returns the ID of a store</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETVERSION" ElementId="#BGBBHGAB">
          <Description>Returns the version associated with a store</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LIST" ElementId="#BGBHDECB">
          <Description>Lists the contents of a directory path name</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of repository</Parameter>
            <Parameter Name="PATH">Name of path to directories</Parameter>
            <Parameter Name="FILTER">A filter, if any, to be applied</Parameter>
            <Parameter Name="RECURSE">If 0, do not execute recursively. Otherwise, recursively list the contents of directories and files below the given directory.</Parameter>
            <Parameter Name="CTX">Context with which to access the path items (see DBMS_DBFS_CONTENT_CONTEXT_T Object Type)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LOCKPATH" ElementId="#BGBJFBFA">
          <Description>Applies user-level locks to the given valid path name</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="PATH">Path name of items to be locked</Parameter>
            <Parameter Name="LOCK_TYPE">One of the available lock types (see DBMS_DBFS_CONTENT Constants - Lock Types)</Parameter>
            <Parameter Name="LOCK_DATA">Optional user data to be associated with the lock</Parameter>
            <Parameter Name="CTX">Context with which to access the path items (see DBMS_DBFS_CONTENT_CONTEXT_T Object Type)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PURGEALL" ElementId="#BGBIDAFA">
          <Description>Purges all soft-deleted entries matching the path and optional filter criteria</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="PATH">Name of path to file items</Parameter>
            <Parameter Name="FILTER">A filter, if any, to be applied based on specified criteria</Parameter>
            <Parameter Name="CTX">Context with which to access the path items (see DBMS_DBFS_CONTENT_CONTEXT_T Object Type)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PURGEPATH" ElementId="#BGBICJHF">
          <Description>Purges any soft-deleted versions of the given path item</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="PATH">Name of path to file items</Parameter>
            <Parameter Name="FILTER">A filter, if any, to be applied</Parameter>
            <Parameter Name="CTX">Context with which to access the path items (see DBMS_DBFS_CONTENT_CONTEXT_T Object Type)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PUTPATH" ElementId="#BGBDHAFD">
          <Description>Creates a new path item</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="PATH">Path name of item to be put</Parameter>
            <Parameter Name="PROPERTIES">One or more properties and their values to be set depending on prop_flags (see DBMS_DBFS_CONTENT_PROPERTIES_T Table Type)</Parameter>
            <Parameter Name="CONTENT">BLOB holding data which populates the file (optional)</Parameter>
            <Parameter Name="ITEM_TYPE">Type of the path item specified (see DBMS_DBFS_CONTENT Constants - Path Name Types)</Parameter>
            <Parameter Name="AMOUNT">Number of bytes to be read</Parameter>
            <Parameter Name="WRITTEN">Number of bytes written</Parameter>
            <Parameter Name="OFFSET">Byte offset from which to begin reading</Parameter>
            <Parameter Name="BUFFER">Buffer to which to write</Parameter>
            <Parameter Name="BUFFERS">Buffers to which to write</Parameter>
            <Parameter Name="PROP_FLAGS">Determines which properties are set. Default is PROP_STD. Specify properties to be returned by setting prop_spec, and providing an instance of the DBMS_DBFS_CONTENT_PROPERTIES_T Table Type with properties whose values are of interest.</Parameter>
            <Parameter Name="CTX">Context with which to access the path items (see DBMS_DBFS_CONTENT_CONTEXT_T Object Type)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RENAMEPATH" ElementId="#BGBIDJEB">
          <Description>Renames or moves a path</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store, must be unique</Parameter>
            <Parameter Name="OLDPATH">Name of path prior to renaming</Parameter>
            <Parameter Name="NEWPATH">Name of path after renaming</Parameter>
            <Parameter Name="PROPERTIES">One or more properties and their values to be set depending on prop_flags (see DBMS_DBFS_CONTENT_PROPERTIES_T Table Type)</Parameter>
            <Parameter Name="CTX">Context with which to access the path items (see DBMS_DBFS_CONTENT_CONTEXT_T Object Type)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RESTOREALL" ElementId="#BGBCAFBJ">
          <Description>Restores all soft-deleted path items meeting the path and filter criteria</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="PATH">Name of path to path items</Parameter>
            <Parameter Name="FILTER">A filter, if any, to be applied</Parameter>
            <Parameter Name="CTX">Context with which to access the path items (see DBMS_DBFS_CONTENT_CONTEXT_T Object Type)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RESTOREPATH" ElementId="#BGBCFFHH">
          <Description>Restores all soft-deleted path items that match the given path and filter criteria</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="PATH">Name of path to path items</Parameter>
            <Parameter Name="FILTER">A filter, if any, to be applied</Parameter>
            <Parameter Name="CTX">Context with which to access the path items (see DBMS_DBFS_CONTENT_CONTEXT_T Object Type)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SEARCH" ElementId="#BGBIIHJI">
          <Description>Searches for path items matching the given path and filter criteria</Description>
        </SubProgram>
        <SubProgram Name="SETPATH" ElementId="#BGBBEIDB">
          <Description>Assigns a path name to a path item represented by contentID</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of the store</Parameter>
            <Parameter Name="CONTENTID">Unique identifier for the item to be associated</Parameter>
            <Parameter Name="PATH">Name of path to path item</Parameter>
            <Parameter Name="PROPERTIES">One or more properties and their values to be set depending on prop_flags (see DBMS_DBFS_CONTENT_PROPERTIES_T Table Type)</Parameter>
            <Parameter Name="CTX">Context with which to access the path items (seE DBMS_DBFS_CONTENT_CONTEXT_T Object Type)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SPACEUSAGE" ElementId="#BGBEFDCI">
          <Description>Queries file system space usage statistics</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="BLKSIZE">Natural tablespace blocksize that holds the store. If multiple tablespaces with different blocksizes are used, any valid blocksize is acceptable.</Parameter>
            <Parameter Name="TBYTES">Total size of the store in bytes computed over all segments that comprise the store</Parameter>
            <Parameter Name="FBYTES">Free or unused size of the store in bytes computed over all segments that comprise the store</Parameter>
            <Parameter Name="NFILE">Number of currently available files in the store</Parameter>
            <Parameter Name="NDIR">Number of currently available directories in the store</Parameter>
            <Parameter Name="NLINK">Number of currently available links in the store</Parameter>
            <Parameter Name="NREF">Number of currently available references in the store</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UNLOCKPATH" ElementId="#BGBBCDFD">
          <Description>Unlocks path items that were previously locked with the LOCKPATH Procedure</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="PATH">Name of path to the path items</Parameter>
            <Parameter Name="CTX">Context with which to access the path items (see DBMS_DBFS_CONTENT_CONTEXT_T Object Type)</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_DBFS_HS" Url="http://docs.oracle.com/database/121/ARPLS/d_dbfs_hs.htm">
      <Description>The Oracle Database File System Hierarchical Store is implemented in the DBMS_DBFS_HS package. This package provides users the ability to use tape or Amazon S3 Web service as a storage tier when doing Information Lifecycle Management for their database tables.</Description>
      <SubPrograms>
        <SubProgram Name="CLEANUPUNUSEDBACKUPFILES" ElementId="#BABIBGFG">
          <Description>Removes files created on the external storage device that hold no currently used data</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATEBUCKET" ElementId="#BABJCGCE">
          <Description>Creates an AWS bucket, associated with a store of type STORETYPE_AMAZONS3 into which the Hierarchical Store can then move data</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATESTORE" ElementId="#BABBEAAJ">
          <Description>Creates a new hierarchical store</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="STORE_TYPE">STORETYPE_TAPE or STORETYPE_AMAZONS3</Parameter>
            <Parameter Name="TBL_NAME">Table for store entries</Parameter>
            <Parameter Name="TBS_NAME">Tablespace for the store</Parameter>
            <Parameter Name="CACHE_SIZE">Amount of space used by the store to cache content in given tablespace</Parameter>
            <Parameter Name="LOB_CACHE_QUOTA">Fraction of the cache_size which is allocated for level 1 cache. The default value of this parameter is NULL which means that 0.8 (= 80%) of the cache_size is used for level 1 cache.</Parameter>
            <Parameter Name="OPTIMAL_TARBALL_SIZE">Maximum possible size of the archive file.Multiple content files are bundled together into one archive file, and then the archive file is transferred to tape or Amazon S3. This is because creating one file on tape or Amazon S3 for every content file in the store is a prohibitively expensive operation.The value of is set by default to 10GB for tape and to 100MB for Amazon S3.</Parameter>
            <Parameter Name="SCHEMA_NAME">Schema for the store</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DEREGSTORECOMMAND" ElementId="#BABGABDD">
          <Description>Removes a command that had been previously associated with a store through the RECONFIGCACHE Procedure</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="MESSAGE">Message to be deregistered</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROPSTORE" ElementId="#BABGDHIJ">
          <Description>Deletes a previously created hierarchical store</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store owned by the invoking session user</Parameter>
            <Parameter Name="OPT_FLAGS">User can specify optional flags. If DISABLE_CLEANUPBACKUPFILES is specified as one of the optional flags, the call to the CLEANUPUNUSEDBACKUPFILES Procedure is not issued. By default, when this flag is not set, the procedure implicitly cleans-up all unused backup files.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="FLUSHCACHE" ElementId="#BABGCAJE">
          <Description>Flushes (writes out) dirty contents from the level-1 cache.</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETSTOREPROPERTY" ElementId="#BABIIAIB">
          <Description>Retrieves the values of a property of a store</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="PROPERTY_NAME">Name of property</Parameter>
            <Parameter Name="NOEXCP">If set to FALSE, raises an exception if the property does not exist in the database. If noexcp is set to TRUE, returns NULL if the property does not exist.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RECONFIGCACHE" ElementId="#BABJFGEH">
          <Description>Reconfigures the parameters of the database cache used by the store</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="CACHE_SIZE">Cumulative cache size used for the Hierarchical Store</Parameter>
            <Parameter Name="LOBCACHE_QUOTA">Fraction of the cache size that are assigned to level 1 cache</Parameter>
            <Parameter Name="OPTIMAL_TARBALL_SIZE">Maximum possible size of an archive file. Since creating one file for every content file in the store is a prohibitively expensive operation, multiple content files are bundled together into one archive file for transfer to tape or Amazon S3.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REGISTERSTORECOMMAND" ElementId="#BABEICFJ">
          <Description>Registers commands for a store with the Hierarchical Store to be sent to the Media Manager for the external storage device associated with the store</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="MESSAGE">Message to be sent to the Media Manager of the external store</Parameter>
            <Parameter Name="FLAGS">Valid values:BEFORE_PUT CONSTANT NUMBER := 1;BEFORE_GET CONSTANT NUMBER := 2;</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SENDCOMMAND" ElementId="#BABDBADI">
          <Description>Sends a command to be executed on the external storage device's Media Manager</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="MESSAGE">Message string to be executed</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETSTOREPROPERTY" ElementId="#BABIHJAD">
          <Description>Stores properties of a store in the database</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="PROPERTY_NAME">For a store using Tape device, there are three properties whose values must be set by the user, and four properties that have default values. Stores of type STORETYPE_AMAZONS3 have properties with default values. The various options for both types of stores are detailed under property_value.</Parameter>
            <Parameter Name="PROPERTY_VALUE">Stores using a Tape DeviceThe values for the following properties must be set by the user:PROPNAME_SBTLIBRARY - This should point to the shared library used by RMAN to communicate with the external tape device. It is usually named libobk.so.PROPNAME_MEDIAPOOL - Media pool number for storing contentPROPNAME_CACHE_SIZE - Amount of space, in bytes, used for the cache of this storeThe following properties, which have default values assigned to them when a store is created, benefit from tuning:PROPNAME_READCHUNKSIZE and PROPNAME_WRITECHUNKSIZE - These are the sizes used by the SBT protocol to transfer data to and from the tapes. These chunks are allocated in memory per transaction, so the values should be conservative. The default size is 1MB.PROPNAME_STREAMABLE – Indicates whether DBFS_LINKs can perform read operations (for example SELECT or DBMS_LOB.READ) directly from the store, or if the data must be copied back into the database before it can be readPROPNAME_ENABLECLEANUPONDELETE - Indicates if DBMS_DBFS_HS should delete unused files on the external storage. Valid values for this property are 'FALSE' for STORETYPE_TAPE.PROPNAME_COMPRESSLEVEL - Describes how files written to Tape should be compressed. It can be set to PROPVAL_COMPLVL_NONE, PROPVAL_COMPLVL_LOW, PROPVAL_COMPLVL_MEDIUM or PROPVAL_COMPLVL_HIGH. By default it is set to PROPVAL_COMPLVL_NONE.</Parameter>
            <Parameter Name="(CONT) PROPERTY_VALUE">Stores of type STORETYPE_AMAZONS3It is mandatory that the following properties have assigned values, and default values are provided:PROPNAME_SBTLIBRARY - Specifies the path of the shared library used by RMAN to communicate with Amazon S3. It is named libosbws11.so and is available in rdbms/lib directory.PROPNAME_S3HOST - Defines the HOST name of the Amazon S3 storage service. It must be s3.amazonaws.com.PROPNAME_BUCKET - Defines the AWS bucket used as a storage tier by the Hierarchical Store. Restrictions on bucket names are:-- Bucket names can only contain lowercase letters, numbers, periods (.) and dashes (-). Use of an underscore (_) is invalid.-- Bucket names must start with a number or letter-- Bucket names cannot be in an IP address style ("192.168.5.4")-- Bucket names must be between 3 and 63 characters in length-- Bucket names should not end with a dash-- Dashes cannot appear next to periods. For example, "my-.bucket.com" is invalid.PROPNAME_LICENSEID - Specifies the license ID associated with the library libosbws11.so.PROPNAME_WALLET - Has the form: 'LOCATION=file:&lt;filename&gt; CREDENTIAL_ALIAS=&lt;access/secret_alias&gt; PROXY_AUTH_ALIAS=&lt;proxyusername/password alias&gt;'-- LOCATION - Directory path that contains the Oracle wallet. The format is file:directory-path. See Examples for variations in format.-- PASSWORD - Defines the wallet password. If auto-login is enabled in the wallet (this can be changed using the user's own utility), and does not have to be specified. By default, the mkstore utility enables auto-login.-- CREDENTIAL_ALIAS - Defines the credential alias for ACCESS_KEY and SECRET_KEY-- PROXY_AUTH_ALIAS - Defines authentication credentials for the proxy server, if applicable.</Parameter>
            <Parameter Name="(PROPERTY_VALUE">The following properties are optional:PROPNAME_HTTPPROXY - Defines the DNS name of the HTTP proxy, if any, that is needed to access the Amazon S3 storage service.PROPNAME_STREAMABLE – Indicates whether buffer-based PUT or GET operation should be done on this store. Valid values for this property are TRUE (default) and FALSE.PROPNAME_ENABLECLEANUPONDELETE - Indicates if DBMS_DBFS_HS should delete unused files on the external storage device. Default values for this property are FALSE for STORETYPE_TAPE and TRUE for STORETYPE_AMAZONS3.PROPNAME_COMPRESSLEVEL - Describes how files written to tape should be compressed. It can be set to PROPVAL_COMPLVL_NONE, PROPVAL_COMPLVL_LOW, PROPVAL_COMPLVL_MEDIUM or PROPVAL_COMPLVL_HIGH. By default it is set to PROPVAL_COMPLVL_NONE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="STOREPUSH" ElementId="#BABJBICH">
          <Description>Pushes locally staged data to the remote storage</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store whose content the client writes from local cache to the external store</Parameter>
            <Parameter Name="PATH">A non-mount qualified (without mount point) path within the store. By default, its value is NULL which corresponds to the root path of the store.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_DBFS_SFS" Url="http://docs.oracle.com/database/121/ARPLS/d_dbfs_sfs.htm">
      <Description>The DBMS_DBFS_SFS package provides an interface to operate a SecureFile-based store (SFS) for the content interface described in the DBMS_DBFS_CONTENT package.</Description>
      <SubPrograms>
        <SubProgram Name="CREATEFILESYSTEM" ElementId="#BABBDEDE">
          <Description>Creates a file system store</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="SCHEMA_NAME">Schema for the store, defaulting to the current schema</Parameter>
            <Parameter Name="TBL_NAME">Table for store entries. If not specified, an internally generated name is used.</Parameter>
            <Parameter Name="TBL_TB">Tablespace for the store, defaulting to the schema's default tablespace</Parameter>
            <Parameter Name="LOB_TBS">Tablespace in which to create the LOB segment. It defaults to the user's default tablespace.</Parameter>
            <Parameter Name="USE_BF">If TRUE, a BasicFile LOB is used; otherwise a SecureFile LOB is used.</Parameter>
            <Parameter Name="PROPERTIES">Table of (name, value, typecode) tuples used to configure the store properties. Currently no such properties are defined or used.</Parameter>
            <Parameter Name="CREATE_ONLY">If TRUE, the file system is created, but not registered with the current user</Parameter>
            <Parameter Name="USE_OBJECTS">If TRUE, a single base-table with an object-type column (using a nested table) is created to backup the new file system. Otherwise, a pair of (parent, child) tables is used to backup the file system. In both cases, the object type nested table or the child table is used only for user-defined properties.</Parameter>
            <Parameter Name="WITH_GRANTS">If TRUE, DML and query access permissions are granted to the DBFS_ROLE as part of creating the file system. Otherwise, explicit grants (or existing permissions) are required to access the file system.</Parameter>
            <Parameter Name="DO_DEDUP">If TRUE, do deduplication the underlying SecureFile column</Parameter>
            <Parameter Name="DO_COMPRESS">If TRUE, do compression the underlying SecureFile column</Parameter>
            <Parameter Name="COMPRESSION">Compression algorithm to use (see DBMS_DBFS_SFS Constants - Compression Levels)</Parameter>
            <Parameter Name="DO_ENCRYPT">If TRUE, encrypt the underlying SecureFile column</Parameter>
            <Parameter Name="ENCRYPTION">encryption algorithm to use (see DBMS_DBFS_SFS Constants - Used by the encryption Parameter)</Parameter>
            <Parameter Name="DO_PARTITION">If TRUE, partition the table used for storage</Parameter>
            <Parameter Name="NPARTITIONS">Number of partitions to create for the table (see DBMS_DBFS_SFS Constants - Used by the npartitions Parameter).</Parameter>
            <Parameter Name="PARTITION_KEY">How to partition the table: by item name, by path name, or by GUID (see DBMS_DBFS_SFS Constants - Used by the partition_key Parameter).</Parameter>
            <Parameter Name="PARTITION_GUIDI">If TRUE, build an index on GUID</Parameter>
            <Parameter Name="PARTITION_PATHI">If TRUE, build an index on path name</Parameter>
            <Parameter Name="PARTITION_PROP">If TRUE, partition the properties table</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATESTORE" ElementId="#BABDBGCG">
          <Description>Creates a new DBFS SFS store</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
            <Parameter Name="STORE_TYPE">STORETYPE_TAPE or STORETYPE_AMAZONS3</Parameter>
            <Parameter Name="TBL_NAME">Placeholder for the store content cached in database</Parameter>
            <Parameter Name="TBS_NAME">Named tablespace</Parameter>
            <Parameter Name="USE_BF">If TRUE, a BasicFile LOB is used; otherwise a SecureFile LOB is used.</Parameter>
            <Parameter Name="STGOPTS">Currently non-operational, reserved for future use</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROPFILESYSTEM" ElementId="#BABHDDBB">
          <Description>Drops the DBFS SFS store</Description>
          <Parameters>
            <Parameter Name="SCHEMA_NAME">Name of schema</Parameter>
            <Parameter Name="TBL_NAME">Name of tablespace</Parameter>
            <Parameter Name="STORE_NAME">Name of store path</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="INITFS" ElementId="#BABCEFFE">
          <Description>Initializes a POSIX file system store</Description>
          <Parameters>
            <Parameter Name="STORE_NAME">Name of store</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_DDL" Url="http://docs.oracle.com/database/121/ARPLS/d_ddl.htm">
      <Description>This package provides access to some SQL data definition language (DDL) statements from stored procedures. It also provides special administration operations that are not available as Data Definition Language statements (DDLs).</Description>
      <SubPrograms>
        <SubProgram Name="ALTER_COMPILE" ElementId="#i996813">
          <Description>Compiles the PL/SQL object</Description>
          <Parameters>
            <Parameter Name="TYPE">Must be either PROCEDURE, FUNCTION, PACKAGE, PACKAGE BODY or TRIGGER</Parameter>
            <Parameter Name="SCHEMA">Schema nameIf NULL, then use current schema (case-sensitive)</Parameter>
            <Parameter Name="NAME">Name of the object (case-sensitive)</Parameter>
            <Parameter Name="REUSE_SETTINGS">Indicates whether the session settings in the objects should be reused, or whether the current session settings should be adopted instead</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ALTER_TABLE_NOT_REFERENCEABLE" ElementId="#i999573">
          <Description>Reorganizes object tables</Description>
          <Parameters>
            <Parameter Name="TABLE_NAME">Name of the table to be altered. Cannot be a synonym. Must not be NULL. Case sensitive.</Parameter>
            <Parameter Name="TABLE_SCHEMA">Name of the schema owning the table to be altered. If NULL then the current schema is used. Case sensitive.</Parameter>
            <Parameter Name="AFFECTED_SCHEMA">Name of the schema affected by this alteration. If NULL then the current schema is used. Case sensitive.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ALTER_TABLE_REFERENCEABLE" ElementId="#i998798">
          <Description>Reorganizes object tables</Description>
          <Parameters>
            <Parameter Name="TABLE_NAME">Name of the table to be altered. Cannot be a synonym. Must not be NULL. Case sensitive.</Parameter>
            <Parameter Name="TABLE_SCHEMA">Name of the schema owning the table to be altered. If NULL then the current schema is used. Case sensitive.</Parameter>
            <Parameter Name="AFFECTED_SCHEMA">Name of the schema affected by this alteration. If NULL then the current schema is used. Case sensitive.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_WRAPPED" ElementId="#CBHFJJJC">
          <Description>Takes as input a single CREATE OR REPLACE statement that specifies creation of a PL/SQL package specification, package body, function, procedure, type specification or type body, generates a CREATE OR REPLACE statement with the PL/SQL source text obfuscated and executes the generated statement</Description>
          <Parameters>
            <Parameter Name="DDL">A CREATE OR REPLACE statement that specifies creation of a PL/SQL package specification, package body, function, procedure, type specification or type body</Parameter>
            <Parameter Name="LB">Lower bound for indices in the string table that specify the CREATE OR REPLACE statement</Parameter>
            <Parameter Name="UB">Upper bound for indices in the string table that specify the CREATE OR REPLACE statement.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IS_TRIGGER_FIRE_ONCE" ElementId="#BABHEEJI">
          <Description>Returns TRUE if the specified DML or DDL trigger is set to fire once. Otherwise, returns FALSE</Description>
          <Parameters>
            <Parameter Name="TRIG_OWNER">Schema of trigger</Parameter>
            <Parameter Name="TRIG_NAME">Name of trigger</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_TRIGGER_FIRING_PROPERTY" ElementId="#i997004">
          <Description>Sets the specified DML or DDL trigger's firing property</Description>
          <Parameters>
            <Parameter Name="TRIG_OWNER">Schema of the trigger to set</Parameter>
            <Parameter Name="TRIG_NAME">Name of the trigger to set</Parameter>
            <Parameter Name="FIRE_ONCE">If TRUE, the trigger is set to fire once. By default, the fire_once parameter is set to TRUE for DML and DDL triggers.If FALSE, the trigger is set to always fire unless apply_server_only property is set to TRUE, which overrides fire_once property setting.</Parameter>
            <Parameter Name="PROPERTY">DBMS_DDL.fire_once to set the fire_once property of the triggerDBMS_DDL.apply_server_only to indicate whether trigger fires only in the context of SQL apply processes maintaining a logical standby database or Streams apply processes</Parameter>
            <Parameter Name="SETTING">Value of property being set</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="WRAP" ElementId="#CBHGIDEG">
          <Description>Takes as input a CREATE OR REPLACE statement that specifies creation of a PL/SQL package specification, package body, function, procedure, type specification or type body and returns a CREATE OR REPLACE statement where the text of the PL/SQL unit has been obfuscated</Description>
          <Parameters>
            <Parameter Name="DDL">A CREATE OR REPLACE statement that specifies creation of a PL/SQL package specification, package body, function, procedure, type specification or type body</Parameter>
            <Parameter Name="LB">Lower bound for indices in the string table that specify the CREATE OR REPLACE statement</Parameter>
            <Parameter Name="UB">Upper bound for indices in the string table that specify the CREATE OR REPLACE statement.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_DEBUG" Url="http://docs.oracle.com/database/121/ARPLS/d_debug.htm">
      <Description>DBMS_DEBUG is a PL/SQL interface to the PL/SQL debugger layer, Probe, in the Oracle server.</Description>
      <SubPrograms>
        <SubProgram Name="ATTACH_SESSION" ElementId="#i1007904">
          <Description>Notifies the debug session about the target debugID</Description>
          <Parameters>
            <Parameter Name="DEBUG_SESSION_ID">Debug ID from a call to INITIALIZE in target session</Parameter>
            <Parameter Name="DIAGNOSTICS">Generate diagnostic output if nonzero</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CONTINUE" ElementId="#i1007908">
          <Description>Continues execution of the target program</Description>
          <Parameters>
            <Parameter Name="RUN_INFO">Information about the state of the program</Parameter>
            <Parameter Name="BREAKFLAGS">Mask of events that are of interest (see "Breakflags" )</Parameter>
            <Parameter Name="INFO_REQUESTED">Which information should be returned in run_info when the program stops (see "Information Flags")</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DEBUG_OFF" ElementId="#CEGCBFAE">
          <Description>Turns debug-mode off</Description>
        </SubProgram>
        <SubProgram Name="DEBUG_ON" ElementId="#i1008030">
          <Description>Turns debug-mode on</Description>
          <Parameters>
            <Parameter Name="NO_CLIENT_SIDE_PLSQL_ENGINE">Should be left to its default value unless the debugging session is taking place from a client-side PL/SQL engine</Parameter>
            <Parameter Name="IMMEDIATE">If this is TRUE, then the interpreter immediately switches itself into debug-mode, instead of continuing in regular mode for the duration of the call.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_BREAKPOINT" ElementId="#i1008592">
          <Description>Deletes a breakpoint</Description>
          <Parameters>
            <Parameter Name="BREAKPOINT">Breakpoint number from a previous call to SET_BREAKPOINT</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_OER_BREAKPOINT" ElementId="#i1010019">
          <Description>Deletes an OER breakpoint</Description>
          <Parameters>
            <Parameter Name="OER">The OER (positive 4-byte number) to delete</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DETACH_SESSION" ElementId="#i1008597">
          <Description>Stops debugging the target program</Description>
        </SubProgram>
        <SubProgram Name="DISABLE_BREAKPOINT" ElementId="#i1008314">
          <Description>Disables a breakpoint</Description>
          <Parameters>
            <Parameter Name="BREAKPOINT">Breakpoint number from a previous call to SET_BREAKPOINT</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ENABLE_BREAKPOINT" ElementId="#i1008609">
          <Description>Activates an existing breakpoint</Description>
          <Parameters>
            <Parameter Name="BREAKPOINT">Breakpoint number from a previous call to SET_BREAKPOINT</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXECUTE" ElementId="#i1008769">
          <Description>Executes SQL or PL/SQL in the target session</Description>
          <Parameters>
            <Parameter Name="WHAT">SQL or PL/SQL source to execute</Parameter>
            <Parameter Name="FRAME#">The context in which to execute the code. Only -1 (global context) is supported at this time.</Parameter>
            <Parameter Name="BIND_RESULTS">Whether the source wants to bind to results in order to return values from the target session:0 = No1 = Yes</Parameter>
            <Parameter Name="RESULTS">Collection in which to place results, if bind_results is not 0</Parameter>
            <Parameter Name="ERRM">Error message, if an error occurred; otherwise, NULL</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_INDEXES" ElementId="#i1008834">
          <Description>Returns the set of indexes for an indexed table</Description>
          <Parameters>
            <Parameter Name="VARNAME">Name of the variable to get index information about</Parameter>
            <Parameter Name="FRAME#">Number of frame in which the variable or parameter resides; NULL for a package variable</Parameter>
            <Parameter Name="HANDLE">Package description, if object is a package variable</Parameter>
            <Parameter Name="ENTRIES">1-based table of the indexes: if non-NULL, then entries(1) contains the first index of the table, entries(2) contains the second index, and so on.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_MORE_SOURCE" ElementId="#i1012592">
          <Description>Provides additional source in the event of buffer overflow when using SHOW_SOURCE</Description>
          <Parameters>
            <Parameter Name="BUFFER">The buffer</Parameter>
            <Parameter Name="BUFLEN">The length of the buffer</Parameter>
            <Parameter Name="PIECE#">A value between 2 and the value returned in the parameter pieces from the call to the relevant version of the SHOW_SOURCE Procedures</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_LINE_MAP" ElementId="#i1012851">
          <Description>Returns information about line numbers in a program unit</Description>
          <Parameters>
            <Parameter Name="PROGRAM">A top-level program unit (procedure / package / function / package body, and so on). Its Namespace, Name, and Owner fields must be initialized, the remaining fields are ignored.</Parameter>
            <Parameter Name="MAXLINE">The largest source code line number in 'program'</Parameter>
            <Parameter Name="NUMBER_OF_ENTRY_POINTS">The number of subprograms in 'program'</Parameter>
            <Parameter Name="LINEMAP">A bitmap representing the executable lines of 'program'. If line number N is executable, bit number N MOD 8 will be set to 1 at linemap position N / 8. The length of returned linemap is either maxline divided by 8 (plus one if maxline MOD 8 is not zero) or 32767 in the unlikely case of maxline being larger than 32767 * 8.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_RUNTIME_INFO" ElementId="#i1010186">
          <Description>Returns information about the current program</Description>
          <Parameters>
            <Parameter Name="INFO_REQUESTED">Which information should be returned in run_info when the program stops (see "Information Flags")</Parameter>
            <Parameter Name="RUN_INFO">Information about the state of the program</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_TIMEOUT_BEHAVIOUR" ElementId="#i1012253">
          <Description>Returns the current timeout behavior</Description>
          <Parameters>
            <Parameter Name="OER">The OER (a 4-byte positive number)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_VALUE" ElementId="#i1009873">
          <Description>Gets a value from the currently-running program</Description>
          <Parameters>
            <Parameter Name="VARIABLE_NAME">Name of the variable or parameter</Parameter>
            <Parameter Name="FRAME#">Frame in which it lives; 0 means the current procedure</Parameter>
            <Parameter Name="SCALAR_VALUE">Value</Parameter>
            <Parameter Name="FORMAT">Optional date format to use, if meaningful</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="INITIALIZE" ElementId="#i1009075">
          <Description>Sets debugID in target session</Description>
          <Parameters>
            <Parameter Name="DEBUG_SESSION_ID">Name of session ID. If NULL, then a unique ID is generated.</Parameter>
            <Parameter Name="DIAGNOSTICS">Indicates whether to dump diagnostic output to the tracefile:0 = (default) no diagnostics1 = print diagnostics</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PING" ElementId="#i1009706">
          <Description>Pings the target session to prevent it from timing out</Description>
        </SubProgram>
        <SubProgram Name="PRINT_BACKTRACE" ElementId="#i1009079">
          <Description>Prints a stack backtrace</Description>
          <Parameters>
            <Parameter Name="LISTING">A formatted character buffer with embedded newlines</Parameter>
            <Parameter Name="BACKTRACE">1-based indexed table of backtrace entries. The currently-running procedure is the last entry in the table (that is, the frame numbering is the same as that used by GET_VALUE). Entry 1 is the oldest procedure on the stack.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PRINT_INSTANTIATIONS" ElementId="#i1009499">
          <Description>Prints a stack backtrace</Description>
          <Parameters>
            <Parameter Name="PKGS">The instantiated packages</Parameter>
            <Parameter Name="FLAGS">Bitmask of options:1 - show specs2 - show bodies4 - show local instantiations8 - show remote instantiations (NYI)16 - do a fast job. The routine does not test whether debug information exists or whether the libunit is shrink-wrapped.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PROBE_VERSION" ElementId="#CEGHCGCA">
          <Description>Returns the version number of DBMS_DEBUG on the server</Description>
          <Parameters>
            <Parameter Name="MAJOR">Major version number</Parameter>
            <Parameter Name="MINOR">Minor version number: increments as functionality is added</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SELF_CHECK" ElementId="#i1009302">
          <Description>Performs an internal consistency check</Description>
          <Parameters>
            <Parameter Name="TIMEOUT">The timeout to use for the communication test. Default is 60 seconds.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_BREAKPOINT" ElementId="#i1009232">
          <Description>Sets a breakpoint in a program unit</Description>
          <Parameters>
            <Parameter Name="PROGRAM">Information about the program unit in which the breakpoint is to be set. (In version 2.1 and later, the namespace, name, owner, and dblink may be set to NULL, in which case the breakpoint is placed in the currently-running program unit.)</Parameter>
            <Parameter Name="LINE#">Line at which the breakpoint is to be set</Parameter>
            <Parameter Name="BREAKPOINT#">On successful completion, contains the unique breakpoint number by which to refer to the breakpoint</Parameter>
            <Parameter Name="FUZZY">Only applicable if there is no executable code at the specified line:0 means return error_illegal_line1 means search forward for an adjacent line at which to place the breakpoint-1 means search backward for an adjacent line at which to place the breakpoint</Parameter>
            <Parameter Name="ITERATIONS">Number of times to wait before signalling this breakpoint</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_OER_BREAKPOINT" ElementId="#CEGCBGDG">
          <Description>Sets an OER breakpoint</Description>
          <Parameters>
            <Parameter Name="OER">The OER (positive 4-byte number) to set</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_TIMEOUT" ElementId="#i997626">
          <Description>Sets the timeout value</Description>
          <Parameters>
            <Parameter Name="TIMEOUT">The timeout to use for communication between the target and debug sessions</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_TIMEOUT_BEHAVIOUR" ElementId="#i1009844">
          <Description>Tells Probe what to do with the target session when a timeout occurs</Description>
          <Parameters>
            <Parameter Name="BEHAVIOUR - ONE OF THE FOLLOWING:"></Parameter>
            <Parameter Name="RETRY_ON_TIMEOUT">Retry. Timeout has no effect. This is like setting the timeout to an infinitely large value.</Parameter>
            <Parameter Name="CONTINUE_ON_TIMEOUT">Continue execution, using same event flags</Parameter>
            <Parameter Name="NODEBUG_ON_TIMEOUT">Turn debug-mode OFF (in other words, call debug_off) and continue execution. No more events will be generated by this target session unless it is re-initialized by calling debug_on.</Parameter>
            <Parameter Name="ABORT_ON_TIMEOUT">Continue execution, using the abort_execution flag, which should cause the program to terminate immediately. The session remains in debug-mode.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_VALUE" ElementId="#i1009439">
          <Description>Sets a value in the currently-running program</Description>
          <Parameters>
            <Parameter Name="FRAME#">Frame in which the value is to be set; 0 means the currently executing frame.</Parameter>
            <Parameter Name="HANDLE">Description of the package containing the variable</Parameter>
            <Parameter Name="ASSIGNMENT_STATEMENT">An assignment statement (which must be legal PL/SQL) to run in order to set the value. For example, 'x := 3;'.Only scalar values are supported in this release. The right side of the assignment statement must be a scalar.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SHOW_BREAKPOINTS" ElementId="#i1009505">
          <Description>Returns a listing of the current breakpoints</Description>
          <Parameters>
            <Parameter Name="LISTING">A formatted buffer (including newlines) of the breakpoints.Indexed table of breakpoint entries. The breakpoint number is indicated by the index into the table. Breakpoint numbers start at 1 and are reused when deleted.</Parameter>
            <Parameter Name="CODE_BREAKPOINTS">The indexed table of breakpoint entries, indexed by breakpoint number</Parameter>
            <Parameter Name="OER_BREAKPOINTS">The indexed table of OER breakpoints, indexed by OER</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SHOW_FRAME_SOURCE" ElementId="#i1010858">
          <Description>Fetches the frame source</Description>
          <Parameters>
            <Parameter Name="FIRST_LINE">Line number of first line to fetch (PL/SQL programs always start at line 1 and have no holes)</Parameter>
            <Parameter Name="LAST_LINE">Line number of last line to fetch. No lines are fetched past the end of the program.</Parameter>
            <Parameter Name="SOURCE">The resulting table, which may be indexed by line#</Parameter>
            <Parameter Name="FRAME_NUM">1-based frame number</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SHOW_SOURCE" ElementId="#i997814">
          <Description>Fetches program source</Description>
          <Parameters>
            <Parameter Name="FIRST_LINE">Line number of first line to fetch (PL/SQL programs always start at line 1 and have no holes)</Parameter>
            <Parameter Name="LAST_LINE">Line number of last line to fetch. No lines are fetched past the end of the program.</Parameter>
            <Parameter Name="SOURCE">The resulting table, which may be indexed by line#</Parameter>
            <Parameter Name="WINDOW">'Window' of lines (the number of lines around the current source line)</Parameter>
            <Parameter Name="PRINT_ARROW">Nonzero means to print an arrow before the current line</Parameter>
            <Parameter Name="BUFFER">Buffer in which to place the source listing</Parameter>
            <Parameter Name="BUFLEN">Length of buffer</Parameter>
            <Parameter Name="PIECES">Set to nonzero if not all the source could be placed into the given buffer</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SYNCHRONIZE" ElementId="#i1009620">
          <Description>Waits for program to start running</Description>
          <Parameters>
            <Parameter Name="RUN_INFO">Structure in which to write information about the program. By default, this includes information about what program is running and at which line execution has paused.</Parameter>
            <Parameter Name="INFO_REQUESTED">Optional bit-field in which to request information other than the default (which is info_getStackDepth + info_getLineInfo). 0 means that no information is requested at all (see "Information Flags").</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="TARGET_PROGRAM_RUNNING" ElementId="#i998630">
          <Description>Returns TRUE if the target session is currently executing a stored procedure, or FALSE if it is not</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_DEFER" Url="http://docs.oracle.com/database/121/ARPLS/d_defer.htm">
      <Description>DBMS_DEFER is the user interface to a replicated transactional deferred remote procedure call facility. Replicated applications use the calls in this interface to queue procedure calls for later transactional execution at remote nodes.</Description>
    </Package>
    <Package Name="DBMS_DEFER_QUERY" Url="http://docs.oracle.com/database/121/ARPLS/d_defque.htm">
      <Description>DBMS_DEFER_QUERY enables you to query the deferred transactions queue data that is not exposed through views.</Description>
    </Package>
    <Package Name="DBMS_DEFER_SYS" Url="http://docs.oracle.com/database/121/ARPLS/d_defsys.htm">
      <Description>DBMS_DEFER_SYS subprograms manage default replication node lists. This package is the system administrator interface to a replicated transactional deferred remote procedure call facility. Administrators and replication daemons can execute transactions queued for remote nodes using this facility, and administrators can control the nodes to which remote calls are destined.</Description>
    </Package>
    <Package Name="DBMS_DESCRIBE" Url="http://docs.oracle.com/database/121/ARPLS/d_descrb.htm">
      <Description>You can use the DBMS_DESCRIBE package to get information about a PL/SQL object. When you specify an object name, DBMS_DESCRIBE returns a set of indexed tables with the results. Full name translation is performed and security checking is also checked on the final object.</Description>
      <SubPrograms>
        <SubProgram Name="DESCRIBE_PROCEDURE" ElementId="#i1000288">
          <Description>Provides a brief description of a PL/SQL stored procedure</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_DG" Url="http://docs.oracle.com/database/121/ARPLS/d_dg.htm">
      <Description>The DBMS_DG package allows applications to notify the primary database or the fast-start failover target database in an Oracle Data Guard broker environment to initiate a fast-start failover when the application encounters a condition that warrants a failover.</Description>
    </Package>
    <Package Name="DBMS_DIMENSION" Url="http://docs.oracle.com/database/121/ARPLS/d_dimens.htm">
      <Description>DBMS_DIMENSION enables you to verify dimension relationships and provides an alternative to the Enterprise Manager Dimension Wizard for displaying a dimension definition.</Description>
      <SubPrograms>
        <SubProgram Name="DESCRIBE_DIMENSION" ElementId="#i999721">
          <Description>Prints out the definition of the input dimension, including dimension owner and name, levels, hierarchies, and attributes</Description>
        </SubProgram>
        <SubProgram Name="VALIDATE_DIMENSION" ElementId="#i998497">
          <Description>Verifies that the relationships specified in a dimension are correct</Description>
          <Parameters>
            <Parameter Name="DIMENSION">The owner and name of the dimension in the format of owner.name.</Parameter>
            <Parameter Name="INCREMENTAL">If TRUE, check only the new rows for tables of this dimension. If FALSE, check all the rows.</Parameter>
            <Parameter Name="CHECK_NULLS">If TRUE, then all level columns are verified to be non-null.If FALSE, this check is omitted. Specify FALSE when non-NULLness is guaranteed by other means, such as NOT NULL constraints.</Parameter>
            <Parameter Name="STATEMENT_ID">A client-supplied unique identifier to associate output rows with specific invocations of the procedure.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_DISTRIBUTED_TRUST_ADMIN" Url="http://docs.oracle.com/database/121/ARPLS/d_dist_trust_adm.htm">
      <Description>DBMS_DISTRIBUTED_TRUST_ADMIN procedures maintain the Trusted Servers List. Use these procedures to define whether a server is trusted. If a database is not trusted, Oracle refuses current user database links from the database.</Description>
      <SubPrograms>
        <SubProgram Name="ALLOW_ALL" ElementId="#i996808">
          <Description>Empties the list and inserts a row indicating that all servers should be trusted</Description>
        </SubProgram>
        <SubProgram Name="ALLOW_SERVER" ElementId="#i996816">
          <Description>Enables a specific server to be allowed access even though deny all is indicated in the list</Description>
          <Parameters>
            <Parameter Name="SERVER">Unique, fully-qualified name of the server to be trusted.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DENY_ALL" ElementId="#BJEJEDHI">
          <Description>Empties the list and inserts a row indicating that all servers should be untrusted</Description>
        </SubProgram>
        <SubProgram Name="DENY_SERVER" ElementId="#i996848">
          <Description>Enables a specific server to be denied access even though allow all is indicated in the list</Description>
          <Parameters>
            <Parameter Name="SERVER">Unique, fully-qualified name of the server to be untrusted.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_DNFS" Url="http://docs.oracle.com/database/121/ARPLS/d_dnfs.htm">
      <Description>The DBMS_DNFS package provides an interface to assists in creating a database using files in the backup set.</Description>
      <SubPrograms>
        <SubProgram Name="CLONEDB_RENAMEFILE" ElementId="#CJAIHDDG">
          <Description>Renames datafiles that were pointing to the backup set to the actual file name in cloned database.</Description>
          <Parameters>
            <Parameter Name="SRCFILE">Source datafile name in the control file</Parameter>
            <Parameter Name="DESTFILE">New datafile name</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_DST" Url="http://docs.oracle.com/database/121/ARPLS/d_dst.htm">
      <Description>The DBMS_DST package provides an interface to apply the Daylight Saving Time (DST) patch to the Timestamp with Time Zone datatype.</Description>
      <SubPrograms>
        <SubProgram Name="BEGIN_PREPARE" ElementId="#CIHDCBDI">
          <Description>Starts a prepare window</Description>
          <Parameters>
            <Parameter Name="NEW_VERSION">New timezone version to which the database is to be prepared to upgrade</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BEGIN_UPGRADE" ElementId="#CIHDDJDJ">
          <Description>Starts an upgrade window</Description>
          <Parameters>
            <Parameter Name="NEW_VERSION">New timezone version to which the database is to be upgraded</Parameter>
            <Parameter Name="ERROR_ON_OVERLAP_TIME">Boolean flag indicating whether to report errors on the 'overlap' time semantic conversion error. The default is TRUE. For more information about boundary cases, see Oracle Database SQL Language Reference.</Parameter>
            <Parameter Name="ERROR_ON_NONEXISTING_TIME">Boolean flag indicating whether to report errors on the 'non-existing' time semantic conversion error.The default is TRUE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_AFFECTED_TABLE" ElementId="#CIHFIHAF">
          <Description>Creates a table that has the schema shown in the comments for the FIND_AFFECTED_TABLES Procedure</Description>
          <Parameters>
            <Parameter Name="TABLE_NAME">Name of the table created</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_ERROR_TABLE" ElementId="#CIHIDDIB">
          <Description>Creates a log error table</Description>
          <Parameters>
            <Parameter Name="TABLE_NAME">Name of the table created</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_TRIGGER_TABLE" ElementId="#CIHJHFDD">
          <Description>Creates a table that is used to record active triggers disabled before performing upgrade on the table, having not been enabled due to fatal failure during the upgrading process</Description>
          <Parameters>
            <Parameter Name="TABLE_NAME">Name of table to be created</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="END_PREPARE" ElementId="#CIHDEJDD">
          <Description>Ends a prepare window</Description>
        </SubProgram>
        <SubProgram Name="END_UPGRADE" ElementId="#CIHEACDD">
          <Description>Ends an upgrade window</Description>
          <Parameters>
            <Parameter Name="NUM_OF_FAILURES">Number of tables that fail to complete</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="FIND_AFFECTED_TABLES" ElementId="#CIHHFEBD">
          <Description>Finds all the tables that have affected TSTZ data due to the new timezone version</Description>
          <Parameters>
            <Parameter Name="AFFECTED_TABLES">Name of table with the following schema:The table can be created with the CREATE_AFFECTED_TABLE Procedure.</Parameter>
            <Parameter Name="LOG_ERRORS">Boolean flag indicating whether to log errors during upgrade. If FALSE, no error is logged into the log_errors_table after aborting conversion of the current table. If TRUE, the error is logged to the log_errors_table.The default is FALSE.</Parameter>
            <Parameter Name="LOG_ERRORS_TABLE">Table name with the following schema:The table can be created with the CREATE_ERROR_TABLE Procedure. The rid column records the rowids of the offending rows, and the error_number column records the corresponding error number.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UPGRADE_DATABASE" ElementId="#CIHJEIJC">
          <Description>Upgrades all tables in the database that have one or more columns defined on the TSTZ type, or an ADT containing the TSTZ type</Description>
          <Parameters>
            <Parameter Name="NUM_OF_FAILURES">Number of tables that fail to complete</Parameter>
            <Parameter Name="UPGRADE_DATA">Boolean flag indicating whether to convert TSTZ data using the new Time Zone patch File (TRUE), or to leave it unconverted (FALSE).The default is TRUE.</Parameter>
            <Parameter Name="PARALLEL">Boolean flag indicating whether to convert tables using PDML (Parallel DML) or Serial DML.The default is FALSE.</Parameter>
            <Parameter Name="CONTINUE_AFTER_ERRORS">Boolean flag indicating whether to continue after upgrade fails on the current table.The default is TRUE.</Parameter>
            <Parameter Name="LOG_ERRORS">Boolean flag indicating whether to log errors during upgrade. If FALSE, no error is logged into the log_errors_table after aborting conversion of the current table. If TRUE, errors are logged to the log_errors_table.The default is FALSE.</Parameter>
            <Parameter Name="LOG_ERRORS_TABLE">Table name with the following schema:The table can be created with the CREATE_ERROR_TABLE Procedure. The rid column records the rowids of the offending rows, and the error_number column records the corresponding error number.</Parameter>
            <Parameter Name="ERROR_ON_OVERLAP_TIME">Boolean flag indicating whether to report errors on the 'overlap' time semantic conversion error.The default is TRUE.</Parameter>
            <Parameter Name="ERROR_ON_NONEXISTING_TIME">Boolean flag indicating whether to report errors on the 'non-existing' time semantic conversion error.The default is TRUE.</Parameter>
            <Parameter Name="LOG_TRIGGERS_TABLE">Table to log triggers which are disabled before upgrade, having not been enabled due to a fatal failure when performing an upgrade</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UPGRADE_SCHEMA" ElementId="#CIHBIJDB">
          <Description>Upgrades tables in a specified list of schemas that has one or more columns defined on the TSTZ type, or an ADT containing the TSTZ type</Description>
          <Parameters>
            <Parameter Name="NUM_OF_FAILURES">Number of tables that fail to complete</Parameter>
            <Parameter Name="SCHEMA_LIST">Schema name list (comma separated strings)</Parameter>
            <Parameter Name="UPGRADE_DATA">Boolean flag indicating whether to convert TSTZ data using the new Time Zone patch File (TRUE) or to leave unconverted (FALSE).The default is TRUE.</Parameter>
            <Parameter Name="PARALLEL">Boolean flag indicating whether to convert tables using PDML (Parallel DML) or Serial DML.The default is FALSE.</Parameter>
            <Parameter Name="CONTINUE_AFTER_ERRORS">Boolean flag indicating whether to continue after upgrade fails on the current table.The default is TRUE.</Parameter>
            <Parameter Name="LOG_ERRORS">Boolean flag indicating whether to log errors during upgrade. If FALSE, no error is logged into the log_errors_table after aborting conversion of the current table. If TRUE, the error is logged to the log_errors_table.The default is FALSE.</Parameter>
            <Parameter Name="LOG_ERRORS_TABLE">Table name with the following schema:The table can be created with the CREATE_ERROR_TABLE Procedure. The rid column records the rowids of the offending rows, and the error_number column records the corresponding error number.</Parameter>
            <Parameter Name="ERROR_ON_OVERLAP_TIME">Boolean flag indicating whether to report errors on the 'overlap' time semantic conversion error.The default is TRUE.</Parameter>
            <Parameter Name="ERROR_ON_NONEXISTING_TIME">Boolean flag indicating whether to report errors on the 'non-existing' time semantic conversion error.The default is TRUE.</Parameter>
            <Parameter Name="LOG_TRIGGERS_TABLE">Table to log triggers that are disabled before upgrade, having not been enabled due to a fatal failure when performing an upgrade</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UPGRADE_TABLE" ElementId="#CIHCEGHG">
          <Description>Upgrades a specified list of tables that has one or more columns defined on the TSTZ type or an ADT containing the TSTZ type</Description>
          <Parameters>
            <Parameter Name="NUM_OF_FAILURES">Number of tables that fail to complete</Parameter>
            <Parameter Name="TABLE_LIST">Table name list (comma separated strings)</Parameter>
            <Parameter Name="UPGRADE_DATA">Boolean flag indicating whether to convert TSTZ data using the new Time Zone patch File (TRUE), or to leave unconverted (FALSE).The default is TRUE.</Parameter>
            <Parameter Name="PARALLEL">Boolean flag indicating whether to convert tables using PDML (Parallel DML), or Serial DML.The default is FALSE.</Parameter>
            <Parameter Name="CONTINUE_AFTER_ERRORS">Boolean flag indicating whether to continue after upgrade fails on the current table.The default is TRUE.</Parameter>
            <Parameter Name="LOG_ERRORS">Boolean flag indicating whether to log errors during upgrade. If FALSE, no error is logged into the log_errors_table after aborting conversion of the current table. If TRUE, the error is logged to the log_errors_table.The default is FALSE.</Parameter>
            <Parameter Name="LOG_ERRORS_TABLE">Table name with the following schema:The table can be created with the CREATE_ERROR_TABLE Procedure. The rid parameter records the rowids of the offending rows and the corresponding error number.</Parameter>
            <Parameter Name="ERROR_ON_OVERLAP_TIME">Boolean flag indicating whether to report errors on the 'overlap' time semantic conversion error.The default is TRUE.</Parameter>
            <Parameter Name="ERROR_ON_NONEXISTING_TIME">Boolean flag indicating whether to report errors on the 'non-existing' time semantic conversion error.The default is TRUE.</Parameter>
            <Parameter Name="LOG_TRIGGERS_TABLE">Table to log triggers that are disabled before upgrade, having not been enabled due to a fatal failure when performing an upgrade</Parameter>
            <Parameter Name="ATOMIC_UPGRADE">Boolean flag indicating whether to convert the listed tables atomically (in a single transaction). If FALSE, each table is converted in its own transaction.The default is FALSE.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_EDITIONS_UTILITIES" Url="http://docs.oracle.com/database/121/ARPLS/d_editions_utl.htm">
      <Description>The DBMS_EDITIONS_UTILITIES package provides helper functions for edition-related operations.</Description>
      <SubPrograms>
        <SubProgram Name="SET_EDITIONING_VIEWS_READ_ONLY" ElementId="#CBHIBDCE">
          <Description>Given the schema name and table name, this procedure sets the corresponding editioning views in all editions to READ ONLY or READ/WRITE</Description>
          <Parameters>
            <Parameter Name="TABLE_NAME">Base table of the editioning views</Parameter>
            <Parameter Name="OWNER">Base table schema. The default (or NULL) is the current schema.</Parameter>
            <Parameter Name="READ_ONLY">TRUE to set the views to read-only; FALSE (or NULL) sets the views to READ/WRITE. Default is TRUE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_NULL_COLUMN_VALUES_TO_EXPR" ElementId="#CBHDIDEC">
          <Description>For use only during an edition-based redefinition (EBR) exercise</Description>
          <Parameters>
            <Parameter Name="TABLE_NAME">A potentially schema-qualified table name</Parameter>
            <Parameter Name="COLUMN_NAME">Name of the column to be updated</Parameter>
            <Parameter Name="EXPRESSION">An expression composed of columns in the same table, constants, and SQL functions</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_EPG" Url="http://docs.oracle.com/database/121/ARPLS/d_epg.htm">
      <Description>The DBMS_EPG package implements the embedded PL/SQL gateway that enables a Web browser to invoke a PL/SQL stored procedure through an HTTP listener.</Description>
      <SubPrograms>
        <SubProgram Name="AUTHORIZE_DAD" ElementId="#BEJDCHGA">
          <Description>authorizes a DAD to invoke procedures and access document tables with a database user's privileges</Description>
          <Parameters>
            <Parameter Name="DAD_NAME">The name of the DAD to create</Parameter>
            <Parameter Name="USER">The user whose privileges to deauthorize. If use, the invoker is assumed.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_DAD" ElementId="#BEJJJGGJ">
          <Description>Creates a new DAD</Description>
          <Parameters>
            <Parameter Name="DAD_NAME">The name of the DAD to create</Parameter>
            <Parameter Name="PATH">The virtual path to which to map the DAD</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DEAUTHORIZE_DAD" ElementId="#BEJHGAIE">
          <Description>Deauthorizes a DAD with regard to invoking procedures and accessing document tables with a database user's privileges</Description>
          <Parameters>
            <Parameter Name="DAD_NAME">The name of the DAD for which to deauthorize use</Parameter>
            <Parameter Name="USER">The user whose privileges to deauthorize. If use, the invoker is assumed.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_DAD_ATTRIBUTE" ElementId="#BABHIEEA">
          <Description>Deletes a DAD attribute</Description>
          <Parameters>
            <Parameter Name="DAD_NAME">The name of the DAD for which to delete a DAD attribute</Parameter>
            <Parameter Name="ATTR_NAME">The name of the DAD attribute to delete</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_GLOBAL_ATTRIBUTE" ElementId="#BABGFJJG">
          <Description>Deletes a global attribute</Description>
          <Parameters>
            <Parameter Name="ATTR_NAME">The global attribute to delete</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_DAD" ElementId="#BABDIGII">
          <Description>Drops a DAD</Description>
          <Parameters>
            <Parameter Name="DAD_NAME">The DAD to drop</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_ALL_DAD_ATTRIBUTES" ElementId="#BABIHBGD">
          <Description>Retrieves all the attributes of a DAD.</Description>
          <Parameters>
            <Parameter Name="DAD_NAME">The name of the DAD</Parameter>
            <Parameter Name="ATTR_NAMES">The attribute names</Parameter>
            <Parameter Name="ATTR_VALUES">The attribute values</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_ALL_DAD_MAPPINGS" ElementId="#BABGEIBJ">
          <Description>Retrieves all virtual paths to which the specified DAD is mapped.</Description>
          <Parameters>
            <Parameter Name="DAD_NAME">The name of the DAD</Parameter>
            <Parameter Name="PATHS">The virtual paths to which h the DAD is mapped</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_ALL_GLOBAL_ATTRIBUTES" ElementId="#BABEFDAC">
          <Description>Retrieves all global attributes and values</Description>
          <Parameters>
            <Parameter Name="ATTR_NAME">The global attribute names</Parameter>
            <Parameter Name="ATTR_VALUES">The values of the global attributes</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_DAD_ATTRIBUTE" ElementId="#BABDEJAD">
          <Description>Retrieves the value of a DAD attribute</Description>
          <Parameters>
            <Parameter Name="DAD_NAME">The name of the DAD for which to delete an attribute</Parameter>
            <Parameter Name="ATTR_NAME">The name of the attribute to delete</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_DAD_LIST" ElementId="#BABJDDEB">
          <Description>Retrieves a list of all DADs for an Embedded Gateway instance.</Description>
          <Parameters>
            <Parameter Name="DAD_NAMES">The list of all DADs</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_GLOBAL_ATTRIBUTE" ElementId="#BABJEFDC">
          <Description>Retrieves the value of a global attribute</Description>
          <Parameters>
            <Parameter Name="ATTR_NAME">The global attribute to retrieve</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MAP_DAD" ElementId="#BABJJBIB">
          <Description>Maps a DAD to the specified virtual path.</Description>
          <Parameters>
            <Parameter Name="DAD_NAME">The name of the DAD to map</Parameter>
            <Parameter Name="PATH">The virtual path to map</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_DAD_ATTRIBUTE" ElementId="#BABFFDEH">
          <Description>Sets the value for a DAD</Description>
          <Parameters>
            <Parameter Name="DAD_NAME">The name of the DAD for which to set the attribute</Parameter>
            <Parameter Name="ATTR_NAME">The name of the attribute to set</Parameter>
            <Parameter Name="ATTR_VALUE">The attribute value to set</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_GLOBAL_ATTRIBUTE" ElementId="#BABGCCJJ">
          <Description>Sets the value of a global attribute</Description>
          <Parameters>
            <Parameter Name="ATTR_NAME">The global attribute to set</Parameter>
            <Parameter Name="ATTR_VALUE">The attribute value to set</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UNMAP_DAD" ElementId="#BABEICIC">
          <Description>Unmaps a DAD from the specified virtual path</Description>
          <Parameters>
            <Parameter Name="DAD_NAME">The name of the DAD to unmap</Parameter>
            <Parameter Name="PATH">The virtual path to unmap</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_ERRLOG" Url="http://docs.oracle.com/database/121/ARPLS/d_errlog.htm">
      <Description>The DBMS_ERRLOG package provides a procedure that enables you to create an error logging table so that DML operations can continue after encountering errors rather than abort and roll back. This enables you to save time and system resources.</Description>
      <SubPrograms>
        <SubProgram Name="CREATE_ERROR_LOG" ElementId="#CEGBBABI">
          <Description>Creates the error logging table used in DML error logging</Description>
          <Parameters>
            <Parameter Name="DML_TABLE_NAME">The name of the DML table to base the error logging table on. The name can be fully qualified (for example, emp, scott.emp, "EMP", "SCOTT"."EMP"). If a name component is enclosed in double quotes, it will not be upper cased.</Parameter>
            <Parameter Name="ERR_LOG_TABLE_NAME">The name of the error logging table you will create.The default is the first 25 characters in the name of the DML table prefixed with 'ERR$_'. Examples are the following:dml_table_name: 'EMP', err_log_table_name: 'ERR$_EMP'dml_table_name: '"Emp2"', err_log_table_name: 'ERR$_Emp2'</Parameter>
            <Parameter Name="ERR_LOG_TABLE_OWNER">The name of the owner of the error logging table. You can specify the owner in dml_table_name. Otherwise, the schema of the current connected user is used.</Parameter>
            <Parameter Name="ERR_LOG_TABLE_SPACE">The tablespace the error logging table will be created in. If not specified, the default tablespace for the user owning the DML error logging table will be used.</Parameter>
            <Parameter Name="SKIP_UNSUPPORTED">When set to TRUE, column types that are not supported by error logging will be skipped over and not added to the error logging table.When set to FALSE, an unsupported column type will cause the procedure to terminate.The default is FALSE.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_FGA" Url="http://docs.oracle.com/database/121/ARPLS/d_fga.htm">
      <Description>The DBMS_FGA package provides fine-grained security functions.</Description>
      <SubPrograms>
        <SubProgram Name="ADD_POLICY" ElementId="#CDEIECAG">
          <Description>Creates an audit policy using the supplied predicate as the audit condition</Description>
          <Parameters>
            <Parameter Name="OBJECT_SCHEMA">Schema of the object to be audited. If NULL, the current log-on user schema is assumed.</Parameter>
            <Parameter Name="OBJECT_NAME">Name of the object to be audited</Parameter>
            <Parameter Name="POLICY_NAME">Unique name of the policy</Parameter>
            <Parameter Name="AUDIT_CONDITION">A condition in a row that indicates a monitoring condition. NULL is allowed and acts as TRUE.</Parameter>
            <Parameter Name="AUDIT_COLUMN">Columns to be checked for access. These can include OLS hidden columns or object type columns. The default, NULL, causes audit if any column is accessed or affected.</Parameter>
            <Parameter Name="HANDLER_SCHEMA">Schema that contains the event handler. The default, NULL, causes the current schema to be used.</Parameter>
            <Parameter Name="HANDLER_MODULE">Function name of the event handler; includes the package name if necessary. This function is invoked only after the first row that matches the audit condition in the query is processed. If the procedure fails with an exception, the user SQL statement will fail as well.</Parameter>
            <Parameter Name="ENABLE">Enables the policy if TRUE, which is the default</Parameter>
            <Parameter Name="STATEMENT_TYPES">SQL statement types to which this policy is applicable: INSERT, UPDATE, DELETE, or SELECT only</Parameter>
            <Parameter Name="AUDIT_TRAIL">In an environment that has not yet migrated to unified auditing, the destination (DB or XML) of fine-grained audit records. Also specifies whether to populate the LSQLTEXT and LSQLBIND columns in the FGA_LOG$ system table.</Parameter>
            <Parameter Name="AUDIT_COLUMN_OPTS">Establishes whether a statement is audited when the query references any column specified in the audit_column parameter or only when all such columns are referenced</Parameter>
            <Parameter Name="POLICY_OWNER">User who owns the fine-grained auditing policy. However, this setting is not a user-supplied argument. The Oracle Data Pump client uses this setting internally to recreate the fine-grained audit policies appropriately.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DISABLE_POLICY" ElementId="#i1011920">
          <Description>Disables an audit policy</Description>
          <Parameters>
            <Parameter Name="OBJECT_SCHEMA">Schema of the object to be audited. If NULL, the current log-on user schema is assumed.</Parameter>
            <Parameter Name="OBJECT_NAME">Name of the object to be audited</Parameter>
            <Parameter Name="POLICY_NAME">Unique name of the policy</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_POLICY" ElementId="#i1011851">
          <Description>Drops an audit policy</Description>
          <Parameters>
            <Parameter Name="OBJECT_SCHEMA">Schema of the object to be audited. If NULL, the current log-on user schema is assumed.</Parameter>
            <Parameter Name="OBJECT_NAME">Name of the object to be audited</Parameter>
            <Parameter Name="POLICY_NAME">Unique name of the policy</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ENABLE_POLICY" ElementId="#i1011884">
          <Description>Enables an audit policy</Description>
          <Parameters>
            <Parameter Name="OBJECT_SCHEMA">Schema of the object to be audited. If NULL, the current log-on user schema is assumed.</Parameter>
            <Parameter Name="OBJECT_NAME">Name of the object to be audited</Parameter>
            <Parameter Name="POLICY_NAME">Unique name of the policy</Parameter>
            <Parameter Name="ENABLE">Defaults to TRUE to enable the policy</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_FILE_GROUP" Url="http://docs.oracle.com/database/121/ARPLS/d_filgrp.htm">
      <Description>The DBMS_FILE_GROUP package, one of a set of Oracle Streams packages, provides administrative interfaces for managing file groups, file group versions, and files. A file group repository is a collection of all of the file groups in a database and can contain multiple versions of a particular file group. You can use this package to create and manage file group repositories.</Description>
      <SubPrograms>
        <SubProgram Name="ADD_FILE" ElementId="#CEGIEAEC">
          <Description>Adds a file to a version of a file group</Description>
          <Parameters>
            <Parameter Name="FILE_GROUP_NAME">The name of the file group that contains the version, specified as [schema_name.]file_group_name. For example, if the schema is hq_dba and the file group name is sales_tbs, then specify hq_dba.sales_tbs. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="FILE_NAME">The name of the file being added to the version. Each file name in a version must be unique.</Parameter>
            <Parameter Name="FILE_TYPE">The file type. The following are reserved file types:If the file is a datafile, then enter the following:If the file is a Data Pump export dump file, then enter the following:Data Pump metadata is populated when a Data Pump export dump file is imported.If the file is a Data Pump export log file, then enter the following:If the file type is not one of the reserved file types, then either enter a text description of the file type, or specify NULL to omit a file type description.See "Constants" for more information about the reserved file types.</Parameter>
            <Parameter Name="FILE_DIRECTORY">The name of the directory object that corresponds to the directory containing the file.If NULL, then the procedure uses the default directory object for the version.If NULL and no default directory object exists for the version, then the procedure uses the default directory object for the file group.If NULL and no default directory object exists for the version or file group, then the procedure raises an error.</Parameter>
            <Parameter Name="VERSION_NAME">The name of the version to which the file is added.If a positive integer is specified as a VARCHAR2 value, then the integer is interpreted as a version number. For example, if '1' is specified, then the file is added to version 1 of the file group.If NULL, then the procedure uses the version with the latest creation time for the file group.</Parameter>
            <Parameter Name="COMMENTS">Comments about the file being added</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ALTER_FILE" ElementId="#CEGBCBEH">
          <Description>Alters a file in a version of a file group</Description>
          <Parameters>
            <Parameter Name="FILE_GROUP_NAME">The name of the file group that contains the version, specified as [schema_name.]file_group_name. For example, if the schema is hq_dba and the file group name is sales_tbs, then specify hq_dba.sales_tbs. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="FILE_NAME">The name of the file being altered in the version</Parameter>
            <Parameter Name="VERSION_NAME">The name of the version that contains the file being altered.If a positive integer is specified as a VARCHAR2 value, then the integer is interpreted as a version number. For example, if '1' is specified, then the file in version 1 of the file group is altered.If NULL, then the procedure uses the version with the latest creation time for the file group.</Parameter>
            <Parameter Name="NEW_FILE_NAME">The new name of the file if the file name is being changed. Each file name in a version must be unique.If NULL, then the procedure does not change the file name.Note: When a non-NULL new file name is specified, this procedure changes the metadata for the file name in the data dictionary, but it does not change the file name on the hard disk.</Parameter>
            <Parameter Name="NEW_FILE_DIRECTORY">The new name of the directory object that corresponds to the directory containing the file, if the directory object is being changed.If NULL, then the procedure does not change the directory object name.Note: When a non-NULL new file directory is specified, this procedure changes the metadata for the file directory in the data dictionary, but it does not change the file directory on the hard disk.</Parameter>
            <Parameter Name="NEW_FILE_TYPE">The file type. The following are reserved file types:If the file is a datafile, then enter the following:If the file is a Data Pump export dump file, then enter the following:If the file is a Data Pump export log file, then enter the following:If the file type is not one of the reserved file types, then enter a text description of the file type.If NULL, then the procedure does not change the file type.See Also: "Constants" for more information about the reserved file types.</Parameter>
            <Parameter Name="REMOVE_FILE_TYPE">If Y, then the procedure removes the file type. If Y and the new_file_type parameter is non-NULL, then the procedure raises an error.If N, then the procedure does not remove the file type.</Parameter>
            <Parameter Name="NEW_COMMENTS">New comments about the file being altered. If non-NULL, then the procedure replaces the existing comments with the specified comments.If NULL, then the procedure does not change the existing comments.</Parameter>
            <Parameter Name="REMOVE_COMMENTS">If Y, then the procedure removes the comments for the file. If Y and the new_comments parameter is non-NULL, then the procedure raises an error.If N, then the procedure does not change the existing comments.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ALTER_FILE_GROUP" ElementId="#CEGGBFDC">
          <Description>Alters a file group</Description>
          <Parameters>
            <Parameter Name="FILE_GROUP_NAME">The name of the file group being altered, specified as [schema_name.]file_group_name. For example, if the schema is hq_dba and the file group name is sales_tbs, then specify hq_dba.sales_tbs. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="KEEP_FILES">If Y, then the files in the file group are retained on hard disk if the file group or a version of the file group is dropped or purged.If N, then the files in the file group are deleted from hard disk if the file group or a version of the file group is dropped or purged.If NULL, then this parameter is not changed.Note: If the file group is dropped because of a DROP USER CASCADE statement, then the setting of this parameter determines whether the files are dropped from the hard disk.</Parameter>
            <Parameter Name="MIN_VERSIONS">The minimum number of versions to retain. The specified value must be greater than or equal to 1.If NULL, then the procedure does not change the min_versions setting for the file group.</Parameter>
            <Parameter Name="MAX_VERSIONS">The maximum number of versions to retain. The specified value must be greater than or equal to the value specified for min_versions. When the number of versions exceeds the specified max_versions, the oldest version is purged.Specify DBMS_FILE_GROUP.INFINITE for no limit to the number of versions.If NULL, then the procedure does not change the max_versions setting for the file group.</Parameter>
            <Parameter Name="RETENTION_DAYS">The maximum number of days to retain a version. The specified value must be greater than or equal to 0 (zero). When the age of a version exceeds the specified retention_days and there are more versions than the number specified in min_versions, the version is purged. The age of a version is calculated by subtracting the creation time from the current time.A decimal value can specify a fraction of a day. For example, 1.25 specifies one day and six hours.Specify DBMS_FILE_GROUP.INFINITE for no limit to the number of days a version can exist.If NULL, then the procedure does not change the retention_days setting for the file group.</Parameter>
            <Parameter Name="NEW_DEFAULT_DIRECTORY">The default directory object used when files are added to a file group if no directory is specified when the files are added, and no default directory object is specified for the version.If NULL, then the procedure does not change the default directory.</Parameter>
            <Parameter Name="REMOVE_DEFAULT_DIRECTORY">If Y, then the procedure removes the default directory for the file group. If Y and the new_default_directory parameter is set to a non-NULL value, then the procedure raises an error.If N, then the procedure does not remove the default directory for the file group.</Parameter>
            <Parameter Name="NEW_COMMENTS">Comments about the file group. If non-NULL, then the new comments replace the existing comments for the file group.If NULL, then the procedure does not change the existing comments.</Parameter>
            <Parameter Name="REMOVE_COMMENTS">If Y, then the comments for the file group are removed. If Y and the new_comments parameter is set to a non-NULL value, then the procedure raises an error.If N, then the procedure does not change the comments for the file group.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ALTER_VERSION" ElementId="#CEGEDIIC">
          <Description>Alters a version of a file group</Description>
          <Parameters>
            <Parameter Name="FILE_GROUP_NAME">The name of the file group that contains the version, specified as [schema_name.]file_group_name. For example, if the schema is hq_dba and the file group name is sales_tbs, then specify hq_dba.sales_tbs. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="VERSION_NAME">The name of the version being altered.If a positive integer is specified as a VARCHAR2 value, then the integer is interpreted as a version number. For example, if '1' is specified, then version 1 of the file group is altered.If '*' is specified, then the procedure alters all versions, and the new_version_name parameter must be NULL.If NULL, then the procedure uses the version with the latest creation time for the file group.</Parameter>
            <Parameter Name="NEW_VERSION_NAME">The new name of the version. Do not specify a schema.The specified version name cannot be a positive integer or an asterisk ('*').If NULL, then the procedure does not change the version name.</Parameter>
            <Parameter Name="REMOVE_VERSION_NAME">If Y, then the procedure removes the version name. If the version name is removed, then the version number must be used to manage the version. If Y and the new_version_name parameter is set to a non-NULL value, then the procedure raises an error.If N, then the procedure does not remove the version name.</Parameter>
            <Parameter Name="NEW_DEFAULT_DIRECTORY">The default directory object used when files are added to a version if no directory is specified when the files are added.If NULL, then the procedure does not change the default directory.</Parameter>
            <Parameter Name="REMOVE_DEFAULT_DIRECTORY">If Y, then the procedure removes the default directory. If Y and the new_default_directory parameter is set to a non-NULL value, then the procedure raises an error.If N, then the procedure does not remove the default directory.</Parameter>
            <Parameter Name="NEW_COMMENTS">Comments about the version. If non-NULL, then the new comments replace the existing comments for the version.If NULL, then the procedure does not change the comments.</Parameter>
            <Parameter Name="REMOVE_COMMENTS">If Y, then the procedure removes the comments for the version. If Y and the new_comments parameter is set to a non-NULL value, then the procedure raises an error.If N, then the procedure does not remove the comments for the version.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_FILE_GROUP" ElementId="#CEGIEGAA">
          <Description>Creates a file group</Description>
          <Parameters>
            <Parameter Name="FILE_GROUP_NAME">The name of the file group, specified as [schema_name.]file_group_name. For example, if the schema is hq_dba and the file group name is sales_tbs, then specify hq_dba.sales_tbs. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="KEEP_FILES">If Y, then the files in the file group are retained on hard disk if the file group or a version of the file group is dropped or purged.If N, then the files in the file group are deleted from hard disk if the file group or a version of the file group is dropped or purged.Note: If the file group is dropped because of a DROP USER CASCADE statement, then the setting of this parameter determines whether the files are dropped from the hard disk.</Parameter>
            <Parameter Name="MIN_VERSIONS">The minimum number of versions to retain. The specified value must be greater than or equal to 1.</Parameter>
            <Parameter Name="MAX_VERSIONS">The maximum number of versions to retain. The specified value must be greater than or equal to the value specified for min_versions. When the number of versions exceeds the specified max_versions, the oldest version is purged.Specify DBMS_FILE_GROUP.INFINITE for no limit to the number of versions.</Parameter>
            <Parameter Name="RETENTION_DAYS">The maximum number of days to retain a version. The specified value must be greater than or equal to 0 (zero). When the age of a version exceeds the specified retention_days and there are more versions than the number specified in min_versions, the version is purged. The age of a version is calculated by subtracting the creation time from the current time.A decimal value can specify a fraction of a day. For example, 1.25 specifies one day and six hours.Specify DBMS_FILE_GROUP.INFINITE for no limit to the number of days a version can exist.</Parameter>
            <Parameter Name="DEFAULT_DIRECTORY">The default directory object used when files are added to a file group if no directory is specified when the files are added, and no default directory object is specified for the version.</Parameter>
            <Parameter Name="COMMENTS">Comments about the file group being created.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_VERSION" ElementId="#CEGFIDJJ">
          <Description>Creates a version of a file group</Description>
          <Parameters>
            <Parameter Name="FILE_GROUP_NAME">The name of the file group to which the new version is added, specified as [schema_name.]file_group_name. For example, if the schema is hq_dba and the file group name is sales_tbs, then specify hq_dba.sales_tbs. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="VERSION_NAME">The name of the version being created. Do not specify a schema.The specified version name cannot be a positive integer because, when a version is created, a version number is generated automatically. The specified version name cannot be an asterisk ('*').</Parameter>
            <Parameter Name="DEFAULT_DIRECTORY">The default directory object used when files are added to a version if no directory is specified when the files are added.</Parameter>
            <Parameter Name="COMMENTS">Comments about the version being created</Parameter>
            <Parameter Name="VERSION_OUT">If the version_name parameter is set to a non-NULL value, then this parameter contains the specified version name.If the version_name parameter is set to NULL, then this parameter contains the generated version number.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_FILE_GROUP" ElementId="#CEGIDAEJ">
          <Description>Drops a file group</Description>
          <Parameters>
            <Parameter Name="FILE_GROUP_NAME">The name of the file group being dropped, specified as [schema_name.]file_group_name. For example, if the schema is hq_dba and the file group name is sales_tbs, then specify hq_dba.sales_tbs. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="KEEP_FILES">If Y, then the procedure retains the files in the file group on hard disk.If N, then the procedure deletes the files in the file group from hard disk.If NULL, then the procedure uses the default keep files property of the file group.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_VERSION" ElementId="#CEGCBHJA">
          <Description>Drops a version of a file group</Description>
          <Parameters>
            <Parameter Name="FILE_GROUP_NAME">The name of the file group that contains the version, specified as [schema_name.]file_group_name. For example, if the schema is hq_dba and the file group name is sales_tbs, then specify hq_dba.sales_tbs. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="VERSION_NAME">The name of the version being dropped.If a positive integer is specified as a VARCHAR2 value, then the integer is interpreted as a version number. For example, if '1' is specified, then version 1 of the file group is dropped.If NULL, then the procedure uses the version with the oldest creation time for the file group.If '*', then the procedure drops all versions.</Parameter>
            <Parameter Name="KEEP_FILES">If Y, then the procedure retains the files in the version on hard disk.If N, then the procedure deletes the files in the version from hard disk.If NULL, then the procedure uses the default keep files property of the file group.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GRANT_OBJECT_PRIVILEGE" ElementId="#CEGCADHG">
          <Description>Grants object privileges on a file group to a user</Description>
          <Parameters>
            <Parameter Name="OBJECT_NAME">The name of the file group on which the privilege is granted, specified as [schema_name.]file_group_name. For example, if the schema is hq_dba and the file group name is sales_tbs, then specify hq_dba.sales_tbs. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="PRIVILEGE">The constant that specifies the privilege. See "Constants" for valid privileges.</Parameter>
            <Parameter Name="GRANTEE">The name of the user or role for which the privilege is granted. The specified user cannot be the owner of the object.</Parameter>
            <Parameter Name="GRANT_OPTION">If TRUE, then the specified user granted the specified privilege can grant this privilege to others.If FALSE, then the specified user granted the specified privilege cannot grant this privilege to others.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GRANT_SYSTEM_PRIVILEGE" ElementId="#CEGCCCAG">
          <Description>Grants system privileges for file group operations to a user</Description>
          <Parameters>
            <Parameter Name="PRIVILEGE">The constant that specifies the privilege. See "Constants" for valid privileges.</Parameter>
            <Parameter Name="GRANTEE">The name of the user or role for which the privilege is granted. The user who runs the procedure cannot be specified.</Parameter>
            <Parameter Name="GRANT_OPTION">If TRUE, then the specified user granted the specified privilege can grant this privilege to others.If FALSE, then the specified user granted the specified privilege cannot grant this privilege to others.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PURGE_FILE_GROUP" ElementId="#CEGDAFAE">
          <Description>Purges a file group using the file group's retention policy</Description>
        </SubProgram>
        <SubProgram Name="REMOVE_FILE" ElementId="#CEGCAHGA">
          <Description>Removes a file from a version of a file group</Description>
          <Parameters>
            <Parameter Name="FILE_GROUP_NAME">The name of the file group that contains the version, specified as [schema_name.]file_group_name. For example, if the schema is hq_dba and the file group name is sales_tbs, then specify hq_dba.sales_tbs. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="FILE_NAME">The name of the file being removed from the version</Parameter>
            <Parameter Name="VERSION_NAME">The name of the version from which the file is removed.If a positive integer is specified as a VARCHAR2 value, then the integer is interpreted as a version number. For example, if '1' is specified, then the file is removed from version 1 of the file group.If NULL, then the procedure uses the version with the latest creation time for the file group.If '*', then the procedure removes the file from all versions.</Parameter>
            <Parameter Name="KEEP_FILE">If Y, then the procedure retains the file on hard disk.If N, then the procedure deletes the file from hard disk.If NULL, then the procedure uses the default keep files property of the file group.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REVOKE_OBJECT_PRIVILEGE" ElementId="#CEGCDAJC">
          <Description>Revokes object privileges on a file group from a user</Description>
          <Parameters>
            <Parameter Name="OBJECT_NAME">The name of the file group on which the privilege is revoked, specified as [schema_name.]file_group_name. For example, if the schema is hq_dba and the file group name is sales_tbs, then specify hq_dba.sales_tbs. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="PRIVILEGE">The constant that specifies the privilege. See "Constants" for valid privileges.</Parameter>
            <Parameter Name="REVOKEE">The name of the user or role from which the privilege is revoked. The user who owns the object cannot be specified.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REVOKE_SYSTEM_PRIVILEGE" ElementId="#CEGCAIFG">
          <Description>Revokes system privileges for file group operations from a user</Description>
          <Parameters>
            <Parameter Name="PRIVILEGE">The constant that specifies the privilege. See "Constants" for valid privileges.</Parameter>
            <Parameter Name="REVOKEE">The name of the user or role from which the privilege is revoked. The user who runs the procedure cannot be specified.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_FILE_TRANSFER" Url="http://docs.oracle.com/database/121/ARPLS/d_ftran.htm">
      <Description>The DBMS_FILE_TRANSFER package provides procedures to copy a binary file within a database or to transfer a binary file between databases.</Description>
      <SubPrograms>
        <SubProgram Name="COPY_FILE" ElementId="#i998868">
          <Description>Reads a file from a source directory and creates a copy of it in a destination directory. The source and destination directories can both be in a local file system, or both be in an Automatic Storage Management (ASM) disk group, or between local file system and ASM with copying in either direction.</Description>
          <Parameters>
            <Parameter Name="SOURCE_DIRECTORY_OBJECT">The directory object that designates the source directory. The directory object must already exist. (You create directory objects with the CREATE DIRECTORY command).</Parameter>
            <Parameter Name="SOURCE_FILE_NAME">The name of the file to copy. This file must exist in the source directory.</Parameter>
            <Parameter Name="DESTINATION_DIRECTORY_OBJECT">The directory object that designates the destination directory. The directory object must already exist. If the destination is ASM, the directory object must designate either a disk group name (for example, +diskgroup1) or a directory created for alias names. In the case of a directory, the full path to the directory must be specified (for example: +diskgroup1/dbs/control).</Parameter>
            <Parameter Name="DESTINATION_FILE_NAME">The name to assign to the file in the destination directory. A file with the same name must not exist in the destination directory. If the destination is ASM:The file is given a fully qualified ASM filename and created in the appropriate directory (depending on the database name and file type)The file type tag assigned to the file is COPY_FILE The value of the destination_file_name argument becomes the file's alias name in the designated destination directoryThe file name can be followed by an ASM template name in parentheses. The file is then given the attributes specified by the template.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_FILE" ElementId="#i998902">
          <Description>Contacts a remote database to read a remote file and then creates a copy of the file in the local file system or ASM</Description>
          <Parameters>
            <Parameter Name="SOURCE_DIRECTORY_OBJECT">The directory object from which the file is copied at the source site. This directory object must exist at the source site.</Parameter>
            <Parameter Name="SOURCE_FILE_NAME">The name of the file that is copied in the remote file system. This file must exist in the remote file system in the directory associated with the source directory object.</Parameter>
            <Parameter Name="SOURCE_DATABASE">The name of a database link to the remote database where the file is located.</Parameter>
            <Parameter Name="DESTINATION_DIRECTORY_OBJECT">The directory object into which the file is placed at the destination site. This directory object must exist in the local file system.</Parameter>
            <Parameter Name="DESTINATION_FILE_NAME">The name of the file copied to the local file system. A file with the same name must not exist in the destination directory in the local file system.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PUT_FILE" ElementId="#i998903">
          <Description>Reads a local file or ASM and contacts a remote database to create a copy of the file in the remote file system</Description>
          <Parameters>
            <Parameter Name="SOURCE_DIRECTORY_OBJECT">The directory object from which the file is copied at the local source site. This directory object must exist at the source site.</Parameter>
            <Parameter Name="SOURCE_FILE_NAME">The name of the file that is copied from the local file system. This file must exist in the local file system in the directory associated with the source directory object.</Parameter>
            <Parameter Name="DESTINATION_DIRECTORY_OBJECT">The directory object into which the file is placed at the destination site. This directory object must exist in the remote file system.</Parameter>
            <Parameter Name="DESTINATION_FILE_NAME">The name of the file placed in the remote file system. A file with the same name must not exist in the destination directory in the remote file system.</Parameter>
            <Parameter Name="DESTINATION_DATABASE">The name of a database link to the remote database to which the file is copied.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_FLASHBACK" Url="http://docs.oracle.com/database/121/ARPLS/d_flashb.htm">
      <Description>Using DBMS_FLASHBACK, you can flash back to a version of the database at a specified time or a specified system change number (SCN).</Description>
      <SubPrograms>
        <SubProgram Name="DISABLE" ElementId="#i999219">
          <Description>Disables the Flashback mode for the entire session</Description>
        </SubProgram>
        <SubProgram Name="ENABLE_AT_SYSTEM_CHANGE_NUMBER" ElementId="#BGBJEJGF">
          <Description>Enables Flashback for the entire session. Takes an SCN as an Oracle number and sets the session snapshot to the specified number. Inside the Flashback mode, all queries return data consistent as of the specified wall-clock time or SCN</Description>
          <Parameters>
            <Parameter Name="QUERY_SCN">The system change number (SCN), a version number for the database that is incremented on every transaction commit.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ENABLE_AT_TIME" ElementId="#i999213">
          <Description>Enables Flashback for the entire session. The snapshot time is set to the SCN that most closely matches the time specified in query_time</Description>
          <Parameters>
            <Parameter Name="QUERY_TIME">This is an input parameter of type TIMESTAMP. A time stamp can be specified in the following ways:Using the TIMESTAMP constructorUse the Globalization Support (NLS) format and supply a string. The format depends on the Globalization Support settings.Using the TO_TIMESTAMP function:You provide the format you want to use. This example shows the TO_TIMESTAMP function for February 12, 2001, 2:35 PM.If the time is omitted from query time, it defaults to the beginning of the day, that is, 12:00 A.M.Note that if the query time contains a time zone, the time zone information is truncated.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_SYSTEM_CHANGE_NUMBER" ElementId="#i997043">
          <Description>Returns the current SCN as an Oracle number. You can use the SCN to store specific snapshots</Description>
        </SubProgram>
        <SubProgram Name="TRANSACTION_BACKOUT" ElementId="#CHDEAIFF">
          <Description>Provides the mechanism to back out a transaction</Description>
          <Parameters>
            <Parameter Name="NUMTXNS">Number of transactions passed as input</Parameter>
            <Parameter Name="XIDS">List of transaction IDs in the form of an array</Parameter>
            <Parameter Name="TXNNAMES">List of transaction names in the form of an array</Parameter>
            <Parameter Name="OPTIONS">Back out dependent transactions:NOCASCADE - No dependency is expected. If a dependency is found, this raises an error, with the first dependent transaction provided in the report.NOCASCADE_FORCE - The user forcibly backs out the given transactions without considering the dependent transactions. The RDBMS executes the UNDO SQL for the given transactions in reverse order of their commit times. If no constraints break, and the result is satisfactory, the user can either COMMIT the changes or else ROLL BACK.NONCONFLICT_ONLY - This option lets the user back out the changes to the nonconflicting rows of the given transactions. Note that a transaction dependency can happen due to a row conflict through either WAW or primary/unique key constraints. If the user chooses to back out only the nonconflicting rows, this does not cause any problem with database consistency, although transaction atomicity is lost. As this is a recovery operation, the user can correct the data.CASCADE - This completely removes the given transactions including their dependents in a post order fashion (reverse order of commit times).</Parameter>
            <Parameter Name="TIMEHINT">Time hint on the start of the transaction</Parameter>
            <Parameter Name="SCNHINT">SCN hint on the start of the transaction</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_FLASHBACK_ARCHIVE" Url="http://docs.oracle.com/database/121/ARPLS/d_flashb_archive.htm">
      <Description>The DBMS_FLASHBACK_ARCHIVE package contains procedures for performing various tasks such as:</Description>
      <SubPrograms>
        <SubProgram Name="ADD_TABLE_TO_APPLICATION" ElementId="#CHDGHBED">
          <Description>Takes an application name and adds a table to the application as a security table</Description>
          <Parameters>
            <Parameter Name="APPLICATION_NAME">Name of the application for which a table has been added as a security table</Parameter>
            <Parameter Name="TABLE_NAME">Name of the table to add as a security table for the given application</Parameter>
            <Parameter Name="SCHEMA_NAME">Name of the schema containing the desired table. If no schema name is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_TEMP_HISTORY_TABLE" ElementId="#CHDDGIEF">
          <Description>Creates a table called TEMP_HISTORY with the correct definition in schema</Description>
          <Parameters>
            <Parameter Name="OWNER_NAME">Schema of the Flashback Data Archive-enabled table</Parameter>
            <Parameter Name="TABLE_NAME">Name of the Flashback Data Archive-enabled table</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DISABLE_APPLICATION" ElementId="#CHDHADJH">
          <Description>Takes an application name and marks a table in it as a security table</Description>
          <Parameters>
            <Parameter Name="APPLICATION_NAME">Name of the application whose security tables will be disabled for Flashback Data Archive</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DISABLE_ASOF_VALID_TIME" ElementId="#CHDEDEHB">
          <Description>Disables session level valid-time flashback</Description>
        </SubProgram>
        <SubProgram Name="DISASSOCIATE_FBA" ElementId="#CHDGHBJD">
          <Description>Disassociates the given table from the flashback data archive</Description>
          <Parameters>
            <Parameter Name="OWNER_NAME">Schema of the Flashback Data Archive enabled base table</Parameter>
            <Parameter Name="TABLE_NAME">Name of the Flashback Data Archive enabled base table</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_APPLICATION" ElementId="#CHDEFDJB">
          <Description>Takes an application name and removes it from the list of applications</Description>
          <Parameters>
            <Parameter Name="APPLICATION_NAME">Name of the application for which a table has been added as a security table</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ENABLE_APPLICATION" ElementId="#CHDDAAEA">
          <Description>Takes an application name and enables Flashback Data Archive on all the security tables for this application</Description>
          <Parameters>
            <Parameter Name="APPLICATION_NAME">Name of the application for which to enable Flashback Data Archive on all its security tables</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ENABLE_AT_VALID_TIME" ElementId="#CHDGEEIG">
          <Description>Enables session level valid time flashback</Description>
          <Parameters>
            <Parameter Name="LEVEL">Options:All - Sets the visibility of temporal data to the full table, which is the default temporal table visibilityCURRENT - Sets the visibility of temporal data to currently valid data within the valid time period at the session levelASOF - Sets the visibility of temporal data to data valid as of the given time as defined by the timestamp</Parameter>
            <Parameter Name="QUERY_TIME">Used only if level is ASOF. Data which is valid at this query_time will only be shown.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXTEND_MAPPINGS" ElementId="#CHDIAEBD">
          <Description>Extends time mappings to times in the past</Description>
        </SubProgram>
        <SubProgram Name="GET_SYS_CONTEXT" ElementId="#CHDFGCIG">
          <Description>Gets the context previously selected by the SET_CONTEXT_LEVEL Procedure</Description>
          <Parameters>
            <Parameter Name="XID">Transaction identifier is an opaque handle to a transaction obtained from the versions query</Parameter>
            <Parameter Name="NAMESPACE">Namespace</Parameter>
            <Parameter Name="PARAMETER">If undefined, the subprogram returns NULL</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IMPORT_HISTORY" ElementId="#CHDICIJI">
          <Description>Imports history from a table called TEMP_HISTORY in the given schema</Description>
          <Parameters>
            <Parameter Name="OWNER_NAME">Schema of the Flashback Data Archive-enabled table</Parameter>
            <Parameter Name="TABLE_NAME">Name of the Flashback Data Archive-enabled table</Parameter>
            <Parameter Name="TEMP_HISTORY_NAME">Optional temporary history table from which we import history data</Parameter>
            <Parameter Name="OPTIONS">One (or a combination) of constants (NODROP, NOCOMMIT, and NODELETE) to specify if we want to drop, commit changes of, or truncate the temporary history table</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LOCK_DOWN_APPLICATION" ElementId="#CHDJHJID">
          <Description>Takes an application name and makes all the security tables read-only. The group called SYSTEM cannot be locked</Description>
          <Parameters>
            <Parameter Name="APPLICATION_NAME">Name of the application for which a table has been added as a security table</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PURGE_CONTEXT" ElementId="#CHDIJFII">
          <Description>Purges the context to be saved selected by the SET_CONTEXT_LEVEL Procedure</Description>
        </SubProgram>
        <SubProgram Name="REASSOCIATE_FBA" ElementId="#CHDICBIH">
          <Description>Reassociates the given table with the flashback data archive</Description>
          <Parameters>
            <Parameter Name="OWNER_NAME">Schema of the Flashback Data Archive enabled base table</Parameter>
            <Parameter Name="TABLE_NAME">Name of the Flashback Data Archive enabled base table</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REGISTER_APPLICATION" ElementId="#CHDHHBAB">
          <Description>Takes an application name and optionally a Flashback Data Archive, and registers an application for database hardening</Description>
          <Parameters>
            <Parameter Name="APPLICATION_NAME">Name of the application which is being registered. The application SYSTEM is already registered when the package is created and is populated with list of tables needed for database hardening.</Parameter>
            <Parameter Name="FLASHBACK_ARCHIVE_NAME">Name of the Flashback Data Archive in which the historical data for the security tables for given application is stored. If no Flashback Data Archive is specified, the default Flashback Data Archive is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVE_TABLE_FROM_APPLICATION" ElementId="#CHDJGIBH">
          <Description>Takes an application name and marks a table in it as no longer being a security table</Description>
          <Parameters>
            <Parameter Name="APPLICATION_NAME">Name of the application for which a table is being removed from the list of security tables</Parameter>
            <Parameter Name="TABLE_NAME">Name of the table to mark as being no longer a security table for the given application</Parameter>
            <Parameter Name="SCHEMA_NAME">Name of the schema containing the desired table. If no schema name is specified, the current schema is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_CONTEXT_LEVEL" ElementId="#CHDHGAFE">
          <Description>Defines how much of the user context is to be saved</Description>
          <Parameters>
            <Parameter Name="LEVEL">Depending on how much of the user context needs to be saved:ALL - the entire SYS_CONTEXTTYPICAL - the user ID, global user ID and the hostnameNONE - nothing</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_FREQUENT_ITEMSET" Url="http://docs.oracle.com/database/121/ARPLS/d_frqist.htm">
      <Description>The DBMS_FREQUENT_ITEMSET package enables frequent itemset counting. The two functions are identical except in the input cursor format difference.</Description>
      <SubPrograms>
        <SubProgram Name="FI_HORIZONTAL" ElementId="#i1000739">
          <Description>Counts all frequent itemsets given a cursor for input data which is in 'HORIZONTAL' row format, support threshold, minimum itemset length, maximum itemset length, items to be included, items to be excluded</Description>
          <Parameters>
            <Parameter Name="TRANX_CURSOR">The cursor parameter that the user will supply when calling the function. There is no limits on the number of returning columns.Each column of cursor represents an item. All columns of the cursor must be of the same datatype. The item id must be number or character type (for example, VARCHAR2(n)).</Parameter>
            <Parameter Name="SUPPORT_THRESHOLD">A fraction number of total transaction count. An itemset is termed "frequent" if [the number of transactions it occurs in] divided by [the total number of transactions] exceed the fraction. The parameter must be a NUMBER.</Parameter>
            <Parameter Name="ITEMSET_LENGTH_MIN">The minimum length for interested frequent itemset. The parameter must be a NUMBER between 1 and 20, inclusive.</Parameter>
            <Parameter Name="ITEMSET_LENGTH_MAX">The maximum length for interested frequent itemset. This parameter must be a NUMBER between 1 and 20, inclusive, and must not be less than itemset_length_min.</Parameter>
            <Parameter Name="INCLUDING_ITEMS">A cursor from which a list of items can be fetched. At least one item from the list must appear in frequent itemsets that are returned. The default is NULL.</Parameter>
            <Parameter Name="EXCLUDING_ITEMS">A cursor from which a list of items can be fetched. No item from the list can appear in frequent itemsets that are returned.The default is NULL.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="FI_TRANSACTIONAL" ElementId="#BHAHCCDB">
          <Description>Counts all frequent itemsets given a cursor for input data which is in 'TRANSACTIONAL' row format, support threshold, minimum itemset length, maximum itemset length, items to be included, items to be excluded</Description>
          <Parameters>
            <Parameter Name="TRANX_CURSOR">The cursor parameter that the user will supply when calling the function. It should return two columns in its returning row, the first column being the transaction id, the second column being the item id. The item id must be number or character type (for example, VARCHAR2(n)).</Parameter>
            <Parameter Name="SUPPORT_THRESHOLD">A fraction number of total transaction count. An itemset is termed "frequent" if [the number of transactions it occurs in] divided by [the total number of transactions] exceed the fraction. The parameter must be a NUMBER.</Parameter>
            <Parameter Name="ITEMSET_LENGTH_MIN">The minimum length for interested frequent itemset. The parameter must be a NUMBER between 1 and 20, inclusive.</Parameter>
            <Parameter Name="ITEMSET_LENGTH_MAX">The maximum length for interested frequent itemset. This parameter must be a NUMBER between 1 and 20, inclusive, and must not be less than itemset_length_min.</Parameter>
            <Parameter Name="INCLUDING_ITEMS">A cursor from which a list of items can be fetched. At least one item from the list must appear in frequent itemsets that will be returned. The default is NULL.</Parameter>
            <Parameter Name="EXCLUDING_ITEMS">A cursor from which a list of items can be fetched. No item from the list can appear in frequent itemsets that will returned. The default is NULL.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_GOLDENGATE_AUTH" Url="http://docs.oracle.com/database/121/ARPLS/d_goldengate_auth.htm">
      <Description>The DBMS_GOLDENGATE_AUTH package provides subprograms for granting privileges to and revoking privileges from GoldenGate administrators.</Description>
      <SubPrograms>
        <SubProgram Name="GRANT_ADMIN_PRIVILEGE" ElementId="#CBHDIIEC">
          <Description>Either grants the privileges needed by a user to be a GoldenGate administrator directly, or generates a script that grants these privileges</Description>
          <Parameters>
            <Parameter Name="GRANTEE">The user to whom privileges are granted</Parameter>
            <Parameter Name="PRIVILEGE_TYPE">Specify one of the following values:CAPTURESpecifying CAPTURE grants the minimum privileges required by the user to administer Oracle GoldenGate integrated extract.APPLYSpecifying APPLY grants the minimum privileges required by the user to administer Oracle GoldenGate integrated replicat.*Specifying * grants the minimum privileges required by the user to administer Oracle GoldenGate integrated extract and Oracle GoldenGate integrated replicat.</Parameter>
            <Parameter Name="GRANT_SELECT_PRIVILEGES">If TRUE, then the procedure grants a set of privileges, including SELECT_CATALOG_ROLE, to the user. This setting is recommended for GoldenGate administrators.If FALSE, then the procedure does not grant the set of privileges to the user.SELECT_CATALOG_ROLE enables the user to select from the data dictionary.</Parameter>
            <Parameter Name="DO_GRANTS">If TRUE, then the procedure grants the privileges to the specified grantee directly, and adds the grantee to the DBA_GOLDENGATE_PRIVILEGES data dictionary view. If the user already has an entry in this data dictionary view, then the procedure does not make another entry, and no error is raised. If TRUE and any of the grant statements fails, then the procedure raises an error.If FALSE, then the procedure does not grant the privileges to the specified grantee directly, and does not add the grantee to the DBA_GOLDENGATE_PRIVILEGES data dictionary view. You specify FALSE when the procedure is generating a file that you will run later. If you specify FALSE and either the file_name or directory_name parameter is NULL, then the procedure raises an error.Note: It is recommended that do_grants be set to TRUE because many APIs check for the presence of a user in the DBA_GOLDENGATE_PRIVILEGES view, which will not be populated if do_grants is set to FALSE.</Parameter>
            <Parameter Name="FILE_NAME">The name of the file generated by the procedure. The file contains all of the statements that grant the privileges. If a file with the specified file name exists in the specified directory name, then the grant statements are appended to the existing file.If NULL, then the procedure does not generate a file.</Parameter>
            <Parameter Name="DIRECTORY_NAME">The directory into which the generated file is placed. The specified directory must be a directory object created using the SQL statement CREATE DIRECTORY. If you specify a directory, then the user who invokes the procedure must have the WRITE privilege on the directory object.If the file_name parameter is NULL, then this parameter is ignored, and the procedure does not generate a file.If NULL and the file_name parameter is non-NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="GRANT_OPTIONAL_PRIVILEGES">A comma-separated list of optional privileges to grant to the grantee. You can specify the following roles and privileges:XDBADMINDV_XSTREAM_ADMINDV_GOLDENGATE_ADMINEXEMPT_ACCESS_POLICYEXEMPT_REDACTION_POLICY</Parameter>
            <Parameter Name="CONTAINER">If CURRENT, then grants privileges to the grantee only in the container where the procedure is invoked. CURRENT can be specified while connected to the root or to a PDB.If ALL, then grants privileges to the grantee in all containers in the CDB and all PDBs created after the procedure is invoked. To specify ALL, the procedure must be invoked in the root by a common user.If a container name, then grants privileges to the grantee only in the specified container. To specify root, use CDB$ROOT while connected to the root. To specify a PDB, the procedure must be invoked in the root.Note: This parameter only applies to CDBs.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REVOKE_ADMIN_PRIVILEGE" ElementId="#CBHJIEGG">
          <Description>Either revokes GoldenGate administrator privileges from a user directly, or generates a script that revokes these privileges</Description>
          <Parameters>
            <Parameter Name="GRANTEE">The user from whom privileges are revoked</Parameter>
            <Parameter Name="PRIVILEGE_TYPE">Specify one of the following values:CAPTURESpecifying CAPTURE revokes the minimum privileges required by the user to administer Oracle GoldenGate integrated extract.APPLYSpecifying APPLY revokes the minimum privileges required by the user to administer Oracle GoldenGate integrated replicat.*Specifying * revokes the minimum privileges required by the user to administer Oracle GoldenGate integrated extract and Oracle GoldenGate integrated replicat.</Parameter>
            <Parameter Name="REVOKE_SELECT_PRIVILEGES">If TRUE, then the procedure revokes SELECT_CATALOG_ROLE from the user.If FALSE, then the procedure does not revoke SELECT_CATALOG_ROLE to the user.SELECT_CATALOG_ROLE enables the user to select from the data dictionary.</Parameter>
            <Parameter Name="DO_REVOKES">If TRUE, then the procedure revokes the privileges from the specified user directly, and removes the user from the DBA_XSTREAM_ADMINISTRATOR data dictionary view. If the user does not have a record in this data dictionary view, then the procedure does not remove a record from the view, and no error is raised. If TRUE and any of the revoke statements fails, then the procedure raises an error. A revoke statement fails if the user is not granted the privilege that is being revoked.If FALSE, then the procedure does not revoke the privileges from the specified user directly, and does not remove the user from the DBA_XSTREAM_ADMINISTRATOR data dictionary view.You specify FALSE when the procedure is generating a file that you will run later. If you specify FALSE and either the file_name or directory_name parameter is NULL, then the procedure does not raise an error.</Parameter>
            <Parameter Name="FILE_NAME">The name of the file generated by this procedure. The file contains all of the statements that revoke the privileges. If a file with the specified file name exists in the specified directory name, then the revoke statements are appended to the existing file.If NULL, then the procedure does not generate a file.</Parameter>
            <Parameter Name="DIRECTORY_NAME">The directory into which the generated file is placed. The specified directory must be a directory object created using the SQL statement CREATE DIRECTORY. If you specify a directory, then the user who invokes the procedure must have the WRITE privilege on the directory object.If the file_name parameter is NULL, then this parameter is ignored, and the procedure does not generate a file.If NULL and the file_name parameter is non-NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="REVOKE_OPTIONAL_PRIVILEGES">A comma-separated list of optional privileges to revoke from the grantee, such as the DV_XSTREAM_ADMIN and DV_GOLDENGATE_ADMIN privileges</Parameter>
            <Parameter Name="CONTAINER">If CURRENT, then revokes privileges from the grantee only in the container where the procedure is invoked. CURRENT can be specified while connected to the root or to a PDB.If ALL, then revokes privileges from the grantee in all containers in the CDB. To specify ALL, the procedure must be invoked in the root.If a container name, then revokes privileges from the grantee only in the specified container. To specify root, use CDB$ROOT while connected to the root. To specify a PDB, the procedure must be invoked in the root.Note: This parameter only applies to CDBs.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_HEAT_MAP" Url="http://docs.oracle.com/database/121/ARPLS/d_heat_map.htm">
      <Description>The DBMS_HEAT_MAP package provides an interface to externalize heatmaps at various levels of storage including block, extent, segment, object and tablespace. A second set of subprograms externalize the heatmaps materialized by the background for top N tablespaces.</Description>
      <SubPrograms>
        <SubProgram Name="BLOCK_HEAT_MAP" ElementId="#BEHDHBCB">
          <Description>Returns last modification time for each block in a table segment</Description>
          <Parameters>
            <Parameter Name="OWNER">Owner of the segment</Parameter>
            <Parameter Name="SEGMENT_NAME">Table name of a non-partitioned table or (sub)partition of partitioned table. Returns no rows when table name is specified for a partitioned table.</Parameter>
            <Parameter Name="PARTITION_NAME">Defaults to NULL. For a partitioned table, specify the partition or subpartition segment name.</Parameter>
            <Parameter Name="SORT_COLUMNID">ID of the column on which to sort the output. Valid values 1..9. Invalid values are ignored.</Parameter>
            <Parameter Name="SORT_ORDER">Defaults to NULL. Possible values: ASC, DESC</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXTENT_HEAT_MAP" ElementId="#BEHDDJCJ">
          <Description>Returns the extent level Heat Map statistics for a table segment</Description>
          <Parameters>
            <Parameter Name="OWNER">Owner of the segment</Parameter>
            <Parameter Name="SEGMENT_NAME">Table name of a non-partitioned table or (sub)partition of partitioned table. Returns no rows when table name is specified for a partitioned table.</Parameter>
            <Parameter Name="PARTITION_NAME">Defaults to NULL. For a partitioned table, specify the partition or subpartition segment name.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="OBJECT_HEAT_MAP" ElementId="#BEHEJIAG">
          <Description>Returns the minimum, maximum and average access times for all the segments belonging to the object</Description>
          <Parameters>
            <Parameter Name="OBJECT_OWNER">Tablespace containing the segment</Parameter>
            <Parameter Name="OBJECT_NAME">Segment header relative file number</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SEGMENT_HEAT_MAP" ElementId="#BEHHGFDB">
          <Description>Returns the heatmap attributes for the given segment</Description>
          <Parameters>
            <Parameter Name="TABLESPACE_ID">Tablespace containing the segment</Parameter>
            <Parameter Name="HEADER_FILE">Segment header relative file number</Parameter>
            <Parameter Name="HEADER_BLOCK">Segment header block number</Parameter>
            <Parameter Name="SEGMENT_OBJD">DATAOBJ of the segment</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="TABLESPACE_HEAT_MAP" ElementId="#BEHBDIDB">
          <Description>Returns the minimum, maximum and average access times for all the segments in the tablespace</Description>
          <Parameters>
            <Parameter Name="TABLESPACE_NAME">Name of the tablespace</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_HM" Url="http://docs.oracle.com/database/121/ARPLS/d_hm.htm">
      <Description>This package contains constants and procedure declarations for health check management. Health Monitor provides facilities to run a check store and retrieve the reports through DBMS_HM package</Description>
      <SubPrograms>
        <SubProgram Name="GET_RUN_REPORT" ElementId="#BABCGHIA">
          <Description>Returns the report for the specified checker run</Description>
          <Parameters>
            <Parameter Name="RUN_NAME">Name of the check's run</Parameter>
            <Parameter Name="TYPE">Report format type. Possible values are 'HTML', 'XML' and 'TEXT'. Default report type is 'TEXT'.</Parameter>
            <Parameter Name="LEVEL">Details of report, possible value are 'BASIC' and 'DETAIL'. Caution: Currently only 'BASIC' level is supported.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RUN_CHECK" ElementId="#BABHEFDC">
          <Description>Runs the specified checker with the given arguments</Description>
          <Parameters>
            <Parameter Name="CHECK_NAME">Name of the check to be invoked. Check names and their parameters can be accessed from the V$HM_CHECK and V$HM_CHECK_PARAM views. Users can run all checks which are not internal in nature: SELECT name FROM V$HM_CHECK WHERE INTERNAL_CHECK = 'N' retrieves the list of checks that can be run manually by users.</Parameter>
            <Parameter Name="RUN_NAME">Name with which external users can uniquely identify this check's run. If NULL value is passed, then HM creates a unique name and associates with this check's run.</Parameter>
            <Parameter Name="TIMEOUT">Maximum amount of time (in units of seconds), this checker run is allowed to run. HM will interrupt the run, if it the specified time elapses for the run. If NULL value is passed, HM doesn't impose any timeout limits on the run.</Parameter>
            <Parameter Name="INPUT_PARAMS">Input string: which consists of name, value pairs de-limited by a special character ';'.Example ('Data Block Integrity Check' invocation may take following type of input parameters.Input parameters BLC_DF_NUM and BLC_BL_NUM have values '1' and '23456' respectively.Every check will have well defined set of inputs associated with it. These Input parameters, their types, default values and descriptions can be obtained using V$HM_CHECK_PARAM view.Example: The following query gets the list of parameters, their default values and descriptions for a 'Data Block Integrity Check'</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_HPROF" Url="http://docs.oracle.com/database/121/ARPLS/d_hprof.htm">
      <Description>The DBMS_HPROF package provides an interface for profiling the execution of PL/SQL applications. It provides services for collecting the hierarchical profiler data, analyzing the raw profiler output and profiling information generation.</Description>
      <SubPrograms>
        <SubProgram Name="ANALYZE" ElementId="#BABECDHB">
          <Description>Analyzes the raw profiler output and produces hierarchical profiler information in database tables</Description>
          <Parameters>
            <Parameter Name="LOCATION">Name of a directory object. The raw profiler data file is read from the file system directory mapped to this directory object. Output files are also written to this directory.</Parameter>
            <Parameter Name="FILENAME">Name of the raw profiler data file to be analyzed. The file must exist in the directory specified by the location parameter.</Parameter>
            <Parameter Name="SUMMARY_MODE">By default (that is, when summary_mode is FALSE), the detailed analysis is done.When summary_mode is TRUE, only top-level summary information is generated into the database table.</Parameter>
            <Parameter Name="TRACE">Analyze only the subtrees rooted at the specified trace entry. By default (when trace is NULL), the analysis/reporting is generated for the entire run.The trace entry must be specified in a special quoted qualified format (including the schema name, module name &amp; function name) as in for example, '"SCOTT"."PKG"."FOO"' or '"".""."__plsql_vm"'. If multiple overloads exist for the specified name, all of them will be analyzed.</Parameter>
            <Parameter Name="SKIP">Used only when trace is specified.Analyze only the subtrees rooted at the specified trace, but ignore the first skip invocations to trace. The default value for skip is 0.</Parameter>
            <Parameter Name="COLLECT">Used only when trace is specified.Analyze collect number of invocations of traces (starting from skip+1'th invocation). By default only 1 invocation is collected.</Parameter>
            <Parameter Name="RUN_COMMENT">User-provided comment for this run</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="START_PROFILING" ElementId="#BABBJGHB">
          <Description>Starts hierarchical profiler data collection in the user's session</Description>
          <Parameters>
            <Parameter Name="LOCATION">Name of a directory object. The file system directory mapped to this directory object is where the raw profiler output is generated.</Parameter>
            <Parameter Name="FILENAME">Output filename for the raw profiler data. The file is created in the directory specified by the location parameter.</Parameter>
            <Parameter Name="MAX_DEPTH">By default (that is, when max_depth value is NULL) profile information is gathered for all functions irrespective of their call depth. When a non-NULL value is specified for max_depth, the profiler collects data only for functions up to a call depth level of max_depth.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="STOP_PROFILING" ElementId="#BABHDEHJ">
          <Description>Stops profiler data collection in the user's session.s</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_HS_PARALLEL" Url="http://docs.oracle.com/database/121/ARPLS/d_hsparallel.htm">
      <Description />
      <SubPrograms>
        <SubProgram Name="CREATE_OR_REPLACE_VIEW" ElementId="#BEIGDJCF">
          <Description>Creates (or replaces) a read-only view to be referenced for retrieving the data from a remote table in parallel.</Description>
        </SubProgram>
        <SubProgram Name="CREATE_TABLE_TEMPLATE" ElementId="#BEIDHDJA">
          <Description>Writes out a CREATE TABLE template based on information gathered from the remote table. You can use the information to add any optimal Oracle CREATE TABLE clauses.</Description>
        </SubProgram>
        <SubProgram Name="DROP_VIEW" ElementId="#BEIDJFGF">
          <Description>Drops the view and internal objects created by the CREATE_OR_REPLACE_VIEW procedure. If the view has not already been created by the CREATE_OR_REPLACE_VIEW procedure, an error message is returned.</Description>
        </SubProgram>
        <SubProgram Name="LOAD_TABLE" ElementId="#BEIIJCEG">
          <Description>Loads the data from a remote table to a local Oracle table in parallel. If the local Oracle table does not already exist, it is created automatically.</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_HS_PASSTHROUGH" Url="http://docs.oracle.com/database/121/ARPLS/d_hspass.htm">
      <Description>The DBMS_HS_PASSTHROUGH PL/SQL package allows you to send a statement directly to a non-Oracle system without being interpreted by the Oracle server. This can be useful if the non-Oracle system allows operations in statements for which there is no equivalent in Oracle.</Description>
      <SubPrograms>
        <SubProgram Name="BIND_INOUT_VARIABLE" ElementId="#i997192">
          <Description>Binds IN OUT bind variables</Description>
          <Parameters>
            <Parameter Name="C">Cursor associated with the passthrough SQL statement. Cursor must be opened and parsed, using the routines OPEN_CURSOR and PARSE respectively.</Parameter>
            <Parameter Name="P">Position of the bind variable in the SQL statement: Starts at 1.</Parameter>
            <Parameter Name="V">This value is used for two purposes:- To provide the IN value before the SQL statement is run.- To determine the size of the out value.</Parameter>
            <Parameter Name="N">(Optional) Name of the bind variable.For example, in SELECT * FROM emp WHERE ename=:ename, the position of the bind variable :ename is 1, the name is :ename. This parameter can be used if the non-Oracle system supports "named binds" instead of positional binds. Passing the position is still required.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BIND_INOUT_VARIABLE_RAW" ElementId="#i997273">
          <Description>Binds IN OUT bind variables of datatype RAW</Description>
          <Parameters>
            <Parameter Name="C">Cursor associated with the passthrough SQL statement. Cursor must be opened and parsed using the routines OPEN_CURSOR and PARSE respectively.</Parameter>
            <Parameter Name="P">Position of the bind variable in the SQL statement: Starts at 1.</Parameter>
            <Parameter Name="V">This value is used for two purposes:- To provide the IN value before the SQL statement is run.- To determine the size of the out value.</Parameter>
            <Parameter Name="N">(Optional) Name the bind variable.For example, in SELECT * FROM emp WHERE ename=:ename, the position of the bind variable :ename is 1, the name is :ename. This parameter can be used if the non-Oracle system supports "named binds" instead of positional binds. Passing the position is still required.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BIND_OUT_VARIABLE" ElementId="#BEIHAABB">
          <Description>Binds an OUT variable with a PL/SQL program variable</Description>
          <Parameters>
            <Parameter Name="C">Cursor associated with the passthrough SQL statement. Cursor must be opened and parsed, using the routines OPEN_CURSOR and PARSE respectively.</Parameter>
            <Parameter Name="P">Position of the bind variable in the SQL statement: Starts at 1.</Parameter>
            <Parameter Name="V">Variable in which the OUT bind variable stores its value. The package remembers only the "size" of the variable. After the SQL statement is run, you can use GET_VALUE to retrieve the value of the OUT parameter. The size of the retrieved value should not exceed the size of the parameter that was passed using BIND_OUT_VARIABLE.</Parameter>
            <Parameter Name="N">(Optional) Name of the bind variable.For example, in SELECT * FROM emp WHERE ename=:ename, the position of the bind variable :ename is 1, the name is :ename. This parameter can be used if the non-Oracle system supports "named binds" instead of positional binds. Passing the position is still required.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BIND_OUT_VARIABLE_RAW" ElementId="#i997126">
          <Description>Binds an OUT variable of datatype RAW with a PL/SQL program variable</Description>
          <Parameters>
            <Parameter Name="C">Cursor associated with the passthrough SQL statement. Cursor must be opened and parsed, using the routines OPEN_CURSOR and PARSE respectively.</Parameter>
            <Parameter Name="P">Position of the bind variable in the SQL statement: Starts at 1.</Parameter>
            <Parameter Name="V">Variable in which the OUT bind variable stores its value. The package remembers only the "size" of the variable. After the SQL statement is run, you can use GET_VALUE to retrieve the value of the OUT parameter. The size of the retrieved value should not exceed the size of the parameter that was passed using BIND_OUT_VARIABLE_RAW.</Parameter>
            <Parameter Name="N">(Optional) Name of the bind variable.For example, in SELECT * FROM emp WHERE ename=:ename, the position of the bind variable :ename is 1, the name is :ename. This parameter can be used if the non-Oracle system supports "named binds" instead of positional binds. Passing the position is still required.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BIND_VARIABLE" ElementId="#BEIFIAGH">
          <Description>Binds an IN variable positionally with a PL/SQL program variable</Description>
          <Parameters>
            <Parameter Name="C">Cursor associated with the passthrough SQL statement. Cursor must be opened and parsed using the routines OPEN_CURSOR and PARSE respectively.</Parameter>
            <Parameter Name="P">Position of the bind variable in the SQL statement: Starts at 1.</Parameter>
            <Parameter Name="V">Value that must be passed to the bind variable name.</Parameter>
            <Parameter Name="N">(Optional) Name of the bind variable.For example, in SELECT * FROM emp WHERE ename=:ename, the position of the bind variable :ename is 1, the name is :ename. This parameter can be used if the non-Oracle system supports "named binds" instead of positional binds. Passing the position is still required.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BIND_VARIABLE_RAW" ElementId="#i996981">
          <Description>Binds IN variables of type RAW</Description>
          <Parameters>
            <Parameter Name="C">Cursor associated with the passthrough SQL statement. Cursor must be opened and parsed, using the routines OPEN_CURSOR and PARSE respectively.</Parameter>
            <Parameter Name="P">Position of the bind variable in the SQL statement: Starts at 1.</Parameter>
            <Parameter Name="V">Value that must be passed to the bind variable.</Parameter>
            <Parameter Name="N">(Optional) Name of the bind variable.For example, in SELECT * FROM emp WHERE ename=:ename, the position of the bind variable :ename is 1, the name is :ename. This parameter can be used if the non-Oracle system supports "named binds" instead of positional binds. Passing the position is still required.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CLOSE_CURSOR" ElementId="#i997341">
          <Description>Closes the cursor and releases associated memory after the SQL statement has been run at the non-Oracle system</Description>
          <Parameters>
            <Parameter Name="C">Cursor to be released.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXECUTE_IMMEDIATE" ElementId="#i997379">
          <Description>Runs a (non-SELECT) SQL statement immediately, without bind variables</Description>
          <Parameters>
            <Parameter Name="S">VARCHAR2 variable with the statement to be executed immediately.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXECUTE_NON_QUERY" ElementId="#i997426">
          <Description>Runs a (non-SELECT) SQL statement</Description>
          <Parameters>
            <Parameter Name="C">Cursor associated with the passthrough SQL statement. Cursor must be opened and parsed, using the routines OPEN_CURSOR and PARSE respectively.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="FETCH_ROW" ElementId="#BEIDJGGB">
          <Description>Fetches rows from a query</Description>
          <Parameters>
            <Parameter Name="C">Cursor associated with the passthrough SQL statement. Cursor must be opened and parsed, using the routines OPEN_CURSOR and PARSE respectively.</Parameter>
            <Parameter Name="FIRST">(Optional) Reexecutes SELECT statement. Possible values:- TRUE: reexecute SELECT statement.- FALSE: fetch the next row, or if run for the first time, then execute and fetch rows (default).</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_VALUE" ElementId="#BEIHICII">
          <Description>Retrieves column value from SELECT statement, or retrieves OUT bind parameters</Description>
          <Parameters>
            <Parameter Name="C">Cursor associated with the passthrough SQL statement. Cursor must be opened and parsed, using the routines OPEN_CURSOR and PARSE respectively.</Parameter>
            <Parameter Name="P">Position of the bind variable or select list item in the SQL statement: Starts at 1.</Parameter>
            <Parameter Name="V">Variable in which the OUT bind variable or select list item stores its value.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_VALUE_RAW" ElementId="#i997609">
          <Description>Similar to GET_VALUE, but for datatype RAW</Description>
          <Parameters>
            <Parameter Name="C">Cursor associated with the passthrough SQL statement. Cursor must be opened and parsed, using the routines OPEN_CURSOR and PARSE respectively.</Parameter>
            <Parameter Name="P">Position of the bind variable or select list item in the SQL statement: Starts at 1.</Parameter>
            <Parameter Name="V">Variable in which the OUT bind variable or select list item stores its value.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="OPEN_CURSOR" ElementId="#BEIHJIAB">
          <Description>Opens a cursor for running a passthrough SQL statement at the non-Oracle system</Description>
        </SubProgram>
        <SubProgram Name="PARSE" ElementId="#i997699">
          <Description>Parses SQL statement at non-Oracle system</Description>
          <Parameters>
            <Parameter Name="C">Cursor associated with the passthrough SQL statement. Cursor must be opened using function OPEN_CURSOR.</Parameter>
            <Parameter Name="STMT">Statement to be parsed.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_ILM" Url="http://docs.oracle.com/database/121/ARPLS/d_ilm.htm">
      <Description>The DBMS_ILM package provides an interface for implementing Information Lifecycle Management (ILM) strategies using Automatic Data Optimization (ADO) policies.</Description>
      <SubPrograms>
        <SubProgram Name="ADD_TO_ILM" ElementId="#CACCHHJE">
          <Description>Adds the object specified through the argument to a particular ADO task and evaluates the ADO policies on this object</Description>
          <Parameters>
            <Parameter Name="TASK_ID">Identifies a particular ADO task</Parameter>
            <Parameter Name="OWNER">Owner of the object</Parameter>
            <Parameter Name="OBJECT_NAME">Name of the object</Parameter>
            <Parameter Name="SUBOBJECT_NAME">Name of the subobject (partition name in the case of partitioned tables)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ARCHIVESTATENAME" ElementId="#CACHAEJF">
          <Description>Returns the value of the ORA_ARCHIVE_STATE column of a row-archival enabled table</Description>
          <Parameters>
            <Parameter Name="VALUE">Value for which the archive state name is to be returned</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXECUTE_ILM" ElementId="#CACHBJFB">
          <Description>Executes an ADO task.</Description>
          <Parameters>
            <Parameter Name="TASK_ID">Identifies a particular ADO task</Parameter>
            <Parameter Name="ILM_SCOPE">Determines the set of objects considered for ADO execution. The default is to consider only the objects in the schema.</Parameter>
            <Parameter Name="EXECUTION_MODE">Whether the ADO task be executed online (ILM_EXECUTION_ONLINE) or offline (ILM_EXECUTION_OFFLINE)</Parameter>
            <Parameter Name="OWNER">Owner of the object</Parameter>
            <Parameter Name="OBJECT_NAME">Name of the object</Parameter>
            <Parameter Name="SUBOBJECT_NAME">Name of the subobject (partition name in the case of partitioned tables)</Parameter>
            <Parameter Name="POLICY_NAME">Name of the ADO policy to be evaluated on the object. The package constant ILM_ALL_POLICIES should be used if all ADO policies on an object should be evaluated.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXECUTE_ILM_TASK" ElementId="#CACHBIAF">
          <Description>Executes an ADO task that has been evaluated previously</Description>
          <Parameters>
            <Parameter Name="TASK_ID">Identifies a particular ADO task</Parameter>
            <Parameter Name="EXECUTION_MODE">Whether the ADO task be executed online (ILM_EXECUTION_ONLINE) or offline (ILM_EXECUTION_OFFLINE)</Parameter>
            <Parameter Name="EXECUTION_SCHEDULE">Identifies when the ADO task should be executed.Currently, the only choice available is immediate scheduling of ADO jobs</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PREVIEW_ILM" ElementId="#CACEIDAA">
          <Description>Evaluates all ADO policies in the scope specified by means of an argument</Description>
          <Parameters>
            <Parameter Name="TASK_ID">Identifies a particular ADO task</Parameter>
            <Parameter Name="ILM_SCOPE">Identifies the scope of execution. Should be either SCOPE_DATABASE or SCOPE_SCHEMA as described in Constants</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVE_FROM_ILM" ElementId="#CACIFEAB">
          <Description>Removes the object specified through the argument from a particular ADO task</Description>
          <Parameters>
            <Parameter Name="TASK_ID">Identifies a particular ADO task</Parameter>
            <Parameter Name="OWNER">Owner of the object</Parameter>
            <Parameter Name="OBJECT_NAME">Name of the object</Parameter>
            <Parameter Name="SUBOBJECT_NAME">Name of the subobject (partition name in the case of partitioned tables)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="STOP_ILM" ElementId="#CACIBEEF">
          <Description>Stops ADO-related jobs created for a particular ADO task</Description>
          <Parameters>
            <Parameter Name="TASK_ID">Number that uniquely identifies a particular ADO task</Parameter>
            <Parameter Name="P_DROP_RUNNING_JOBS">Determines whether running jobs are dropped</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_ILM_ADMIN" Url="http://docs.oracle.com/database/121/ARPLS/d_ilm_admin.htm">
      <Description>The DBMS_ILM_ADMIN package provides an interface to customize Automatic Data Optimization (ADO) policy execution. In combination with partitioning and compression, ADO policies can be used to help implement an Information Lifecycle Management (ILM) strategy.</Description>
      <SubPrograms>
        <SubProgram Name="CLEAR_HEAT_MAP_ALL" ElementId="#CDCIFAIH">
          <Description>Deletes all rows except the dummy row</Description>
        </SubProgram>
        <SubProgram Name="CLEAR_HEAT_MAP_TABLE" ElementId="#CDCBIDJD">
          <Description>Clears all or some statistics for the heat map table, deleting rows for a given table or segment which match a given pattern, or all such rows</Description>
          <Parameters>
            <Parameter Name="OWNER">Table owner</Parameter>
            <Parameter Name="TABLENAME">Table name</Parameter>
            <Parameter Name="PARTITION">Name of the subobject, defaults to NULL</Parameter>
            <Parameter Name="ACCESS_DATE">Date for the entry in HEAT_MAP_STAT$ to be removed</Parameter>
            <Parameter Name="SEGMENT_ACCESS_SUMMARY">Summary of segment access constants indicating access operations performed on the segment</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CUSTOMIZE_ILM" ElementId="#CDCGJADA">
          <Description>Customizes environment for ILM execution by specifying the values for ILM execution related parameters</Description>
          <Parameters>
            <Parameter Name="PARAMETER">One of the parameter constants defined in DBMS_ILM_ADMIN package</Parameter>
            <Parameter Name="VALUE">Value of parameter</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DISABLE_ILM" ElementId="#CDCBBJJD">
          <Description>Turns off all background ILM scheduling</Description>
        </SubProgram>
        <SubProgram Name="ENABLE_ILM" ElementId="#CDCIAAFJ">
          <Description>Turns on all background ILM scheduling</Description>
        </SubProgram>
        <SubProgram Name="SET_HEAT_MAP_ALL" ElementId="#CDCFHHDC">
          <Description>Updates or inserts heat map rows for all tables</Description>
          <Parameters>
            <Parameter Name="ACCESS_DATE">Date for the entry in HEAT_MAP_STAT$ to be added</Parameter>
            <Parameter Name="SEGMENT_ACCESS_SUMMARY">Summary of segment access constants indicating access operations performed on the segment</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_HEAT_MAP_START" ElementId="#CDCCECEI">
          <Description>Sets the start date for collecting heat map data</Description>
          <Parameters>
            <Parameter Name="START_DATE">Indicates the new date from which all statistics are valid</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_HEAT_MAP_TABLE" ElementId="#CDCBGDEB">
          <Description>Updates or inserts a row for the specified table or segment</Description>
          <Parameters>
            <Parameter Name="OWNER">Table owner</Parameter>
            <Parameter Name="TABLENAME">Table name</Parameter>
            <Parameter Name="PARTITION">Name of the subobject, defaults to NULL</Parameter>
            <Parameter Name="ACCESS_DATE">Date for the entry in HEAT_MAP_STAT$ to be added</Parameter>
            <Parameter Name="SEGMENT_ACCESS_SUMMARY">Summary of segment access constants indicating access operations performed on the segment</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_INMEMORY" Url="http://docs.oracle.com/database/121/ARPLS/d_inmemory.htm">
      <Description>The DBMS_INMEMORY package provides an interface for in-memory column store functionality.</Description>
      <SubPrograms>
        <SubProgram Name="POPULATE" ElementId="#CBAHICAD">
          <Description>Forces population of a given table</Description>
          <Parameters>
            <Parameter Name="SCHEMA_NAME">Name of schema</Parameter>
            <Parameter Name="TABLE_NAME">Name of table</Parameter>
            <Parameter Name="SUBOBJECT_NAME">Partition or subpartition may be specified</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REPOPULATE" ElementId="#CBAIBBIE">
          <Description>Forces repopulation of a given table</Description>
          <Parameters>
            <Parameter Name="SCHEMA_NAME">Name of schema</Parameter>
            <Parameter Name="TABLE_NAME">Name of table</Parameter>
            <Parameter Name="SUBOBJECT_NAME">Partition or subpartition may be specified</Parameter>
            <Parameter Name="FORCE">If TRUE, then repopulates the entire table.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_IOT" Url="http://docs.oracle.com/database/121/ARPLS/d_iot.htm">
      <Description>The DBMS_IOT package creates a table into which references to the chained rows for an index-organized table can be placed using the ANALYZE command. DBMS_IOT can also create an exception table into which references to the rows of an index-organized table that violate a constraint can be placed during the enable_constraint operation.</Description>
      <SubPrograms>
        <SubProgram Name="BUILD_CHAIN_ROWS_TABLE" ElementId="#i996772">
          <Description>Creates a table into which references to the chained rows for an index-organized table can be placed using the ANALYZE command</Description>
          <Parameters>
            <Parameter Name="OWNER">Owner of the index-organized table.</Parameter>
            <Parameter Name="IOT_NAME">Index-organized table name.</Parameter>
            <Parameter Name="CHAINROW_TABLE_NAME">Intended name for the chained-rows table.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BUILD_EXCEPTIONS_TABLE" ElementId="#i996821">
          <Description>Creates an exception table into which rows of an index-organized table that violate a constraint can be placed</Description>
          <Parameters>
            <Parameter Name="OWNER">Owner of the index-organized table.</Parameter>
            <Parameter Name="IOT_NAME">Index-organized table name.</Parameter>
            <Parameter Name="EXCEPTIONS_TABLE_NAME">Intended name for exception-table.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_JAVA" Url="http://docs.oracle.com/database/121/ARPLS/d_java.htm">
      <Description>The DBMS_JAVA package provides a PL/SQL interface for accessing database functionality from Java.</Description>
    </Package>
    <Package Name="DBMS_JOB" Url="http://docs.oracle.com/database/121/ARPLS/d_job.htm">
      <Description>The DBMS_JOB package schedules and manages jobs in the job queue.</Description>
      <SubPrograms>
        <SubProgram Name="BROKEN" ElementId="#i1000521">
          <Description>Disables job execution</Description>
          <Parameters>
            <Parameter Name="JOB">System-assigned ID of the job being run. To find this ID, query the JOB column of the USER_JOBS or DBA_JOBS view.</Parameter>
            <Parameter Name="BROKEN">Sets the job as broken or not broken. TRUE sets it as broken; FALSE sets it as not broken.</Parameter>
            <Parameter Name="NEXT_DATE">Next date when the job will be run.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CHANGE" ElementId="#i1000622">
          <Description>Alters any of the user-definable parameters associated with a job</Description>
          <Parameters>
            <Parameter Name="JOB">System-assigned ID of the job being run. To find this ID, query the JOB column of the USER_JOBS or DBA_JOBS view.</Parameter>
            <Parameter Name="WHAT">PL/SQL procedure to run.</Parameter>
            <Parameter Name="NEXT_DATE">Next date when the job will be run.</Parameter>
            <Parameter Name="INTERVAL">Date function; evaluated immediately before the job starts running.</Parameter>
            <Parameter Name="INSTANCE">When a job is submitted, specifies which instance can run the job. This defaults to NULL, which indicates that instance affinity is not changed.</Parameter>
            <Parameter Name="FORCE">If this is FALSE, then the specified instance (to which the instance number change) must be running. Otherwise, the routine raises an exception.If this is TRUE, then any positive integer is acceptable as the job instance.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="INSTANCE" ElementId="#i1000681">
          <Description>Assigns a job to be run by a instance</Description>
          <Parameters>
            <Parameter Name="JOB">System-assigned ID of the job being run. To find this ID, query the JOB column of the USER_JOBS or DBA_JOBS view.</Parameter>
            <Parameter Name="INSTANCE">When a job is submitted, a user can specify which instance can run the job.</Parameter>
            <Parameter Name="FORCE">If this is TRUE, then any positive integer is acceptable as the job instance. If this is FALSE (the default), then the specified instance must be running; otherwise the routine raises an exception.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="INTERVAL" ElementId="#i1000712">
          <Description>Alters the interval between executions for a specified job</Description>
          <Parameters>
            <Parameter Name="JOB">System-assigned ID of the job being run. To find this ID, query the JOB column of the USER_JOBS or DBA_JOBS view.</Parameter>
            <Parameter Name="INTERVAL">Date function, evaluated immediately before the job starts running.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="NEXT_DATE" ElementId="#i1000769">
          <Description>Alters the next execution time for a specified job</Description>
          <Parameters>
            <Parameter Name="JOB">System-assigned ID of the job being run. To find this ID, query the JOB column of the USER_JOBS or DBA_JOBS view.</Parameter>
            <Parameter Name="NEXT_DATE">Date of the next refresh: it is when the job will be automatically run, assuming there are background processes attempting to run it.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVE" ElementId="#i997008">
          <Description>Removes specified job from the job queue</Description>
          <Parameters>
            <Parameter Name="JOB">System-assigned ID of the job being run. To find this ID, query the JOB column of the USER_JOBS or DBA_JOBS view.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RUN" ElementId="#i1000972">
          <Description>Forces a specified job to run</Description>
          <Parameters>
            <Parameter Name="JOB">System-assigned ID of the job being run. To find this ID, query the JOB column of the USER_JOBS or DBA_JOBS view.</Parameter>
            <Parameter Name="FORCE">If this is TRUE, then instance affinity is irrelevant for running jobs in the foreground process. If this is FALSE, then the job can be run in the foreground only in the specified instance.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SUBMIT" ElementId="#i1000807">
          <Description>Submits a new job to the job queue</Description>
          <Parameters>
            <Parameter Name="JOB">System-assigned ID of the job being run. To find this ID, query the JOB column of the USER_JOBS or DBA_JOBS view</Parameter>
            <Parameter Name="WHAT">PL/SQL text o the job to be run. This must be a valid PL/SQL statement or block of code. For example, to run a stored procedure P, you could pass the string P; (with the semi-colon) to this routine. The SQL that you submit in the what parameter is wrapped in the following PL/SQL block:Ensure that you include the ; semi-colon with the statement.</Parameter>
            <Parameter Name="NEXT_DATE">Next date when the job will be run.</Parameter>
            <Parameter Name="INTERVAL">Date function that calculates the next time to run the job. The default is NULL. This must evaluate to a either a future point in time or NULL.</Parameter>
            <Parameter Name="NO_PARSE">A flag. The default is FALSE. If this is set to FALSE, then Oracle parses the procedure associated with the job. If this is set to TRUE, then Oracle parses the procedure associated with the job the first time that the job is run.For example, if you want to submit a job before you have created the tables associated with the job, then set this to TRUE.</Parameter>
            <Parameter Name="INSTANCE">When a job is submitted, specifies which instance can run the job.</Parameter>
            <Parameter Name="FORCE">If this is TRUE, then any positive integer is acceptable as the job instance. If this is FALSE (the default), then the specified instance must be running; otherwise the routine raises an exception.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="USER_EXPORT" ElementId="#i1000925">
          <Description>Re-creates a given job for export, or re-creates a given job for export with instance affinity</Description>
        </SubProgram>
        <SubProgram Name="WHAT" ElementId="#i1000977">
          <Description>Alters the job description for a specified job</Description>
          <Parameters>
            <Parameter Name="JOB">System-assigned ID of the job being run. To find this ID, query the JOB column of the USER_JOBS or DBA_JOBS view.</Parameter>
            <Parameter Name="WHAT">PL/SQL procedure to run.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_LDAP" Url="http://docs.oracle.com/database/121/ARPLS/d_ldap.htm">
      <Description>The DBMS_LDAP package lets you access data from LDAP servers.</Description>
    </Package>
    <Package Name="DBMS_LDAP_UTL" Url="http://docs.oracle.com/database/121/ARPLS/d_ldaputl.htm">
      <Description>The DBMS_LDAP_UTL package contains the Oracle Extension utility functions.</Description>
    </Package>
    <Package Name="DBMS_LIBCACHE" Url="http://docs.oracle.com/database/121/ARPLS/d_libcac.htm">
      <Description>The DBMS_LIBCACHE package consists of one subprogram that prepares the library cache on an Oracle instance by extracting SQL and PL/SQL from a remote instance and compiling this SQL locally without execution. The value of compiling the cache of an instance is to prepare the information the application requires to execute in advance of failover or switchover.</Description>
      <SubPrograms>
        <SubProgram Name="COMPILE_FROM_REMOTE" ElementId="#i996766">
          <Description>Extracts SQL in batch from the source instance and compiles the SQL at the target instance</Description>
          <Parameters>
            <Parameter Name="P_DB_LINK">Database link to the source name (mandatory). The database link pointing to the instance that will be used for extracting the SQL statements. The user must have the role SELECT_ON_CATALOG at the source instance. For improved security, the connection may use a password file or LDAP authentication. The database link is mandatory only for releases with dbms_libcache$def.ACCESS_METHOD = DB_LINK_METHOD</Parameter>
            <Parameter Name="P_INSTANCE_NAME">(Reserved for future use). The name of the instance that will be used for extracting the SQL statements. The instance name must be unique for all instances excluding the local instance. The name is not case sensitive.</Parameter>
            <Parameter Name="P_USERNAME">Source username (default is all users). The name of the username that will be used for extracting the SQL statements. The username is an optional parameter that is used to ensure the parsing user id is the same as that on the source instance. For an application where users connect as a single user_id, for example APPS, APPS is the parsing user_id that is recorded in the shared pool. To select only SQL statements parsed by APPS, enter the string 'APPS' in this field. To also select statements executed by batch, repeat the executing the procedure with the schema owner, for example GL. If the username is supplied, it must be valid. The name is not case sensitive.</Parameter>
            <Parameter Name="P_THRESHOLD_EXECUTIONS">The lower bound for the number of executions, below which a SQL statement will not be selected for parsing. This parameter is optional. It allows the application to extract and compile statements with executions, for example, greater than 3. The default value is 1. This means SQL statements that have never executed, including invalid SQL statements, will not be extracted.</Parameter>
            <Parameter Name="P_THRESHOLD_SHARABLE_MEM">The lower bound for the size of the shared memory consumed by the cursors on the source instance. Below this value a SQL statement will not be selected for parsing. This parameter is optional. It allows the application to extract and compile statements with shared memory for example, greater than 10000 bytes.</Parameter>
            <Parameter Name="P_PARALLEL_DEGREE">The number of parallel jobs that execute to complete the parse operation. These tasks are spawned as parallel jobs against a sub-range of the SQL statements selected for parsing. This parameter is reserved for parallel compile jobs which are currently not implemented.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_LOB" Url="http://docs.oracle.com/database/121/ARPLS/d_lob.htm">
      <Description />
      <SubPrograms>
        <SubProgram Name="APPEND" ElementId="#i997432">
          <Description>Appends the contents of the source LOB to the destination LOB</Description>
          <Parameters>
            <Parameter Name="DEST_LOB">Locator for the internal LOB to which the data is to be appended.</Parameter>
            <Parameter Name="SRC_LOB">Locator for the internal LOB from which the data is to be read.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CLOSE" ElementId="#i997518">
          <Description>Closes a previously opened internal or external LOB</Description>
          <Parameters>
            <Parameter Name="LOB_LOC">LOB locator. For more information, see Operational Notes.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="COMPARE" ElementId="#i1016668">
          <Description>Compares two entire LOBs or parts of two LOBs</Description>
          <Parameters>
            <Parameter Name="LOB_1">LOB locator of first target for comparison.</Parameter>
            <Parameter Name="LOB_2">LOB locator of second target for comparison.</Parameter>
            <Parameter Name="AMOUNT">Number of bytes (for BLOBs) or characters (for CLOBs/NCLOBSs) to compare.</Parameter>
            <Parameter Name="OFFSET_1">Offset in bytes or characters on the first LOB (origin: 1) for the comparison.</Parameter>
            <Parameter Name="OFFSET_2">Offset in bytes or characters on the second LOB (origin: 1) for the comparison.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CONVERTTOBLOB" ElementId="#i1020355">
          <Description>Reads character data from a source CLOB or NCLOB instance, converts the character data to the specified character, writes the converted data to a destination BLOB instance in binary format, and returns the new offsets</Description>
          <Parameters>
            <Parameter Name="DEST_LOB">LOB locator of the destination LOB instance.</Parameter>
            <Parameter Name="SRC_CLOB">LOB locator of the source LOB instance.</Parameter>
            <Parameter Name="AMOUNT">Number of characters to convert from the source LOB.If you want to copy the entire LOB, pass the constant DBMS_LOB.LOBMAXSIZE. If you pass any other value, it must be less than or equal to the size of the LOB.</Parameter>
            <Parameter Name="DEST_OFFSET">(IN) Offset in bytes in the destination LOB for the start of the write. Specify a value of 1 to start at the beginning of the LOB.(OUT) The new offset in bytes after the end of the write.</Parameter>
            <Parameter Name="SRC_OFFSET">(IN) Offset in characters in the source LOB for the start of the read.(OUT) Offset in characters in the source LOB right after the end of the read.</Parameter>
            <Parameter Name="BLOB_CSID">Desired character set ID of the converted data.</Parameter>
            <Parameter Name="LANG_CONTEXT">(IN) Language context, such as shift status, for the current conversion.(OUT) The language context at the time when the current conversion is done.This information is returned so you can use it for subsequent conversions without losing or misinterpreting any source data. For the very first conversion, or if do not care, use the default value of zero.</Parameter>
            <Parameter Name="WARNING">(OUT) Warning message. This parameter indicates when something abnormal happened during the conversion. You are responsible for checking the warning message.Currently, the only possible warning is — inconvertible character. This occurs when the character in the source cannot be properly converted to a character in destination. The default replacement character (for example, '?') is used in place of the inconvertible character. The return value of this error message is defined as the constant warn_inconvertible_char in the DBMS_LOB package.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CONVERTTOCLOB" ElementId="#i1020356">
          <Description>Takes a source BLOB instance, converts the binary data in the source instance to character data using the specified character, writes the character data to a destination CLOB or NCLOB instance, and returns the new offsets</Description>
          <Parameters>
            <Parameter Name="DEST_LOB">LOB locator of the destination LOB instance.</Parameter>
            <Parameter Name="SRC_BLOB">LOB locator of the source LOB instance.</Parameter>
            <Parameter Name="AMOUNT">Number of bytes to convert from the source LOB.If you want to copy the entire BLOB, pass the constant DBMS_LOB.LOBMAXSIZE. If you pass any other value, it must be less than or equal to the size of the BLOB.</Parameter>
            <Parameter Name="DEST_OFFSET">(IN) Offset in characters in the destination LOB for the start of the write. Specify a value of 1 to start at the beginning of the LOB.(OUT) The new offset in characters after the end of the write. This offset always points to the beginning of the first complete character after the end of the write.</Parameter>
            <Parameter Name="SRC_OFFSET">(IN) Offset in bytes in the source LOB for the start of the read.(OUT) Offset in bytes in the source LOB right after the end of the read.</Parameter>
            <Parameter Name="BLOB_CSID">The character set ID of the source data</Parameter>
            <Parameter Name="LANG_CONTEXT">(IN) Language context, such as shift status, for the current conversion.(OUT) The language context at the time when the current conversion is done.This information is returned so you can use it for subsequent conversions without losing or misinterpreting any source data. For the very first conversion, or if do not care, use the default value of zero.</Parameter>
            <Parameter Name="WARNING">Warning message. This parameter indicates when something abnormal happened during the conversion. You are responsible for checking the warning message.Currently, the only possible warning is — inconvertible character. This occurs when the character in the source cannot be properly converted to a character in destination. The default replacement character (for example, '?') is used in place of the inconvertible character. The return value of this error message is defined as the constant warn_inconvertible_char in the DBMS_LOB package.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="COPY" ElementId="#i997674">
          <Description>Copies all, or part, of the source LOB to the destination LOB</Description>
          <Parameters>
            <Parameter Name="DEST_LOB">LOB locator of the copy target.</Parameter>
            <Parameter Name="SRC_LOB">LOB locator of source for the copy.</Parameter>
            <Parameter Name="AMOUNT">Number of bytes (for BLOBs) or characters (for CLOBs) to copy.</Parameter>
            <Parameter Name="DEST_OFFSET">Offset in bytes or characters in the destination LOB (origin: 1) for the start of the copy.</Parameter>
            <Parameter Name="SRC_OFFSET">Offset in bytes or characters in the source LOB (origin: 1) for the start of the copy.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="COPY_DBFS_LINK" ElementId="#BGBCJJDF">
          <Description>Copies the DBFS Link in the source LOB to the destination LOB</Description>
          <Parameters>
            <Parameter Name="LOB_LOC_DST">LOB to be made to reference the same storage data as lob_loc_src</Parameter>
            <Parameter Name="LOB_LOC_SRC">LOB from which to copy the reference</Parameter>
            <Parameter Name="FLAGS">Options to COPY_DBFS_LINK:DBFS_LINK_NOCACHE specifies to only copy the DBFS LinkDBFS_LINK_CACHE specifies to copy the DBFS Link and read the data into the database LOB specified by lob_loc_dst so that the data is cached</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="COPY_FROM_DBFS_LINK" ElementId="#BGBDAAIF">
          <Description>Retrieves the data for the LOB from the DBFS store</Description>
          <Parameters>
            <Parameter Name="LOB_LOC">LOB to be retrieved from the archive</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATETEMPORARY" ElementId="#i997788">
          <Description>Creates a temporary BLOB or CLOB and its corresponding index in the user's default temporary tablespace</Description>
          <Parameters>
            <Parameter Name="LOB_LOC">LOB locator. For more information, see Operational Notes.</Parameter>
            <Parameter Name="CACHE">Specifies if LOB should be read into buffer cache or not.</Parameter>
            <Parameter Name="DUR">1 of 2 predefined duration values (SESSION or CALL) which specifies a hint as to whether the temporary LOB is cleaned up at the end of the session or call.If dur is omitted, then the session duration is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DBFS_LINK_GENERATE_PATH" ElementId="#BGBIHAJI">
          <Description>Returns a unique file path name for use in creating a DBFS Link</Description>
          <Parameters>
            <Parameter Name="LOB_LOC">LOB to be retrieved from DBFS</Parameter>
            <Parameter Name="STORAGE_DIR">DBFS directory that will be the parent directory of the file</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ERASE" ElementId="#i997838">
          <Description>Erases all or part of a LOB</Description>
          <Parameters>
            <Parameter Name="LOB_LOC">Locator for the LOB to be erased.For more information, see Operational Notes.</Parameter>
            <Parameter Name="AMOUNT">Number of bytes (for BLOBs or BFILES) or characters (for CLOBs or NCLOBs) to be erased.</Parameter>
            <Parameter Name="OFFSET">Absolute offset (origin: 1) from the beginning of the LOB in bytes (for BLOBs) or characters (CLOBs).</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="FILECLOSE" ElementId="#i997934">
          <Description>Closes the file</Description>
          <Parameters>
            <Parameter Name="FILE_LOC">Locator for the BFILE to be closed.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="FILECLOSEALL" ElementId="#i998026">
          <Description>Closes all previously opened files</Description>
        </SubProgram>
        <SubProgram Name="FILEEXISTS" ElementId="#i998077">
          <Description>Checks if the file exists on the server</Description>
        </SubProgram>
        <SubProgram Name="FILEGETNAME" ElementId="#i998169">
          <Description>Gets the directory object name and file name</Description>
          <Parameters>
            <Parameter Name="FILE_LOC">Locator for the BFILE</Parameter>
            <Parameter Name="DIR_ALIAS">Directory object name</Parameter>
            <Parameter Name="FILENAME">Name of the BFILE</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="FILEISOPEN" ElementId="#i998235">
          <Description>Checks if the file was opened using the input BFILE locators</Description>
        </SubProgram>
        <SubProgram Name="FILEOPEN" ElementId="#i998315">
          <Description>Opens a file</Description>
          <Parameters>
            <Parameter Name="FILE_LOC">Locator for the BFILE.</Parameter>
            <Parameter Name="OPEN_MODE">File access is read-only.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="FRAGMENT_DELETE" ElementId="#i998411">
          <Description>Deletes the data at the specified offset for the specified length from the LOB</Description>
          <Parameters>
            <Parameter Name="LOB_LOC">LOB locator. For more information, see Operational Notes.</Parameter>
            <Parameter Name="AMOUNT">Number of bytes (BLOB) or characters (CLOB/NCLOB) to be removed from the LOB</Parameter>
            <Parameter Name="OFFSET">Offset into the LOB in bytes (BLOB) or characters (CLOB/NCLOB) to begin the deletion</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="FRAGMENT_INSERT" ElementId="#CHDGBIBD">
          <Description>Inserts the specified data (limited to 32K) into the LOB at the specified offset</Description>
          <Parameters>
            <Parameter Name="LOB_LOC">LOB locator.For more information, see Operational Notes.</Parameter>
            <Parameter Name="AMOUNT">Number of bytes (BLOB) or characters (CLOB/NCLOB) to be inserted into the LOB</Parameter>
            <Parameter Name="OFFSET">Offset into the LOB in bytes (BLOB) or characters (CLOB/NCLOB) to begin the insertion</Parameter>
            <Parameter Name="BUFFER">Data to insert into the LOB</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="FRAGMENT_MOVE" ElementId="#CHDJDHHF">
          <Description>Moves the amount of bytes (BLOB) or characters (CLOB/NCLOB) from the specified offset to the new offset specified</Description>
          <Parameters>
            <Parameter Name="LOB_LOC">LOB locator. For more information, see Operational Notes.</Parameter>
            <Parameter Name="AMOUNT">Number of bytes (BLOB) or characters (CLOB/NCLOB) to be moved in the LOB</Parameter>
            <Parameter Name="SRC_OFFSET">Beginning offset into the LOB in bytes (BLOB) or characters (CLOB/NCLOB) to put the data</Parameter>
            <Parameter Name="DEST_OFFSET">Beginning offset into the LOB in bytes (BLOB) or characters (CLOB/NCLOB) to remove the data</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="FRAGMENT_REPLACE" ElementId="#CHDGBAHJ">
          <Description>Replaces the data at the specified offset with the specified data (not to exceed 32k)</Description>
          <Parameters>
            <Parameter Name="LOB_LOC">LOB locator. For more information, see Operational Notes.</Parameter>
            <Parameter Name="OLD_AMOUNT">Number of bytes (BLOB) or characters (CLOB/NCLOB) to be replaced in the LOB</Parameter>
            <Parameter Name="NEW_AMOUNT">Number of bytes (BLOB) or characters (CLOB/NCLOB) to written to the LOB</Parameter>
            <Parameter Name="OFFSET">Beginning offset into the LOB in bytes (BLOB) or characters (CLOB/NCLOB) to put the data</Parameter>
            <Parameter Name="BUFFER">Data to insert into the LOB</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="FREETEMPORARY" ElementId="#BGBDBFAD">
          <Description>Frees the temporary BLOB or CLOB in the default temporary tablespace</Description>
          <Parameters>
            <Parameter Name="LOB_LOC">LOB locator.For more information, see Operational Notes.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_DBFS_LINK" ElementId="#BGBIEEBG">
          <Description>Returns the DBFS Link path associated with the specified SecureFile</Description>
          <Parameters>
            <Parameter Name="LOB_LOC">LOB to be retrieved from DBFS</Parameter>
            <Parameter Name="STORAGE_PATH">Path where the LOB is stored in DBFS</Parameter>
            <Parameter Name="LOB_LENGTH">LOB length at the time of write to DBFS</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_DBFS_LINK_STATE" ElementId="#BGBCBHGD">
          <Description>Retrieves the current DBFS Link state of the specified SecureFile</Description>
          <Parameters>
            <Parameter Name="LOB_LOC">LOB to be retrieved from the archive</Parameter>
            <Parameter Name="STORAGE_PATH">Path where the LOB is stored in the DBFS HSM store</Parameter>
            <Parameter Name="STATE">One of DBFS_LINK_NEVER, DBFS_LINK_NO or DBFS_LINK_YES</Parameter>
            <Parameter Name="CACHED">If the LOB is archived and the data was specified to be cashed on put</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETCHUNKSIZE" ElementId="#BGBCDIHI">
          <Description>Returns the amount of space used in the LOB chunk to store the LOB value</Description>
          <Parameters>
            <Parameter Name="LOB_LOC">LOB locator. For more information, see Operational Notes.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETCONTENTTYPE" ElementId="#BGBFJFCC">
          <Description>Returns the content ID string previously set by means of the SETCONTENTTYPE Procedure</Description>
          <Parameters>
            <Parameter Name="LOB_LOC">LOB whose content type is to be retrieved</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETLENGTH" ElementId="#i998484">
          <Description>Gets the length of the LOB value</Description>
        </SubProgram>
        <SubProgram Name="GETOPTIONS" ElementId="#CHDIHDIC">
          <Description>Obtains settings corresponding to the option_type field for a particular LOB</Description>
        </SubProgram>
        <SubProgram Name="GET_STORAGE_LIMIT" ElementId="#i1012980">
          <Description>Returns the storage limit for LOBs in your database configuration</Description>
          <Parameters>
            <Parameter Name="LOB_LOC">LOB locator. For more information, see Operational Notes.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="INSTR" ElementId="#i998546">
          <Description>Returns the matching position of the nth occurrence of the pattern in the LOB</Description>
          <Parameters>
            <Parameter Name="LOB_LOC">Locator for the LOB to be examined. For more information, see Operational Notes.</Parameter>
            <Parameter Name="FILE_LOC">The file locator for the LOB to be examined.</Parameter>
            <Parameter Name="PATTERN">Pattern to be tested for. The pattern is a group of RAW bytes for BLOBs, and a character string (VARCHAR2) for CLOBs.The maximum size of the pattern is 16383 bytes.</Parameter>
            <Parameter Name="OFFSET">Absolute offset in bytes (BLOBs) or characters (CLOBs) at which the pattern matching is to start. (origin: 1)</Parameter>
            <Parameter Name="NTH">Occurrence number, starting at 1.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ISOPEN" ElementId="#i998705">
          <Description>Checks to see if the LOB was already opened using the input locator</Description>
          <Parameters>
            <Parameter Name="LOB_LOC">LOB locator. For more information, see Operational Notes.</Parameter>
            <Parameter Name="FILE_LOC">File locator.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ISSECUREFILE" ElementId="#CJHCGHBF">
          <Description>Returns TRUE if the LOB locator passed to is for a SecureFiles LOB, otherwise, returns FALSE</Description>
        </SubProgram>
        <SubProgram Name="ISTEMPORARY" ElementId="#i998745">
          <Description>Checks if the locator is pointing to a temporary LOB</Description>
          <Parameters>
            <Parameter Name="LOB_LOC">LOB locator. For more information, see Operational Notes.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LOADBLOBFROMFILE" ElementId="#i998869">
          <Description>Loads BFILE data into an internal BLOB</Description>
          <Parameters>
            <Parameter Name="DEST_LOB">BLOB locator of the target for the load.</Parameter>
            <Parameter Name="SRC_BFILE">BFILE locator of the source for the load.</Parameter>
            <Parameter Name="AMOUNT">Number of bytes to load from the BFILE. You can also use DBMS_LOB.LOBMAXSIZE to load until the end of the BFILE.</Parameter>
            <Parameter Name="DEST_OFFSET">(IN) Offset in bytes in the destination BLOB (origin: 1) for the start of the write. (OUT) New offset in bytes in the destination BLOB right after the end of this write, which is also where the next write should begin.</Parameter>
            <Parameter Name="SRC_OFFSET">(IN) Offset in bytes in the source BFILE (origin: 1) for the start of the read.(OUT) Offset in bytes in the source BFILE right after the end of this read, which is also where the next read should begin.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LOADCLOBFROMFILE" ElementId="#i998978">
          <Description>Loads BFILE data into an internal CLOB</Description>
          <Parameters>
            <Parameter Name="DEST_LOB">CLOB/NCLOB locator of the target for the load.</Parameter>
            <Parameter Name="SRC_BFILE">BFILE locator of the source for the load.</Parameter>
            <Parameter Name="AMOUNT">Number of bytes to load from the BFILE. Use DBMS_LOB.LOBMAXSIZE of load until the end of the BFILE.</Parameter>
            <Parameter Name="DEST_OFFSET">(IN) Offset in characters in the destination CLOB (origin: 1) for the start of the write. (OUT) The new offset in characters right after the end of this load, which is also where the next load should start. It always points to the beginning of the first complete character after the end of load. If the last character is not complete, offset goes back to the beginning of the partial character.</Parameter>
            <Parameter Name="SRC_OFFSET">(IN) Offset in bytes in the source BFILE (origin: 1) for the start of the read.(OUT)Offset in bytes in the source BFILE right after the end of this read, which is also where the next read should begin.</Parameter>
            <Parameter Name="BFILE_CSID">Character set id of the source (BFILE) file.</Parameter>
            <Parameter Name="LANG_CONTEXT">(IN) Language context, such as shift status, for the current load.(OUT) The language context at the time when the current load stopped, and what the next load should be using if continuing loading from the same source. This information is returned to the user so that they can use it for the continuous load without losing or misinterpreting any source data. For the very first load or if do not care, simply use the default 0. The details of this language context is hidden from the user. One does not need to know what it is or what's in it in order to make the call</Parameter>
            <Parameter Name="WARNING">(OUT) Warning message. This indicates something abnormal happened during the loading. It may or may not be caused by the user's mistake. The loading is completed as required, and it's up to the user to check the warning message. Currently, the only possible warning is the inconvertible character. This happens when the character in the source cannot be properly converted to a character in destination, and the default replacement character (for example, '?') is used in place. The message is defined the constant value DBMS_LOB.WARN_INCONVERTIBLE_CHAR.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LOADFROMFILE" ElementId="#i998778">
          <Description>Loads BFILE data into an internal LOB</Description>
          <Parameters>
            <Parameter Name="DEST_LOB">LOB locator of the target for the load.</Parameter>
            <Parameter Name="SRC_FILE">BFILE locator of the source for the load.</Parameter>
            <Parameter Name="AMOUNT">Number of bytes to load from the BFILE.</Parameter>
            <Parameter Name="DEST_OFFSET">Offset in bytes or characters in the destination LOB (origin: 1) for the start of the load.</Parameter>
            <Parameter Name="SRC_OFFSET">Offset in bytes in the source BFILE (origin: 1) for the start of the load.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MOVE_TO_DBFS_LINK" ElementId="#BGBJEGGG">
          <Description>Writes the specified SecureFile data to the DBFS store</Description>
          <Parameters>
            <Parameter Name="LOB_LOC">LOB to be archived</Parameter>
            <Parameter Name="FLAGS">Either DBFS_LINK_CACHE or DBFS_LINK_NOCACHE. If DBFS_LINK_CACHE is specified, the LOB data continues to be stored in the RDBMS as well as being written to the DBFS store. DBFS_LINK_NOCACHE specifies that the LOB data should be deleted from the RDBMS once written to the DBFS.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="OPEN" ElementId="#BABGHBIF">
          <Description>Opens a LOB (internal, external, or temporary) in the indicated mode</Description>
          <Parameters>
            <Parameter Name="LOB_LOC">LOB locator. For more information, see Operational Notes.</Parameter>
            <Parameter Name="OPEN_MODE">Mode in which to open.For BLOB and CLOB types, the mode can be either: LOB_READONLY or LOB_READWRITE.For BFILE types, the mode must be FILE_READONLY.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="READ" ElementId="#i999170">
          <Description>Reads data from the LOB starting at the specified offset</Description>
          <Parameters>
            <Parameter Name="LOB_LOC">Locator for the LOB to be read. For more information, see Operational Notes.</Parameter>
            <Parameter Name="FILE_LOC">The file locator for the LOB to be examined.</Parameter>
            <Parameter Name="AMOUNT">Number of bytes (for BLOBs) or characters (for CLOBs) to read, or number that were read.</Parameter>
            <Parameter Name="OFFSET">Offset in bytes (for BLOBs) or characters (for CLOBs) from the start of the LOB (origin: 1).</Parameter>
            <Parameter Name="BUFFER">Output buffer for the read operation.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_DBFS_LINK" ElementId="#BGBHHHJC">
          <Description>Links the specified SecureFile to the specified path name. It does not copy the data to the path</Description>
          <Parameters>
            <Parameter Name="LOB_LOC">LOB for which to store the reference value</Parameter>
            <Parameter Name="ARCHIVE_ID">Archive ID as returned by calling either of the GET_DBFS_LINK Functions Functions</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETCONTENTTYPE" ElementId="#BGBBGICA">
          <Description>Sets the content type string for the data in the LOB</Description>
          <Parameters>
            <Parameter Name="LOB_LOC">LOB to be assigned the content type</Parameter>
            <Parameter Name="CONTENTTYPE">String to be assigned</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETOPTIONS" ElementId="#CHDHDDDD">
          <Description>Enables CSCE features on a per-LOB basis, overriding the default LOB column settings</Description>
        </SubProgram>
        <SubProgram Name="SUBSTR" ElementId="#i999349">
          <Description>Returns part of the LOB value starting at the specified offset</Description>
          <Parameters>
            <Parameter Name="LOB_LOC">Locator for the LOB to be read. For more information, see Operational Notes.</Parameter>
            <Parameter Name="FILE_LOC">The file locator for the LOB to be examined.</Parameter>
            <Parameter Name="AMOUNT">Number of bytes (for BLOBs) or characters (for CLOBs) to be read.</Parameter>
            <Parameter Name="OFFSET">Offset in bytes (for BLOBs) or characters (for CLOBs) from the start of the LOB (origin: 1).</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="TRIM" ElementId="#i999503">
          <Description>Trims the LOB value to the specified shorter length</Description>
          <Parameters>
            <Parameter Name="LOB_LOC">Locator for the internal LOB whose length is to be trimmed. For more information, see Operational Notes.</Parameter>
            <Parameter Name="NEWLEN">New, trimmed length of the LOB value in bytes for BLOBs or characters for CLOBs.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="WRITE" ElementId="#i999593">
          <Description>Writes data to the LOB from a specified offset</Description>
          <Parameters>
            <Parameter Name="LOB_LOC">Locator for the internal LOB to be written to. For more information, see Operational Notes</Parameter>
            <Parameter Name="AMOUNT">Number of bytes (for BLOBs) or characters (for CLOBs) to write</Parameter>
            <Parameter Name="OFFSET">Offset in bytes (for BLOBs) or characters (for CLOBs) from the start of the LOB (origin: 1) for the write operation.</Parameter>
            <Parameter Name="BUFFER">Input buffer for the write</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="WRITEAPPEND" ElementId="#i999705">
          <Description>Writes a buffer to the end of a LOB</Description>
          <Parameters>
            <Parameter Name="LOB_LOC">Locator for the internal LOB to be written to. For more information, see Operational Notes</Parameter>
            <Parameter Name="AMOUNT">Number of bytes (for BLOBs) or characters (for CLOBs) to write</Parameter>
            <Parameter Name="BUFFER">Input buffer for the write</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_LOCK" Url="http://docs.oracle.com/database/121/ARPLS/d_lock.htm">
      <Description>The DBMS_LOCK package provides an interface to Oracle Lock Management services. You can request a lock of a specific mode, give it a unique name recognizable in another procedure in the same or another instance, change the lock mode, and release it.</Description>
      <SubPrograms>
        <SubProgram Name="ALLOCATE_UNIQUE" ElementId="#i1002533">
          <Description>Allocates a unique lock ID to a named lock</Description>
          <Parameters>
            <Parameter Name="LOCKNAME">Name of the lock for which you want to generate a unique ID.Do not use lock names beginning with ORA$; these are reserved for products supplied by Oracle.</Parameter>
            <Parameter Name="LOCKHANDLE">Returns the handle to the lock ID generated by ALLOCATE_UNIQUE.You can use this handle in subsequent calls to REQUEST, CONVERT, and RELEASE.A handle is returned instead of the actual lock ID to reduce the chance that a programming error accidentally creates an incorrect, but valid, lock ID. This provides better isolation between different applications that are using this package.LOCKHANDLE can be up to VARCHAR2 (128).All sessions using a lock handle returned by ALLOCATE_UNIQUE with the same lock name are referring to the same lock. Therefore, do not pass lock handles from one session to another.</Parameter>
            <Parameter Name="EXPIRATION_SPECS">Number of seconds to wait after the last ALLOCATE_UNIQUE has been performed on a specified lock, before permitting that lock to be deleted from the DBMS_LOCK_ALLOCATED table.The default waiting period is 10 days. You should not delete locks from this table. Subsequent calls to ALLOCATE_UNIQUE may delete expired locks to recover space.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CONVERT" ElementId="#i997083">
          <Description>Converts a lock from one mode to another</Description>
          <Parameters>
            <Parameter Name="ID">User assigned lock identifier, from 0 to 1073741823, or the lock handle, returned by ALLOCATE_UNIQUE, of the lock mode you want to change</Parameter>
            <Parameter Name="LOCKMODE">New mode that you want to assign to the specified lock.For the available modes and their associated integer identifiers, see Constants.</Parameter>
            <Parameter Name="TIMEOUT">Number of seconds to continue trying to change the lock mode.If the lock cannot be converted within this time period, then the call returns a value of 1 (timeout).</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RELEASE" ElementId="#i997159">
          <Description>Releases a lock</Description>
        </SubProgram>
        <SubProgram Name="REQUEST" ElementId="#i1002556">
          <Description>Requests a lock of a specific mode.</Description>
          <Parameters>
            <Parameter Name="ID">User assigned lock identifier, from 0 to 1073741823, or the lock handle, returned by ALLOCATE_UNIQUE, of the lock mode you want to change</Parameter>
            <Parameter Name="LOCKMODE">Mode that you are requesting for the lock.For the available modes and their associated integer identifiers, see Constants.</Parameter>
            <Parameter Name="TIMEOUT">Number of seconds to continue trying to grant the lock.If the lock cannot be granted within this time period, then the call returns a value of 1 (timeout).</Parameter>
            <Parameter Name="RELEASE_ON_COMMIT">Set this parameter to TRUE to release the lock on commit or roll-back.Otherwise, the lock is held until it is explicitly released or until the end of the session.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SLEEP" ElementId="#i997212">
          <Description>Puts a session to sleep for a specific time</Description>
          <Parameters>
            <Parameter Name="SECONDS">Amount of time, in seconds, to suspend the session.The smallest increment can be entered in hundredths of a second; for example, 1.95 is a legal time value.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_LOGMNR" Url="http://docs.oracle.com/database/121/ARPLS/d_logmnr.htm">
      <Description>The DBMS_LOGMNR package, one of a set of LogMiner packages, contains the subprograms you use to initialize the LogMiner tool and to begin and end a LogMiner session.</Description>
      <SubPrograms>
        <SubProgram Name="ADD_LOGFILE" ElementId="#i77176">
          <Description>Adds a redo log file to the existing or newly created list of redo log files for LogMiner to process, so that if a new list is created, this marks the beginning of a LogMiner session</Description>
          <Parameters>
            <Parameter Name="LOGFILENAME">Specifies the name of the redo log file to add to the list of redo log files to be analyzed during this session.</Parameter>
            <Parameter Name="OPTIONS">Does one of the following:Starts a new LogMiner session and a new list of redo log files for analysis (DBMS_LOGMNR.NEW)Adds a file to an existing list of redo log files for analysis (DBMS_LOGMNR.ADDFILE)See Table 90-1, "Constants for ADD_LOGFILE Options Flag".</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="COLUMN_PRESENT" ElementId="#i80784">
          <Description>Call this function for any row returned from the V$LOGMNR_CONTENTS view to determine if undo or redo column values exist for the column specified by the column_name input parameter to this function</Description>
          <Parameters>
            <Parameter Name="SQL_REDO_UNDO">Specifies either the REDO_VALUE or the UNDO_VALUE column in the V$LOGMNR_CONTENTS view from which to extract data values. See the Usage Notes for more information.</Parameter>
            <Parameter Name="COLUMN_NAME">Specifies the fully qualified name (schema.table.column) of the column for which this function will return information.In a CDB, the column name is specified as follows:container_name:schema.table.column</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="END_LOGMNR" ElementId="#i80896">
          <Description>Finishes a LogMiner session</Description>
        </SubProgram>
        <SubProgram Name="MINE_VALUE" ElementId="#i80918">
          <Description>Call this function for any row returned from the V$LOGMNR_CONTENTS view to retrieve the undo or redo column value of the column specified by the column_name input parameter to this function</Description>
          <Parameters>
            <Parameter Name="SQL_REDO_UNDO">Specifies either the REDO_VALUE or the UNDO_VALUE column in the V$LOGMNR_CONTENTS view from which to extract data values. See the Usage Notes for more information.</Parameter>
            <Parameter Name="COLUMN_NAME">Specifies the fully qualified name (schema.table.column) of the column for which this function will return information.In a CDB, the column name is specified as follows:container_name:schema.table.column</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVE_LOGFILE" ElementId="#i77231">
          <Description>Removes a redo log file from the list of redo log files for LogMiner to process</Description>
          <Parameters>
            <Parameter Name="LOGFILENAME">Specifies the name of the redo log file to be removed from the list of redo log files to be analyzed during this session.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="START_LOGMNR" ElementId="#i77269">
          <Description>Initializes the LogMiner utility and starts LogMiner (unless the session was already started with a call to DBMS_LOGMNR.ADD_LOGFILE)</Description>
          <Parameters>
            <Parameter Name="STARTSCN">Directs LogMiner to return only redo records with an SCN greater than or equal to the startScn specified. This fails if there is no redo log file containing the specified startScn value. (You can query the FILENAME, LOW_SCN, and NEXT_SCN columns in the V$LOGMNR_LOGS view for each redo log file to determine the range of SCN values contained in each redo log file.)</Parameter>
            <Parameter Name="ENDSCN">Directs LogMiner to return only redo records with an SCN less than or equal to the endScn specified. If you specify an endScn value that is beyond the value in any redo log file, then LogMiner uses the greatest endScn value in the redo log file that contains the most recent changes. (You can query the FILENAME, LOW_SCN, and NEXT_SCN columns in the V$LOGMNR_LOGS view for each redo log file to determine the range of SCN values contained in each redo log file.)</Parameter>
            <Parameter Name="STARTTIME">Directs LogMiner to return only redo records with a timestamp greater than or equal to the startTime specified. This fails if there is no redo log file containing the specified startTime value. (You can query the FILENAME, LOW_TIME, and HIGH_TIME columns in the V$LOGMNR_LOGS view for each redo log file to determine the range of time covered in each redo log file.)This parameter is ignored if startScn is specified. See the Usage Notes for additional information.</Parameter>
            <Parameter Name="ENDTIME">Directs LogMiner to return only redo records with a timestamp less than or equal to the endTime specified. If you specify an endTime value that is beyond the value in any redo log file, then LogMiner will use the greatest endTime in the redo log file that contains the most recent changes. You can query the FILENAME, LOW_TIME, and HIGH_TIME columns in the V$LOGMNR_LOGS view for each redo log file to determine the range of time covered in each redo log file.)This parameter is ignored if endScn is specified. See the Usage Notes for additional information.</Parameter>
            <Parameter Name="DICTFILENAME">Specifies the flat file that contains the LogMiner dictionary. It is used to reconstruct SQL_REDO and SQL_UNDO columns in V$LOGMNR_CONTENTS, as well as to fully translate SEG_NAME, SEG_OWNER, SEG_TYPE_NAME, TABLE_NAME, and TABLE_SPACE columns. The fully qualified path name for the LogMiner dictionary file must be specified. (This file must have been created previously through the DBMS_LOGMNR_D.BUILD procedure.)You need to specify this parameter only if neither DICT_FROM_REDO_LOGS nor DICT_FROM_ONLINE_CATALOG is specified.</Parameter>
            <Parameter Name="OPTIONS">See Table 90-2, "Constants for START_LOGMNR Options Flag".</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_LOGMNR_D" Url="http://docs.oracle.com/database/121/ARPLS/d_logmnrd.htm">
      <Description>The DBMS_LOGMNR_D package, one of a set of LogMiner packages, contains two subprograms:</Description>
      <SubPrograms>
        <SubProgram Name="BUILD" ElementId="#i77008">
          <Description>Extracts the LogMiner dictionary to either a flat file or one or more redo log files</Description>
          <Parameters>
            <Parameter Name="DICTIONARY_FILENAME">Specifies the name of the LogMiner dictionary file.</Parameter>
            <Parameter Name="DICTIONARY_LOCATION">Specifies the path to the LogMiner dictionary file directory.</Parameter>
            <Parameter Name="OPTIONS">Specifies that the LogMiner dictionary is written to either a flat file (STORE_IN_FLAT_FILE) or the redo log files (STORE_IN_REDO_LOGS).</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_TABLESPACE" ElementId="#i77096">
          <Description>Re-creates all LogMiner tables in an alternate tablespace</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_LOGSTDBY" Url="http://docs.oracle.com/database/121/ARPLS/d_lsbydb.htm">
      <Description>The DBMS_LOGSTDBY package provides subprograms for configuring and managing the logical standby database environment.</Description>
      <SubPrograms>
        <SubProgram Name="APPLY_SET" ElementId="#BDCIEGEI">
          <Description>Sets the values of various parameters that configure and maintain SQL Apply.</Description>
          <Parameters>
            <Parameter Name="APPLY_SERVERS">Controls the number of APPLIER processes used to apply changes. The maximum number allowed is 1024, provided the MAX_SERVERS parameter is set to accommodate this.</Parameter>
            <Parameter Name="EVENT_LOG_DEST">Controls where SQL Apply records the occurrence of an interesting event. It takes the following values:DEST_ALL - All events will be recorded in the DBA_LOGSTDBY_EVENTS view and in the alert log.DEST_EVENTS_TABLE - All events that contain information about user data will be recorded only in the DBA_LOGSTDBY_EVENTS view. This is the default value.For example, if SQL Apply receives an ORA-1403 error, the whole event is recorded in the DBA_LOGSTDBY_EVENTS view. Whereas, the alert log records only that SQL Apply stopped because of ORA-1403. No information regarding the user table or offending statement is logged in the alert log. However, if you stop the SQL Apply engine, it gets recorded in both the DBA_LOGSTDBY_EVENTS view and in the alert log.Note that this parameter affects the behavior of the following parameters: RECORD_APPLIED_DDL, RECORD_SKIP_DDL, RECORD_SKIP_ERRORS, and RECORD_UNSUPPORTED_OPERATIONS. For example, if RECORD_APPLIED_DDL is set to TRUE, but EVENT_LOG_DEST is set to DEST_EVENTS_TABLE, then the applied DDL string will only be recorded in the DBA_LOGSTDBY_EVENTS view.</Parameter>
            <Parameter Name="LOG_AUTO_DEL_RETENTION_TARGET">This parameter setting is only meaningful if LOG_AUTO_DELETE has been set to TRUE. The value you supply for this parameter controls how long (in minutes) a remote archived log that is received from the primary database will be retained at the logical standby database once all redo records contained in the log have been applied at the logical standby database. The default value is 1440 minutes.</Parameter>
            <Parameter Name="LOG_AUTO_DELETE">Automatically deletes foreign archived redo log files as soon as they have been applied on the logical standby database. By default, a foreign archived redo log file is not deleted until 24 hours (the default value of LOG_AUTO_DEL_RETENTION_TARGET parameter) after it has been applied at the logical standby database. Set to TRUE to enable automatic deletion of archived redo log files. Set to FALSE to disable automatic deletion. The default value is TRUE.</Parameter>
            <Parameter Name="MAX_EVENTS_RECORDED">Number of recent events that will be visible through the DBA_LOGSTDBY_EVENTS view. To record all events encountered by SQL Apply, use the DBMS_LOGSTDBY.MAX_EVENTS constant as the number value. The default value is 10,000.</Parameter>
            <Parameter Name="MAX_SERVERS">Number of processes that SQL Apply uses to read and apply redo. The default value is 9. The maximum number allowed is 2048.</Parameter>
            <Parameter Name="MAX_SGA">Number of megabytes from shared pool in System Global Area (SGA) that SQL Apply will use. The default value is 30 megabytes or one quarter of the value set for SHARED_POOL_SIZE, whichever is lower. The maximum size allowed is 4095 megabytes.</Parameter>
            <Parameter Name="PREPARE_SERVERS">Controls the number of PREPARER processes used to prepare changes. The maximum number allowed is 1024, provided the MAX_SERVERS parameter is set to accommodate this.</Parameter>
            <Parameter Name="PRESERVE_COMMIT_ORDER">TRUE: Transactions are applied to the logical standby database in the exact order in which they were committed on the primary database. This is the default parameter setting.FALSE: Transactions containing non-overlapping sets of rows may be committed in a different order than they were committed on the primary database.Regardless of the level chosen, modifications done to the same row are always applied in the same order as they happened on the primary database. See the Usage Notes for details and recommendations.You cannot modify this parameter while SQL Apply is running.</Parameter>
            <Parameter Name="RECORD_APPLIED_DDL">Controls whether DDL statements that have been applied to the logical standby database are recorded in the location specified by the EVENT_LOG_DEST parameter. Specify one of the following values:TRUE: Indicates that DDL statements applied to the logical standby database are recorded in the DBA_LOGSTDBY_EVENTS table and the alert log.FALSE: Indicates that applied DDL statements are not recorded. This is the default parameter setting.</Parameter>
            <Parameter Name="RECORD_SKIP_DDL">Controls whether skipped DDL statements are recorded in the location specified by the EVENT_LOG_DEST parameter. Specify one of the following values:TRUE: Skipped DDL statements are recorded in the DBA_LOGSTDBY_EVENTS table and the alert log. This is the default parameter setting.FALSE: Skipped DDL statements are not recorded in the DBA_LOGSTDBY_EVENTS table and the alert log.</Parameter>
            <Parameter Name="RECORD_SKIP_ERRORS">Controls whether skipped errors (as described by the SKIP_ERROR procedure) are recorded in the location specified by the EVENT_LOG_DEST parameter. Specify one of the following values:TRUE: Skipped errors are recorded in the DBA_LOGSTDBY_EVENTS table and the alert log. This is the default parameter setting.FALSE: Skipped errors are not recorded in the DBA_LOGSTDBY_EVENTS table and the alert log.</Parameter>
            <Parameter Name="RECORD_UNSUPPORTED_OPERATIONS">Captures information about transactions running on the primary database that will not be supported by a logical standby database. This procedure records its information as events in the DBA_LOGSTDBY_EVENTS table. Specify one of the following values:TRUE: The information is captured and recorded as events in the DBA_LOGSTDBY_EVENTS table.FALSE: The information is not captured. This is the default.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="APPLY_UNSET" ElementId="#i997040">
          <Description>Restores the default values of various parameters that configure and maintain SQL Apply.</Description>
        </SubProgram>
        <SubProgram Name="BUILD" ElementId="#i997124">
          <Description>Ensures supplemental logging is enabled properly and builds the LogMiner dictionary.</Description>
        </SubProgram>
        <SubProgram Name="EDS_ADD_TABLE" ElementId="#BGBJHBGE">
          <Description>Adds EDS-based replication for the table. It should be invoked on the primary database first and then on the standby database.</Description>
          <Parameters>
            <Parameter Name="TABLE_OWNER">Owner of the table to be created or re-created in the standby database</Parameter>
            <Parameter Name="TABLE_NAME">Name of the table to be created or re-created in the standby database</Parameter>
            <Parameter Name="P_DBLINK">A database link to the primary database</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EDS_EVOLVE_AUTOMATIC" ElementId="#BGBFFJIE">
          <Description>Enables or disables automatic DDL handling for EDS tables.</Description>
        </SubProgram>
        <SubProgram Name="EDS_EVOLVE_MANUAL" ElementId="#BGBGHJIB">
          <Description>Allows you to evolve EDS tables manually (that is, manually take compensating actions based on DDLs on the base tables with EDS-replication).</Description>
        </SubProgram>
        <SubProgram Name="EDS_REMOVE_TABLE" ElementId="#BGBIEIDF">
          <Description>Removes EDS-based replication for the specified table. It also drops the shadow table and triggers.</Description>
        </SubProgram>
        <SubProgram Name="INSTANTIATE_TABLE" ElementId="#i1008139">
          <Description>Creates and populates a table in the standby database from a corresponding table in the primary database.</Description>
          <Parameters>
            <Parameter Name="SCHEMA_NAME">Name of the schema</Parameter>
            <Parameter Name="TABLE_NAME">Name of the table to be created or re-created in the standby database</Parameter>
            <Parameter Name="DBLINK">Name of the database link account that has privileges to read and lock the table in the primary database, as well as the SELECT_CATALOG_ROLE on the primary database</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IS_APPLY_SERVER" ElementId="#BGBBBDBA">
          <Description>This function returns TRUE if it is executed from PL/SQL in the context of a logical standby apply server process. This function is used in conjunction with triggers that have the fire_once parameter in the DBMS_DDL.SET_TRIGGER_FIRING_PROPERTY subprogram set to FALSE (the default is TRUE). Such triggers are executed when the relevant target is updated by an apply process. This function can be used within the body of the trigger to ensure that the trigger takes different (or no) actions on the primary or on the standby.</Description>
        </SubProgram>
        <SubProgram Name="MAP_PRIMARY_SCN" ElementId="#BABEGDAE">
          <Description>Maps an SCN relevant to the primary database to a corresponding SCN at the logical standby database. The mapped SCN is conservative in nature, and can thus be used to flash back the logical standby database to compensate for a flashback database operation performed at the primary database.</Description>
        </SubProgram>
        <SubProgram Name="PREPARE_FOR_NEW_PRIMARY" ElementId="#BABHDEFF">
          <Description>Used after a failover, this procedure ensures a local logical standby database that was not involved in the failover has not processed more redo than the new primary database and reports the set of archive redo log files that must be replaced to ensure consistency</Description>
          <Parameters>
            <Parameter Name="FORMER_STANDBY_TYPE">The type of standby database that was the target of the failover operation to become the new primary database. Valid values are 'PHYSICAL' if the new primary was formerly a physical standby, and 'LOGICAL' if the new primary database was formerly a logical standby database.</Parameter>
            <Parameter Name="DBLINK">The name of a database link to the new primary database</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PURGE_SESSION" ElementId="#BABCABAG">
          <Description>Identifies the archived redo log files that have been applied to the logical standby database and are no longer needed by SQL Apply</Description>
        </SubProgram>
        <SubProgram Name="REBUILD" ElementId="#BABCBCGF">
          <Description>Records relevant metadata (including the LogMiner dictionary) in the redo stream in case a database that has recently changed its role to a primary database following a failover operation fails to do so during the failover process</Description>
        </SubProgram>
        <SubProgram Name="SET_TABLESPACE" ElementId="#CHDIHFAF">
          <Description>Moves metadata tables required by SQL Apply to the user-specified tablespace. By default, the metadata tables are created in the SYSAUX tablespace.</Description>
        </SubProgram>
        <SubProgram Name="SKIP" ElementId="#i997288">
          <Description>Specifies rules that control database operations that should not be applied to the logical standby database</Description>
          <Parameters>
            <Parameter Name="STMT">Either a keyword that identifies a set of SQL statements or a specific SQL statement. The use of keywords simplifies configuration since keywords, generally defined by the database object, identify all SQL statements that operate on the specified object. Table 92-23 shows a list of keywords and the equivalent SQL statements, either of which is a valid value for this parameter.The keyword PL/SQL is used for the execution of Oracle-supplied packages which are supported for replication. See Oracle Data Guard Concepts and Administration for information about supported packages.</Parameter>
            <Parameter Name="SCHEMA_NAME">The name of one or more schemas (wildcards are permitted) associated with the SQL statements identified by the stmt parameter. If not applicable, this value must be set to NULL.</Parameter>
            <Parameter Name="OBJECT_NAME">The name of one or more objects (wildcards are permitted) associated with the SQL statements identified by the stmt. If not applicable, this value must be set to NULL.</Parameter>
            <Parameter Name="PROC_NAME">Name of a stored procedure to call when SQL Apply determines that a particular statement matches the filter defined by the stmt, schema_name, and object_name parameters. Specify the procedure in the following format:'schema.package.procedure'This procedure returns a value that directs SQL Apply to perform one of the following: execute the statement, skip the statement, or execute a replacement statement.The procedures to be invoked in the case of DDL or PL/SQL take no arguments. You can access the various information needed inside the procedure by accessing the context associated with the namespace,LSBY_APPLY_CONTEXT.For a full list of parameters that are accessible in the context of the skip procedure, see the DBMS_LOGSTBDY_CONTEXT package.The parameters of interest in the case of DDLs are: STATEMENT, STATEMENT_TYPE, SCHEMA, NAME, CURENT_SCHEMA, XIDUSN, XIDSLT, XIDSQN and SKIP_ACTION.The parameters of interest in the case of PL/SQL are: STATEMENT, PACKAGE_SCHMEMA, PACKAGE_NAME, PROCEDURE_NAME, CURRENT_SCHEMA, XIDUSN, XIDSLT, XIDSQN, EXIT_STATUS, and SKIP_ACTION..Note 1: The DBMS_LOGSTDBY.SKIP_ACTION_REPLACE constant is not supported for PL/SQL.Note 2: SQL Apply calls the skip handler when the procedure's exit is processed.Note 3: The use_like parameter must be set to FALSE for PL/SQL since wildcarding PL/SQL is not supported.</Parameter>
            <Parameter Name="PROC_NAME">A sample conditional skip rule on DBMS_RLS.DROP_POLICY is as follows:</Parameter>
            <Parameter Name="USE_LIKE">Allows pattern matching to isolate the tables that you want to skip on the logical standby database. The use_like parameter matches a portion of one character value to another by searching the first value for the pattern specified by the second, and calculates strings using characters as defined by the input character set. This parameter follows the same rules for pattern matching described in the Oracle Database SQL Language Reference.</Parameter>
            <Parameter Name="ESC">Identifies an escape character (such as the character "/") that you can use for pattern matching. If the escape character appears in the pattern before the character "%" or "_" then Oracle interprets this character literally in the pattern, rather than as a special pattern matching character. SeeOracle Database SQL Language Reference for more information about pattern matching.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SKIP_ERROR" ElementId="#i997648">
          <Description>Specifies rules regarding what action to take upon encountering errors.</Description>
          <Parameters>
            <Parameter Name="STMT">Either a keyword that identifies a set of SQL statements or a specific SQL statement. The use of keywords simplifies configuration because keywords, generally defined by the database object, identify all SQL statements that operate on the specified object. Table 92-23 shows a list of keywords and the equivalent SQL statements, either of which is a valid value for this parameter.</Parameter>
            <Parameter Name="SCHEMA_NAME">The name of one or more schemas (wildcards are permitted) associated with the SQL statements identified by the stmt parameter. If not applicable, this value must be set to NULL.</Parameter>
            <Parameter Name="OBJECT_NAME">The name of one or more objects (wildcards are permitted) associated with the SQL statements identified by the stmt. If not applicable, this value must be set to NULL.</Parameter>
            <Parameter Name="PROC_NAME">Name of a stored procedure to call when SQL Apply encounters an error and determines a particular statement matches the filter defined by the stmt, schema_name, and object_name parameters. Specify the procedure in the following format:'"schema"."package"."procedure"'This procedure returns an error message that directs SQL Apply to perform one of the following actions:Silently skip the error and continue with SQL ApplyReplace the error message that would have been created with a custom one, and stop SQL ApplyDo nothing, causing SQL Apply to stop and the original error message to be loggedThe procedure registered with SQL Apply does not take any parameters. The context associated with LSBY_APPLY_CONTEXT can be used to retrieve all relevant information related to the error. See the DBMS_LOGSTDBY_CONTEXT package for a list of all parameters associated with LSBY_APPLY_CONTEXT.The parameters of interest for procedures registered with SKIP_ERROR are CONTAINER_NAME, STATEMENT, STATEMENT_TYPE, SCHEMA, NAME, XIDUSN, XIDSLT, XIDSQN, ERROR and NEW_ERROR.</Parameter>
            <Parameter Name="USE_LIKE">Allows pattern matching to isolate the tables that you want to skip on the logical standby database. The use_like parameter matches a portion of one character value to another by searching the first value for the pattern specified by the second, and calculates strings using characters as defined by the input character set. This parameter follows the same rules for pattern matching described in the Oracle Database SQL Language Reference.</Parameter>
            <Parameter Name="ESC">Identifies an escape character (such as the characters "%" or "_") that you can use for pattern matching. If the escape character appears in the pattern before the character "%" or "_" then Oracle interprets this character literally in the pattern, rather than as a special pattern matching character. SeeOracle Database SQL Language Reference for more information about pattern matching.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SKIP_TRANSACTION" ElementId="#i997765">
          <Description>Specifies transactions that should not be applied on the logical standby database. Be careful in using this procedure, because not applying specific transactions may cause data corruption at the logical standby database.</Description>
          <Parameters>
            <Parameter Name="XIDUSN NUMBER">Transaction ID undo segment number of the transaction being skipped</Parameter>
            <Parameter Name="XIDSLT NUMBER">Transaction ID slot number of the transaction being skipped</Parameter>
            <Parameter Name="XIDSQN NUMBER">Transaction ID sequence number of the transaction being skipped</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UNSKIP" ElementId="#BGBFBFEH">
          <Description>Deletes rules specified by the SKIP procedure.</Description>
        </SubProgram>
        <SubProgram Name="UNSKIP_ERROR" ElementId="#i997837">
          <Description>Deletes rules specified by the SKIP_ERROR procedure.</Description>
        </SubProgram>
        <SubProgram Name="UNSKIP_TRANSACTION" ElementId="#i997855">
          <Description>Deletes rules specified by the SKIP_TRANSACTION procedure.</Description>
          <Parameters>
            <Parameter Name="XIDUSN">Transaction ID undo segment number of the transaction being skipped</Parameter>
            <Parameter Name="XIDSLT">Transaction ID slot number of the transaction being skipped</Parameter>
            <Parameter Name="XIDSQN">Transaction ID sequence number of the transaction being skipped</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_LOGSTDBY_CONTEXT" Url="http://docs.oracle.com/database/121/ARPLS/d_logstdby_context.htm">
      <Description>As of Oracle Database 12c release 1 (12.1), SQL Apply processes have access to a context namespace called LSBY_APPLY_CONTEXT. You can use the procedures provided in the DBMS_LOGSTDBY_CONTEXT package to set and retrieve various parameters associated with LSBY_APPLY_CONTEXT. This is useful when writing skip procedures that are registered with SQL Apply using the DBMS_LOGSTBDY.SKIP and DBMS_LOGSTDBY.SKIP_ERROR procedures.</Description>
      <SubPrograms>
        <SubProgram Name="CLEAR_ALL_CONTEXT" ElementId="#BABHDBBE">
          <Description>Clears all parameters contained within namespace LSBY_APPLY_CONTEXT.</Description>
        </SubProgram>
        <SubProgram Name="CLEAR_CONTEXT" ElementId="#BABDJGHB">
          <Description>Clears the specific parameter.</Description>
          <Parameters>
            <Parameter Name="NAME">Name of the parameter to be cleared.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_CONTEXT" ElementId="#BABFEGDG">
          <Description>Retrieves the value for the specified parameter.</Description>
          <Parameters>
            <Parameter Name="NAME">Name of the parameter.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_CONTEXT" ElementId="#BABEFICA">
          <Description>Sets the named parameter with the specified value.</Description>
          <Parameters>
            <Parameter Name="NAME">Name of the parameter to be set.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_METADATA" Url="http://docs.oracle.com/database/121/ARPLS/d_metada.htm">
      <Description>The DBMS_METADATA package provides a way for you to retrieve metadata from the database dictionary as XML or creation DDL and to submit the XML to re-create the object.</Description>
      <SubPrograms>
        <SubProgram Name="ADD_TRANSFORM" ElementId="#i1018757">
          <Description>Specifies a transform that FETCH_xxx applies to the XML representation of the retrieved objects</Description>
        </SubProgram>
        <SubProgram Name="CLOSE" ElementId="#i1018912">
          <Description>Invalidates the handle returned by OPEN and cleans up the associated state</Description>
        </SubProgram>
        <SubProgram Name="CONVERT" ElementId="#i1019048">
          <Description>Converts an XML document to DDL.</Description>
        </SubProgram>
        <SubProgram Name="FETCH_xxx" ElementId="#i1019125">
          <Description>Returns metadata for objects meeting the criteria established by OPEN, SET_FILTER, SET_COUNT, ADD_TRANSFORM, and so on</Description>
        </SubProgram>
        <SubProgram Name="GET_xxx" ElementId="#i1019414">
          <Description>Fetches the metadata for a specified object as XML, SXML, or DDL, using only a single call</Description>
        </SubProgram>
        <SubProgram Name="GET_QUERY" ElementId="#i1019267">
          <Description>Returns the text of the queries that are used by FETCH_xxx</Description>
        </SubProgram>
        <SubProgram Name="OPEN" ElementId="#i1018906">
          <Description>Specifies the type of object to be retrieved, the version of its metadata, and the object model</Description>
        </SubProgram>
        <SubProgram Name="OPENW" ElementId="#i1019325">
          <Description>Opens a write context</Description>
          <Parameters>
            <Parameter Name="OBJECT_TYPE">The type of object to be submitted. Valid types names and their meanings are listed in Table 94-12. The type cannot be a heterogeneous object type.</Parameter>
            <Parameter Name="VERSION">The version of DDL to be generated by the CONVERT function. DDL clauses that are incompatible with the version will not be generated. The legal values for this parameter are as follows:COMPATIBLE - This is the default. The version of the DDL corresponds to the database compatibility level. Database compatibility must be set to 9.2.0 or higher.LATEST - The version of the DDL corresponds to the database version.A specific database version. The value cannot be lower than 9.2.0.</Parameter>
            <Parameter Name="MODEL">Specifies which view to use. Only the Oracle proprietary (ORACLE) view is supported by DBMS_METADATA.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PUT" ElementId="#i1019618">
          <Description>Submits an XML document to the database</Description>
          <Parameters>
            <Parameter Name="HANDLE">The handle returned from OPENW.</Parameter>
            <Parameter Name="DOCUMENT">The XML document containing object metadata for the type of the OPENW handle.</Parameter>
            <Parameter Name="FLAGS">Reserved for future use</Parameter>
            <Parameter Name="RESULTS">Detailed results of the operation.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_COUNT" ElementId="#i1019710">
          <Description>Specifies the maximum number of objects to be retrieved in a single FETCH_xxx call</Description>
        </SubProgram>
        <SubProgram Name="SET_FILTER" ElementId="#i998485">
          <Description>Specifies restrictions on the objects to be retrieved, for example, the object name or schema</Description>
        </SubProgram>
        <SubProgram Name="SET_PARSE_ITEM" ElementId="#i999844">
          <Description>Enables output parsing by specifying an object attribute to be parsed and returned</Description>
        </SubProgram>
        <SubProgram Name="SET_TRANSFORM_PARAM" ElementId="#i1000135">
          <Description>Specifies parameters to the XSLT stylesheets identified by transform_handle</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_METADATA_DIFF" Url="http://docs.oracle.com/database/121/ARPLS/d_metadiff.htm">
      <Description>The DBMS_METADATA_DIFF package contains the interfaces for comparing two metadata documents in SXML format.</Description>
      <SubPrograms>
        <SubProgram Name="OPENC" ElementId="#CHEIGFDG">
          <Description>Specifies the type of objects to be compared</Description>
        </SubProgram>
        <SubProgram Name="ADD_DOCUMENT" ElementId="#CHEGEICI">
          <Description>Specifies an SXML document to be compared</Description>
        </SubProgram>
        <SubProgram Name="FETCH_CLOB" ElementId="#CHEHEAFJ">
          <Description>Returns a CLOB showing the differences between the two documents specified by ADD_DOCUMENT</Description>
        </SubProgram>
        <SubProgram Name="CLOSE" ElementId="#CHEEHABD">
          <Description>Invalidates the handle returned by OPENC and cleans up associated state</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_MGD_ID_UTL" Url="http://docs.oracle.com/database/121/ARPLS/d_mgd_id_utl.htm">
      <Description>The DBMS_MGD_ID_UTL package contains various functions and procedures that comprise the following utility subprograms:</Description>
    </Package>
    <Package Name="DBMS_MGWADM" Url="http://docs.oracle.com/database/121/ARPLS/d_mgwadm.htm">
      <Description>DBMS_MGWADM defines the Messaging Gateway administrative interface. The package and object types are owned by SYS.</Description>
      <SubPrograms>
        <SubProgram Name="ADD_SUBSCRIBER" ElementId="#i1029908">
          <Description>Adds a subscriber used to consume messages from a source queue for propagation to a destination</Description>
          <Parameters>
            <Parameter Name="SUBSCRIBER_ID">Specifies a user-defined name that identifies this subscriber</Parameter>
            <Parameter Name="PROPAGATION_TYPE">Specifies the type of message propagation. DBMS_MGWADM.OUTBOUND_PROPAGATION is for Oracle Database Advanced Queuing to non-Oracle propagation. DBMS_MGWADM.INBOUND_PROPAGATION is for non-Oracle to Oracle Database Advanced Queuing propagation</Parameter>
            <Parameter Name="QUEUE_NAME">Specifies the source queue to which this subscriber is being added. The syntax and interpretation of this parameter depend on the value specified for propagation_type.</Parameter>
            <Parameter Name="DESTINATION">Specifies the destination queue to which messages consumed by this subscriber are propagated. The syntax and interpretation of this parameter depend on the value specified for propagation_type.</Parameter>
            <Parameter Name="RULE">Specifies an optional subscription rule used by the subscriber to dequeue messages from the source queue. This is NULL if no rule is needed. The syntax and interpretation of this parameter depend on the value specified for propagation_type.</Parameter>
            <Parameter Name="TRANSFORMATION">Specifies the transformation needed to convert between the Oracle Database Advanced Queuing payload and an ADT defined by Messaging Gateway. The type of transformation needed depends on the value specified for propagation_type.If NULL, then the Oracle Database Advanced Queuing payload type must be supported by Messaging Gateway.</Parameter>
            <Parameter Name="EXCEPTION_QUEUE">Specifies a queue used for exception message logging purposes. This queue must be on the same messaging system as the propagation source. If NULL, then an exception queue is not used and propagation stops if a problem occurs. The syntax and interpretation of this parameter depend on the value specified for propagation_type.The source queue and exception queue cannot be the same queue.</Parameter>
            <Parameter Name="OPTIONS">Optional subscriber properties. NULL if there are none. Typically these are lesser used configuration properties supported by the messaging system.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ALTER_AGENT" ElementId="#i997781">
          <Description>Alters Messaging Gateway agent parameters</Description>
          <Parameters>
            <Parameter Name="MAX_CONNECTIONS">The maximum number of messaging connections to Oracle Database used by the Messaging Gateway agent. If it is NULL, then the current value is unchanged.Caution: This parameter has been deprecated.</Parameter>
            <Parameter Name="MAX_MEMORY">The maximum heap size, in MB, used by the Messaging Gateway agent. If it is NULL, then the current value is unchanged.</Parameter>
            <Parameter Name="MAX_THREADS">The number of messaging threads that the Messaging Gateway agent creates. If it is NULL, then the current value is unchanged.</Parameter>
            <Parameter Name="SERVICE">Specifies the database service that the Oracle Scheduler job class used by this agent will have affinity to. In an Oracle RAC environment, this means that the Messaging Gateway agent will run on only those database instances that are assigned to the service. If NULL, the job class used by this agent will be altered to belong to the default service which is mapped to every instance. If DBMS_MGWADM.NO_CHANGE, the current value is unchanged.</Parameter>
            <Parameter Name="AGENT_NAME">Identifies the Messaging Gateway agent. DBMS_MGWADM.DEFAULT_AGENT specifies the default agent.</Parameter>
            <Parameter Name="USERNAME">Specifies the username used for connections to the Oracle Database. NULL is not allowed. If DBMS_MGWADM.NO_CHANGE, then the current value is unchanged. If a username is specified then a password must also be specified.</Parameter>
            <Parameter Name="PASSWORD">Specifies the password used for connections to the Oracle Database. NULL is not allowed. If DBMS_MGWADM.NO_CHANGE, then the current value is unchanged. A password must be specified if a username is specified.</Parameter>
            <Parameter Name="DATABASE">Specifies the database connect string used for connections to the Oracle Database. NULL indicates that a local connection should be used. If DBMS_MGWADM.NO_CHANGE, then the current value is unchanged.Oracle strongly recommends that a connect string, rather than NULL, be specified. Usually it will be a net service name from tnsnames.ora.</Parameter>
            <Parameter Name="CONNTYPE">Specifies the type of connection to the Oracle Database, DBMS_MGWADM.JDBC_OCI or DBMS_MGWADM.JDBC_THIN. If DBMS_MGWADM.NO_CHANGE, then the current value is unchanged</Parameter>
            <Parameter Name="INITFILE">Specifies a Messaging Gateway initialization file used by this agent. NULL indicates that the default initialization file is used. If a value is specified, it should be the full path name of the file. If DBMS_MGWADM.NO_CHANGE, then the current value is unchanged.</Parameter>
            <Parameter Name="COMMENT">Optional comments for this agent. NULL if a comment is not desired. If DBMS_MGWADM.NO_CHANGE, then the current value is unchanged.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ALTER_JOB" ElementId="#CHDFFJGD">
          <Description>Alters the properties of a propagation job</Description>
          <Parameters>
            <Parameter Name="JOB_NAME">Identifies the propagation job</Parameter>
            <Parameter Name="RULE">Specifies an optional subscription rule used to dequeue messages from the propagation source. The syntax and interpretation of this parameter depend on the propagation type. A NULL value indicates that no subscription rule is needed. If DBMS_MGWADM.NO_CHANGE, then the current value is unchanged.</Parameter>
            <Parameter Name="TRANSFORMATION">Specifies the transformation needed to convert between the Oracle Streams AQ payload and an ADT defined by Messaging Gateway. The type of transformation needed depends on the value specified for propagation_type.A NULL value indicates that no transformation is needed. If DBMS_MGWADM.NO_CHANGE, the current value is unchanged.</Parameter>
            <Parameter Name="EXCEPTION_QUEUE">Specifies a queue used for exception message logging purposes. This queue must be on the same messaging system as the propagation source. In cases in which no exception queue is associated with the job, propagation stops if a problem occurs. The syntax and interpretation of this parameter depend on the propagation type.A NULL value indicates that no exception queue is used. If DBMS_MGWADM.NO_CHANGE, the current value is unchanged.</Parameter>
            <Parameter Name="POLL_INTERVAL">Specifies the polling interval, in seconds, used by the Messaging Gateway agent when checking for messages in the source queue. If no messages are available the agent will not poll again until the polling interval has passed. Once the agent detects a message it will continue propagating messages as long as any are available.Values: NULL, 0, or value &gt; 0:If zero (default), the current value will not be changed.If NULL, the current value will be reset and the Messaging Gateway default polling interval will be used. The default polling interval is 5 seconds and can be overridden by the Messaging Gateway initialization file.</Parameter>
            <Parameter Name="OPTIONS">Optional job properties. If NULL, no options will be changed. If not NULL, then the properties specified in this list are combined with the current optional properties to form a new set of job options.</Parameter>
            <Parameter Name="COMMENTS">An optional comment for this agent, or NULL if one is not desired. If DBMS_MGWADM.NO_CHANGE, the current value will not be changed.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ALTER_MSGSYSTEM_LINK" ElementId="#i1029999">
          <Description>Alters the properties of a TIB/Rendezvous messaging system link</Description>
        </SubProgram>
        <SubProgram Name="ALTER_MSGSYSTEM_LINK" ElementId="#i1030090">
          <Description>Alters the properties of a WebSphere MQ messaging system link</Description>
        </SubProgram>
        <SubProgram Name="ALTER_PROPAGATION_SCHEDULE" ElementId="#i1030147">
          <Description>Alters a propagation schedule</Description>
          <Parameters>
            <Parameter Name="SCHEDULE_ID">Identifies the propagation schedule to be altered</Parameter>
            <Parameter Name="DURATION">Reserved for future use</Parameter>
            <Parameter Name="NEXT_TIME">Reserved for future use</Parameter>
            <Parameter Name="LATENCY">Specifies the polling interval, in seconds, used by the Messaging Gateway agent when checking for messages in the source queue. If no messages are available in the source queue, then the agent will not poll again until the polling interval has passed. Once the agent detects a message it will continue propagating messages as long as any are available.Values: NULL or value &gt; 0. If latency is NULL, then the Messaging Gateway agent default polling interval will be used. The default polling interval is 5 seconds, but it can be overridden by the Messaging Gateway initialization file.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ALTER_SUBSCRIBER" ElementId="#i1030281">
          <Description>Alters the parameters of a subscriber used to consume messages from a source queue for propagation to a destination</Description>
          <Parameters>
            <Parameter Name="SUBSCRIBER_ID">Identifies the subscriber to be altered</Parameter>
            <Parameter Name="RULE">Specifies an optional subscription rule used by the subscriber to dequeue messages from the source queue. The syntax and interpretation of this parameter depend on the subscriber propagation type.A NULL value indicates that no subscription rule is needed. If DBMS_MGWADM.NO_CHANGE, then the current value is unchanged.</Parameter>
            <Parameter Name="TRANSFORMATION">Specifies the transformation needed to convert between the Oracle Database Advanced Queuing payload and an ADT defined by Messaging Gateway. The type of transformation needed depends on the subscriber propagation type.A NULL value indicates that no transformation is needed. If DBMS_MGWADM.NO_CHANGE, then the current value is unchanged.</Parameter>
            <Parameter Name="EXCEPTION_QUEUE">Specifies a queue used for exception message logging. This queue must be on the same messaging system as the propagation source. If no exception queue is associated with the subscriber, then propagation stops if a problem occurs. The syntax and interpretation of this parameter depend on the subscriber propagation type.A NULL value indicates that no exception queue is used. If DBMS_MGWADM.NO_CHANGE, then the current value is unchanged.The source queue and exception queue cannot be the same queue.</Parameter>
            <Parameter Name="OPTIONS">Optional subscriber properties. If NULL, then no options will be changed. If not NULL, then the properties specified in this list are combined with the current optional properties to form a new set of subscriber options.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CLEANUP_GATEWAY" ElementId="#i1030285">
          <Description>Cleans up Messaging Gateway</Description>
          <Parameters>
            <Parameter Name="ACTION">The cleanup action to be performed. Values:DBMS_MGWADM.CLEAN_STARTUP_STATE for Messaging Gateway start up state recoveryDBMS_MGWADM.CLEAN_LOG_QUEUES for log queue cleanupDBMS_MGWADM.RESET_SUB_MISSING_LOG_REC for propagation job recovery due to missing log recordDBMS_MGWADM.RESET_SUB_MISSING_MESSAGE for propagation job recovery due to missing message</Parameter>
            <Parameter Name="SARG">Optional argument whose meaning depends on the value specified for action. This should be NULL if it is not used for the specified action.</Parameter>
            <Parameter Name="AGENT_NAME">Identifies the Messaging Gateway agent. DBMS_MGWADM.DEFAULT_AGENT specifies the default agent.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_AGENT" ElementId="#BABGJDJG">
          <Description>Creates a Messaging Gateway agent that will be used to process propagation jobs</Description>
          <Parameters>
            <Parameter Name="AGENT_NAME">A name used to identify the agent</Parameter>
            <Parameter Name="USERNAME">Specifies the username used for connections to the Oracle Database</Parameter>
            <Parameter Name="PASSWORD">Specifies the password used for connections to the Oracle Database. A password must be specified if a username is specified.</Parameter>
            <Parameter Name="DATABASE">Specifies the database connect string used for connections to the Oracle Database. NULL indicates that a local connection should be used. A value can be specified only if username is specified. Oracle strong recommends that a connect string, rather than NULL be specified. Usually it will be a net service name from tnsnames.ora.</Parameter>
            <Parameter Name="CONNTYPE">Specifies the type of connection to the Oracle Database.Values: DBMS_MGWADM.JDBC_OCI, DBMS_MGWADM.JDBC_THIN</Parameter>
            <Parameter Name="MAX_MEMORY">Specifies the maximum heap size, in MB, used by the Messaging Gateway agent</Parameter>
            <Parameter Name="MAX_THREADS">Specifies the number of messaging threads that the Messaging Gateway agent creates. This determines the number of propagation jobs that the agent can concurrently process.</Parameter>
            <Parameter Name="SERVICE">Specifies the database service that the Oracle Scheduler job class used by this agent will have affinity to. In an Oracle RAC environment, this means that the Messaging Gateway agent will only run on those database instances that are assigned to the service. If NULL, then the job class will belong to the default service which is mapped to every instance.</Parameter>
            <Parameter Name="INITFILE">Specifies a Messaging Gateway initialization file used by this agent. NULL indicates that the default initialization file is used. If a value is specified, it should be the full path name of the file.</Parameter>
            <Parameter Name="COMMENT">An optional comment for this agent. NULL if one is not desired.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_JOB" ElementId="#CHDGGCEB">
          <Description>Creates a job used to propagate message from a source to a destination</Description>
          <Parameters>
            <Parameter Name="JOB_NAME">A user defined name to identify the propagation job</Parameter>
            <Parameter Name="PROPAGATION_TYPE">Specifies the type of message propagation.DBMS_MGWADM.OUTBOUND_PROPAGATION for Oracle Streams AQ to non-Oracle propagation.DBMS_MGWADM.INBOUND_PROPAGATION for non-Oracle to Oracle Streams AQ propagation.</Parameter>
            <Parameter Name="SOURCE">Specifies the source queue whose messages are to be propagated. The syntax and interpretation of this parameter depend on the value specified for propagation_type.</Parameter>
            <Parameter Name="DESTINATION">Specifies the destination queue to which messages are propagated. The syntax and interpretation of this parameter depend on the value specified for propagation_type.</Parameter>
            <Parameter Name="RULE">Specifies an optional subscription rule used to dequeue messages from the source queue. This should be NULL if no rule is needed. The syntax and interpretation of this parameter depend on the value specified for propagation_type.</Parameter>
            <Parameter Name="TRANSFORMATION">Specifies the transformation needed to convert between the Oracle Streams AQ payload and an ADT defined by Messaging Gateway. The type of transformation needed depends on the value specified for propagation_type.If no transformation is specified the Oracle Streams AQ payload type must be supported by Messaging Gateway.</Parameter>
            <Parameter Name="EXCEPTION_QUEUE">Specifies a queue used for exception message logging purposes. This queue must be on the same messaging system as the propagation source. If NULL, an exception queue will not be used and propagation will stop if a problem occurs. The syntax and interpretation of this parameter depend on the value specified for propagation_type.The source queue and exception queue cannot be the same queue.</Parameter>
            <Parameter Name="POLL_INTERVAL">Specifies the polling interval, in seconds, used by the Messaging Gateway agent when checking for messages in the source queue. If no messages are available the agent will not poll again until the polling interval has passed. Once the agent detects a message it will continue propagating messages as long as any are available.Values: NULL or value &gt; 0. If NULL, then the Messaging Gateway default polling interval will be used. The default polling interval is 5 seconds and can be overridden by the Messaging Gateway initialization file.</Parameter>
            <Parameter Name="OPTIONS">Optional job properties, NULL if there are none. Typically these are lesser used configuration properties supported by the messaging system.</Parameter>
            <Parameter Name="ENABLED">Specifies whether this propagation job is enabled after creation. Values: TRUE, FALSE.If TRUE (default), the job will be enabled after it is created.If FALSE, the job will be disabled after it is created. A propagation job must be enabled and the Messaging Gateway agent running before messages can be propagated.</Parameter>
            <Parameter Name="COMMENTS">An optional comment for this job. NULL if one is not desired.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_MSGSYSTEM_LINK" ElementId="#i1030432">
          <Description>Creates a messaging system link to a TIB/Rendezvous messaging system</Description>
        </SubProgram>
        <SubProgram Name="CREATE_MSGSYSTEM_LINK" ElementId="#i1030567">
          <Description>Creates a messaging system link to a WebSphere MQ messaging system</Description>
        </SubProgram>
        <SubProgram Name="DB_CONNECT_INFO" ElementId="#i1030666">
          <Description>Configures connection information used by the Messaging Gateway agent for connections to Oracle Database</Description>
          <Parameters>
            <Parameter Name="USERNAME">The username used for connections to Oracle Database. NULL is not allowed</Parameter>
            <Parameter Name="PASSWORD">The password used for connections to Oracle Database. NULL is not allowed</Parameter>
            <Parameter Name="DATABASE">The database connect string used by the Messaging Gateway agent. NULL indicates that a local connection should be used.Oracle strongly recommends that a not NULL value be specified. Usually it will be a net service name from tnsnames.ora.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DISABLE_JOB" ElementId="#CHDFAHAH">
          <Description>Disables a propagation job</Description>
        </SubProgram>
        <SubProgram Name="DISABLE_PROPAGATION_SCHEDULE" ElementId="#i1030712">
          <Description>Disables a propagation schedule</Description>
          <Parameters>
            <Parameter Name="SCHEDULE_ID">Identifies the propagation schedule to be disabled</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ENABLE_JOB" ElementId="#CHDEJJBC">
          <Description>Enables a propagation job</Description>
          <Parameters>
            <Parameter Name="JOB_NAME">Identifies the propagation job</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ENABLE_PROPAGATION_SCHEDULE" ElementId="#i1030743">
          <Description>Enables a propagation schedule</Description>
          <Parameters>
            <Parameter Name="SCHEDULE_ID">Identifies the propagation schedule to be enabled</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REGISTER_FOREIGN_QUEUE" ElementId="#i1030839">
          <Description>Registers a non-Oracle queue entity in Messaging Gateway</Description>
          <Parameters>
            <Parameter Name="NAME">The registered queue name. This name identifies the foreign queue within Messaging Gateway and need not match the name of the queue in the foreign messaging system.</Parameter>
            <Parameter Name="LINKNAME">The link name for the messaging system on which this queue exists</Parameter>
            <Parameter Name="PROVIDER_QUEUE">The message provider (native) queue name. If NULL, then the value provided for the name parameter is used as the provider queue name.</Parameter>
            <Parameter Name="DOMAIN">The domain type of the queue. NULL means the domain type is automatically determined based on the messaging system of the queue. DBMS_MGWADM.DOMAIN_QUEUE is for a queue (point-to-point model). DBMS_MGWADM.DOMAIN_TOPIC is for a topic (publish-subscribe model).</Parameter>
            <Parameter Name="OPTIONS">Optional queue properties</Parameter>
            <Parameter Name="COMMENT">A user-specified description. Can be NULL.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVE_AGENT" ElementId="#BABCFIEC">
          <Description>Removes a Messaging Gateway agent</Description>
          <Parameters>
            <Parameter Name="AGENT_NAME">Identifies the Messaging Gateway agent</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVE_JOB" ElementId="#CHDIIBIC">
          <Description>Removes a propagation job</Description>
          <Parameters>
            <Parameter Name="JOB_NAME">Identifies the propagation job</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVE_MSGSYSTEM_LINK" ElementId="#i1030879">
          <Description>Removes a messaging system link for a non-Oracle messaging system</Description>
          <Parameters>
            <Parameter Name="LINKNAME">The messaging system link name</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVE_OPTION" ElementId="#CHDCGDBB">
          <Description>Removes a Messaging Gateway configuration option</Description>
          <Parameters>
            <Parameter Name="TARGET_TYPE">Specifies the target type of the Messaging Gateway entity:DBMS_MGWADM.AGENT_JAVA_PROP to remove a Java System property for a Messaging Gateway agentDBMS_MGWADM.MSGLINK_OPTION to remove a messaging link optionDBMS_MGWADM.JOB_OPTION to remove a propagation job option</Parameter>
            <Parameter Name="TARGET_NAME">Name or identifier of the target. The value for this parameter depends on the value specified for target_type parameter. This must not be NULL.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVE_SUBSCRIBER" ElementId="#i1030885">
          <Description>Removes a subscriber used to consume messages from a source queue for propagation to a destination</Description>
          <Parameters>
            <Parameter Name="SUBSCRIBER_ID">Identifies the subscriber to be removed</Parameter>
            <Parameter Name="FORCE">Specifies whether this procedure should succeed even if Messaging Gateway is not able to perform all cleanup actions pertaining to this subscriber.Values: DBMS_MGWADM.NO_FORCE, DBMS_MGWADM.FORCENO_FORCE means the subscriber is not removed if Messaging Gateway is unable to clean up successfully (default)FORCE means the subscriber is removed even though all cleanup actions may not be done</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RESET_JOB" ElementId="#i1030972">
          <Description>Resets the propagation error state for a propagation job</Description>
          <Parameters>
            <Parameter Name="JOB_NAME">Identifies the propagation job</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RESET_SUBSCRIBER" ElementId="#CHDEHCED">
          <Description>Resets the propagation error state for a subscriber</Description>
          <Parameters>
            <Parameter Name="SUBSCRIBER_ID">Identifies the subscriber</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SCHEDULE_PROPAGATION" ElementId="#i1031125">
          <Description>Schedules message propagation from a source to a destination</Description>
          <Parameters>
            <Parameter Name="SCHEDULE_ID">Specifies a user-defined name that identifies the schedule</Parameter>
            <Parameter Name="PROPAGATION_TYPE">Specifies the type of message propagation. DBMS_MGWADM.OUTBOUND_PROPAGATION is for Oracle Database Advanced Queuing to non-Oracle propagation. DBMS_MGWADM.INBOUND_PROPAGATION is for non-Oracle to Oracle Database Advanced Queuing propagation.</Parameter>
            <Parameter Name="SOURCE">Specifies the source queue whose messages are to be propagated. The syntax and interpretation of this parameter depend on the value specified for propagation_type.</Parameter>
            <Parameter Name="DESTINATION">Specifies the destination queue to which messages are propagated. The syntax and interpretation of this parameter depend on the value specified for propagation_type.</Parameter>
            <Parameter Name="START_TIME">Reserved for future use</Parameter>
            <Parameter Name="DURATION">Reserved for future use</Parameter>
            <Parameter Name="NEXT_TIME">Reserved for future use</Parameter>
            <Parameter Name="LATENCY">Specifies the polling interval, in seconds, used by the Messaging Gateway agent when checking for messages in the source queue. If no messages are available in the source queue, then the agent will not poll again until the polling interval has passed. Once the agent detects a message it will continue propagating messages as long as any are available.Values: NULL or value &gt; 0. If latency is NULL, then the Messaging Gateway agent default polling interval will be used. The default polling interval is 5 seconds but it can be overridden by the Messaging Gateway initialization file.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_LOG_LEVEL" ElementId="#i1031022">
          <Description>Dynamically alters the Messaging Gateway agent logging level</Description>
          <Parameters>
            <Parameter Name="LOG_LEVEL">Level at which the Messaging Gateway agent logs information. DBMS_MGWADM.BASIC_LOGGING generates the least information while DBMS_MGWADM.TRACE_DEBUG_LOGGING generates the most information.</Parameter>
            <Parameter Name="AGENT_NAME">Identifies the Messaging Gateway agent. DBMS_MGWADM.DEFAULT_AGENT specifies the default agent.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_OPTION" ElementId="#CHDBIGFC">
          <Description>Sets a Messaging Gateway configuration option</Description>
          <Parameters>
            <Parameter Name="TARGET_TYPE">Specifies the target type of the Messaging Gateway entity:DBMS_MGWADM.AGENT_JAVA_PROP to set a Java System property for a Messaging Gateway agentDBMS_MGWADM.MSGLINK_OPTION to set a messaging link optionDBMS_MGWADM.JOB_OPTION to set a propagation job option</Parameter>
            <Parameter Name="TARGET_NAME">Name or identifier of the target. The value for this parameter depends on the value specified for target_type parameter. This must not be NULL.</Parameter>
            <Parameter Name="OPTION_VALUE">Option value</Parameter>
            <Parameter Name="ENCRYPTED">Indicates whether the value should be stored as encrypted:TRUE if the value should be stored in an encrypted formFALSE if the value should be stored in a cleartext form</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SHUTDOWN" ElementId="#i1031129">
          <Description>Shuts down the Messaging Gateway agent</Description>
          <Parameters>
            <Parameter Name="SDMODE">The shutdown mode. The only value currently supported is DBMS_MGWADM.SHUTDOWN_NORMAL for normal shutdown. The Messaging Gateway agent may attempt to complete any propagation work currently in progress.</Parameter>
            <Parameter Name="AGENT_NAME">Identifies the Messaging Gateway agent. DBMS_MGWADM.DEFAULT_AGENT specifies the default agent.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="STARTUP" ElementId="#i997860">
          <Description>Starts the Messaging Gateway agent</Description>
          <Parameters>
            <Parameter Name="INSTANCE">Specifies which instance can run the job queue job used to start the Messaging Gateway agent. If this is zero, then the job can be run by any instance.Caution: This parameter has been deprecated.</Parameter>
            <Parameter Name="FORCE">If this is DBMS_MGWADM.FORCE, then any positive integer is acceptable as the job instance. If this is DBMS_MGWADM.NO_FORCE (the default), then the specified instance must be running; otherwise the routine raises an exception.Caution: This parameter has been deprecated.</Parameter>
            <Parameter Name="AGENT_NAME">Identifies the Messaging Gateway agent. DBMS_MGWADM.DEFAULT_AGENT specifies the default agent.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UNREGISTER_FOREIGN_QUEUE" ElementId="#i998194">
          <Description>Removes a non-Oracle queue entity in Messaging Gateway</Description>
          <Parameters>
            <Parameter Name="NAME">The queue name</Parameter>
            <Parameter Name="LINKNAME">The link name for the messaging system on which the queue exists</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UNSCHEDULE_PROPAGATION" ElementId="#i998486">
          <Description>Removes a propagation schedule</Description>
          <Parameters>
            <Parameter Name="SCHEDULE_ID">Identifies the propagation schedule to be removed</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_MGWMSG" Url="http://docs.oracle.com/database/121/ARPLS/d_mgwmsg.htm">
      <Description>DBMS_MGWMSG provides:</Description>
      <SubPrograms>
        <SubProgram Name="LCR_TO_XML" ElementId="#i997376">
          <Description>Converts a SYS.ANYDATA object encapsulating a row LCR (LCR$_ROW_RECORD) or a DDL LCR (LCR$_DDL_RECORD) to a SYS.XMLTYPE object</Description>
          <Parameters>
            <Parameter Name="P_ANYDATA">An ANYDATA object to be converted</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="NVARRAY_ADD" ElementId="#CEGEICGC">
          <Description>Appends a name-value element to the end of a name-value array</Description>
          <Parameters>
            <Parameter Name="P_ARRAY">On input, the name-value array instance to modify. If NULL, then a new array is created. On output, the modified name-value array instance.</Parameter>
            <Parameter Name="P_VALUE">The value to add. If NULL, then p_array is not changed.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="NVARRAY_FIND_NAME" ElementId="#i997780">
          <Description>Searches a name-value array for the element with the name you specify in p_name</Description>
          <Parameters>
            <Parameter Name="P_ARRAY">The name-value array to search</Parameter>
            <Parameter Name="P_NAME">The name to find</Parameter>
            <Parameter Name="P_COMPARE">Name comparison method. Values are CASE_SENSITIVE and CASE_INSENSITIVE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="NVARRAY_FIND_NAME_TYPE" ElementId="#i997815">
          <Description>Searches a name-value array for an element with the name and value type you specify</Description>
          <Parameters>
            <Parameter Name="P_ARRAY">The name-value array to search</Parameter>
            <Parameter Name="P_NAME">The name to find</Parameter>
            <Parameter Name="P_TYPE">The value type. Refer to the value type constants in Table 98-1 .</Parameter>
            <Parameter Name="P_COMPARE">Name comparison method. Values are CASE_SENSITIVE and CASE_INSENSITIVE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="NVARRAY_GET" ElementId="#CEGEFIJB">
          <Description>Gets the name-value element of the name you specify in p_name from a name-value array</Description>
          <Parameters>
            <Parameter Name="P_ARRAY">The name-value array</Parameter>
            <Parameter Name="P_NAME">The value name</Parameter>
            <Parameter Name="P_COMPARE">Name comparison method. Values are CASE_SENSITIVE and CASE_INSENSITIVE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="NVARRAY_GET_BOOLEAN" ElementId="#i997438">
          <Description>Gets the value of the name-value array element that you specify in p_name and with the BOOLEAN_VALUE value type</Description>
          <Parameters>
            <Parameter Name="P_ARRAY">The name-value array</Parameter>
            <Parameter Name="P_NAME">The value name</Parameter>
            <Parameter Name="P_COMPARE">Name comparison method. Values are CASE_SENSITIVE and CASE_INSENSITIVE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="NVARRAY_GET_BYTE" ElementId="#CEGCIHGD">
          <Description>Gets the value of the name-value array element that you specify in p_name and with the BYTE_VALUE value type</Description>
          <Parameters>
            <Parameter Name="P_ARRAY">The name-value array</Parameter>
            <Parameter Name="P_NAME">The value name</Parameter>
            <Parameter Name="P_COMPARE">Name comparison method. Values are CASE_SENSITIVE and CASE_INSENSITIVE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="NVARRAY_GET_DATE" ElementId="#i997746">
          <Description>Gets the value of the name-value array element that you specify in p_name and with the DATE_VALUE value type</Description>
          <Parameters>
            <Parameter Name="P_ARRAY">The name-value array</Parameter>
            <Parameter Name="P_NAME">The value name</Parameter>
            <Parameter Name="P_COMPARE">Name comparison method. Values are CASE_SENSITIVE and CASE_INSENSITIVE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="NVARRAY_GET_DOUBLE" ElementId="#i997644">
          <Description>Gets the value of the name-value array element that you specify in p_name and with the DOUBLE_VALUE value type</Description>
          <Parameters>
            <Parameter Name="P_ARRAY">The name-value array</Parameter>
            <Parameter Name="P_NAME">The value name</Parameter>
            <Parameter Name="P_COMPARE">Name comparison method. Values are CASE_SENSITIVE and CASE_INSENSITIVE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="NVARRAY_GET_FLOAT" ElementId="#i997610">
          <Description>Gets the value of the name-value array element that you specify in p_name and with the FLOAT_VALUE value type</Description>
          <Parameters>
            <Parameter Name="P_ARRAY">The name-value array</Parameter>
            <Parameter Name="P_NAME">The value name</Parameter>
            <Parameter Name="P_COMPARE">Name comparison method. Values are CASE_SENSITIVE and CASE_INSENSITIVE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="NVARRAY_GET_INTEGER" ElementId="#CEGEFBAG">
          <Description>Gets the value of the name-value array element that you specify in p_name and with the INTEGER_VALUE value type</Description>
          <Parameters>
            <Parameter Name="P_ARRAY">The name-value array</Parameter>
            <Parameter Name="P_NAME">The value name</Parameter>
            <Parameter Name="P_COMPARE">Name comparison method. Values are CASE_SENSITIVE and CASE_INSENSITIVE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="NVARRAY_GET_LONG" ElementId="#i997576">
          <Description>Gets the value of the name-value array element that you specify in p_name and with the LONG_VALUE value type</Description>
          <Parameters>
            <Parameter Name="P_ARRAY">The name-value array</Parameter>
            <Parameter Name="P_NAME">The value name</Parameter>
            <Parameter Name="P_COMPARE">Name comparison method. Values are CASE_SENSITIVE and CASE_INSENSITIVE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="NVARRAY_GET_RAW" ElementId="#i997712">
          <Description>Gets the value of the name-value array element that you specify in p_name and with the RAW_VALUE value type</Description>
          <Parameters>
            <Parameter Name="P_ARRAY">The name-value array</Parameter>
            <Parameter Name="P_NAME">The value name</Parameter>
            <Parameter Name="P_COMPARE">Name comparison method. Values are CASE_SENSITIVE and CASE_INSENSITIVE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="NVARRAY_GET_SHORT" ElementId="#i997507">
          <Description>Gets the value of the name-value array element that you specify in p_name and with the SHORT_VALUE value type</Description>
          <Parameters>
            <Parameter Name="P_ARRAY">The name-value array</Parameter>
            <Parameter Name="P_NAME">The value name</Parameter>
            <Parameter Name="P_COMPARE">Name comparison method. Values are CASE_SENSITIVE and CASE_INSENSITIVE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="NVARRAY_GET_TEXT" ElementId="#i997678">
          <Description>Gets the value of the name-value array element that you specify in p_name and with the TEXT_VALUE value type</Description>
          <Parameters>
            <Parameter Name="P_ARRAY">The name-value array</Parameter>
            <Parameter Name="P_NAME">The value name</Parameter>
            <Parameter Name="P_COMPARE">Name comparison method. Values are CASE_SENSITIVE and CASE_INSENSITIVE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="XML_TO_LCR" ElementId="#CEGBIJHH">
          <Description>Converts a SYS.XMLTYPE object to a SYS.ANYDATA object encapsulating a row LCR (LCR$_ROW_RECORD) or a DDL LCR (LCR$_DDL_RECORD)</Description>
          <Parameters>
            <Parameter Name="P_XMLDATA">An XMLTYPE object representing an LCR</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_MONITOR" Url="http://docs.oracle.com/database/121/ARPLS/d_monitor.htm">
      <Description>The DBMS_MONITOR package let you use PL/SQL for controlling additional tracing and statistics gathering.</Description>
      <SubPrograms>
        <SubProgram Name="CLIENT_ID_STAT_DISABLE" ElementId="#i1002330">
          <Description>Disables statistic gathering previously enabled for a given Client Identifier</Description>
          <Parameters>
            <Parameter Name="CLIENT_ID">Client Identifier for which statistic aggregation is disabled</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CLIENT_ID_STAT_ENABLE" ElementId="#CFADJJDB">
          <Description>Enables statistic gathering for a given Client Identifier</Description>
          <Parameters>
            <Parameter Name="CLIENT_ID">Client Identifier for which statistic aggregation is enabled</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CLIENT_ID_TRACE_DISABLE" ElementId="#i1002327">
          <Description>Disables the trace previously enabled for a given Client Identifier globally for the database</Description>
          <Parameters>
            <Parameter Name="CLIENT_ID">Client Identifier for which SQL tracing is disabled</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CLIENT_ID_TRACE_ENABLE" ElementId="#i1002256">
          <Description>Enables the trace for a given Client Identifier globally for the database</Description>
          <Parameters>
            <Parameter Name="CLIENT_ID">Database Session Identifier for which SQL tracing is enabled</Parameter>
            <Parameter Name="WAITS">If TRUE, wait information is present in the trace</Parameter>
            <Parameter Name="BINDS">If TRUE, bind information is present in the trace</Parameter>
            <Parameter Name="PLAN_STAT">Frequency at which we dump row source statistics. Value should be 'NEVER', 'FIRST_EXECUTION' (equivalent to NULL) or 'ALL_EXECUTIONS'.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DATABASE_TRACE_DISABLE" ElementId="#CFAHBEAD">
          <Description>Disables SQL trace for the whole database or a specific instance</Description>
          <Parameters>
            <Parameter Name="INSTANCE_NAME">Disables tracing for the named instance</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DATABASE_TRACE_ENABLE" ElementId="#CFAIBHEG">
          <Description>Enables SQL trace for the whole database or a specific instance</Description>
          <Parameters>
            <Parameter Name="WAITS">If TRUE, wait information will be present in the trace</Parameter>
            <Parameter Name="BINDS">If TRUE, bind information will be present in the trace</Parameter>
            <Parameter Name="INSTANCE_NAME">If set, restricts tracing to the named instance</Parameter>
            <Parameter Name="PLAN_STAT">Frequency at which we dump row source statistics. Value should be 'NEVER', 'FIRST_EXECUTION' (equivalent to NULL) or 'ALL_EXECUTIONS'.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SERV_MOD_ACT_STAT_DISABLE" ElementId="#i1003131">
          <Description>Disables statistic gathering enabled for a given combination of Service Name, MODULE and ACTION</Description>
          <Parameters>
            <Parameter Name="SERVICE_NAME">Name of the service for which statistic aggregation is disabled</Parameter>
            <Parameter Name="MODULE_NAME">Name of the MODULE. An additional qualifier for the service. It is a required parameter.</Parameter>
            <Parameter Name="ACTION_NAME">Name of the ACTION. An additional qualifier for the Service and MODULE name. Omitting the parameter (or supplying ALL_ACTIONS constant) means enabling aggregation for all Actions for a given Service/MODULE combination. In this case, statistics are aggregated on the module level.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SERV_MOD_ACT_STAT_ENABLE" ElementId="#i1002459">
          <Description>Enables statistic gathering for a given combination of Service Name, MODULE and ACTION</Description>
          <Parameters>
            <Parameter Name="SERVICE_NAME">Name of the service for which statistic aggregation is enabled</Parameter>
            <Parameter Name="MODULE_NAME">Name of the MODULE. An additional qualifier for the service. It is a required parameter.</Parameter>
            <Parameter Name="ACTION_NAME">Name of the ACTION. An additional qualifier for the Service and MODULE name. Omitting the parameter (or supplying ALL_ACTIONS constant) means enabling aggregation for all Actions for a given Service/MODULE combination. In this case, statistics are aggregated on the module level.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SERV_MOD_ACT_TRACE_DISABLE" ElementId="#i1003676">
          <Description>Disables the trace for ALL enabled instances for a or a given combination of Service Name, MODULE and ACTION name globally</Description>
          <Parameters>
            <Parameter Name="SERVICE_NAME">Name of the service for which tracing is disabled.</Parameter>
            <Parameter Name="MODULE_NAME">Name of the MODULE. An additional qualifier for the service</Parameter>
            <Parameter Name="ACTION_NAME">Name of the ACTION. An additional qualifier for the Service and MODULE name.</Parameter>
            <Parameter Name="INSTANCE_NAME">If set, this restricts tracing to the named instance_name</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SERV_MOD_ACT_TRACE_ENABLE" ElementId="#CFAGCHJC">
          <Description>Enables SQL tracing for a given combination of Service Name, MODULE and ACTION globally unless an instance_name is specified</Description>
          <Parameters>
            <Parameter Name="SERVICE_NAME">Name of the service for which SQL trace is enabled</Parameter>
            <Parameter Name="MODULE_NAME">Name of the MODULE for which SQL trace is enabled. An optional additional qualifier for the service. If omitted, SQL trace is enabled or all modules and actions in a given service.</Parameter>
            <Parameter Name="ACTION_NAME">Name of the ACTION for which SQL trace is enabled. An optional additional qualifier for the Service and MODULE name. If omitted, SQL trace is enabled for all actions in a given module.</Parameter>
            <Parameter Name="WAITS">If TRUE, wait information is present in the trace</Parameter>
            <Parameter Name="BINDS">If TRUE, bind information is present in the trace</Parameter>
            <Parameter Name="INSTANCE_NAME">If set, this restricts tracing to the named instance_name</Parameter>
            <Parameter Name="PLAN_STAT">Frequency at which we dump row source statistics. Value should be 'NEVER', 'FIRST_EXECUTION' (equivalent to NULL) or 'ALL_EXECUTIONS'.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SESSION_TRACE_DISABLE" ElementId="#i1003678">
          <Description>Disables the previously enabled trace for a given database session identifier (SID) on the local instance</Description>
          <Parameters>
            <Parameter Name="SESSION_ID">Database Session Identifier for which SQL trace is disabled</Parameter>
            <Parameter Name="SERIAL_NUM">Serial number for this session</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SESSION_TRACE_ENABLE" ElementId="#i1003679">
          <Description>Enables the trace for a given database session identifier (SID) on the local instance</Description>
          <Parameters>
            <Parameter Name="SESSION_ID">Client Identifier for which SQL trace is enabled. If omitted (or NULL), the user's own session is assumed.</Parameter>
            <Parameter Name="SERIAL_NUM">Serial number for this session. If omitted (or NULL), only the session ID is used to determine a session.</Parameter>
            <Parameter Name="WAITS">If TRUE, wait information is present in the trace</Parameter>
            <Parameter Name="BINDS">If TRUE, bind information is present in the trace</Parameter>
            <Parameter Name="PLAN_STAT">Frequency at which we dump row source statistics. Value should be 'NEVER', 'FIRST_EXECUTION' (equivalent to NULL) or 'ALL_EXECUTIONS'.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_MVIEW" Url="http://docs.oracle.com/database/121/ARPLS/d_mview.htm">
      <Description>DBMS_MVIEW enables you to understand capabilities for materialized views and potential materialized views, including their rewrite availability. It also enables you to refresh materialized views that are not part of the same refresh group and purge logs.</Description>
      <SubPrograms>
        <SubProgram Name="BEGIN_TABLE_REORGANIZATION" ElementId="#CEGGFHDA">
          <Description>Performs a process to preserve materialized view data needed for refresh</Description>
          <Parameters>
            <Parameter Name="TABOWNER">Owner of the table being reorganized</Parameter>
            <Parameter Name="TABNAME">Name of the table being reorganized</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="END_TABLE_REORGANIZATION" ElementId="#i996947">
          <Description>Ensures that the materialized view data for the master table is valid and that the master table is in the proper state</Description>
          <Parameters>
            <Parameter Name="TABOWNER">Owner of the table being reorganized</Parameter>
            <Parameter Name="TABNAME">Name of the table being reorganized</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ESTIMATE_MVIEW_SIZE" ElementId="#i1000942">
          <Description>Estimates the size of a materialized view that you might create, in bytes and rows</Description>
          <Parameters>
            <Parameter Name="STMT_ID">Arbitrary string used to identify the statement in an EXPLAIN PLAN</Parameter>
            <Parameter Name="SELECT_CLAUSE">The SELECT statement to be analyzed</Parameter>
            <Parameter Name="NUM_ROWS">Estimated cardinality</Parameter>
            <Parameter Name="NUM_BYTES">Estimated number of bytes</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXPLAIN_MVIEW" ElementId="#CEGGEHHC">
          <Description>Explains what is possible with a materialized view or potential materialized view</Description>
          <Parameters>
            <Parameter Name="MV">The name of an existing materialized view (optionally qualified with the owner name separated by a ".") or a SELECT statement or a CREATE MATERIALIZED VIEW statement for a potential materialized view.</Parameter>
            <Parameter Name="STATEMENT_ID">A client-supplied unique identifier to associate output rows with specific invocations of EXPLAIN_MVIEW</Parameter>
            <Parameter Name="MSG_ARRAY">The PL/SQL VARRAY that receives the output. Use this parameter to direct EXPLAIN_MVIEW's output to a PL/SQL VARRAY rather than MV_CAPABILITIES_TABLE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXPLAIN_REWRITE" ElementId="#i997015">
          <Description>Explains why a query failed to rewrite or why the optimizer chose to rewrite a query with a particular materialized view or materialized views</Description>
          <Parameters>
            <Parameter Name="QUERY">SQL SELECT statement to be explained</Parameter>
            <Parameter Name="MV">The fully qualified name of an existing materialized view in the form of SCHEMA.MV. For multiple materialized views, you can provide a comma-delimited list of names.</Parameter>
            <Parameter Name="STATEMENT_ID">A client-supplied unique identifier to distinguish output messages</Parameter>
            <Parameter Name="MSG_ARRAY">The PL/SQL VARRAY that receives the output. Use this parameter to direct EXPLAIN_REWRITE's output to a PL/SQL VARRAY.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="I_AM_A_REFRESH" ElementId="#CEGHBIBJ">
          <Description>Returns the value of the I_AM_REFRESH package state</Description>
        </SubProgram>
        <SubProgram Name="PMARKER" ElementId="#i997068">
          <Description>Returns a partition marker from a rowid, and is used for Partition Change Tracking (PCT)</Description>
          <Parameters>
            <Parameter Name="RID">The rowid of a row entry in a master table</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PURGE_DIRECT_LOAD_LOG" ElementId="#i997090">
          <Description>Purges rows from the direct loader log after they are no longer needed by any materialized views (used with data warehousing)</Description>
        </SubProgram>
        <SubProgram Name="PURGE_LOG" ElementId="#i997108">
          <Description>Purges rows from the materialized view log</Description>
          <Parameters>
            <Parameter Name="MASTER">Name of the master table or master materialized view.</Parameter>
            <Parameter Name="NUM">Number of least recently refreshed materialized views whose rows you want to remove from materialized view log. For example, the following statement deletes rows needed to refresh the two least recently refreshed materialized views:DBMS_MVIEW.PURGE_LOG('master_table', 2);To delete all rows in the materialized view log, indicate a high number of materialized views to disregard, as in this example:DBMS_MVIEW.PURGE_LOG('master_table',9999);This statement completely purges the materialized view log that corresponds to master_table if fewer than 9999 materialized views are based on master_table. A simple materialized view whose rows have been purged from the materialized view log must be completely refreshed the next time it is refreshed.</Parameter>
            <Parameter Name="FLAG">Specify delete to guarantee that rows are deleted from the materialized view log for at least one materialized view. This parameter can override the setting for the parameter num. For example, the following statement deletes rows from the materialized view log that has dependency rows in the least recently refreshed materialized view:DBMS_MVIEW.PURGE_LOG('master_table',1,'delete');</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PURGE_MVIEW_FROM_LOG" ElementId="#CEGIEEEE">
          <Description>Purges rows from the materialized view log</Description>
          <Parameters>
            <Parameter Name="MVIEW_ID">If you want to execute this procedure based on the identification of the target materialized view, specify the materialized view identification using the mview_id parameter. Query the DBA_BASE_TABLE_MVIEWS view at the materialized view log site for a listing of materialized view IDs.Executing this procedure based on the materialized view identification is useful if the target materialized view is not listed in the list of registered materialized views (DBA_REGISTERED_MVIEWS).</Parameter>
            <Parameter Name="MVIEWOWNER">If you do not specify an mview_id, enter the owner of the target materialized view using the mviewowner parameter. Query the DBA_REGISTERED_MVIEWS view at the materialized view log site to view the materialized view owners.</Parameter>
            <Parameter Name="MVIEWNAME">If you do not specify an mview_id, enter the name of the target materialized view using the mviewname parameter. Query the DBA_REGISTERED_MVIEWS view at the materialized view log site to view the materialized view names.</Parameter>
            <Parameter Name="MVIEWSITE">If you do not specify an mview_id, enter the site of the target materialized view using the mviewsite parameter. Query the DBA_REGISTERED_MVIEWS view at the materialized view log site to view the materialized view sites.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REFRESH" ElementId="#i997194">
          <Description>Refreshes one or more materialized views that are not members of the same refresh group</Description>
          <Parameters>
            <Parameter Name="LIST | TAB">Comma-delimited list of materialized views that you want to refresh. (Synonyms are not supported.) These materialized views can be located in different schemas and have different master tables or master materialized views. However, all of the listed materialized views must be in your local database.Alternatively, you may pass in a PL/SQL index-by table of type DBMS_UTILITY.UNCL_ARRAY, where each element is the name of a materialized view.</Parameter>
            <Parameter Name="METHOD">A string of refresh methods indicating how to refresh the listed materialized views. An f indicates fast refresh, ? indicates force refresh, C or c indicates complete refresh, and A or a indicates always refresh. A and C are equivalent. P or p refreshes by recomputing the rows in the materialized view affected by changed partitions in the detail tables.If a materialized view does not have a corresponding refresh method (that is, if more materialized views are specified than refresh methods), then that materialized view is refreshed according to its default refresh method. For example, consider the following EXECUTE statement within SQL*Plus:This statement performs a complete refresh of the countries_mv materialized view, a fast refresh of the regions_mv materialized view, and a default refresh of the hr.employees materialized view.</Parameter>
            <Parameter Name="ROLLBACK_SEG">Name of the materialized view site rollback segment to use while refreshing materialized views</Parameter>
            <Parameter Name="PUSH_DEFERRED_RPC">Used by updatable materialized views only. Set this parameter to true if you want to push changes from the materialized view to its associated master tables or master materialized views before refreshing the materialized view. Otherwise, these changes may appear to be temporarily lost.</Parameter>
            <Parameter Name="REFRESH_AFTER_ERRORS">If this parameter is true, an updatable materialized view continues to refresh even if there are outstanding conflicts logged in the DEFERROR view for the materialized view's master table or master materialized view. If this parameter is true and atomic_refresh is false, this procedure continues to refresh other materialized views if it fails while refreshing a materialized view.</Parameter>
            <Parameter Name="PURGE_OPTION">If you are using the parallel propagation mechanism (in other words, parallelism is set to 1 or greater), 0 means do not purge, 1 means lazy purge, and 2 means aggressive purge. In most cases, lazy purge is the optimal setting. Set purge to aggressive to trim the queue if multiple master replication groups are pushed to different target sites, and updates to one or more replication groups are infrequent and infrequently pushed. If all replication groups are infrequently updated and pushed, then set this parameter to 0 and occasionally execute PUSH with this parameter set to 2 to reduce the queue.</Parameter>
            <Parameter Name="PARALLELISM">0 specifies serial propagation.n &gt; 1 specifies parallel propagation with n parallel processes.1 specifies parallel propagation using only one parallel process.</Parameter>
            <Parameter Name="HEAP_SIZE">Maximum number of transactions to be examined simultaneously for parallel propagation scheduling. Oracle automatically calculates the default setting for optimal performance.Note: Do not set this parameter unless directed to do so by Oracle Support Services.</Parameter>
            <Parameter Name="ATOMIC_REFRESH">If this parameter is set to true, then the list of materialized views is refreshed in a single transaction. All of the refreshed materialized views are updated to a single point in time. If the refresh fails for any of the materialized views, none of the materialized views are updated.If this parameter is set to false, then each of the materialized views is refreshed non-atomically in separate transactions.As part of complete refresh, if truncate is used (non-atomic refresh), unique index rebuild is executed. INDEX REBUILD automatically computes statistics. Thus, statistics are updated for truncated tables.</Parameter>
            <Parameter Name="NESTED">If true, then perform nested refresh operations for the specified set of materialized views. Nested refresh operations refresh all the depending materialized views and the specified set of materialized views based on a dependency order to ensure the nested materialized views are truly fresh with respect to the underlying base tables.</Parameter>
            <Parameter Name="OUT_OF_PLACE">If true, then it performs an out-of-place refresh. The default is false.This parameter uses the four methods of refresh (F, P, C, ?). So, for example, if you specify F and out_of_place = true, then an out-of-place fast refresh will be attempted. Similarly, if you specify P and out_of_place = true, then out-of-place PCT refresh will be attempted.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REFRESH_ALL_MVIEWS" ElementId="#i997279">
          <Description>Refreshes all materialized views that do not reflect changes to their master table or master materialized view</Description>
          <Parameters>
            <Parameter Name="NUMBER_OF_FAILURES">Returns the number of failures that occurred during processing</Parameter>
            <Parameter Name="METHOD">A single refresh method indicating the type of refresh to perform for each materialized view that is refreshed. F or f indicates fast refresh, ? indicates force refresh, C or c indicates complete refresh, and A or a indicates always refresh. A and C are equivalent. If no method is specified, a materialized view is refreshed according to its default refresh method. P or p refreshes by recomputing the rows in the materialized view affected by changed partitions in the detail tables.</Parameter>
            <Parameter Name="ROLLBACK_SEG">Name of the materialized view site rollback segment to use while refreshing materialized views</Parameter>
            <Parameter Name="REFRESH_AFTER_ERRORS">If this parameter is true, an updatable materialized view continues to refresh even if there are outstanding conflicts logged in the DEFERROR view for the materialized view's master table or master materialized view. If this parameter is true and atomic_refresh is false, this procedure continues to refresh other materialized views if it fails while refreshing a materialized view.</Parameter>
            <Parameter Name="ATOMIC_REFRESH">If this parameter is set to true, then the refreshed materialized views are refreshed in a single transaction. All of the refreshed materialized views are updated to a single point in time. If the refresh fails for any of the materialized views, none of the materialized views are updated.If this parameter is set to false, then each of the materialized views is refreshed non-atomically in separate transactions.</Parameter>
            <Parameter Name="OUT_OF_PLACE">If true, then it performs an out-of-place refresh. The default is false.This parameter uses the four methods of refresh (F, P, C, ?). So, for example, if you specify F and out_of_place = true, then an out-of-place fast refresh will be attempted. Similarly, if you specify P and out_of_place = true, then out-of-place PCT refresh will be attempted.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REFRESH_DEPENDENT" ElementId="#i997332">
          <Description>Refreshes all table-based materialized views that depend on a specified master table or master materialized view, or list of master tables or master materialized views</Description>
          <Parameters>
            <Parameter Name="NUMBER_OF_FAILURES">Returns the number of failures that occurred during processing</Parameter>
            <Parameter Name="LIST | TAB">Comma-delimited list of master tables or master materialized views on which materialized views can depend. (Synonyms are not supported.) These tables and the materialized views that depend on them can be located in different schemas. However, all of the tables and materialized views must be in your local database.Alternatively, you may pass in a PL/SQL index-by table of type DBMS_UTILITY.UNCL_ARRAY, where each element is the name of a table.</Parameter>
            <Parameter Name="METHOD">A string of refresh methods indicating how to refresh the dependent materialized views. All of the materialized views that depend on a particular table are refreshed according to the refresh method associated with that table. F or f indicates fast refresh, ? indicates force refresh, C or c indicates complete refresh, and A or a indicates always refresh. A and C are equivalent. P or p refreshes by recomputing the rows in the materialized view affected by changed partitions in the detail tables.If a table does not have a corresponding refresh method (that is, if more tables are specified than refresh methods), then any materialized view that depends on that table is refreshed according to its default refresh method. For example, the following EXECUTE statement within SQL*Plus:performs a complete refresh of the materialized views that depend on the employees table, a fast refresh of the materialized views that depend on the departments table, and a default refresh of the materialized views that depend on the hr.regions table.</Parameter>
            <Parameter Name="ROLLBACK_SEG">Name of the materialized view site rollback segment to use while refreshing materialized views</Parameter>
            <Parameter Name="REFRESH_AFTER_ERRORS">If this parameter is true, an updatable materialized view continues to refresh even if there are outstanding conflicts logged in the DEFERROR view for the materialized view's master table or master materialized view. If this parameter is true and atomic_refresh is false, this procedure continues to refresh other materialized views if it fails while refreshing a materialized view.</Parameter>
            <Parameter Name="ATOMIC_REFRESH">If this parameter is set to true, then the refreshed materialized views are refreshed in a single transaction. All of the refreshed materialized views are updated to a single point in time. If the refresh fails for any of the materialized views, none of the materialized views are updated.If this parameter is set to false, then each of the materialized views is refreshed non-atomically in separate transactions.</Parameter>
            <Parameter Name="NESTED">If true, then perform nested refresh operations for the specified set of tables. Nested refresh operations refresh all the depending materialized views of the specified set of tables based on a dependency order to ensure the nested materialized views are truly fresh with respect to the underlying base tables.</Parameter>
            <Parameter Name="OUT_OF_PLACE">If true, then it performs an out-of-place refresh. The default is false.This parameter uses the four methods of refresh (F, P, C, ?). So, for example, if you specify F and out_of_place = true, then an out-of-place fast refresh will be attempted. Similarly, if you specify P and out_of_place = true, then out-of-place PCT refresh will be attempted.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REGISTER_MVIEW" ElementId="#CEGHDBIJ">
          <Description>Enables the administration of individual materialized views</Description>
          <Parameters>
            <Parameter Name="MVIEWOWNER">Owner of the materialized view.</Parameter>
            <Parameter Name="MVIEWNAME">Name of the materialized view.</Parameter>
            <Parameter Name="MVIEWSITE">Name of the materialized view site for a materialized view registering at an Oracle database version 8.x and higher master site or master materialized view site. This name should not contain any double quotes.</Parameter>
            <Parameter Name="MVIEW_ID">The identification number of the materialized view. Specify an Oracle database version 8.x and higher materialized view as a BINARY_INTEGER. Specify an Oracle database version 7 materialized view registering at an Oracle database version 8.x and higher master sites or master materialized view sites as a DATE.</Parameter>
            <Parameter Name="FLAG">A constant that describes the properties of the materialized view being registered. Valid constants that can be assigned include the following:DBMS_MVIEW.REG_ROWID_MVIEW for a rowid materialized viewDBMS_MVIEW.REG_PRIMARY_KEY_MVIEW for a primary key materialized viewDBMS_MVIEW.REG_OBJECT_ID_MVIEW for an object id materialized viewDBMS_MVIEW.REG_FAST_REFRESHABLE_MVIEW for a materialized view that can be fast refreshedDBMS_MVIEW.REG_UPDATABLE_MVIEW for a materialized view that is updatableA materialized view can have more than one of these properties. In this case, use the plus sign (+) to specify more than one property. For example, if a primary key materialized view can be fast refreshed, you can enter the following for this parameter:DBMS_MVIEW.REG_PRIMARY_KEY_MVIEW + DBMS_MVIEW.REG_FAST_REFRESHABLE_MVIEWYou can determine the properties of a materialized view by querying the ALL_MVIEWS data dictionary view.</Parameter>
            <Parameter Name="QRY_TXT">The first 32,000 bytes of the materialized view definition query.</Parameter>
            <Parameter Name="REP_TYPE">Version of the materialized view. Valid constants that can be assigned include the following:DBMS_MVIEW.REG_V7_SNAPSHOT if the materialized view is at an Oracle database version 7 siteDBMS_MVIEW.REG_V8_SNAPSHOTreg_repapi_snapshot if the materialized view is at an Oracle database version 8.x or higher siteDBMS_MVIEW.REG_UNKNOWN (the default) if you do not know whether the materialized view is at an Oracle database version 7 site or an Oracle database version 8.x (or higher) site</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UNREGISTER_MVIEW" ElementId="#i997476">
          <Description>Enables the administration of individual materialized views once invoked at a master site or master materialized view site to unregister a materialized view</Description>
          <Parameters>
            <Parameter Name="MVIEWOWNER">Owner of the materialized view</Parameter>
            <Parameter Name="MVIEWNAME">Name of the materialized view</Parameter>
            <Parameter Name="MVIEWSITE">Name of the materialized view site</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_NETWORK_ACL_ADMIN" Url="http://docs.oracle.com/database/121/ARPLS/d_networkacl_adm.htm">
      <Description>The DBMS_NETWORK_ACL_ADMIN package provides the interface to administer the network Access Control List (ACL).</Description>
      <SubPrograms>
        <SubProgram Name="ADD_PRIVILEGE" ElementId="#BABHJEHG">
          <Description>[DEPRECATED] Adds a privilege to grant or deny the network access to the user in an access control list (ACL)</Description>
          <Parameters>
            <Parameter Name="ACL">Name of the ACL. Relative path will be relative to "/sys/acls"</Parameter>
            <Parameter Name="PRINCIPAL">Principal (database user or role) to whom the privilege is granted or denied. Case sensitive.</Parameter>
            <Parameter Name="IS_GRANT">Privilege is granted or denied.</Parameter>
            <Parameter Name="PRIVILEGE">Network privilege to be granted or denied</Parameter>
            <Parameter Name="POSITION">Position (1-based) of the ACE. If a non-NULL value is given, the privilege will be added in a new ACE at the given position and there should not be another ACE for the principal with the same is_grant (grant or deny). If a NULL value is given, the privilege will be added to the ACE matching the principal and the is_grant if one exists, or to the end of the ACL if the matching ACE does not exist.</Parameter>
            <Parameter Name="START_DATE">Start date of the access control entry (ACE). When specified, the ACE will be valid only on and after the specified date. The start_date will be ignored if the privilege is added to an existing ACE.</Parameter>
            <Parameter Name="END_DATE">End date of the access control entry (ACE). When specified, the ACE expires after the specified date. The end_date must be greater than or equal to the start_date. The end_date will be ignored if the privilege is added to an existing ACE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="APPEND_HOST_ACE" ElementId="#CHDHBHGA">
          <Description>Appends an access control entry (ACE) to the access control list (ACL) of a network host.</Description>
          <Parameters>
            <Parameter Name="HOST">The host, which can be the name or the IP address of the host. You can use a wildcard to specify a domain or a IP subnet. The host or domain name is case-insensitive.</Parameter>
            <Parameter Name="LOWER_PORT">Lower bound of an optional TCP port range</Parameter>
            <Parameter Name="UPPER_PORT">Upper bound of an optional TCP port range. If NULL, lower_port is assumed.</Parameter>
            <Parameter Name="ACE">The ACE</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="APPEND_HOST_ACL" ElementId="#CHDBFHDD">
          <Description>Appends access control entries (ACE) of an access control list (ACL) to the ACL of a network host</Description>
          <Parameters>
            <Parameter Name="HOST">The host, which can be the name or the IP address of the host. You can use a wildcard to specify a domain or a IP subnet. The host or domain name is case-insensitive.</Parameter>
            <Parameter Name="LOWER_PORT">Lower bound of an optional TCP port range</Parameter>
            <Parameter Name="UPPER_PORT">Upper bound of an optional TCP port range. If NULL, lower_port is assumed.</Parameter>
            <Parameter Name="ACL">The ACL from which to append</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="APPEND_WALLET_ACE" ElementId="#CHDCGCBI">
          <Description>Appends an access control entry (ACE) to the access control list (ACL) of a wallet</Description>
          <Parameters>
            <Parameter Name="WALLET_PATH">Directory path of the wallet. The path is case-sensitive of the format file:directory-path.</Parameter>
            <Parameter Name="ACE">The ACE</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="APPEND_WALLET_ACL" ElementId="#CHDEBGIE">
          <Description>Appends access control entries (ACE) of an access control list (ACL) to the ACL of a wallet</Description>
          <Parameters>
            <Parameter Name="WALLET_PATH">Directory path of the wallet. The path is case-sensitive of the format file:directory-path.</Parameter>
            <Parameter Name="ACE">The ACL from which to append</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ASSIGN_ACL" ElementId="#BABDIGJC">
          <Description>[DEPRECATED] Assigns an access control list (ACL) to a host computer, domain, or IP subnet, and if specified, the TCP port range.</Description>
          <Parameters>
            <Parameter Name="ACL">Name of the ACL. Relative path will be relative to "/sys/acls".</Parameter>
            <Parameter Name="HOST">Host to which the ACL is to be assigned. The host can be the name or the IP address of the host. A wildcard can be used to specify a domain or a IP subnet. The host or domain name is case-insensitive.</Parameter>
            <Parameter Name="LOWER_PORT">Lower bound of a TCP port range if not NULL</Parameter>
            <Parameter Name="UPPER_PORT">Upper bound of a TCP port range. If NULL, lower_port is assumed.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ASSIGN_WALLET_ACL" ElementId="#BHAHFACB">
          <Description>[DEPRECATED] Assigns an access control list (ACL) to a wallet</Description>
          <Parameters>
            <Parameter Name="ACL">Name of the ACL. Relative path will be relative to "/sys/acls"</Parameter>
            <Parameter Name="WALLET_PATH">Directory path of the wallet to which the ACL is to be assigned. The path is case-sensitive and of the format file:directory-path.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CHECK_PRIVILEGE" ElementId="#CHDFJHHJ">
          <Description>[DEPRECATED] Checks if a privilege is granted or denied the user in an access control list (ACL)</Description>
          <Parameters>
            <Parameter Name="ACL">Name of the ACL. Relative path will be relative to "/sys/acls".</Parameter>
            <Parameter Name="USER">User to check against. If the user is NULL, the invoker is assumed. The username is case-sensitive as in the USERNAME column of the ALL_USERS view.</Parameter>
            <Parameter Name="PRIVILEGE">Network privilege to check</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CHECK_PRIVILEGE_ACLID" ElementId="#CHDJICBH">
          <Description>[DEPRECATED] Checks if a privilege is granted to or denied from the user in an ACL by specifying the object ID of the access control list</Description>
          <Parameters>
            <Parameter Name="ACLID">Object ID of the ACL</Parameter>
            <Parameter Name="USER">User to check against. If the user is NULL, the invoker is assumed. The username is case-sensitive as in the USERNAME column of the ALL_USERS view.</Parameter>
            <Parameter Name="PRIVILEGE">Network privilege to check</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_ACL" ElementId="#BABIGEGG">
          <Description>[DEPRECATED] Creates an access control list (ACL) with an initial privilege setting</Description>
          <Parameters>
            <Parameter Name="ACL">Name of the ACL. Relative path will be relative to "/sys/acls".</Parameter>
            <Parameter Name="DESCRIPTION">Description attribute in the ACL</Parameter>
            <Parameter Name="PRINCIPAL">Principal (database user or role) to whom the privilege is granted or denied. Case sensitive.</Parameter>
            <Parameter Name="IS_GRANT">Privilege is granted or not (denied)</Parameter>
            <Parameter Name="PRIVILEGE">Network privilege to be granted or denied - 'connect | resolve' (case sensitive). A database user needs the connect privilege to an external network host computer if he or she is connecting using the UTL_TCP, UTL_HTTP, UTL_SMTP, and UTL_MAIL utility packages. To resolve a host name that was given a host IP address, or the IP address that was given a host name, with the UTL_INADDR package, grant the database user the resolve privilege.</Parameter>
            <Parameter Name="START_DATE">Start date of the access control entry (ACE). When specified, the ACE is valid only on and after the specified date.</Parameter>
            <Parameter Name="END_DATE">End date of the access control entry (ACE). When specified, the ACE expires after the specified date. The end_date must be greater than or equal to the start_date.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_PRIVILEGE" ElementId="#BABJHGBE">
          <Description>[DEPRECATED] Deletes a privilege in an access control list (ACL)</Description>
          <Parameters>
            <Parameter Name="ACL">Name of the ACL. Relative path will be relative to "/sys/acls".</Parameter>
            <Parameter Name="PRINCIPAL">Principal (database user or role) for whom all the ACE will be deleted</Parameter>
            <Parameter Name="IS_GRANT">Privilege is granted or not (denied). If a NULL value is given, the deletion is applicable to both granted or denied privileges.</Parameter>
            <Parameter Name="PRIVILEGE">Network privilege to be deleted. If a NULL value is given, the deletion is applicable to all privileges.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_ACL" ElementId="#BABHICFB">
          <Description>[DEPRECATED] Drops an access control list (ACL)</Description>
          <Parameters>
            <Parameter Name="ACL">Name of the ACL. Relative path will be relative to "/sys/acls".</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVE_HOST_ACE" ElementId="#CHDEFGHF">
          <Description>Removes privileges from access control entries (ACE) in the access control list (ACL) of a network host matching the given ACE</Description>
          <Parameters>
            <Parameter Name="HOST">The host, which can be the name or the IP address of the host. You can use a wildcard to specify a domain or a IP subnet. The host or domain name is case-insensitive.</Parameter>
            <Parameter Name="LOWER_PORT">Lower bound of an optional TCP port range</Parameter>
            <Parameter Name="UPPER_PORT">Upper bound of an optional TCP port range. If NULL, lower_port is assumed.</Parameter>
            <Parameter Name="ACE">The ACE</Parameter>
            <Parameter Name="REMOVE_EMPTY_ACL">Whether to remove the ACL when it becomes empty when the ACE is removed</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVE_WALLET_ACE" ElementId="#CHDHJBCE">
          <Description>Removes privileges from access control entries (ACE) in the access control list (ACL) of a wallet matching the given ACE</Description>
          <Parameters>
            <Parameter Name="WALLET_PATH">Directory path of the wallet. The path is case-sensitive of the format file:directory-path.</Parameter>
            <Parameter Name="ACE">The ACE</Parameter>
            <Parameter Name="REMOVE_EMPTY_ACL">Whether to remove the ACL when it becomes empty when the ACE is removed</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_HOST_ACL" ElementId="#CHDEABGI">
          <Description>Sets the access control list (ACL) of a network host which controls access to the host from the database</Description>
          <Parameters>
            <Parameter Name="HOST">The host, which can be the name or the IP address of the host. You can use a wildcard to specify a domain or a IP subnet. The host or domain name is case-insensitive.</Parameter>
            <Parameter Name="LOWER_PORT">Lower bound of an optional TCP port range</Parameter>
            <Parameter Name="UPPER_PORT">Upper bound of an optional TCP port range. If NULL, lower_port is assumed.</Parameter>
            <Parameter Name="ACL">The ACL. NULL to unset the host's ACL.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_WALLET_ACL" ElementId="#CHDDGJEG">
          <Description>Sets the access control list (ACL) of a wallet which controls access to the wallet from the database</Description>
          <Parameters>
            <Parameter Name="WALLET_PATH">Directory path of the wallet. The path is case-sensitive of the format file:directory-path.</Parameter>
            <Parameter Name="ACL">The ACL. NULL to unset the host's ACL.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UNASSIGN_ACL" ElementId="#BABBJCJD">
          <Description>[DEPRECATED] Unassigns the access control list (ACL) currently assigned to a network host</Description>
          <Parameters>
            <Parameter Name="ACL">Name of the ACL. Relative path will be relative to "/sys/acls". If ACL is NULL, any ACL assigned to the host is unassigned.</Parameter>
            <Parameter Name="HOST">Host from which the ACL is to be removed. The host can be the name or the IP address of the host. A wildcard can be used to specify a domain or a IP subnet. The host or domain name is case-insensitive. If host is NULL, the ACL will be unassigned from any host. If both host and acl are NULL, all ACLs assigned to any hosts are unassigned.</Parameter>
            <Parameter Name="LOWER_PORT">Lower bound of a TCP port range if not NULL</Parameter>
            <Parameter Name="UPPER_PORT">Upper bound of a TCP port range. If NULL, lower_port is assumed.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UNASSIGN_WALLET_ACL" ElementId="#BHAIBDBD">
          <Description>[DEPRECATED] Unassigns the access control list (ACL) currently assigned to a wallet</Description>
          <Parameters>
            <Parameter Name="ACL">Name of the ACL. Relative path will be relative to "/sys/acls". If acl is NULL, any ACL assigned to the wallet is unassigned</Parameter>
            <Parameter Name="WALLET_PATH">Directory path of the wallet to which the ACL is assigned. The path is case-sensitive and of the format file:directory-path. If both acl and wallet_path are NULL, all ACLs assigned to any wallets are unassigned.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_NETWORK_ACL_UTILITY" Url="http://docs.oracle.com/database/121/ARPLS/d_networkacl_utl.htm">
      <Description>The DBMS_NETWORK_ACL_UTILITY package provides the utility functions to facilitate the evaluation of access control list (ACL) assignments governing TCP connections to network hosts.</Description>
      <SubPrograms>
        <SubProgram Name="CONTAINS_HOST" ElementId="#CHDCFCIH">
          <Description>Determines if the given host is equal to or contained in the given host, domain, or subnet</Description>
          <Parameters>
            <Parameter Name="HOST">Network host</Parameter>
            <Parameter Name="DOMAIN">Network host, domain, or subnet</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DOMAIN_LEVEL" ElementId="#CHDJFAID">
          <Description>Returns the domain level of the given host name, domain, or subnet</Description>
          <Parameters>
            <Parameter Name="HOST">Network host, domain, or subnet</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DOMAINS" ElementId="#CHDGABBE">
          <Description>For a given host, this function returns the domains whose ACL assigned is used to determine if a user has the privilege to access the given host or not.</Description>
          <Parameters>
            <Parameter Name="HOST">Network host</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EQUALS_HOST" ElementId="#CHDCDIAG">
          <Description>Determines if the two given hosts, domains, or subnets are equal</Description>
          <Parameters>
            <Parameter Name="HOST">Network host, domain, or subnet to compare</Parameter>
            <Parameter Name="HOST">Network host, domain, or subnet to compare</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_ODCI" Url="http://docs.oracle.com/database/121/ARPLS/d_odci.htm">
      <Description>DBMS_ODCI package contains a single user function related to the use of Data Cartridges.</Description>
      <SubPrograms>
        <SubProgram Name="ESTIMATE_CPU_UNITS" ElementId="#i996771">
          <Description>Returns the approximate number of CPU instructions (in thousands) corresponding to a specified time interval (in seconds)</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_OFFLINE_OG" Url="http://docs.oracle.com/database/121/ARPLS/d_offog.htm">
      <Description>The DBMS_OFFLINE_OG package contains the public interface for offline instantiation of master groups.</Description>
    </Package>
    <Package Name="DBMS_OUTLN" Url="http://docs.oracle.com/database/121/ARPLS/d_outln.htm">
      <Description>The DBMS_OUTLN package, synonymous with OUTLN_PKG, contains the functional interface for subprograms associated with the management of stored outlines.</Description>
      <SubPrograms>
        <SubProgram Name="CLEAR_USED" ElementId="#i996800">
          <Description>Clears the outline 'used' flag</Description>
          <Parameters>
            <Parameter Name="NAME">Name of the outline.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_OUTLINE" ElementId="#i999012">
          <Description>Generates outlines from the shared cursor identified by hash value and child number</Description>
          <Parameters>
            <Parameter Name="HASH_VALUE">Hash value identifying the target shared cursor.</Parameter>
            <Parameter Name="CHILD_NUMBER">Child number of the target shared cursor.</Parameter>
            <Parameter Name="CATEGORY">Category in which to create outline (optional).</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_BY_CAT" ElementId="#i998927">
          <Description>Drops outlines that belong to a specified category</Description>
          <Parameters>
            <Parameter Name="CAT">Category of outlines to drop.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_UNUSED" ElementId="#i999392">
          <Description>Drops outlines that have never been applied in the compilation of a SQL statement</Description>
        </SubProgram>
        <SubProgram Name="EXACT_TEXT_SIGNATURES" ElementId="#i998802">
          <Description>Updates outline signatures to those that compute based on exact text matching</Description>
        </SubProgram>
        <SubProgram Name="UPDATE_BY_CAT" ElementId="#i998670">
          <Description>Changes the category of outlines in one category to a new category</Description>
          <Parameters>
            <Parameter Name="OLDCAT">The current category of outlines.</Parameter>
            <Parameter Name="NEWCAT">The new category of outlines.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UPDATE_SIGNATURES" ElementId="#i998695">
          <Description>Updates outline signatures to the current version's signature</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_OUTPUT" Url="http://docs.oracle.com/database/121/ARPLS/d_output.htm">
      <Description>The DBMS_OUTPUT package enables you to send messages from stored procedures, packages, and triggers. The package is especially useful for displaying PL/SQL debugging information.</Description>
      <SubPrograms>
        <SubProgram Name="DISABLE" ElementId="#i999434">
          <Description>Disables message output</Description>
        </SubProgram>
        <SubProgram Name="ENABLE" ElementId="#i999293">
          <Description>Enables message output</Description>
          <Parameters>
            <Parameter Name="BUFFER_SIZE">Upper limit, in bytes, the amount of buffered information. Setting buffer_size to NULL specifies that there should be no limit.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_LINE" ElementId="#BABGBACJ">
          <Description>Retrieves one line from buffer</Description>
          <Parameters>
            <Parameter Name="LINE">Returns a single line of buffered information, excluding a final newline character. You should declare the actual for this parameter as VARCHAR2 (32767) to avoid the risk of "ORA-06502: PL/SQL: numeric or value error: character string buffer too small".</Parameter>
            <Parameter Name="STATUS">If the call completes successfully, then the status returns as 0. If there are no more lines in the buffer, then the status is 1.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_LINES" ElementId="#i1000253">
          <Description>Retrieves an array of lines from buffer</Description>
          <Parameters>
            <Parameter Name="LINES">Returns an array of lines of buffered information. The maximum length of each line in the array is 32767 bytes. It is recommended that you use the VARRAY overload version in a 3GL host program to execute the procedure from a PL/SQL anonymous block.</Parameter>
            <Parameter Name="NUMLINES">Number of lines you want to retrieve from the buffer.After retrieving the specified number of lines, the procedure returns the number of lines actually retrieved. If this number is less than the number of lines requested, then there are no more lines in the buffer.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="NEW_LINE" ElementId="#i1000062">
          <Description>Terminates a line created with PUT</Description>
        </SubProgram>
        <SubProgram Name="PUT" ElementId="#BABGHBIA">
          <Description>Places a partial line in the buffer</Description>
          <Parameters>
            <Parameter Name="ITEM">Item to buffer.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PUT_LINE" ElementId="#i1000105">
          <Description>Places line in buffer</Description>
          <Parameters>
            <Parameter Name="ITEM">Item to buffer.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_PARALLEL_EXECUTE" Url="http://docs.oracle.com/database/121/ARPLS/d_parallel_ex.htm">
      <Description>The DBMS_PARALLEL_EXECUTE package enables incremental update of table data in parallel.</Description>
      <SubPrograms>
        <SubProgram Name="ADM_DROP_CHUNKS" ElementId="#CHDJFGBI">
          <Description>Drops all chunks of the specified task owned by the specified owner</Description>
          <Parameters>
            <Parameter Name="TASK_OWNER">Owner of the task</Parameter>
            <Parameter Name="TASK_NAME">Name of the task</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADM_DROP_TASK" ElementId="#CHDJFBCC">
          <Description>Drops the task of the given user and all related chunks</Description>
          <Parameters>
            <Parameter Name="TASK_OWNER">Owner of the task</Parameter>
            <Parameter Name="TASK_NAME">Name of the task</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADM_TASK_STATUS" ElementId="#CHDEHIBJ">
          <Description>Returns the task status</Description>
          <Parameters>
            <Parameter Name="TASK_OWNER">Owner of the task</Parameter>
            <Parameter Name="TASK_NAME">Name of the task</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADM_STOP_TASK" ElementId="#CHDDCJEF">
          <Description>Stops the task of the given owner and related job slaves</Description>
          <Parameters>
            <Parameter Name="TASK_OWNER">Owner of the task</Parameter>
            <Parameter Name="TASK_NAME">Name of the task</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_TASK" ElementId="#CHDDGEJG">
          <Description>Creates a task for the current user</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the task. The task_name can be any string in which related length must be less than or equal to 128 bytes.</Parameter>
            <Parameter Name="COMMENT">Comment field. The comment must be less than 4000 bytes.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_CHUNKS_BY_NUMBER_COL" ElementId="#CHDHFCDJ">
          <Description>Chunks the table associated with the given task by the specified column.</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the task</Parameter>
            <Parameter Name="TABLE_OWNER">Owner of the table</Parameter>
            <Parameter Name="TABLE_NAME">Name of the table</Parameter>
            <Parameter Name="TABLE_COLUMN">Name of the NUMBER column</Parameter>
            <Parameter Name="CHUNK_SIZE">Range of each chunk</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_CHUNKS_BY_ROWID" ElementId="#CHDGCHFA">
          <Description>Chunks the table associated with the given task by ROWID</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the task</Parameter>
            <Parameter Name="TABLE_OWNER">Owner of the table</Parameter>
            <Parameter Name="TABLE_NAME">Name of the table</Parameter>
            <Parameter Name="BY_ROW">TRUE if chunk_size refers to the number of rows, otherwise, chunk_size refers to the number of blocks</Parameter>
            <Parameter Name="CHUNK_SIZE">Approximate number of rows/blocks to process for each commit cycle</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_CHUNKS_BY_SQL" ElementId="#CHDJEHJI">
          <Description>Chunks the table associated with the given task by means of a user-provided SELECT statement</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the task</Parameter>
            <Parameter Name="SQL_STATMENT">SQL that returns the chunk ranges</Parameter>
            <Parameter Name="BY_ROWID">TRUE if the table is chunked by rowids</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_TASK" ElementId="#CHDEHCDE">
          <Description>Drops the task and all related chunks</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the task</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_CHUNKS" ElementId="#CHDHCHGC">
          <Description>Drops the task's chunks</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the task</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GENERATE_TASK_NAME" ElementId="#CHDEJHGC">
          <Description>Returns a unique name for a task</Description>
          <Parameters>
            <Parameter Name="PREFIX">The prefix to use when generating the task name</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_NUMBER_COL_CHUNK" ElementId="#CHDFADCH">
          <Description>Picks an unassigned NUMBER chunk and changes it to ASSIGNED</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the task</Parameter>
            <Parameter Name="CHUNK_ID">Chunk_id of the chunk</Parameter>
            <Parameter Name="START_ROWID">Start rowid in the returned range</Parameter>
            <Parameter Name="END_ID">End rowid in the returned range</Parameter>
            <Parameter Name="ANY_ROWS">Indicating if there could be any rows to process in the range</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_ROWID_CHUNK" ElementId="#CHDHAAEB">
          <Description>Picks an unassigned ROWID chunk and changes it to ASSIGNED</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the task</Parameter>
            <Parameter Name="CHUNK_ID">Chunk_id of the chunk</Parameter>
            <Parameter Name="START_ROWID">Start rowid in the returned range</Parameter>
            <Parameter Name="END_ID">End rowid in the returned range</Parameter>
            <Parameter Name="ANY_ROWS">Indicates that the range could include rows to process</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PURGE_PROCESSED_CHUNKS" ElementId="#CHDEAGGC">
          <Description>Deletes all the processed chunks whose status is PROCESSED or PROCESSED_WITH_ERROR</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the task</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RESUME_TASK" ElementId="#CHDBIBEC">
          <Description>Retries the given the task if the RUN_TASK Procedure finished with an error, or resumes the task if a crash occurred.</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the task</Parameter>
            <Parameter Name="SQL_STMT">SQL statement; must have :start_id and :end_id placeholders</Parameter>
            <Parameter Name="LANGUAGE_FLAG">Determines how Oracle handles the SQL statement. The following options are recognized:V6 (or 0) specifies version 6 behaviorNATIVE (or 1) specifies normal behavior for the database to which the program is connectedV7 (or 2) specifies Oracle database version 7 behavior</Parameter>
            <Parameter Name="EDITION">Specifies the edition in which to run the statement. Default is the current edition.</Parameter>
            <Parameter Name="APPLY_CROSSEDITION_TRIGGER">Specifies the unqualified name of a forward crossedition trigger that is to be applied to the specified SQL. The name is resolved using the edition and current_schema setting in which the statement is to be executed. The trigger must be owned by the user who executes the statement.</Parameter>
            <Parameter Name="FIRE_APPLY_TRIGGER">Indicates whether the specified apply_crossedition_trigger is itself to be executed, or only to used as be a guide in selecting other triggers</Parameter>
            <Parameter Name="PARALLEL_LEVEL">Number of parallel jobs; zero if run in serial; NULL uses the default parallelism</Parameter>
            <Parameter Name="JOB_CLASS">If running in parallel, the jobs all belong to the specified job class</Parameter>
            <Parameter Name="FORCE">If TRUE, do not raise an error if the status is PROCESSING.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RUN_TASK" ElementId="#CHDIBHHB">
          <Description>Executes the specified SQL statement on the chunks in parallel</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the task</Parameter>
            <Parameter Name="SQL_STMT">SQL statement; must have :start_id and :end_id placeholders</Parameter>
            <Parameter Name="LANGUAGE_FLAG">Determines how Oracle handles the SQL statement. The following options are recognized:V6 (or 0) specifies version 6 behaviorNATIVE (or 1) specifies normal behavior for the database to which the program is connectedV7 (or 2) specifies Oracle database version 7 behavior</Parameter>
            <Parameter Name="EDITION">Specifies the edition in which to run the statement. Default is the current edition.</Parameter>
            <Parameter Name="APPLY_CROSSEDITION_TRIGGER">Specifies the unqualified name of a forward crossedition trigger that is to be applied to the specified SQL. The name is resolved using the edition and current_schema setting in which the statement is to be executed. The trigger must be owned by the user executes the statement.</Parameter>
            <Parameter Name="FIRE_APPLY_TRIGGER">Indicates whether the specified apply_crossedition_trigger is itself to be executed, or only a guide to be used in selecting other triggers.</Parameter>
            <Parameter Name="PARALLEL_LEVEL">Number of parallel jobs; zero if run in serial; NULL uses the default parallelism.</Parameter>
            <Parameter Name="JOB_CLASS">If running in parallel, the jobs belong to the specified job class</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_CHUNK_STATUS" ElementId="#CHDIJDCH">
          <Description>Sets the status of the chunk</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the task</Parameter>
            <Parameter Name="CHUNK_ID">Chunk_id of the chunk</Parameter>
            <Parameter Name="STATUS">Status of the chunk: UNASSIGNED, ASSIGNED, PROCESSED PROCESSED_WITH_ERROR</Parameter>
            <Parameter Name="ERR_NUM">Error code returned during the processing of the chunk</Parameter>
            <Parameter Name="ERR_MSG">Error message returned during the processing of the chunk</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="STOP_TASK" ElementId="#CHDBECBG">
          <Description>Stops the task and related job slaves</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the task</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="TASK_STATUS" ElementId="#CHDJHFAB">
          <Description>Returns the task status</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the task</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_PART" Url="http://docs.oracle.com/database/121/ARPLS/d_part.htm">
      <Description>The DBMS_PART package provides an interface for maintenance and management operations on partitioned objects.</Description>
      <SubPrograms>
        <SubProgram Name="CLEANUP_GIDX" ElementId="#BEHHJDGI">
          <Description>Gathers the list of global indexes where optimized asynchronous index maintenance has taken place to clean up entries pointing to data segments that no longer exist</Description>
          <Parameters>
            <Parameter Name="SCHEMA_NAME_IN">Non-NULL processes only indexes on tables in the given schema</Parameter>
            <Parameter Name="TABLE_NAME_IN">Non-NULL processes only indexes on the given table in the given schema (schema_name_in must be non-NULL if table_name_in is non-NULL)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CLEANUP_ONLINE_OP" ElementId="#BEHFAAJF">
          <Description>Cleans up failed online move operations</Description>
          <Parameters>
            <Parameter Name="SCHEMA_NAME">Name of schema</Parameter>
            <Parameter Name="TABLE_NAME">Name of schema</Parameter>
            <Parameter Name="PARTITION_NAME">Name of partition</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_PCLXUTIL" Url="http://docs.oracle.com/database/121/ARPLS/d_pclxut.htm">
      <Description>The DBMS_PCLXUTIL package provides intra-partition parallelism for creating partition-wise local indexes. DBMS_PCLXUTIL circumvents the limitation that, for local index creation, the degree of parallelism is restricted to the number of partitions as only one parallel execution server process for each partition is used.</Description>
      <SubPrograms>
        <SubProgram Name="BUILD_PART_INDEX" ElementId="#i996814">
          <Description>Provides intra-partition parallelism for creating partition-wise local indexes</Description>
          <Parameters>
            <Parameter Name="JOBS_PER_BATCH">The number of concurrent partition-wise "local index builds".</Parameter>
            <Parameter Name="PROCS_PER_JOB">The number of parallel execution servers to be utilized for each local index build (1 &lt;= procs_per_job &lt;= max_slaves).</Parameter>
            <Parameter Name="TAB_NAME">The name of the partitioned table (an exception is raised if the table does not exist or not partitioned).</Parameter>
            <Parameter Name="IDX_NAME">The name given to the local index (an exception is raised if a local index is not created on the table tab_name).</Parameter>
            <Parameter Name="FORCE_OPT">If TRUE, then force rebuild of all partitioned indexes; otherwise, rebuild only the partitions marked 'UNUSABLE'.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_PDB" Url="http://docs.oracle.com/database/121/ARPLS/d_pdb.htm">
      <Description>The DBMS_PDB package provides an interface to examine and manipulate data about pluggable databases.</Description>
      <SubPrograms>
        <SubProgram Name="CHECK_PLUG_COMPATIBILITY" ElementId="#BGBIAFID">
          <Description>Uses an XML file describing a pluggable database (PDB) to determine whether it may be plugged into a given multitenant container database (CDB)</Description>
          <Parameters>
            <Parameter Name="PDB_DESCR_FILE">Path of the XML file that will contain description of a PDB</Parameter>
            <Parameter Name="PDB_NAME">Name which will be given to the PDB represented by pdb_descr_file when plugged into a given CDB. If not specified, the name will be extracted from pdb_descr_file.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DESCRIBE" ElementId="#BGBFHCBA">
          <Description>Generates an XML file describing the specified pluggable database (PDB)</Description>
          <Parameters>
            <Parameter Name="PDB_DESCR_FILE">Path of the XML file that will contain description of a PDB</Parameter>
            <Parameter Name="PDB_NAME">Name of a PDB to be described. A remote database is specified by including @dblink.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RECOVER" ElementId="#BGBCJIFB">
          <Description>Generates an XML file describing a pluggable database by using data files belonging to the pluggable database (PDB)</Description>
          <Parameters>
            <Parameter Name="PDB_DESCR_FILE">Path of the XML file that contains description of a pluggable database</Parameter>
            <Parameter Name="PDB_NAME">Name of a pluggable database</Parameter>
            <Parameter Name="FILENAMES">Comma-separated list of datafile paths and/or directories containing datafiles for the pluggable database</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_PERF" Url="http://docs.oracle.com/database/121/ARPLS/d_perf.htm">
      <Description>The DBMS_PERF package provides and interface to generate active reports for monitoring database performance</Description>
    </Package>
    <Package Name="DBMS_PIPE" Url="http://docs.oracle.com/database/121/ARPLS/d_pipe.htm">
      <Description>The DBMS_PIPE package lets two or more sessions in the same instance communicate. Oracle pipes are similar in concept to the pipes used in UNIX, but Oracle pipes are not implemented using the operating system pipe mechanisms.</Description>
      <SubPrograms>
        <SubProgram Name="CREATE_PIPE" ElementId="#CHDEICJI">
          <Description>Creates a pipe (necessary for private pipes)</Description>
          <Parameters>
            <Parameter Name="PIPENAME">Name of the pipe you are creating.You must use this name when you call SEND_MESSAGE and RECEIVE_MESSAGE. This name must be unique across the instance.Caution: Do not use pipe names beginning with ORA$. These are reserved for use by procedures provided by Oracle. Pipename should not be longer than 128 bytes, and is case insensitive. At this time, the name cannot contain Globalization Support characters.</Parameter>
            <Parameter Name="MAXPIPESIZE">The maximum size allowed for the pipe, in bytes.The total size of all of the messages on the pipe cannot exceed this amount. The message is blocked if it exceeds this maximum. The default maxpipesize is 8192 bytes.The maxpipesize for a pipe becomes a part of the characteristics of the pipe and persists for the life of the pipe. Callers of SEND_MESSAGE with larger values cause the maxpipesize to be increased. Callers with a smaller value use the existing, larger value.</Parameter>
            <Parameter Name="PRIVATE">Uses the default, TRUE, to create a private pipe.Public pipes can be implicitly created when you call SEND_MESSAGE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="NEXT_ITEM_TYPE" ElementId="#i997213">
          <Description>Returns datatype of next item in buffer</Description>
        </SubProgram>
        <SubProgram Name="PACK_MESSAGE" ElementId="#CHDJGGIE">
          <Description>Builds message in local buffer</Description>
          <Parameters>
            <Parameter Name="ITEM">Item to pack into the local message buffer.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PURGE" ElementId="#i997357">
          <Description>Purges contents of named pipe</Description>
          <Parameters>
            <Parameter Name="PIPENAME">Name of pipe from which to remove all messages.The local buffer may be overwritten with messages as they are discarded. Pipename should not be longer than 128 bytes, and is case-insensitive.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RECEIVE_MESSAGE" ElementId="#i997133">
          <Description>Copies message from named pipe into local buffer</Description>
          <Parameters>
            <Parameter Name="PIPENAME">Name of the pipe on which you want to receive a message.Names beginning with ORA$ are reserved for use by Oracle</Parameter>
            <Parameter Name="TIMEOUT">Time to wait for a message, in seconds.The default value is the constant MAXWAIT, which is defined as 86400000 (1000 days). A timeout of 0 lets you read without blocking.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVE_PIPE" ElementId="#CHDICFGD">
          <Description>Removes the named pipe</Description>
          <Parameters>
            <Parameter Name="PIPENAME">Name of pipe that you want to remove.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RESET_BUFFER" ElementId="#i997385">
          <Description>Purges contents of local buffer</Description>
        </SubProgram>
        <SubProgram Name="SEND_MESSAGE" ElementId="#i997042">
          <Description>Sends message on named pipe: This implicitly creates a public pipe if the named pipe does not exist</Description>
          <Parameters>
            <Parameter Name="PIPENAME">Name of the pipe on which you want to place the message.If you are using an explicit pipe, then this is the name that you specified when you called CREATE_PIPE.Caution: Do not use pipe names beginning with 'ORA$'. These names are reserved for use by procedures provided by Oracle. Pipename should not be longer than 128 bytes, and is case-insensitive. At this time, the name cannot contain Globalization Support characters.</Parameter>
            <Parameter Name="TIMEOUT">Time to wait while attempting to place a message on a pipe, in seconds.The default value is the constant MAXWAIT, which is defined as 86400000 (1000 days).</Parameter>
            <Parameter Name="MAXPIPESIZE">Maximum size allowed for the pipe, in bytes.The total size of all the messages on the pipe cannot exceed this amount. The message is blocked if it exceeds this maximum. The default is 8192 bytes.The maxpipesize for a pipe becomes a part of the characteristics of the pipe and persists for the life of the pipe. Callers of SEND_MESSAGE with larger values cause the maxpipesize to be increased. Callers with a smaller value simply use the existing, larger value.Specifying maxpipesize as part of the SEND_MESSAGE procedure eliminates the need for a separate call to open the pipe. If you created the pipe explicitly, then you can use the optional maxpipesize parameter to override the creation pipe size specifications.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UNIQUE_SESSION_NAME" ElementId="#i997393">
          <Description>Returns unique session name</Description>
        </SubProgram>
        <SubProgram Name="UNPACK_MESSAGE" ElementId="#i997258">
          <Description>Accesses next item in buffer</Description>
          <Parameters>
            <Parameter Name="ITEM">Argument to receive the next unpacked item from the local message buffer.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_PREDICTIVE_ANALYTICS" Url="http://docs.oracle.com/database/121/ARPLS/d_predan.htm">
      <Description>Data mining can discover useful information buried in vast amounts of data. However, it is often the case that both the programming interfaces and the data mining expertise required to obtain these results are too complex for use by the wide audiences that can obtain benefits from using Oracle Data Mining.</Description>
      <SubPrograms>
        <SubProgram Name="EXPLAIN" ElementId="#CACBACDF">
          <Description>Ranks attributes in order of influence in explaining a target column.</Description>
          <Parameters>
            <Parameter Name="DATA_TABLE_NAME">Name of input table or view</Parameter>
            <Parameter Name="EXPLAIN_COLUMN_NAME">Name of the column to be explained</Parameter>
            <Parameter Name="RESULT_TABLE_NAME">Name of the table where results are saved</Parameter>
            <Parameter Name="DATA_SCHEMA_NAME">Name of the schema where the input table or view resides and where the result table is created. Default: the current schema.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PREDICT" ElementId="#CACGGDEC">
          <Description>Predicts the value of a target column based on values in the input data.</Description>
          <Parameters>
            <Parameter Name="ACCURACY">Output parameter that returns the predictive confidence, a measure of the accuracy of the predicted values. The predictive confidence for a categorical target is the most common target value; the predictive confidence for a numerical target is the mean.</Parameter>
            <Parameter Name="DATA_TABLE_NAME">Name of the input table or view.</Parameter>
            <Parameter Name="CASE_ID_COLUMN_NAME">Name of the column that uniquely identifies each case (record) in the input data.</Parameter>
            <Parameter Name="TARGET_COLUMN_NAME">Name of the column to predict.</Parameter>
            <Parameter Name="RESULT_TABLE_NAME">Name of the table where results will be saved.</Parameter>
            <Parameter Name="DATA_SCHEMA_NAME">Name of the schema where the input table or view resides and where the result table is created. Default: the current schema.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PROFILE" ElementId="#CACHJICB">
          <Description>Generates rules that identify the records that have the same target value.</Description>
          <Parameters>
            <Parameter Name="DATA_TABLE_NAME">Name of the table containing the data to be analyzed.</Parameter>
            <Parameter Name="TARGET_COLUMN_NAME">Name of the target column.</Parameter>
            <Parameter Name="RESULT_TABLE_NAME">Name of the table where the results will be saved.</Parameter>
            <Parameter Name="DATA_SCHEMA_NAME">Name of the schema where the input table or view resides and where the result table is created. Default: the current schema.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_PREPROCESSOR" Url="http://docs.oracle.com/database/121/ARPLS/d_preproc.htm">
      <Description>The DBMS_PREPROCESSOR package provides an interface to print or retrieve the source text of a PL/SQL unit in its post-processed form.</Description>
      <SubPrograms>
        <SubProgram Name="GET_POST_PROCESSED_SOURCE" ElementId="#CHDDDIHB">
          <Description>Returns the post-processed source text</Description>
          <Parameters>
            <Parameter Name="OBJECT_TYPE">Must be one of PACKAGE, PACKAGE BODY, PROCEDURE, FUNCTION, TYPE, TYPE, BODY or TRIGGER. Case sensitive.</Parameter>
            <Parameter Name="SCHEMA_NAME">The schema name. Case insensitive unless a quoted identifier is used. If NULL, use current schema.</Parameter>
            <Parameter Name="OBJECT_NAME">The name of the object.The object_type is always case insensitive. Case insensitive unless a quoted identifier is used.</Parameter>
            <Parameter Name="SOURCE">The source text of the compilation unit</Parameter>
            <Parameter Name="SOURCE_LINES_T">INDEX-BY table containing the source text of the compilation unit. The source text is a concatenation of all the non-NULL INDEX-BY table elements in ascending index order.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PRINT_POST_PROCESSED_SOURCE" ElementId="#CHDCBEBF">
          <Description>Prints post-processed source text</Description>
          <Parameters>
            <Parameter Name="OBJECT_TYPE">Must be one of PACKAGE, PACKAGE BODY, PROCEDURE, FUNCTION, TYPE, TYPE, BODY or TRIGGER. Case sensitive.</Parameter>
            <Parameter Name="SCHEMA_NAME">The schema name. Case insensitive unless a quoted identifier is used. If NULL, use current schema.</Parameter>
            <Parameter Name="OBJECT_NAME">The name of the object.The object_type is always case insensitive. Case insensitive unless a quoted identifier is used.</Parameter>
            <Parameter Name="SOURCE">The source text of the compilation unit</Parameter>
            <Parameter Name="SOURCE_LINES_T">INDEX-BY table containing the source text of the compilation unit. The source text is a concatenation of all the non-NULL INDEX-BY table elements in ascending index order.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_PRIVILEGE_CAPTURE" Url="http://docs.oracle.com/database/121/ARPLS/d_priv_prof.htm">
      <Description>The DBMS_PRIVILEGE_CAPTURE package provides an interface to database privilege analysis.</Description>
      <SubPrograms>
        <SubProgram Name="CREATE_CAPTURE" ElementId="#BABJBFDF">
          <Description>Creates a policy that specifies the conditions for analyzing privilege use.</Description>
          <Parameters>
            <Parameter Name="NAME">Name of the privilege analysis policy. A string of size up to 30 characters.</Parameter>
            <Parameter Name="DESCRIPTION">Description of the policy (up to 1024 characters)</Parameter>
            <Parameter Name="TYPE">Type of the privilege analysis policy. Possible values are:G_DATABASE: Captures all privilege use in the database, except privileges used by the SYS user.G_ROLE: Captures the use of a privilege if the privilege is part of a specified role or list of roles.G_CONTEXT: Captures the use of a privilege if the context specified by the condition parameter evaluates to true.G_ROLE_AND_CONTEXT: Captures the use of a privilege if the privilege is part of the specified list of roles and when the condition specified by the condition parameter is true.</Parameter>
            <Parameter Name="ROLES">The roles whose privileges are to be analyzed. Required if the type is G_ROLE or G_ROLE_AND_CONTEXT.</Parameter>
            <Parameter Name="CONDITION">PL/SQL boolean expression containing up to 4000 characters. Required if type is G_CONTEXT or G_ROLE_AND_CONTEXT. Note that the boolean expression can only contain SYS_CONTEXT, but not other functions.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DISABLE_CAPTURE" ElementId="#BABGBFDC">
          <Description>Stops the recording of privilege use for a specified privilege analysis policy</Description>
          <Parameters>
            <Parameter Name="NAME">Name of the privilege analysis policy to be disabled</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_CAPTURE" ElementId="#BABBBIEJ">
          <Description>Removes a privilege analysis policy together with the data recorded</Description>
          <Parameters>
            <Parameter Name="NAME">Name of the privilege analysis policy to be removed</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ENABLE_CAPTURE" ElementId="#BABDFCHD">
          <Description>Starts the recording of privilege analysis for a specified privilege analysis policy</Description>
          <Parameters>
            <Parameter Name="NAME">Name of the privilege analysis policy to be enabled</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GENERATE_RESULT" ElementId="#BABFBIAG">
          <Description>Populates the privilege analysis data dictionary views with data</Description>
          <Parameters>
            <Parameter Name="NAME">Name of the privilege analysis policy for which views are populated</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_PROFILER" Url="http://docs.oracle.com/database/121/ARPLS/d_profil.htm">
      <Description>The DBMS_PROFILER package provides an interface to profile existing PL/SQL applications and identify performance bottlenecks. You can then collect and persistently store the PL/SQL profiler data.</Description>
      <SubPrograms>
        <SubProgram Name="FLUSH_DATA" ElementId="#i999978">
          <Description>Flushes profiler data collected in the user's session</Description>
        </SubProgram>
        <SubProgram Name="GET_VERSION" ElementId="#i999998">
          <Description>Gets the version of this API</Description>
          <Parameters>
            <Parameter Name="MAJOR">Major version of DBMS_PROFILER.</Parameter>
            <Parameter Name="MINOR">Minor version of DBMS_PROFILER.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="INTERNAL_VERSION_CHECK" ElementId="#i1000064">
          <Description>Verifies that this version of the DBMS_PROFILER package can work with the implementation in the database</Description>
        </SubProgram>
        <SubProgram Name="PAUSE_PROFILER" ElementId="#i1000101">
          <Description>Pauses profiler data collection</Description>
        </SubProgram>
        <SubProgram Name="RESUME_PROFILER" ElementId="#i1000092">
          <Description>Resumes profiler data collection</Description>
        </SubProgram>
        <SubProgram Name="START_PROFILER" ElementId="#i1000047">
          <Description>Starts profiler data collection in the user's session</Description>
          <Parameters>
            <Parameter Name="RUN_COMMENT">Each profiler run can be associated with a comment. For example, the comment could provide the name and version of the benchmark test that was used to collect data.</Parameter>
            <Parameter Name="RUN_NUMBER">Stores the number of the run so you can store and later recall the run's data.</Parameter>
            <Parameter Name="RUN_COMMENT1">Allows you to make interesting comments about the run.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="STOP_PROFILER" ElementId="#i997210">
          <Description>Stops profiler data collection in the user's session</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_PROPAGATION_ADM" Url="http://docs.oracle.com/database/121/ARPLS/d_prop_a.htm">
      <Description>The DBMS_PROPAGATION_ADM package, one of a set of Oracle Streams packages, provides administrative interfaces for configuring a propagation from a source queue to a destination queue.</Description>
      <SubPrograms>
        <SubProgram Name="ALTER_PROPAGATION" ElementId="#i996796">
          <Description>Adds, alters, or removes a rule set for a propagation</Description>
          <Parameters>
            <Parameter Name="PROPAGATION_NAME">The name of the propagation you are altering. You must specify an existing propagation name. Do not specify an owner.</Parameter>
            <Parameter Name="RULE_SET_NAME">The name of the positive rule set for the propagation. The positive rule set contains the rules that instruct the propagation to propagate messages.If you want to use a positive rule set for the propagation, then you must specify an existing rule set in the form [schema_name.]rule_set_name. For example, to specify a positive rule set in the hr schema named prop_rules, enter hr.prop_rules. If the schema is not specified, then the current user is the default.An error is returned if the specified rule set does not exist. You can create a rule set and add rules to it using the DBMS_STREAMS_ADM package or the DBMS_RULE_ADM package.If you specify NULL and the remove_rule_set parameter is set to FALSE, then the procedure retains any existing positive rule set. If you specify NULL and the remove_rule_set parameter is set to TRUE, then the procedure removes any existing positive rule set.</Parameter>
            <Parameter Name="REMOVE_RULE_SET">If TRUE, then the procedure removes the positive rule set for the specified propagation. If you remove a positive rule set for a propagation, and the propagation does not have a negative rule set, then the propagation propagates all messages.If you remove a positive rule set for a propagation, and a negative rule set exists for the propagation, then the propagation propagates all messages in its queue that are not discarded by the negative rule set.If FALSE, then the procedure retains the positive rule set for the specified propagation.If the rule_set_name parameter is non-NULL, then this parameter should be set to FALSE.</Parameter>
            <Parameter Name="NEGATIVE_RULE_SET_NAME">The name of the negative rule set for the propagation. The negative rule set contains the rules that instruct the propagation to discard messages.If you want to use a negative rule set for the propagation, then you must specify an existing rule set in the form [schema_name.]rule_set_name. For example, to specify a negative rule set in the hr schema named neg_rules, enter hr.neg_rules. If the schema is not specified, then the current user is the default.An error is returned if the specified rule set does not exist. You can create a rule set and add rules to it using the DBMS_STREAMS_ADM package or the DBMS_RULE_ADM package.If you specify NULL and the remove_negative_rule_set parameter is set to FALSE, then the procedure retains any existing negative rule set. If you specify NULL and the remove_negative_rule_set parameter is set to TRUE, then the procedure removes any existing negative rule set.If you specify both a positive and a negative rule set for a propagation, then the negative rule set is always evaluated first.</Parameter>
            <Parameter Name="REMOVE_NEGATIVE_RULE_SET">If TRUE, then the procedure removes the negative rule set for the specified propagation. If you remove a negative rule set for a propagation, and the propagation does not have a positive rule set, then the propagation propagates all messages.If you remove a negative rule set for a propagation, and a positive rule set exists for the propagation, then the propagation propagates all messages in its queue that are not discarded by the positive rule set.If FALSE, then the procedure retains the negative rule set for the specified propagation.If the negative_rule_set_name parameter is non-NULL, then this parameter should be set to FALSE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_PROPAGATION" ElementId="#i996840">
          <Description>Creates a propagation and specifies the source queue, destination queue, and rule set for the propagation</Description>
          <Parameters>
            <Parameter Name="PROPAGATION_NAME">The name of the propagation you are creating. A NULL setting is not allowed. Do not specify an owner.Note: The propagation_name setting cannot be altered after the propagation is created.</Parameter>
            <Parameter Name="SOURCE_QUEUE">The name of the source queue, specified as [schema_name.]queue_name. The current database must contain the source queue.For example, to specify a source queue named streams_queue in the strmadmin schema, enter strmadmin.streams_queue for this parameter. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="DESTINATION_QUEUE">The name of the destination queue, specified as [schema_name.]queue_name.For example, to specify a destination queue named streams_queue in the strmadmin schema, enter strmadmin.streams_queue for this parameter. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="DESTINATION_DBLINK">The name of the database link that will be used by the propagation. The database link is from the database that contains the source queue to the database that contains the destination queue.If NULL, then the source queue and destination queue must be in the same database.Note: Connection qualifiers are not allowed.</Parameter>
            <Parameter Name="RULE_SET_NAME">The name of the positive rule set for the propagation. The positive rule set contains the rules that instruct the propagation to propagate messages.If you want to use a positive rule set for the propagation, then you must specify an existing rule set in the form [schema_name.]rule_set_name. For example, to specify a positive rule set in the hr schema named prop_rules, enter hr.prop_rules. If the schema is not specified, then the current user is the default.An error is returned if the specified rule set does not exist. You can create a rule set and add rules to it using the DBMS_STREAMS_ADM package or the DBMS_RULE_ADM package.If you specify NULL, and no negative rule set exists for the propagation, then the propagation propagates all messages in its queue.If you specify NULL, and a negative rule set exists for the propagation, then the propagation propagates all messages in its queue that are not discarded by the negative rule set.</Parameter>
            <Parameter Name="NEGATIVE_RULE_SET_NAME">The name of the negative rule set for the propagation. The negative rule set contains the rules that instruct the propagation to discard messages.If you want to use a negative rule set for the propagation, then you must specify an existing rule set in the form [schema_name.]rule_set_name. For example, to specify a negative rule set in the hr schema named neg_rules, enter hr.neg_rules. If the schema is not specified, then the current user is the default.An error is returned if the specified rule set does not exist. You can create a rule set and add rules to it using the DBMS_STREAMS_ADM package or the DBMS_RULE_ADM package.If you specify NULL, and no positive rule set exists for the propagation, then the propagation propagates all messages in its queue.If you specify NULL, and a positive rule set exists for the propagation, then the propagation propagates all messages in its queue that are not discarded by the positive rule set.If you specify both a positive and a negative rule set for a propagation, then the negative rule set is always evaluated first.</Parameter>
            <Parameter Name="QUEUE_TO_QUEUE">If TRUE or NULL, then the propagation is a queue to queue propagation. A queue-to-queue propagation always has its own propagation job and uses a service for automatic failover when the destination queue is a buffered queue in an Oracle Real Application Clusters (Oracle RAC) database.If FALSE, then the propagation is a queue-to-dblink propagation. A queue-to-dblink propagation can share a propagation job with other propagations that use the same database link and does not support automatic failover in an Oracle RAC environment.See Also: Oracle Streams Concepts and Administration for more information about queue-to-queue propagations</Parameter>
            <Parameter Name="ORIGINAL_PROPAGATION_NAME">Specify the original propagation name if the propagation being created is part of a split and merge operation initiated by the SPLIT_STREAMS procedure in the DBMS_STREAMS_ADM package. The split operation clones the original propagation under a new name. The name of the original propagation is important when the cloned propagation is copied back to the original stream using the MERGE_STREAMS procedure in the DBMS_STREAMS_ADM package.Specify NULL if the propagation being created is not part of a split and merge operation.See Also: SPLIT_STREAMS Procedure and MERGE_STREAMS Procedure</Parameter>
            <Parameter Name="AUTO_MERGE_THESHOLD">Specify a positive number if both of the following conditions are met:The propagation being created is part of a split and merge operation initiated by the SPLIT_STREAMS procedure in the DBMS_STREAMS_ADM package.The stream will be merged back to the original stream automatically.Specify NULL if either of the following conditions are met:The propagation being created is not part of a split and merge operation.The propagation being created is part of a split and merge operation, but the stream being split off will not be merged back to the original stream automatically.See Also: SPLIT_STREAMS Procedure and MERGE_STREAMS Procedure</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_PROPAGATION" ElementId="#i996928">
          <Description>Drops a propagation</Description>
          <Parameters>
            <Parameter Name="PROPAGATION_NAME">The name of the propagation you are dropping. You must specify an existing propagation name. Do not specify an owner.</Parameter>
            <Parameter Name="DROP_UNUSED_RULE_SETS">If TRUE, then the procedure drops any rule sets, positive and negative, used by the specified propagation if these rule sets are not used by any other Oracle Streams client, which includes capture processes, propagations, apply processes, and messaging clients. If this procedure drops a rule set, then this procedure also drops any rules in the rule set that are not in another rule set.If FALSE, then the procedure does not drop the rule sets used by the specified propagation, and the rule sets retain their rules.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="START_PROPAGATION" ElementId="#CDEGDCHB">
          <Description>Starts a propagation</Description>
        </SubProgram>
        <SubProgram Name="STOP_PROPAGATION" ElementId="#CDECBIHB">
          <Description>Stops a propagation</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_QOPATCH" Url="http://docs.oracle.com/database/121/ARPLS/d_qopatch.htm">
      <Description>The DBMS_QOPATCH package provides an interface to view the installed database patches.</Description>
      <SubPrograms>
        <SubProgram Name="GET_OPATCH_BUGS" ElementId="#CEGGFIAA">
          <Description>Provides a bugs list for a patch in XML format if the patch number is given. If patch is not given then it lists all the bugs installed in all the patches in XML format.</Description>
          <Parameters>
            <Parameter Name="PATCHNUM">Patch number</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_OPATCH_COUNT" ElementId="#CEGCCBJC">
          <Description>Provides the total number of installed patches in XML format</Description>
          <Parameters>
            <Parameter Name="PATCHNUM">Patch number</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_OPATCH_DATA" ElementId="#CEGHCFBA">
          <Description>Provides top level patch information for the patch (such as Patch ID, patch creation time) in the XML element</Description>
          <Parameters>
            <Parameter Name="PATCHNUM">Patch number</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_OPATCH_FILES" ElementId="#CEGCBFGF">
          <Description>Provides the list of files modified in the given patch number in XML format</Description>
          <Parameters>
            <Parameter Name="PATCHNUM">Patch number</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_OPATCH_INSTALL_INFO" ElementId="#CEGGJJDB">
          <Description>Returns the XML element containing the ORACLE_HOME details such as patch and inventory location</Description>
        </SubProgram>
        <SubProgram Name="GET_OPATCH_LIST" ElementId="#CEGGCEGG">
          <Description>Provides list of patches installed as an XML element from the XML inventory</Description>
        </SubProgram>
        <SubProgram Name="GET_OPATCH_LSINVENTORY" ElementId="#CEGJFJGB">
          <Description>Returns whole opatch inventory as XML instance document.</Description>
        </SubProgram>
        <SubProgram Name="GET_OPATCH_OLAYS" ElementId="#CEGJEJDI">
          <Description>Provides overlay patches for a given patch as XML element</Description>
          <Parameters>
            <Parameter Name="PATCHNUM">Patch number</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_OPATCH_PREQS" ElementId="#CEGDDDIF">
          <Description>Provides prerequisite patches for a given patch as XML element</Description>
          <Parameters>
            <Parameter Name="PATCHNUM">Patch number</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_OPATCH_XSLT" ElementId="#CEGFEHCI">
          <Description>Returns the style-sheet for the opatch XML inventory presentation</Description>
        </SubProgram>
        <SubProgram Name="GET_PENDING_ACTIVITY" ElementId="#CEGEEEBJ">
          <Description>Returns the information related to SQL patches applied on a single instance by querying the binary inventory</Description>
        </SubProgram>
        <SubProgram Name="GET_SQLPATCH_STATUS" ElementId="#CEGDEHCC">
          <Description>Displays the SQL patch status by querying from SQL patch registry to produce complete patch level information</Description>
          <Parameters>
            <Parameter Name="PATCHNUM">Patch number</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IS_PATCH_INSTALLED" ElementId="#CEGEECEB">
          <Description>Provides information (such as patchID, application date, and SQL patch information) on the installed patch as XML node by querying the XML inventory</Description>
          <Parameters>
            <Parameter Name="PATCHNUM">Patch number</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PATCH_CONFLICT_DETECTION" ElementId="#CEGCAABG">
          <Description>Returns the conflicting patch for a given file, if it conflicts with an existing patch</Description>
          <Parameters>
            <Parameter Name="FILENAME">File name</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_CURRENT_OPINST" ElementId="#CEGFGAGF">
          <Description>Sets the node name and instance to get the inventory details specific to it in an Oracle Real Application Clusters (RAC) environment</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_RANDOM" Url="http://docs.oracle.com/database/121/ARPLS/d_random.htm">
      <Description>The DBMS_RANDOM package provides a built-in random number generator. DBMS_RANDOM is not intended for cryptography.</Description>
      <SubPrograms>
        <SubProgram Name="INITIALIZE" ElementId="#i998255">
          <Description>Initializes the package with a seed value</Description>
          <Parameters>
            <Parameter Name="VAL">Seed number used to generate a random number</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="NORMAL" ElementId="#i997841">
          <Description>Returns random numbers in a normal distribution</Description>
          <Parameters>
            <Parameter Name="NUMBER">Returns a random number</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RANDOM" ElementId="#i998740">
          <Description>Generates a random number</Description>
          <Parameters>
            <Parameter Name="BINARY_INTEGER">Returns a random integer greater or equal to -power(2,31) and less than power(2,31)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SEED" ElementId="#i996798">
          <Description>Resets the seed</Description>
          <Parameters>
            <Parameter Name="VAL">Seed number or string used to generate a random number</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="STRING" ElementId="#i996825">
          <Description>Gets a random string</Description>
          <Parameters>
            <Parameter Name="OPT">Specifies what the returning string looks like:'u', 'U' - returning string in uppercase alpha characters'l', 'L' - returning string in lowercase alpha characters'a', 'A' - returning string in mixed case alpha characters'x', 'X' - returning string in uppercase alpha-numeric characters'p', 'P' - returning string in any printable characters.Otherwise the returning string is in uppercase alpha characters.</Parameter>
            <Parameter Name="LEN">Length of the returning string</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="TERMINATE" ElementId="#i998149">
          <Description>Terminates package</Description>
        </SubProgram>
        <SubProgram Name="VALUE" ElementId="#i998095">
          <Description>Gets a random number, greater than or equal to 0 and less than 1, with 38 digits to the right of the decimal (38-digit precision), while the overloaded function gets a random Oracle number x, where x is greater than or equal to low and less than high</Description>
          <Parameters>
            <Parameter Name="LOW">Lowest number in a range from which to generate a random number. The number generated may be equal to low</Parameter>
            <Parameter Name="HIGH">Highest number below which to generate a random number. The number generated will be less than high</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_RECTIFIER_DIFF" Url="http://docs.oracle.com/database/121/ARPLS/d_recdif.htm">
      <Description>The DBMS_RECTIFIER_DIFF package provides an interface used to detect and resolve data inconsistencies between two replicated sites.</Description>
    </Package>
    <Package Name="DBMS_REDACT" Url="http://docs.oracle.com/database/121/ARPLS/d_redact.htm">
      <Description>The DBMS_REDACT package provides an interface to Oracle Data Redaction, which enables you to mask (redact) data that is returned from queries issued by low-privileged users or an application.</Description>
      <SubPrograms>
        <SubProgram Name="ADD_POLICY" ElementId="#CHDCBEAC">
          <Description>Defines a Data Redaction policy for a table or view</Description>
          <Parameters>
            <Parameter Name="OBJECT_SCHEMA">Schema owning the table, current user if NULL</Parameter>
            <Parameter Name="OBJECT_NAME">Name of table or view to which to add a Data Redaction policy</Parameter>
            <Parameter Name="POLICY_NAME">Name of policy</Parameter>
            <Parameter Name="COLUMN_NAME">[Optional] Name of one column to which the redaction policy applies. If you must redact more than one column, use the ALTER_POLICY Procedure to add the additional columns.</Parameter>
            <Parameter Name="FUNCTION_TYPE">Type of redaction function to use. Possible values are:- DBMS_REDACT.NONE- DBMS_REDACT.FULL (default)- DBMS_REDACT.PARTIAL- DBMS_REDACT.RANDOM- DBMS_REDACT.REGEXPIf the function_type is DBMS_REDACT.REGEXP, then the function_parameters parameter must be omitted completely, and the regexp_* parameters must be used to define the Data Redaction policy.See Table 121-1, "Values for function_type Parameter of DBMS_REDACT.ADD_POLICY" for an overview of the meanings of these values, and for some examples of their use.</Parameter>
            <Parameter Name="FUNCTION_PARAMETERS">Parameters to the redaction function. The possible values depend on the value of the function_type provided.If the function_type is DBMS_REDACT.REGEXP, then the function_parameters parameter must be omitted completely, and the regexp_* parameters must be used to define the Data Redaction policy.- DBMS_REDACT.NONE: Can be omitted entirely and defaults to NULL- DBMS_REDACT.FULL: Can be omitted entirely and defaults to NULL- Masking parameters for partial character masking. For character datatypes, a comma-separated list containing these fields:Input format: 'V' for value to be possibly masked, 'F' for formatting character to be ignoredOutput format: 'V' for output of masking, any other characters will be treated as formatting characters.Mask character: a character that will be used to replace the actual values. Examples are '*' and 'x'.Starting digit position: specifies the starting (character) position to begin replacing actual values with the masking character. The beginning of the string is position 1. Positions do not include formatting characters.Ending digit position: specifies the ending (character) position to end masking. An example is 'VVVFVVFVVVV,VVV-VV-VVVV,X,1,5' for masking the first 5 digits of SSN string 123-45-6789, and adding dashes back to format it like an SSN, resulting in XXX-XX-6789.For number datatypes, a comma-separated list containing these fields:Mask character: this is a character between '0' to '9' that will be used to replace the actual values.Starting digit position: specifies the starting (digit) position to begin replacing actual values with the masking character. The beginning of the string is position 1. Positions do not include the decimal point.Ending digit position: this specifies the ending digit position to end masking. An example is '9,1,5' for masking the first 5 digits of a Social Security number number 123456789, resulting in 999996789.</Parameter>
            <Parameter Name="EXPRESSION">Boolean expression for the table or view, using either the SYS_CONTEXT function or 1=1. Redaction takes place only if this policy expression evaluates to TRUE.</Parameter>
            <Parameter Name="ENABLE">Boolean value that determines whether the Data Redaction policy is enabled on creation.The default value is TRUE, which means that the policy is automatically enabled upon creation. If the enable parameter is set to FALSE, the policy takes effect only when it is subsequently enabled by calling the DBMS_REDACT.ENABLE_POLICY procedure.</Parameter>
            <Parameter Name="REGEXP_PATTERN">Regular expression pattern up to 512 bytes.Use only if the function_type parameter is DBMS_REDACT.REGEXP. Also, do not specify the function_parameters parameter when function_type is DBMS_REDACT.REGEXP.See Oracle Database SQL Language Reference for more information and examples on using regular expression patterns.</Parameter>
            <Parameter Name="REGEXP_REPLACE_STRING">Replacement string (up to 4000 characters in length) with up to 500 back-references to subexpressions in the form \n, where n is a number between 1 and 9.Use only if the function_type parameter is DBMS_REDACT.REGEXP</Parameter>
            <Parameter Name="REGEXP_POSITION">Integer counting from 1, specifies the position where the search must begin.Use only if the function_type parameter is DBMS_REDACT.REGEXP</Parameter>
            <Parameter Name="REGEXP_OCCURRENCE">Use 0 to replace all occurrences of the matchUse positive integer n to replace the n-th occurence of the match.Use only if the function_type parameter is DBMS_REDACT.REGEXP</Parameter>
            <Parameter Name="REGEXP_MATCH_PARAMETER">Changes the default matching behavior, possible values are a combination of 'i', 'c', 'n', 'm', 'x'Use only if the function_type parameter is DBMS_REDACT.REGEXPSee Oracle Database SQL Language Reference for more information and examples on using regular expression match parameters.</Parameter>
            <Parameter Name="POLICY_DESCRIPTION">Description of redaction policy</Parameter>
            <Parameter Name="COLUMN_DESCRIPTION">Description of the column being redacted</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ALTER_POLICY" ElementId="#CHDBBJHB">
          <Description>Alters a Data Redaction policy for a table or view</Description>
          <Parameters>
            <Parameter Name="OBJECT_SCHEMA">Schema owning the table, current user if NULL</Parameter>
            <Parameter Name="OBJECT_NAME">Name of table or view to which to alter a Data Redaction policy</Parameter>
            <Parameter Name="POLICY_NAME">Name of policy limited to 30 bytes</Parameter>
            <Parameter Name="ACTION">Action to take. For more information see Table 121-2, "Values for action Parameter of DBMS_REDACT.ALTER_POLICY".</Parameter>
            <Parameter Name="COLUMN_NAME">[Optional] Name of one column to which the redaction policy applies.</Parameter>
            <Parameter Name="FUNCTION_TYPE">Type of redaction function to use. Possible values are:- DBMS_REDACT.NONE- DBMS_REDACT.FULL (default)- DBMS_REDACT.PARTIAL- DBMS_REDACT.RANDOM- DBMS_REDACT.REGEXPIf the function_type is DBMS_REDACT.REGEXP, then the function_parameters parameter must be omitted completely, and the regexp_pattern, regexp_replace_string, regexp_position, regexp_occurrence, and regexp_match_parameter must be used to define the Data Redaction policy.See Table 121-1, "Values for function_type Parameter of DBMS_REDACT.ADD_POLICY" for an overview of the meanings of these values, and for some examples of their use.</Parameter>
            <Parameter Name="FUNCTION_PARAMETERS">Parameters to the redaction function. The possible values depend on the value of the function_type provided.If the function_type is DBMS_REDACT.REGEXP, then the function_parameters parameter must be omitted completely, and the regexp_pattern, regexp_replace_string, regexp_position, regexp_occurrence, and regexp_match_parameter must be used to define the Data Redaction policy.- If the function_type is DBMS_REDACT.NONE, the function_parameters parameter can be omitted entirely and defaults to NULL.- If the function_type is DBMS_REDACT.FULL, the function_parameters parameter can be omitted entirely and defaults to NULL.- If the function_type is DBMS_REDACT.PARTIAL, the function_parameters parameter represents the masking parameters for partial masking.Input format: 'V' for value to be possibly masked, 'F' for formatting character to be ignoredOutput format: 'V' for output of masking, any other characters will be treated as formatting characters.Mask character: a character that will be used to replace the actual values. Examples are '*' and 'x'.Starting digit position: specifies the starting (character) position to begin replacing actual values with the masking character. The beginning of the string is position 1. Positions do not include formatting characters.Ending digit position: specifies the ending (character) position to end masking. An example is 'VVVFVVFVVVV,VVV-VV-VVVV,X,1,5' for masking the first 5 digits of SSN string 123-45-6789, and adding dashes back to format it like an SSN, resulting in XXX-XX-6789.For number datatypes, a comma-separated list containing these fields:Mask character: this is a character between '0' to '9' that will be used to replace the actual values.Starting digit position: specifies the starting (digit) position to begin replacing actual values with the masking character. The beginning of the string is position 1. Positions do not include the decimal point.Ending digit position: this specifies the ending digit position to end masking. An example is '9,1,5' for masking the first 5 digits of a Social Security number number 123456789, resulting in 999996789.</Parameter>
            <Parameter Name="EXPRESSION">Boolean expression for the table or view, using either the SYS_CONTEXT function or 1=1. Redaction takes place only if this policy expression evaluates to TRUE.</Parameter>
            <Parameter Name="REGEXP_PATTERN">Regular expression pattern up to 512 bytes.Use only if the function_type parameter is DBMS_REDACT.REGEXP. Also, do not specify the function_parameters parameter when function_type is DBMS_REDACT.REGEXP.See Oracle Database SQL Language Reference for more information and examples on using regular expression patterns</Parameter>
            <Parameter Name="REGEXP_REPLACE_STRING">Replacement string (up to 4000 characters in length) with up to 500 back-references to subexpressions in the form \n, where n is a number between 1 and 9.Use only if the function_type parameter is DBMS_REDACT.REGEXP</Parameter>
            <Parameter Name="REGEXP_POSITION">Integer counting from 1, specifies the position where the search must begin.Use only if the function_type parameter is DBMS_REDACT.REGEXP</Parameter>
            <Parameter Name="REGEXP_OCCURRENCE">Use 0 to replace all occurrences of the matchUse positive integer n to replace the n-th occurence of the match.Use only if the function_type parameter is DBMS_REDACT.REGEXP</Parameter>
            <Parameter Name="REGEXP_MATCH_PARAMETER">Changes the default matching behavior, possible values are a combination of 'i', 'c', 'n', 'm', 'x'Use only if the function_type parameter is DBMS_REDACT.REGEXPSee Oracle Database SQL Language Reference for more information and examples on using regular expression match parameters.</Parameter>
            <Parameter Name="POLICY_DESCRIPTION">Description of redaction policy</Parameter>
            <Parameter Name="COLUMN_DESCRIPTION">Description of the column being redacted</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DISABLE_POLICY" ElementId="#CHDDFHDG">
          <Description>Disables a Data Redaction policy</Description>
          <Parameters>
            <Parameter Name="OBJECT_SCHEMA">Schema owning the table or view, current user if NULL</Parameter>
            <Parameter Name="OBJECT_NAME">Name of table or view for which to disable a Data Redaction policy</Parameter>
            <Parameter Name="POLICY_NAME">Name of policy to be disabled</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_POLICY" ElementId="#CHDHIEBD">
          <Description>Drops a Data Redaction policy</Description>
          <Parameters>
            <Parameter Name="OBJECT_SCHEMA">Schema owning the table or view, current user if NULL</Parameter>
            <Parameter Name="OBJECT_NAME">Name of table or view from which to drop a Data Redaction policy</Parameter>
            <Parameter Name="POLICY_NAME">Name of policy to be dropped</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ENABLE_POLICY" ElementId="#CHDCHDAE">
          <Description>Enables a Data Redaction policy</Description>
          <Parameters>
            <Parameter Name="OBJECT_SCHEMA">Schema owning the table or view, current user if NULL</Parameter>
            <Parameter Name="OBJECT_NAME">Name of table or view to which to enable a Data Redaction policy</Parameter>
            <Parameter Name="POLICY_NAME">Name of policy to be enabled</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UPDATE_FULL_REDACTION_VALUES" ElementId="#CHDCEEGC">
          <Description>Modifies the default displayed values for a Data Redaction policy for full redaction</Description>
          <Parameters>
            <Parameter Name="NUMBER_VAL">Modifies the default value for columns of the NUMBER datatype</Parameter>
            <Parameter Name="BINFLOAT_VAL">Modifies the default value for columns of the BINARY_FLOAT datatype</Parameter>
            <Parameter Name="BINDOUBLE_VAL">Modifies the default value for columns of the BINARY_DOUBLE datatype</Parameter>
            <Parameter Name="CHAR_VAL">Modifies the default value for columns of the CHAR datatype</Parameter>
            <Parameter Name="VARCHAR_VAL">Modifies the default value for columns of the VARCHAR2 datatype</Parameter>
            <Parameter Name="NCHAR_VAL">Modifies the default value for columns of the NCHAR datatype</Parameter>
            <Parameter Name="NVARCHAR_VAL">Modifies the default value for columns of the NVARCHAR2 datatype</Parameter>
            <Parameter Name="DATE">Modifies the default value for columns of the DATE datatype</Parameter>
            <Parameter Name="TS_VAL">Modifies the default value for columns of the TIMESTAMP datatype</Parameter>
            <Parameter Name="TSWTZ_VAL">Modifies the default value for columns of the TIMESTAMP WITH TIME ZONE datatype</Parameter>
            <Parameter Name="BLOB_VAL">Modifies the default value for columns of the BLOB datatype</Parameter>
            <Parameter Name="CLOB_VAL">Modifies the default value for columns of the CLOB datatype</Parameter>
            <Parameter Name="NCLOB_VAL">Modifies the default value for columns of the NCLOB datatype</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_REDEFINITION" Url="http://docs.oracle.com/database/121/ARPLS/d_redefi.htm">
      <Description>The DBMS_REDEFINITION package provides an interface to perform an online redefinition of tables.</Description>
      <SubPrograms>
        <SubProgram Name="ABORT_REDEF_TABLE" ElementId="#i998327">
          <Description>Cleans up errors that occur during the redefinition process and removes all temporary objects created by the reorganization process</Description>
          <Parameters>
            <Parameter Name="UNAME">Schema name of the tables</Parameter>
            <Parameter Name="ORIG_TABLE">Name of the table to be redefined</Parameter>
            <Parameter Name="INT_TABLE">Name of the interim table. Can take a comma-delimited list of interim table names.</Parameter>
            <Parameter Name="PART_NAME">Name of the partition being redefined. If redefining only a single partition of a table, specify the partition name in this parameter. NULL implies the entire table is being redefined. Can take a comma-delimited list of partition names to be redefined.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CAN_REDEF_TABLE" ElementId="#i998726">
          <Description>Determines if a given table can be redefined online</Description>
          <Parameters>
            <Parameter Name="UNAME">Schema name of the table</Parameter>
            <Parameter Name="TNAME">Name of the table to be re-organized</Parameter>
            <Parameter Name="OPTIONS_FLAG">Indicates the type of redefinition method to use.If dbms_redefinition.cons_use_pk, the redefinition is done using primary keys or pseudo-primary keys (unique keys with all component columns having NOT NULL constraints). The default method of redefinition is using primary keys.If dbms_redefinition.cons_use_rowid, the redefinition is done using rowids.</Parameter>
            <Parameter Name="PART_NAME">Name of the partition being redefined. If redefining only a single partition of a table, specify the partition name in this parameter. NULL implies the entire table is being redefined.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="COPY_TABLE_DEPENDENTS" ElementId="#i999656">
          <Description>Copies the dependent objects of the original table onto the interim table</Description>
          <Parameters>
            <Parameter Name="UNAME">Schema name of the tables</Parameter>
            <Parameter Name="ORIG_TABLE">Name of the table being redefined</Parameter>
            <Parameter Name="INT_TABLE">Name of the interim table</Parameter>
            <Parameter Name="COPY_INDEXES">Flag indicating whether to copy the indexes0 - do not copy any indexdbms_redefinition.cons_orig_params – copy the indexes using the physical parameters of the source indexes</Parameter>
            <Parameter Name="COPY_TRIGGERS">TRUE = clone triggers, FALSE = do nothing</Parameter>
            <Parameter Name="COPY_CONSTRAINTS">TRUE = clone constraints, FALSE = do nothing. If compatibility setting is 10.2 or higher, then clone CHECK and NOT NULL constraints</Parameter>
            <Parameter Name="COPY_PRIVILEGES">TRUE = clone privileges, FALSE = do nothing</Parameter>
            <Parameter Name="IGNORE_ERRORS">TRUE = if an error occurs while cloning a particular dependent object, then skip that object and continue cloning other dependent objects. FALSE = that the cloning process should stop upon encountering an error.</Parameter>
            <Parameter Name="NUM_ERRORS">Number of errors that occurred while cloning dependent objects</Parameter>
            <Parameter Name="COPY_STATISTICS">TRUE = copy statistics, FALSE = do nothing</Parameter>
            <Parameter Name="COPY_MVLOG">TRUE = copy materialized view log, FALSE = do nothing</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="FINISH_REDEF_TABLE" ElementId="#i998731">
          <Description>Completes the redefinition process</Description>
          <Parameters>
            <Parameter Name="UNAME">Schema name of the tables</Parameter>
            <Parameter Name="ORIG_TABLE">Name of the table to be redefined</Parameter>
            <Parameter Name="INT_TABLE">Name of the interim table. Can take a comma-delimited list of interim table names.</Parameter>
            <Parameter Name="PART_NAME">Name of the partition being redefined. If redefining only a single partition of a table, specify the partition name in this parameter. NULL implies the entire table is being redefined. Can take a comma-delimited list of partition names to be redefined.</Parameter>
            <Parameter Name="DML_LOCK_TIMEOUT">Specifies the number of seconds the procedure waits for its required locks before failing. The permissible range of values for timeout is 0 to 1,000,000. The default is NULL (wait mode).</Parameter>
            <Parameter Name="CONTINUE_AFTER_ERRORS">When redefining multiple partitions allows operation execution to continue on the next partition (applies only to batched partition redefinition)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REDEF_TABLE" ElementId="#CHDDDDFG">
          <Description>Provides a single push-button interface that integrates several redefinition steps</Description>
          <Parameters>
            <Parameter Name="UNAME">Schema name of the table</Parameter>
            <Parameter Name="TNAME">Name of the table to be redefined</Parameter>
            <Parameter Name="TABLE_COMPRESSION_TYPE">Text string of the table compression clause. NULL means there is no change.</Parameter>
            <Parameter Name="TABLE_PART_TABLESPACE">Tablespace name for the entire table or partitions. NULL means there is no change.</Parameter>
            <Parameter Name="INDEX_KEY_COMPRESSION_TYPE">Text string of the compression clause for all indexes on the table. NULL means there is no change.</Parameter>
            <Parameter Name="INDEX_TABLESPACE">Tablespace name for all indexes on the table. NULL means there is no change.</Parameter>
            <Parameter Name="LOB_COMPRESSION_TYPE">Text string of the compression clause for all LOBs in the entire table. NULL means there is no change.</Parameter>
            <Parameter Name="LOB_TABLESPACE">Tablespace name for all LOBs in the table. NULL means there is no change.</Parameter>
            <Parameter Name="LOB_STORAGE_AS">Specifies LOB store as 'SECUREFILE' or 'BASICFILE'. NULL means there is no change.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REGISTER_DEPENDENT_OBJECT" ElementId="#i998995">
          <Description>Registers a dependent object (index, trigger, constraint or materialized view log) on the table being redefined and the corresponding dependent object on the interim table</Description>
          <Parameters>
            <Parameter Name="UNAME">Schema name of the tables</Parameter>
            <Parameter Name="ORIG_TABLE">Name of the table to be redefined</Parameter>
            <Parameter Name="INT_TABLE">Name of the interim table</Parameter>
            <Parameter Name="DEP_TYPE">Type of the dependent object (see Constants and Operational Notes)</Parameter>
            <Parameter Name="DEP_OWNER">Owner of the dependent object</Parameter>
            <Parameter Name="DEP_ORIG_NAME">Name of the original dependent object</Parameter>
            <Parameter Name="DEP_INT_NAME">Name of the interim dependent object</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="START_REDEF_TABLE" ElementId="#CBBHFJAI">
          <Description>Initiates the redefinition process</Description>
          <Parameters>
            <Parameter Name="UNAME">Schema name of the tables</Parameter>
            <Parameter Name="ORIG_TABLE">Name of the table to be redefined</Parameter>
            <Parameter Name="INT_TABLE">Name of the interim table. Can take a comma-delimited list of interim table names.</Parameter>
            <Parameter Name="COL_MAPPING">Mapping information from the columns in the original table to the columns in the interim table. (This is similar to the column list on the SELECT clause of a query.) If NULL, all the columns in the original table are selected and have the same name after redefinition.</Parameter>
            <Parameter Name="OPTIONS_FLAG">Indicates the type of redefinition method to use:If dbms_redefinition.cons_use_pk, the redefinition is done using primary keys or pseudo-primary keys (unique keys with all component columns having NOT NULL constraints). The default method of redefinition is using primary keys.If dbms_redefinition.cons_use_rowid, the redefinition is done using rowids.</Parameter>
            <Parameter Name="ORDERBY_COLS">This optional parameter accepts the list of columns (along with the optional keyword(s) ascending/descending) with which to order by the rows during the initial instantiation of the interim table (the order by is only done for the initial instantiation and not for subsequent synchronizations)</Parameter>
            <Parameter Name="PART_NAME">Name of the partition being redefined. If redefining only a single partition of a table, specify the partition name in this parameter. NULL implies the entire table is being redefined. Can take a comma-delimited list of partition names to be redefined.</Parameter>
            <Parameter Name="CONTINUE_AFTER_ERRORS">When redefining multiple partitions allows operation execution to continue on the next partition (applies only to batched partition redefinition)</Parameter>
            <Parameter Name="COPY_VPD_OPT">Specifies how VPD policies are handled in online redefinition</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SYNC_INTERIM_TABLE" ElementId="#i998432">
          <Description>Keeps the interim table synchronized with the original table</Description>
          <Parameters>
            <Parameter Name="UNAME">Schema name of the table</Parameter>
            <Parameter Name="ORIG_TABLE">Name of the table to be redefined</Parameter>
            <Parameter Name="INT_TABLE">Name of the interim table. Can take a comma-delimited list of interim table names.</Parameter>
            <Parameter Name="PART_NAME">Name of the partition being redefined. If redefining only a single partition of a table, specify the partition name in this parameter. NULL implies the entire table is being redefined. Can take a comma-delimited list of partition names to be redefined.</Parameter>
            <Parameter Name="CONTINUE_AFTER_ERRORS">When redefining multiple partitions allows operation execution to continue on the next partition (applies only to batched partition redefinition)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UNREGISTER_DEPENDENT_OBJECT" ElementId="#CBBHCDDC">
          <Description>Unregisters a dependent object (index, trigger, constraint or materialized view log) on the table being redefined and the corresponding dependent object on the interim table</Description>
          <Parameters>
            <Parameter Name="UNAME">Schema name of the tables</Parameter>
            <Parameter Name="ORIG_TABLE">Name of the table to be redefined</Parameter>
            <Parameter Name="INT_TABLE">Name of the interim table</Parameter>
            <Parameter Name="DEP_TYPE">Type of the dependent object</Parameter>
            <Parameter Name="DEP_OWNER">Owner of the dependent object</Parameter>
            <Parameter Name="DEP_ORIG_NAME">Name of the original dependent object</Parameter>
            <Parameter Name="DEP_INT_NAME">Name of the interim dependent object</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_REFRESH" Url="http://docs.oracle.com/database/121/ARPLS/d_refrsh.htm">
      <Description>The DBMS_REFRESH package enables you to create groups of materialized views that can be refreshed together to a transactionally consistent point in time.</Description>
    </Package>
    <Package Name="DBMS_REPAIR" Url="http://docs.oracle.com/database/121/ARPLS/d_repair.htm">
      <Description>The DBMS_REPAIR package contains data corruption repair procedures that enable you to detect and repair corrupt blocks in tables and indexes. You can address corruptions where possible and continue to use objects while you attempt to rebuild or repair them.</Description>
      <SubPrograms>
        <SubProgram Name="ADMIN_TABLES" ElementId="#i1000098">
          <Description>Provides administrative functions for the DBMS_REPAIR package repair and orphan key tables, including create, purge, and drop functions</Description>
          <Parameters>
            <Parameter Name="TABLE_NAME">Name of the table to be processed. Defaults to ORPHAN_KEY_TABLE or REPAIR_TABLE based on the specified table_type. When specified, the table name must have the appropriate prefix: ORPHAN_ or REPAIR_.</Parameter>
            <Parameter Name="TABLE_TYPE">Type of table; must be either ORPHAN_TABLE or REPAIR_TABLE.See "Constants".</Parameter>
            <Parameter Name="ACTION">Indicates what administrative action to perform.Must be either CREATE_ACTION, PURGE_ACTION, or DROP_ACTION. If the table already exists, and if CREATE_ACTION is specified, then an error is returned. PURGE_ACTION indicates to delete all rows in the table that are associated with non-existent objects. If the table does not exist, and if DROP_ACTION is specified, then an error is returned.When CREATE_ACTION and DROP_ACTION are specified, an associated view named DBA_&lt;table_name&gt; is created and dropped respectively. The view is defined so that rows associated with non-existent objects are eliminated.Created in the SYS schema.See "Constants".</Parameter>
            <Parameter Name="TABLESPACE">Indicates the tablespace to use when creating a table.By default, the SYS default tablespace is used. An error is returned if the tablespace is specified and if the action is not CREATE_ACTION.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CHECK_OBJECT" ElementId="#i997050">
          <Description>Detects and reports corruptions in a table or index</Description>
          <Parameters>
            <Parameter Name="SCHEMA_NAME">Schema name of the object to be checked.</Parameter>
            <Parameter Name="OBJECT_NAME">Name of the table or index to be checked.</Parameter>
            <Parameter Name="PARTITION_NAME">Partition or subpartition name to be checked.If this is a partitioned object, and if partition_name is not specified, then all partitions and subpartitions are checked. If this is a partitioned object, and if the specified partition contains subpartitions, then all subpartitions are checked.</Parameter>
            <Parameter Name="OBJECT_TYPE">Type of the object to be processed. This must be either TABLE_OBJECT (default) or INDEX_OBJECT.See "Constants".</Parameter>
            <Parameter Name="REPAIR_TABLE_NAME">Name of the repair table to be populated.The table must exist in the SYS schema. Use the ADMIN_TABLES Procedure to create a repair table. The default name is REPAIR_TABLE.</Parameter>
            <Parameter Name="FLAGS">Reserved for future use.</Parameter>
            <Parameter Name="RELATIVE_FNO">Relative file number: Used when specifying a block range.</Parameter>
            <Parameter Name="BLOCK_START">First block to process if specifying a block range. May be specified only if the object is a single table, partition, or subpartition.</Parameter>
            <Parameter Name="BLOCK_END">Last block to process if specifying a block range. May be specified only if the object is a single table, partition, or subpartition. If only one of block_start or block_end is specified, then the other defaults to the first or last block in the file respectively.</Parameter>
            <Parameter Name="CORRUPT_COUNT">Number of corruptions reported.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DUMP_ORPHAN_KEYS" ElementId="#i997129">
          <Description>Reports on index entries that point to rows in corrupt data blocks</Description>
          <Parameters>
            <Parameter Name="SCHEMA_NAME">Schema name.</Parameter>
            <Parameter Name="OBJECT_NAME">Object name.</Parameter>
            <Parameter Name="PARTITION_NAME">Partition or subpartition name to be processed.If this is a partitioned object, and if partition_name is not specified, then all partitions and subpartitions are processed. If this is a partitioned object, and if the specified partition contains subpartitions, then all subpartitions are processed.</Parameter>
            <Parameter Name="OBJECT_TYPE">Type of the object to be processed. The default is INDEX_OBJECTSee "Constants".</Parameter>
            <Parameter Name="REPAIR_TABLE_NAME">Name of the repair table that has information regarding corrupt blocks in the base table.The specified table must exist in the SYS schema. The ADMIN_TABLES Procedure is used to create the table.</Parameter>
            <Parameter Name="ORPHAN_TABLE_NAME">Name of the orphan key table to populate with information regarding each index entry that refers to a row in a corrupt data block.The specified table must exist in the SYS schema. The ADMIN_TABLES Procedure is used to create the table.</Parameter>
            <Parameter Name="FLAGS">Reserved for future use.</Parameter>
            <Parameter Name="KEY_COUNT">Number of index entries processed.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="FIX_CORRUPT_BLOCKS" ElementId="#CHDGBBEG">
          <Description>Marks blocks software corrupt that have been previously detected as corrupt by CHECK_OBJECT</Description>
          <Parameters>
            <Parameter Name="SCHEMA_NAME">Schema name.</Parameter>
            <Parameter Name="OBJECT_NAME">Name of the object with corrupt blocks to be fixed.</Parameter>
            <Parameter Name="PARTITION_NAME">Partition or subpartition name to be processed.If this is a partitioned object, and if partition_name is not specified, then all partitions and subpartitions are processed. If this is a partitioned object, and if the specified partition contains subpartitions, then all subpartitions are processed.</Parameter>
            <Parameter Name="OBJECT_TYPE">Type of the object to be processed. This must be either TABLE_OBJECT (default) or INDEX_OBJECT.See "Constants".</Parameter>
            <Parameter Name="REPAIR_TABLE_NAME">Name of the repair table with the repair directives.Must exist in the SYS schema.</Parameter>
            <Parameter Name="FLAGS">Reserved for future use.</Parameter>
            <Parameter Name="FIX_COUNT">Number of blocks fixed.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ONLINE_INDEX_CLEAN" ElementId="#CHDEACBI">
          <Description>Performs a manual cleanup of failed or interrupted online index builds or rebuilds</Description>
          <Parameters>
            <Parameter Name="OBJECT_ID">Object id of index to be cleaned up. The default cleans up all object ids that qualify.</Parameter>
            <Parameter Name="WAIT_FOR_LOCK">This parameter specifies whether to try getting DML locks on underlying table [[sub]partition] object. The default retries up to an internal retry limit, after which the lock get will give up. If LOCK_NOWAIT is specified, then the lock get does not retry.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REBUILD_FREELISTS" ElementId="#i997264">
          <Description>Rebuilds an object's freelists</Description>
          <Parameters>
            <Parameter Name="SCHEMA_NAME">Schema name.</Parameter>
            <Parameter Name="OBJECT_NAME">Name of the object whose freelists are to be rebuilt.</Parameter>
            <Parameter Name="PARTITION_NAME">Partition or subpartition name whose freelists are to be rebuilt.If this is a partitioned object, and partition_name is not specified, then all partitions and subpartitions are processed. If this is a partitioned object, and the specified partition contains subpartitions, then all subpartitions are processed.</Parameter>
            <Parameter Name="OBJECT_TYPE">Type of the object to be processed. This must be either TABLE_OBJECT (default) or INDEX_OBJECT.See"Constants".</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SEGMENT_FIX_STATUS" ElementId="#i997375">
          <Description>Fixes the corrupted state of a bitmap entry</Description>
          <Parameters>
            <Parameter Name="SCHEMA_OWNER">Schema name of the segment.</Parameter>
            <Parameter Name="SEGMENT_NAME">Segment name.</Parameter>
            <Parameter Name="PARTITION_NAME">Optional. Name of an individual partition. NULL for nonpartitioned objects. Default is NULL.</Parameter>
            <Parameter Name="SEGMENT_TYPE">Optional Type of the segment (for example, TABLE_OBJECT or INDEX_OBJECT). Default is NULL.</Parameter>
            <Parameter Name="FILE_NUMBER">(optional) The tablespace-relative file number of the data block whose status has to be fixed. If omitted, all the blocks in the segment will be checked for state correctness and fixed.</Parameter>
            <Parameter Name="BLOCK_NUMBER">(optional) The file-relative block number of the data block whose status has to be fixed. If omitted, all the blocks in the segment will be checked for state correctness and fixed.</Parameter>
            <Parameter Name="STATUS_VALUE">(optional) The value to which the block status described by the file_number and block_number will be set. If omitted, the status will be set based on the current state of the block. This is almost always the case, but if there is a bug in the calculation algorithm, the value can be set manually. Status values:1 = block is full2 = block is 0-25% free3 = block is 25-50% free4 = block is 50-75% free5 = block is 75-100% freeThe status for bitmap blocks, segment headers, and extent map blocks cannot be altered. The status for blocks in a fixed hash area cannot be altered. For index blocks, there are only two possible states: 1 = block is full and 3 = block has free space.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SKIP_CORRUPT_BLOCKS" ElementId="#i1000167">
          <Description>Sets whether to ignore blocks marked corrupt during table and index scans or to report ORA-1578 when blocks marked corrupt are encountered</Description>
          <Parameters>
            <Parameter Name="SCHEMA_NAME">Schema name of the object to be processed.</Parameter>
            <Parameter Name="OBJECT_NAME">Name of the object.</Parameter>
            <Parameter Name="OBJECT_TYPE">Type of the object to be processed. This must be either TABLE_OBJECT (default) or CLUSTER_OBJECT.See "Constants".</Parameter>
            <Parameter Name="FLAGS">If SKIP_FLAG is specified, then it turns on the skip of software corrupt blocks for the object during index and table scans. If NOSKIP_FLAG is specified, then scans that encounter software corrupt blocks return an ORA-1578.See"Constants".</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_REPCAT" Url="http://docs.oracle.com/database/121/ARPLS/d_repcat.htm">
      <Description>The DBMS_REPCAT package provides routines to administer and update the replication catalog and environment.</Description>
    </Package>
    <Package Name="DBMS_REPCAT_ADMIN" Url="http://docs.oracle.com/database/121/ARPLS/d_repadm.htm">
      <Description>The DBMS_REPCAT_ADMIN package enables you to create users with the privileges needed by the symmetric replication facility.</Description>
    </Package>
    <Package Name="DBMS_REPCAT_INSTANTIATE" Url="http://docs.oracle.com/database/121/ARPLS/d_repint.htm">
      <Description>The DBMS_REPCAT_INSTANTIATE package instantiates deployment templates.</Description>
    </Package>
    <Package Name="DBMS_REPCAT_RGT" Url="http://docs.oracle.com/database/121/ARPLS/d_reprgt.htm">
      <Description>The DBMS_REPCAT_RGT package controls the maintenance and definition of refresh group templates.</Description>
    </Package>
    <Package Name="DBMS_REPUTIL" Url="http://docs.oracle.com/database/121/ARPLS/d_reputl.htm">
      <Description>The DBMS_REPUTIL package contains subprograms to generate shadow tables, triggers, and packages for table replication, as well as subprograms to generate wrappers for replication of standalone procedure invocations and packaged procedure invocations. This package is referenced only by the generated code.</Description>
    </Package>
    <Package Name="DBMS_RESCONFIG" Url="http://docs.oracle.com/database/121/ARPLS/d_resconfig.htm">
      <Description>The DBMS_RESCONFIG package provides an interface to operate on the resource configuration list, and to retrieve listener information for a resource.</Description>
      <SubPrograms>
        <SubProgram Name="ADDREPOSITORYRESCONFIG" ElementId="#BHCCAGGC">
          <Description>Inserts the resource configuration specified by absolute path at the given position of the repository's configuration list</Description>
          <Parameters>
            <Parameter Name="RCPATH">Absolute path of the resource configuration to be inserted. An exception is raised if rcpath already exists in the target's configuration list.</Parameter>
            <Parameter Name="POS">Index at which the new configuration is to be inserted. If this parameter is not specified then the new configuration is appended to the end of the list. An exception is raised if the index is out of range (pos &lt; 0 or pos &gt; the size of the target resource's configuration list).</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADDRESCONFIG" ElementId="#BHCDDJFH">
          <Description>Inserts the resource configuration specified by the absolute path at the given position in the target resource's configuration list</Description>
          <Parameters>
            <Parameter Name="RESPATH">Absolute path of the target resource</Parameter>
            <Parameter Name="RCPATH">Absolute path of the resource configuration to be inserted. An exception is raised if rcpath already exists in the target's configuration list.</Parameter>
            <Parameter Name="POS">Index at which the new configuration is to be inserted. If this parameter is not specified then the new configuration is appended to the end of the list. An exception is raised if the index is out of range (pos &lt; 0 or pos &gt; the size of the target resource's configuration list).</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="APPENDRESCONFIG" ElementId="#BHCIGFJJ">
          <Description>Appends the resource configuration specified by rcpath to the target resource's configuration list if it is not already included in the list</Description>
        </SubProgram>
        <SubProgram Name="DELETEREPOSITORYRESCONFIG" ElementId="#BHCBAFCB">
          <Description>Removes the configuration at the given position in the repository's configuration list.</Description>
          <Parameters>
            <Parameter Name="POS">The index of the configuration to be removed. An exception is raised if the index is out of range (pos &lt; 0 or pos &gt;= the size of the target resource's configuration list).</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETERESCONFIG" ElementId="#BHCFFGAG">
          <Description>Removes the configuration at the given position in the target resource's configuration list. I</Description>
          <Parameters>
            <Parameter Name="RESPATH">Absolute path of the target resource</Parameter>
            <Parameter Name="POS">The index of the configuration to be removed. An exception is raised if the index is out of range (pos &lt; 0 or pos &gt;= the size of the target resource's configuration list).</Parameter>
            <Parameter Name="RCPATH">Absolute path of the resource configuration to be deleted if found in list.</Parameter>
            <Parameter Name="DELETEOPTION">Either DELETE_RESOURCE or DELETE_RECURSIVE. If DELETE_RESOURCE is specified then only the configuration list of the target resource is affected. If DELETE_RECURSIVE is specified then the configuration list of the target resource and all its descendents will be affected.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETLISTENERS" ElementId="#BHCFIFFJ">
          <Description>Returns the list of listeners applicable for a given resource</Description>
          <Parameters>
            <Parameter Name="PATH">Absolute path of the target resource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETREPOSITORYRESCONFIG" ElementId="#BHCJHEEB">
          <Description>Returns the resource configuration at the specified position of the repository's configuration list</Description>
          <Parameters>
            <Parameter Name="POS">Index of element to return. An exception is raised if the index is out of range (pos &lt; 0 or pos &gt;= the size of the repository's configuration list).</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETREPOSITORYRESCONFIGPATHS" ElementId="#BHCCICCJ">
          <Description>Returns a list of resource configuration paths defined for the repository</Description>
        </SubProgram>
        <SubProgram Name="GETRESCONFIG" ElementId="#BHCGJAGE">
          <Description>Returns the resource configuration at the specified position of the target resource's configuration list</Description>
          <Parameters>
            <Parameter Name="RESPATH">Absolute path of the target resource</Parameter>
            <Parameter Name="POS">Index of element to return. An exception is raised if the index is out of range (pos &lt; 0 or pos &gt;= the size of the target resource's configuration list).</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETRESCONFIGPATHS" ElementId="#BHCGCHGE">
          <Description>Returns a list of resource configuration paths defined in the target resource's configuration list</Description>
          <Parameters>
            <Parameter Name="RESPATH">Absolute path of the target resource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PATCHREPOSITORYRESCONFIGLIST" ElementId="#CBDEDCGF">
          <Description>Removes invalid references from the repository resource configuration list, and makes the repository available</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_RESOURCE_MANAGER" Url="http://docs.oracle.com/database/121/ARPLS/d_resmgr.htm">
      <Description>The DBMS_RESOURCE_MANAGER package maintains plans, consumer groups, and plan directives. It also provides semantics so that you may group together changes to the plan schema.</Description>
      <SubPrograms>
        <SubProgram Name="BEGIN_SQL_BLOCK" ElementId="#CFAEHEHJ">
          <Description>Indicates the start of a block of SQL statements to be treated as a group by resource manager</Description>
        </SubProgram>
        <SubProgram Name="CALIBRATE_IO" ElementId="#CJGHGFEA">
          <Description>Calibrates the I/O capabilities of storage</Description>
          <Parameters>
            <Parameter Name="NUM_PHYSICAL_DISKS">Approximate number of physical disks in the database storage. This parameter is used to determine the initial I/O load for the calibration run.</Parameter>
            <Parameter Name="MAX_LATENCY">Maximum tolerable latency in milliseconds for database-block-sized IO requests</Parameter>
            <Parameter Name="MAX_IOPS">Maximum number of I/O requests per second that can be sustained. The I/O requests are randomly-distributed, database-block-sized reads.</Parameter>
            <Parameter Name="MAX_MBPS">Maximum throughput of I/O that can be sustained, expressed in megabytes per second. The I/O requests are randomly-distributed, 1 megabyte reads.</Parameter>
            <Parameter Name="ACTUAL_LATENCY">Average latency of database-block-sized I/O requests at max_iops rate, expressed in milliseconds</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CLEAR_PENDING_AREA" ElementId="#BGBDJDJJ">
          <Description>Clears the work area for the resource manager</Description>
        </SubProgram>
        <SubProgram Name="CREATE_CATEGORY" ElementId="#CHDDHADC">
          <Description>Creates a new resource consumer group category</Description>
          <Parameters>
            <Parameter Name="CATEGORY">Name of consumer group category</Parameter>
            <Parameter Name="COMMENT">User comment</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_CDB_PLAN" ElementId="#CHDCJDBE">
          <Description>Creates entries which define resource consumer groups</Description>
          <Parameters>
            <Parameter Name="PLAN">Name of the consolidation plan</Parameter>
            <Parameter Name="COMMENT">User comment</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_CDB_PLAN_DIRECTIVE" ElementId="#CHDGEDGF">
          <Description>Creates the plan directives of the consolidation resource plan</Description>
          <Parameters>
            <Parameter Name="PLAN">Name of the consolidation plan</Parameter>
            <Parameter Name="PLUGGABLE_DATABASE">Name of the pluggable database</Parameter>
            <Parameter Name="COMMENT">User comment</Parameter>
            <Parameter Name="SHARES">Specifies the share of resource allocation for the pluggable database. CPU Resource Manager is enabled by specifying shares for each PDB. The shares parameter is also used for Parallel Statement Queuing. If no share is specified, the default is obtained from the default directive, specified through UPDATE_CDB_DEFAULT_DIRECTIVE Procedure.</Parameter>
            <Parameter Name="UTILIZATION_LIMIT">Specifies the maximum percentage of CPU that the pluggable database can utilize.</Parameter>
            <Parameter Name="PARALLEL_SERVER_LIMIT">Specifies the maximum percentage of parallel_servers_target parallel servers that the pluggable database can use.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_CONSUMER_GROUP" ElementId="#CJGDHJFJ">
          <Description>Creates entries which define resource consumer groups</Description>
          <Parameters>
            <Parameter Name="CONSUMER_GROUP">Name of the consumer group</Parameter>
            <Parameter Name="COMMENT">User comment</Parameter>
            <Parameter Name="CPU_MTH">Name of CPU resource allocation method (deprecated)</Parameter>
            <Parameter Name="MGMT_MTH">Name of CPU resource allocation method</Parameter>
            <Parameter Name="CATEGORY">Describes the category of the consumer group. The primary purpose of this attribute is to support Exadata I/O Resource Manager category plans. The view DBA_RSRC_CATEGORIES defines the currently defined categories. Categories can be modified, using the CREATE_CATEGORY Procedure, UPDATE_CATEGORY Procedure, and DELETE_CATEGORY Procedure.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_PENDING_AREA" ElementId="#i1002969">
          <Description>Creates a work area for changes to resource manager objects</Description>
        </SubProgram>
        <SubProgram Name="CREATE_PLAN" ElementId="#i1003144">
          <Description>Creates entries which define resource plans</Description>
          <Parameters>
            <Parameter Name="PLAN">Name of the resource plan</Parameter>
            <Parameter Name="COMMENT">User comment</Parameter>
            <Parameter Name="CPU_MTH">Allocation method for CPU resources (deprecated)</Parameter>
            <Parameter Name="ACTIVE_SESS_POOL_MTH">Active session pool resource allocation method. Limits the number of active sessions. All other sessions are inactive and wait in a queue to be activated. ACTIVE_SESS_POOL_ABSOLUTE is the default and only method available.</Parameter>
            <Parameter Name="PARALLEL_DEGREE_LIMIT_MTH">Resource allocation method for specifying a limit on the degree of parallelism of any operation. PARALLEL_DEGREE_LIMIT_ABSOLUTE is the default and only method available.</Parameter>
            <Parameter Name="QUEUEING_MTH">Queuing resource allocation method. Controls order in which queued inactive sessions will execute. FIFO_TIMEOUT is the default and only method available</Parameter>
            <Parameter Name="MGMT_MTH">Resource allocation method for specifying how much resources (for example, CPU or I/O) each consumer group or sub-plan getsEMPHASIS - for multilevel plans that use percentages to specify how I/O resources are distributed among consumer groupsRATIO - for single-level plans that use ratios to specify how I/O resources are distributed</Parameter>
            <Parameter Name="SUB_PLAN">If TRUE, indicates that this plan is only intended for use as a sub-plan. Sub-plans are not required to have an OTHER_GROUPS directive. Default is FALSE.</Parameter>
            <Parameter Name="MAX_IOPS">Nonoperative</Parameter>
            <Parameter Name="MAX_MBPS">Nonoperative</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_PLAN_DIRECTIVE" ElementId="#i1003006">
          <Description>Creates resource plan directives</Description>
          <Parameters>
            <Parameter Name="PLAN">Name of the resource plan</Parameter>
            <Parameter Name="GROUP_OR_SUBPLAN">Name of the consumer group or subplan</Parameter>
            <Parameter Name="COMMENT">Comment for the plan directive</Parameter>
            <Parameter Name="CPU_P1">-- deprecated: use mgmt_p1 instead</Parameter>
            <Parameter Name="CPU_P2">-- deprecated: use mgmt_p2 instead)</Parameter>
            <Parameter Name="CPU_P3">-- deprecated: use mgmt_p3 instead)</Parameter>
            <Parameter Name="CPU_P4">-- deprecated: use mgmt_p4 instead)</Parameter>
            <Parameter Name="CPU_P5">-- deprecated: use mgmt_p5 instead)</Parameter>
            <Parameter Name="CPU_P6">-- deprecated: use mgmt_p6 instead)</Parameter>
            <Parameter Name="CPU_P7">-- deprecated: use mgmt_p7 instead)</Parameter>
            <Parameter Name="CPU_P8">-- deprecated: use mgmt_p8 instead)</Parameter>
            <Parameter Name="ACTIVE_SESS_POOL_P1">Specifies maximum number of sessions that can currently have an active call</Parameter>
            <Parameter Name="QUEUEING_P1">Specified time (in seconds) after which a call in the inactive session queue (waiting for execution) will time out. Default is NULL, which means unlimited.</Parameter>
            <Parameter Name="PARALLEL_DEGREE_LIMIT_P1">Specifies a limit on the degree of parallelism for any operation. Default is NULL, which means unlimited. If the value is 0, then all operations will be serial.</Parameter>
            <Parameter Name="SWITCH_GROUP">Specifies consumer group to switch to, once a switch condition is met. If the group name is CANCEL_SQL, then the current call is canceled when the switch condition is met. If the group name is KILL_SESSION, then the session is killed when the switch condition is met. If the group name is LOG_ONLY, then no action is taken other than recording this event via SQL monitor.Default is NULL.</Parameter>
            <Parameter Name="SWITCH_TIME">Specifies time on CPU (not elapsed time that a session can execute before an action is taken. Default is NULL, which means unlimited. As with other switch directives, if switch_for_call is TRUE, the number of logical IOs is accumulated from the start of a call. Otherwise, the number of logical IOs is accumulated for the length of the session.</Parameter>
            <Parameter Name="SWITCH_ESTIMATE">If TRUE, tells Oracle to use its execution time estimate to automatically switch the consumer group of an operation before beginning its execution. Default is FALSE.</Parameter>
            <Parameter Name="MAX_EST_EXEC_TIME">Specifies the maximum execution time (in CPU seconds) allowed for a session. If the optimizer estimates that an operation will take longer than MAX_EST_EXEC_TIME, the operation is not started and ORA-07455 is issued. If the optimizer does not provide an estimate, this directive has no effect. Default is NULL, which means unlimited.</Parameter>
            <Parameter Name="UNDO_POOL">Limits the size in kilobytes of the undo records corresponding to uncommitted transactions by this consumer group</Parameter>
            <Parameter Name="MAX_IDLE_TIME">Indicates the maximum session idle time. Default is NULL, which means unlimited.</Parameter>
            <Parameter Name="MAX_IDLE_BLOCKER_TIME">Maximum amount of time in seconds that a session can be idle while blocking another session's acquisition of a resource</Parameter>
            <Parameter Name="SWITCH_TIME_IN_CALL">Deprecated. If this parameter is specified, switch_time is set to switch_time_in_call (in seconds) and switch_for_call is effectively set to TRUE. It is better to use switch_time and switch_for_call.</Parameter>
            <Parameter Name="MGMT_P1">Resource allocation value for level 1 (replaces cpu_p1):EMPHASIS - specifies the resource percentage at the first levelRATIO - specifies the weight of resource usage</Parameter>
            <Parameter Name="MGMT_P2">Resource allocation value for level 2 (replaces cpu_p2)EMPHASIS - specifies the resource percentage at the second levelRATIO - non-applicable</Parameter>
            <Parameter Name="MGMT_P3">Resource allocation value for level 3 (replaces cpu_p3)EMPHASIS - specifies the resource percentage at the third levelRATIO - non-applicable</Parameter>
            <Parameter Name="MGMT_P4">Resource allocation value for level 4 (replaces cpu_p4)EMPHASIS - specifies the resource percentage at the fourth levelRATIO - non-applicable</Parameter>
            <Parameter Name="MGMT_P5">Resource allocation value for level 5 (replaces cpu_p5)EMPHASIS - specifies the resource percentage at the fifth levelRATIO - non-applicable</Parameter>
            <Parameter Name="MGMT_P6">Resource allocation value for level 6 (replaces cpu_p6)EMPHASIS - specifies the resource percentage at the sixth levelRATIO - non-applicable</Parameter>
            <Parameter Name="MGMT_P7">Resource allocation value for level 7 (replaces cpu_p7)EMPHASIS - specifies the resource percentage at the seventh levelRATIO - non-applicable</Parameter>
            <Parameter Name="MGMT_P8">Resource allocation value for level 8 (replaces cpu_p8)EMPHASIS - specifies the resource percentage at the eighth levelRATIO - non-applicable</Parameter>
            <Parameter Name="SWITCH_IO_MEGABYTES">Specifies the amount of I/O (in MB) that a session can issue before an action is taken. Default is NULL, which means unlimited. As with other switch directives, if switch_for_call is TRUE, the number of logical IOs is accumulated from the start of a call. Otherwise, the number of logical IOs is accumulated for the length of the session.</Parameter>
            <Parameter Name="SWITCH_IO_REQS">Specifies the number of I/O requests that a session can issue before an action is taken. Default is NULL, which means unlimited. As with other switch directives, if switch_for_call is TRUE, the number of logical IOs is accumulated from the start of a call. Otherwise, the number of logical IOs is accumulated for the length of the session.</Parameter>
            <Parameter Name="SWITCH_FOR_CALL">Specifies that if an action is taken because of the switch_time, switch_io_megabytes, switch_io_reqs, switch_io_logical or switch_elapsed_time parameters, the consumer group is restored to its original consumer group at the end of the top call. Default is FALSE, which means that the original consumer group is not restored at the end of the top call.</Parameter>
            <Parameter Name="MAX_UTILIZATION_LIMIT">-- deprecated: use utilization_limit instead</Parameter>
            <Parameter Name="PARALLEL_TARGET_PERCENTAGE">-- deprecated: use parallel_sever_limit instead</Parameter>
            <Parameter Name="PARALLEL_QUEUE_TIMEOUT">Specifies the time (in seconds) that a query may remain in its Consumer Group's parallel statement queue before it is removed and terminated with an error (ORA- 07454).</Parameter>
            <Parameter Name="PARALLEL_SEVER_LIMIT">Parallel server limit. Setting this overwrites the limit for parallel server set by utilization_limit.</Parameter>
            <Parameter Name="UTILIZATION_LIMIT">Resource limit. Currently it includes CPU and I/O for Exadata and parallel servers. For CPU, this limits the CPU utilization for the consumer group. For Exadata I/O, this limits the disk utilization for the consumer group. For parallel servers, this limits the parallel servers used as a percentage of parallel_servers_target.</Parameter>
            <Parameter Name="SWITCH_IO_LOGICAL">Number of logical IOs that will trigger the action specified by switch_group. As with other switch directives, if switch_for_call is TRUE, the number of logical IOs is accumulated from the start of a call. Otherwise, the number of logical IOs is accumulated for the length of the session.</Parameter>
            <Parameter Name="SWITCH_ELAPSED_TIME">Elapsed time that will trigger the action specified by switch_group. As with other switch directives, if switch_for_call is TRUE, the elapsed time is accumulated from the start of a call. Otherwise, the elapsed time is accumulated for the length of the session.</Parameter>
            <Parameter Name="SHARES">Specifies the share of resource allocation for the consumer group. CPU Resource Manager is enabled by specifying shares for each consumer group. The shares parameter is also used for Parallel Statement Queuing. If CPU Resource Manager is enabled, then the default value is 1.</Parameter>
            <Parameter Name="PARALLEL_STMT_CRITICAL">If set to BYPASS_QUEUE, parallel statements from this consumer group are not queued. Default is NULL, which means that parallel statements are eligible for queuing.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_SIMPLE_PLAN" ElementId="#i996990">
          <Description>Creates a single-level resource plan containing up to eight consumer groups in one step</Description>
          <Parameters>
            <Parameter Name="SIMPLE_PLAN">Name of the resource plan</Parameter>
            <Parameter Name="CONSUMER_GROUP1">Name of the consumer group</Parameter>
            <Parameter Name="GROUP1_CPU">Percentage for group (deprecated)</Parameter>
            <Parameter Name="CONSUMER_GROUP2">Name of the consumer group</Parameter>
            <Parameter Name="GROUP2_CPU">Percentage for group (deprecated)</Parameter>
            <Parameter Name="CONSUMER_GROUP3">Name of the consumer group</Parameter>
            <Parameter Name="GROUP3_CPU">Percentage for group (deprecated)</Parameter>
            <Parameter Name="CONSUMER_GROUP4">Name of the consumer group</Parameter>
            <Parameter Name="GROUP4_CPU">Percentage for group (deprecated)</Parameter>
            <Parameter Name="CONSUMER_GROUP5">Name of the consumer group</Parameter>
            <Parameter Name="GROUP5_CPU">Percentage for group (deprecated)</Parameter>
            <Parameter Name="CONSUMER_GROUP6">Name of the consumer group</Parameter>
            <Parameter Name="GROUP6_CPU">Percentage for group (deprecated)</Parameter>
            <Parameter Name="CONSUMER_GROUP7">Name of the consumer group</Parameter>
            <Parameter Name="GROUP7_CPU">Percentage for group (deprecated)</Parameter>
            <Parameter Name="CONSUMER_GROUP8">OTHER_GROUPS - all sessions that aren't mapped to a consumer group.</Parameter>
            <Parameter Name="GROUP8_CPU">Percentage for group (deprecated)</Parameter>
            <Parameter Name="GROUP1_PERCENT">Percentage of resources allocated for this consumer group</Parameter>
            <Parameter Name="GROUP2_PERCENT">Percentage of resources allocated for this consumer group</Parameter>
            <Parameter Name="GROUP3_PERCENT">Percentage of resources allocated for this consumer group</Parameter>
            <Parameter Name="GROUP4_PERCENT">Percentage of resources allocated for this consumer group</Parameter>
            <Parameter Name="GROUP5_PERCENT">Percentage of resources allocated for this consumer group</Parameter>
            <Parameter Name="GROUP6_PERCENT">Percentage of resources allocated for this consumer group</Parameter>
            <Parameter Name="GROUP7_PERCENT">Percentage of resources allocated for this consumer group</Parameter>
            <Parameter Name="GROUP8_PERCENT">Percentage of resources allocated to other groups</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_CATEGORY" ElementId="#CHDDJJEI">
          <Description>Deletes an existing resource consumer group category</Description>
          <Parameters>
            <Parameter Name="CATEGORY">Name of consumer group category</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_CDB_PLAN" ElementId="#CHDCJDEF">
          <Description>Deletes the consolidation resource plan</Description>
          <Parameters>
            <Parameter Name="PLAN">Name of the consolidation plan</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_CDB_PLAN_DIRECTIVE" ElementId="#CHDBGGDF">
          <Description>Deletes the plan directives of the consolidation resource plan</Description>
          <Parameters>
            <Parameter Name="PLAN">Name of the consolidation plan</Parameter>
            <Parameter Name="PLUGGABLE_DATABASE">Name of the pluggable database in which the plan directive is to be deleted</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_CONSUMER_GROUP" ElementId="#i1003305">
          <Description>Deletes entries which define resource consumer groups</Description>
          <Parameters>
            <Parameter Name="CONSUMER_GROUP">Name of the consumer group to be deleted</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_PLAN" ElementId="#CFADBJFC">
          <Description>Deletes the specified plan as well as all the plan directives it refers to</Description>
          <Parameters>
            <Parameter Name="PLAN">Name of the resource plan to delete</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_PLAN_CASCADE" ElementId="#i997082">
          <Description>Deletes the specified plan as well as all its descendants (plan directives, subplans, consumer groups)</Description>
          <Parameters>
            <Parameter Name="PLAN">Name of the plan</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_PLAN_DIRECTIVE" ElementId="#i1003310">
          <Description>Deletes resource plan directives</Description>
          <Parameters>
            <Parameter Name="PLAN">Name of the resource plan</Parameter>
            <Parameter Name="GROUP_OR_SUBPLAN">Name of the group or subplan</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="END_SQL_BLOCK" ElementId="#BGBDEGBD">
          <Description>Indicates the end of a block of SQL statements that should be treated as a group by resource manager</Description>
        </SubProgram>
        <SubProgram Name="SET_CONSUMER_GROUP_MAPPING" ElementId="#CHDEIBFI">
          <Description>Adds, deletes, or modifies entries for the login and run-time attribute mappings</Description>
          <Parameters>
            <Parameter Name="ATTRIBUTE">Mapping attribute to add or modify. It can be one of the Constants listed.</Parameter>
            <Parameter Name="VALUE">Attribute value to match. This includes both absolute mapping and regular expressions.</Parameter>
            <Parameter Name="CONSUMER_GROUP">Name of the mapped consumer group, or NULL to delete a mapping</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_CONSUMER_GROUP_MAPPING_PRI" ElementId="#i1004680">
          <Description>Creates the session attribute mapping priority list</Description>
          <Parameters>
            <Parameter Name="EXPLICIT">Priority of the explicit mapping</Parameter>
            <Parameter Name="ORACLE_USER">Priority of the Oracle user name mapping</Parameter>
            <Parameter Name="SERVICE_NAME">Priority of the client service name mapping</Parameter>
            <Parameter Name="CLIENT_OS_USER">Priority of the client operating system user name mapping</Parameter>
            <Parameter Name="CLIENT_PROGRAM">Priority of the client program mapping</Parameter>
            <Parameter Name="CLIENT_MACHINE">Priority of the client machine mapping</Parameter>
            <Parameter Name="MODULE_NAME">Priority of the application module name mapping</Parameter>
            <Parameter Name="MODULE_NAME_ACTION">Priority of the application module name and action mapping</Parameter>
            <Parameter Name="SERVICE_MODULE">Priority of the service name and application module name mapping</Parameter>
            <Parameter Name="MODULE_NAME_ACTION">Priority of the service name, application module name, and application action mapping</Parameter>
            <Parameter Name="CLIENT_ID">Client identifier</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_INITIAL_CONSUMER_GROUP" ElementId="#i1003346">
          <Description>Assigns the initial resource consumer group for a user (Caution: Deprecated Subprogram)</Description>
          <Parameters>
            <Parameter Name="USER">Name of the user</Parameter>
            <Parameter Name="CONSUMER_GROUP">User's initial consumer group</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SUBMIT_PENDING_AREA" ElementId="#CFABBJDH">
          <Description>Submits pending changes for the resource manager</Description>
        </SubProgram>
        <SubProgram Name="SWITCH_CONSUMER_GROUP_FOR_SESS" ElementId="#i997621">
          <Description>Changes the resource consumer group of a specific session</Description>
          <Parameters>
            <Parameter Name="SESSION_ID">SID column from the view V$SESSION</Parameter>
            <Parameter Name="SESSION_SERIAL">SERIAL# column from view V$SESSION.</Parameter>
            <Parameter Name="CONSUMER_GROUP">Name of the consumer group to which to switch</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SWITCH_CONSUMER_GROUP_FOR_USER" ElementId="#i997652">
          <Description>Changes the resource consumer group for all sessions with a given user name</Description>
          <Parameters>
            <Parameter Name="USER">Name of the user</Parameter>
            <Parameter Name="CONSUMER_GROUP">Name of the consumer group to which to switch</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SWITCH_PLAN" ElementId="#i1005840">
          <Description>Sets the current resource manager plan</Description>
          <Parameters>
            <Parameter Name="PLAN_NAME">Name of the plan to which to switch. Passing in an empty string ('') for the plan_name, disables the resource manager</Parameter>
            <Parameter Name="SID">The sid parameter is relevant only in an Oracle Real Application Clusters environment. This parameter lets you change the plan for a particular instance. Specify the sid of the instance where you want to change the plan. Or specify '*' if you want Oracle to change the plan for all instances.</Parameter>
            <Parameter Name="ALLOW_SCHEDULER_PLAN_SWITCHES">FALSE - disables automated plan switches by the job scheduler at window boundaries. To reenable automated plan switches, switch_plan must be called again by the administrator with allow_scheduler_plan_switches set to TRUE. By default automated plan switches by the job scheduler are enabled.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UPDATE_CATEGORY" ElementId="#CHDIJBGH">
          <Description>Updates an existing resource consumer group category</Description>
          <Parameters>
            <Parameter Name="CATEGORY">Name of consumer group category</Parameter>
            <Parameter Name="NEW_COMMENT">User comment</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UPDATE_CDB_AUTOTASK_DIRECTIVE" ElementId="#CHDEBJGG">
          <Description>Updates the plan directives with regard to automated maintenance tasks</Description>
          <Parameters>
            <Parameter Name="PLAN">Name of the consolidation plan</Parameter>
            <Parameter Name="NEW_COMMENT">New user comment</Parameter>
            <Parameter Name="NEW_SHARES">Specifies the new share of resource allocation for the root container's automated maintenance tasks</Parameter>
            <Parameter Name="NEW_UTILIZATION_LIMIT">Specifies the new maximum percentage of CPU that automated maintenance tasks in the root container can utilize</Parameter>
            <Parameter Name="NEW_PARALLEL_SERVER_LIMIT">Specifies the new maximum percentage of parallel_servers_target parallel servers that automated maintenance tasks in the root container are allowed to use</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UPDATE_CDB_DEFAULT_DIRECTIVE" ElementId="#CHDFCCCA">
          <Description>Updates the default values for a consolidation plan</Description>
          <Parameters>
            <Parameter Name="PLAN">Name of the consolidation plan</Parameter>
            <Parameter Name="NEW_COMMNENT">New user comment</Parameter>
            <Parameter Name="NEW_SHARES">Specifies the share of resource allocation for the pluggable database. CPU Resource Manager is enabled by specifying shares for each PDB. The new_shares parameter is also used for Parallel Statement Queuing.</Parameter>
            <Parameter Name="NEW_UTILIZATION_LIMIT">Specifies the maximum percentage of CPU that the pluggable database can utilize.</Parameter>
            <Parameter Name="NEW_PARALLEL_SERVER_LIMIT">Specifies the maximum percentage of parallel_servers_target parallel servers that the pluggable database can use.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UPDATE_CDB_PLAN" ElementId="#CHDEJGII">
          <Description>Updates the consolidation resource plan</Description>
          <Parameters>
            <Parameter Name="PLAN">Name of the consolidation plan</Parameter>
            <Parameter Name="NEW_COMMENT">User comment</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UPDATE_CDB_PLAN_DIRECTIVE" ElementId="#CHDCHFBH">
          <Description>Updates the consolidation resource plan</Description>
          <Parameters>
            <Parameter Name="PLAN">Name of the consolidation plan</Parameter>
            <Parameter Name="PLUGGABLE_DATABASE">Name of the pluggable database</Parameter>
            <Parameter Name="NEW_COMMENT">New user comment</Parameter>
            <Parameter Name="NEW_SHARES">Specifies the share of resource allocation for the pluggable database. CPU Resource Manager is enabled by specifying shares for each PDB. The shares parameter is also used for Parallel Statement Queuing. If no share is specified, the default is obtained from the default directive, specified through the UPDATE_CDB_DEFAULT_DIRECTIVE Procedure.</Parameter>
            <Parameter Name="NEW_UTILIZATION_LIMIT">Specifies the new maximum percentage of CPU that the pluggable database can utilize.</Parameter>
            <Parameter Name="NEW_PARALLEL_SERVER_LIMIT">Specifies the new maximum percentage of parallel_servers_target parallel servers that the pluggable database can use.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UPDATE_CONSUMER_GROUP" ElementId="#i1006110">
          <Description>Updates entries which define resource consumer groups</Description>
        </SubProgram>
        <SubProgram Name="UPDATE_PLAN" ElementId="#i1003561">
          <Description>Updates entries which define resource plans</Description>
          <Parameters>
            <Parameter Name="PLAN">Name of resource plan</Parameter>
            <Parameter Name="NEW_COMMENT">New user comment</Parameter>
            <Parameter Name="NEW_CPU_MTH">Name of new allocation method for CPU resources (deprecated)</Parameter>
            <Parameter Name="NEW_ACTIVE_SESS_POOL_MTH">Name of new method for maximum active sessions</Parameter>
            <Parameter Name="NEW_PARALLEL_DEGREE_LIMIT_MTH">Name of new method for degree of parallelism</Parameter>
            <Parameter Name="NEW_QUEUEING_MTH">Specifies type of queuing policy to use with active session pool feature</Parameter>
            <Parameter Name="NEW_MGMT_MTH">Resource allocation method for specifying how much resources (for example, CPU or I/O) each consumer group or sub-plan getsEMPHASIS - for multilevel plans that use percentages to specify how I/O resources are distributed among consumer groups.RATIO - for single-level plans that use ratios to specify how I/O resources are distributed.</Parameter>
            <Parameter Name="NEW_SUB_PLAN">New setting for whether the plan is only intended for use as a sub-plan</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UPDATE_PLAN_DIRECTIVE" ElementId="#i1003705">
          <Description>Updates resource plan directives</Description>
          <Parameters>
            <Parameter Name="PLAN">Name of the resource plan</Parameter>
            <Parameter Name="GROUP_OR_SUBPLAN">Name of the consumer group or subplan</Parameter>
            <Parameter Name="NEW_COMMENT">Comment for the plan directive</Parameter>
            <Parameter Name="NEW_CPU_P1">Deprecated - use new_mgmt_p1 instead</Parameter>
            <Parameter Name="NEW_CPU_P2">Deprecated - use new_mgmt_p2 instead</Parameter>
            <Parameter Name="NEW_CPU_P3">Deprecated - use new_mgmt_p3 instead</Parameter>
            <Parameter Name="NEW_CPU_P4">Deprecated- use new_mgmt_p4 instead</Parameter>
            <Parameter Name="NEW_CPU_P5">Deprecated - use new_mgmt_p5 instead</Parameter>
            <Parameter Name="NEW_CPU_P6">Deprecated- use new_mgmt_p6 instead</Parameter>
            <Parameter Name="NEW_CPU_P7">Deprecated- use new_mgmt_p7 instead</Parameter>
            <Parameter Name="NEW_CPU_P8">Deprecated- use new_mgmt_p8 instead</Parameter>
            <Parameter Name="NEW_ACTIVE_SESS_POOL_P1">Specifies maximum number of concurrently active sessions for a consumer group. Default is NULL, which means unlimited.</Parameter>
            <Parameter Name="NEW_QUEUEING_P1">Specified time (in seconds) after which a job in the inactive session queue (waiting for execution) will time out. Default is NULL, which means unlimited.</Parameter>
            <Parameter Name="NEW_PARALLEL_DEGREE_LIMIT_P1">Specifies a limit on the degree of parallelism for any operation. Default is NULL, which means unlimited.</Parameter>
            <Parameter Name="NEW_SWITCH_GROUP">Specifies consumer group to which this session is switched if other switch criteria are met. Default is NULL. If the group name is 'CANCEL_SQL', the current call will be canceled when other switch criteria are met. If the group name is 'KILL_SESSION', the session will be killed when other switch criteria are met.</Parameter>
            <Parameter Name="NEW_SWITCH_TIME">Specifies time (in CPU seconds) that a session can execute before an action is taken. Default is NULL, which means unlimited.</Parameter>
            <Parameter Name="NEW_SWITCH_ESTIMATE">If TRUE, tells Oracle to use its execution time estimate to automatically switch the consumer group of an operation before beginning its execution. Default is FALSE.</Parameter>
            <Parameter Name="NEW_MAX_EST_EXEC_TIME">Specifies the maximum execution time (in CPU seconds) allowed for a session. If the optimizer estimates that an operation will take longer than MAX_EST_EXEC_TIME, the operation is not started and ORA-07455 is issued. If the optimizer does not provide an estimate, this directive has no effect. Default is NULL, which means unlimited.</Parameter>
            <Parameter Name="NEW_UNDO_POOL">Limits the size in kilobytes of the undo records corresponding to uncommitted transactions by this consumer group</Parameter>
            <Parameter Name="NEW_MAX_IDLE_TIME">Indicates the maximum session idle time. Default is NULL, which means unlimited.</Parameter>
            <Parameter Name="NEW_MAX_IDLE_BLOCKER_TIME">Maximum amount of time in seconds that a session can be idle while blocking another session's acquisition of a resource</Parameter>
            <Parameter Name="NEW_SWITCH_TIME_IN_CALL">Deprecated. If this parameter is specified, new_switch_time will be effectively set to new_switch_time_in_call and new_switch_for_call will be effectively set to TRUE.</Parameter>
            <Parameter Name="NEW_MGMT_P1">Resource allocation value for level 1 (replaces new_cpu_p1):EMPHASIS - specifies the resource percentage at the first levelRATIO - specifies the weight of resource usage</Parameter>
            <Parameter Name="NEW_MGMT_P2">Resource allocation value for level 2 (replaces new_cpu_p2)EMPHASIS - specifies the resource percentage at the second levelRATIO - non-applicable</Parameter>
            <Parameter Name="NEW_MGMT_P3">Resource allocation value for level 3 (replaces new_cpu_p3)EMPHASIS - specifies the resource percentage at the third levelRATIO - non-applicable</Parameter>
            <Parameter Name="NEW_MGMT_P4">Resource allocation value for level 4 (replaces new_cpu_p4)EMPHASIS - specifies the resource percentage at the fourth levelRATIO - non-applicable</Parameter>
            <Parameter Name="NEW_MGMT_P5">Resource allocation value for level 5 (replaces new_cpu_p5)EMPHASIS - specifies the resource percentage at the fifth levelRATIO - non-applicable</Parameter>
            <Parameter Name="NEW_MGMT_P6">Resource allocation value for level 6 (replaces new_cpu_p6)EMPHASIS - specifies the resource percentage at the sixth levelRATIO - non-applicable</Parameter>
            <Parameter Name="NEW_MGMT_P7">Resource allocation value for level 7 (replaces new_cpu_p7)EMPHASIS - specifies the resource percentage at the seventh levelRATIO - non-applicable</Parameter>
            <Parameter Name="NEW_MGMT_P8">Resource allocation value for level 8 (replaces new_cpu_p8)EMPHASIS - specifies the resource percentage at the eighth levelRATIO - non-applicable</Parameter>
            <Parameter Name="NEW_SWITCH_IO_MEGABYTES">Specifies the amount of I/O (in MB) that a session can issue before an action is taken. Default is NULL, which means unlimited.</Parameter>
            <Parameter Name="NEW_SWITCH_IO_REQS">Specifies the number of I/O requests that a session can issue before an action is taken. Default is NULL, which means unlimited.</Parameter>
            <Parameter Name="NEW_SWITCH_FOR_CALL">Specifies that if an action is taken because of the new_switch_time, new_switch_io_megabytes, or new_switch_io_reqs parameters, the consumer group is restored to its original consumer group at the end of the top call. Default is FALSE, which means that the original consumer group is not restored at the end of the top call.</Parameter>
            <Parameter Name="NEW_MAX_UTILIZATION_LIMIT">Deprecated - use new_utilization_limit instead</Parameter>
            <Parameter Name="NEW_PARALLEL_TARGET_PERCENTAGE">Deprecated - use new_parallel_server_limit instead</Parameter>
            <Parameter Name="NEW_PARALLEL_QUEUE_TIMEOUT">Specifies the time (in seconds) that a query may remain in its Consumer Group's parallel statement queue before it is removed and terminated with an error (ORA- 07454).</Parameter>
            <Parameter Name="NEW_PARALLEL_SERVER_LIMIT">Parallel server limit. Setting this overwrites the limit for parallel server set by utilization_limit.</Parameter>
            <Parameter Name="NEW_UTILIZATION_LIMIT">Resource limit. For CPU, this limits the CPU utilization for the consumer group. For parallel servers, this limits the parallel servers used as a percentage of parallel_servers_target.</Parameter>
            <Parameter Name="NEW_SWITCH_ELAPSED_TIME">Elapsed time that will trigger the action specified by switch_group. As with other switch directives, if new_switch_for_call is TRUE, the elapsed time is accumulated from the start of a call. Otherwise, the elapsed time is accumulated for the length of the session.</Parameter>
            <Parameter Name="NEW_SHARES">Specifies the share of resource allocation for the pluggable database. CPU Resource Manager is enabled by specifying shares for each PDB. The shares parameter is also used for Parallel Statement Queuing. If CPU Resource Manager is enabled, then the default value is 1.</Parameter>
            <Parameter Name="NEW_PARALLEL_STMT_CRITICAL">If set to BYPASS_QUEUE, parallel statements from this consumer group are not queued. Default is NULL, which means that parallel statements are eligible for queuing.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="VALIDATE_PENDING_AREA" ElementId="#i1003620">
          <Description>Validates pending changes for the resource manager</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_RESOURCE_MANAGER_PRIVS" Url="http://docs.oracle.com/database/121/ARPLS/d_resmpr.htm">
      <Description>The DBMS_RESOURCE_MANAGER_PRIVS package maintains privileges associated with the Resource Manager.</Description>
      <SubPrograms>
        <SubProgram Name="GRANT_SWITCH_CONSUMER_GROUP" ElementId="#i999133">
          <Description>Grants the privilege to switch to resource consumer groups</Description>
          <Parameters>
            <Parameter Name="GRANTEE_NAME">Name of the user or role to whom privilege is to be granted.</Parameter>
            <Parameter Name="CONSUMER_GROUP">Name of consumer group.</Parameter>
            <Parameter Name="GRANT_OPTION">TRUE if grantee should be allowed to grant access, FALSE otherwise.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GRANT_SYSTEM_PRIVILEGE" ElementId="#i999263">
          <Description>Performs a grant of a system privilege</Description>
          <Parameters>
            <Parameter Name="GRANTEE_NAME">Name of the user or role to whom privilege is to be granted.</Parameter>
            <Parameter Name="PRIVILEGE_NAME">Name of the privilege to be granted.</Parameter>
            <Parameter Name="ADMIN_OPTION">TRUE if the grant is with admin_option, FALSE otherwise.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REVOKE_SWITCH_CONSUMER_GROUP" ElementId="#CFAIDFCH">
          <Description>Revokes the privilege to switch to resource consumer groups.</Description>
        </SubProgram>
        <SubProgram Name="REVOKE_SYSTEM_PRIVILEGE" ElementId="#i999231">
          <Description>Performs a revoke of a system privilege</Description>
          <Parameters>
            <Parameter Name="REVOKEE_NAME">Name of the user or role from whom privilege is to be revoked.</Parameter>
            <Parameter Name="PRIVILEGE_NAME">Name of the privilege to be revoked.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_RESULT_CACHE" Url="http://docs.oracle.com/database/121/ARPLS/d_result_cache.htm">
      <Description>The DBMS_RESULT_CACHE package provides an interface to allow the DBA to administer that part of the shared pool that is used by the SQL result cache and the PL/SQL function result cache. Both these caches use the same infrastructure. Therefore, for example, DBMS_RESULT_CACHE.BYPASS determines whether both caches are bypassed or both caches are used, and DBMS_RESULT_CACHE.FLUSH flushes both all the cached results for SQL queries and all the cached results for PL/SQL functions.</Description>
      <SubPrograms>
        <SubProgram Name="BYPASS" ElementId="#CDEDBJGF">
          <Description>Sets the bypass mode for the Result Cache</Description>
          <Parameters>
            <Parameter Name="BYPASS_MODE">TRUE =&gt; Result Cache usage is bypassedFALSE =&gt; Result Cache usage is turned on</Parameter>
            <Parameter Name="SESSION">TRUE =&gt; Applies to current sessionFALSE (default) =&gt; Applies to all sessions</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="FLUSH" ElementId="#CHDHCDIH">
          <Description>Attempts to remove all the objects from the Result Cache, and depending on the arguments retains or releases the memory and retains or clears the statistics</Description>
        </SubProgram>
        <SubProgram Name="INVALIDATE" ElementId="#CHDGEFCF">
          <Description>Invalidates all the result-set objects that dependent upon the specified dependency object</Description>
        </SubProgram>
        <SubProgram Name="INVALIDATE_OBJECT" ElementId="#CHDIIFFA">
          <Description>Invalidates the specified result-set object(s)</Description>
        </SubProgram>
        <SubProgram Name="MEMORY_REPORT" ElementId="#CDEGADEE">
          <Description>Produces the memory usage report for the Result Cache</Description>
          <Parameters>
            <Parameter Name="DETAILED">TRUE =&gt; produces a more detailed reportFALSE (default) =&gt; produces the standard report</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="STATUS" ElementId="#CHDJCFJG">
          <Description>Checks the status of the Result Cache</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_RESUMABLE" Url="http://docs.oracle.com/database/121/ARPLS/d_resuma.htm">
      <Description>With the DBMS_RESUMABLE package, you can suspend large operations that run out of space or reach space limits after executing for a long time, fix the problem, and make the statement resume execution. In this way you can write applications without worrying about running into space-related errors.</Description>
      <SubPrograms>
        <SubProgram Name="ABORT" ElementId="#i996815">
          <Description>Aborts a suspended resumable space allocation</Description>
          <Parameters>
            <Parameter Name="SESSION_ID">The session identifier of the resumable space allocation.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_SESSION_TIMEOUT" ElementId="#i996838">
          <Description>Returns the current timeout value of the resumable space allocations for a session with session_id</Description>
          <Parameters>
            <Parameter Name="SESSION_ID">The session identifier of the resumable space allocation.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_TIMEOUT" ElementId="#i998183">
          <Description>Returns the current timeout value of resumable space allocations for the current session</Description>
        </SubProgram>
        <SubProgram Name="SET_SESSION_TIMEOUT" ElementId="#i996860">
          <Description>Sets the timeout of resumable space allocations for a session with session_id</Description>
          <Parameters>
            <Parameter Name="SESSION_ID">The session identifier of the resumable space allocation.</Parameter>
            <Parameter Name="TIMEOUT">The timeout of the resumable space allocation.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_TIMEOUT" ElementId="#i996892">
          <Description>Sets the timeout of resumable space allocations for the current session</Description>
          <Parameters>
            <Parameter Name="TIMEOUT">The timeout of the resumable space allocation.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SPACE_ERROR_INFO" ElementId="#CBBFDDJH">
          <Description>Looks for space-related errors in the error stack, otherwise returning FALSE</Description>
          <Parameters>
            <Parameter Name="ERROR_TYPE">The space error type. It will be one of the following:NO MORE SPACEMAX EXTENTS REACHEDSPACE QUOTA EXCEEDED</Parameter>
            <Parameter Name="OBJECT_TYPE">The object type. It will be one of the following:TABLEINDEXCLUSTERTABLE SPACEROLLBACK SEGMENTUNDO SEGMENTLOB SEGMENTTEMP SEGMENTINDEX PARTITIONTABLE PARTITIONLOB PARTITIONTABLE SUBPARTITIONINDEX SUBPARTITIONLOB SUBPARTITIONThe type can also be NULL if it does not apply.</Parameter>
            <Parameter Name="OBJECT_OWNER">The owner of the object. NULL if it cannot be determined.</Parameter>
            <Parameter Name="TABLE_SPACE_NAME">The table space where the object resides. NULL if it cannot be determined.</Parameter>
            <Parameter Name="OBJECT_NAME">The name of rollback segment, temp segment, table, index, or cluster.</Parameter>
            <Parameter Name="SUB_OBJECT_NAME">The partition name or sub-partition name of LOB, TABLE, or INDEX. NULL if it cannot be determined.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_RLS" Url="http://docs.oracle.com/database/121/ARPLS/d_rls.htm">
      <Description>The DBMS_RLS package contains the fine-grained access control administrative interface, which is used to implement Virtual Private Database (VPD). DBMS_RLS is available with the Enterprise Edition only.</Description>
      <SubPrograms>
        <SubProgram Name="ADD_GROUPED_POLICY" ElementId="#i1002047">
          <Description>Adds a policy associated with a policy group</Description>
          <Parameters>
            <Parameter Name="OBJECT_SCHEMA">Schema containing the table, view, or synonym. The default is NULL, which means that the current user schema is used as the object_schema.</Parameter>
            <Parameter Name="OBJECT_NAME">Name of the table, view, or synonym to which the policy is added</Parameter>
            <Parameter Name="POLICY_GROUP">Name of the policy group to which the policy belongs</Parameter>
            <Parameter Name="POLICY_NAME">Name of the policy; must be unique for the same table or view</Parameter>
            <Parameter Name="FUNCTION_SCHEMA">Schema owning the policy function. The default is NULL, which means that the current user schema is used as the function_schema.</Parameter>
            <Parameter Name="POLICY_FUNCTION">Name of the function that generates a predicate for the policy. If the function is defined within a package, the name of the package must be present.</Parameter>
            <Parameter Name="STATEMENT_TYPES">Statement types to which the policy applies. It can be any combination of INDEX, SELECT, INSERT, UPDATE, or DELETE. The default is to apply to all of these types except INDEX.</Parameter>
            <Parameter Name="UPDATE_CHECK">For INSERT and UPDATE statements only, setting update_check to TRUE causes the server to check the policy against the value after INSERT or UPDATE.</Parameter>
            <Parameter Name="ENABLE">Indicates if the policy is enable when it is added. The default is TRUE.</Parameter>
            <Parameter Name="STATIC_POLICY">Default is FALSE. If it is set to TRUE, the server assumes that the policy function for the static policy produces the same predicate string for anyone accessing the object, except for SYS or the privilege user who has the EXEMPT ACCESS POLICY privilege.</Parameter>
            <Parameter Name="POLICY_TYPE">Default is NULL, which means policy_type is decided by the value of static_policy. The available policy types are listed in Table 135-5. Specifying any of these policy types overrides the value of static_policy.</Parameter>
            <Parameter Name="LONG_PREDICATE">Default is FALSE, which means the policy function can return a predicate with a length of up to 4000 bytes. TRUE means the predicate text string length can be up to 32K bytes.Policies existing prior to the availability of this parameter retain a 32K limit.</Parameter>
            <Parameter Name="SEC_RELEVANT_COLS">Enables column-level Virtual Private Database (VPD), which enforces security policies when a column containing sensitive information is referenced in a query. Applies to tables and views, but not to synonyms. Specify a list of comma- or space-separated valid column names of the policy-protected object. The policy is enforced only if a specified column is referenced (or, for an abstract datatype column, its attributes are referenced) in the user SQL statement or its underlying view definition. Default is all the user-defined columns for the object.</Parameter>
            <Parameter Name="NAMESPACE">Name which determines the application context namespace</Parameter>
            <Parameter Name="ATTRIBUTE">Attribute which determines the application context attribute name</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADD_POLICY" ElementId="#i998159">
          <Description>Adds a fine-grained access control policy to a table, view, or synonym</Description>
          <Parameters>
            <Parameter Name="OBJECT_SCHEMA">Schema containing the table, view, or synonym. If no object_schema is specified, the current user's schema is assumed.</Parameter>
            <Parameter Name="OBJECT_NAME">Name of table, view, or synonym to which the policy is added.</Parameter>
            <Parameter Name="POLICY_NAME">Name of policy to be added. It must be unique for the same table or view.</Parameter>
            <Parameter Name="FUNCTION_SCHEMA">Schema of the policy function (current default schema, if NULL). If no function_schema is specified, the current user's schema is assumed.</Parameter>
            <Parameter Name="POLICY_FUNCTION">Name of a function which generates a predicate for the policy. If the function is defined within a package, then the name of the package must be present.</Parameter>
            <Parameter Name="STATEMENT_TYPES">Statement types to which the policy applies. It can be any combination of INDEX, SELECT, INSERT, UPDATE, or DELETE. The default is to apply to all of these types except INDEX.</Parameter>
            <Parameter Name="UPDATE_CHECK">Optional argument for INSERT or UPDATE statement types. The default is FALSE. Setting update_check to TRUE causes the server to also check the policy against the value after insert or update.</Parameter>
            <Parameter Name="ENABLE">Indicates if the policy is enabled when it is added. The default is TRUE.</Parameter>
            <Parameter Name="STATIC_POLICY">The default is FALSE. If it is set to TRUE, the server assumes that the policy function for the static policy produces the same predicate string for anyone accessing the object, except for SYS or the privileged user who has the EXEMPT ACCESS POLICY privilege.</Parameter>
            <Parameter Name="POLICY_TYPE">Default is NULL, which means policy_type is decided by the value of static_policy. The available policy types are listed in Table 135-5. Specifying any of these policy types overrides the value of static_policy.</Parameter>
            <Parameter Name="LONG_PREDICATE">Default is FALSE, which means the policy function can return a predicate with a length of up to 4000 bytes. TRUE means the predicate text string length can be up to 32K bytes.Policies existing prior to the availability of this parameter retain a 32K limit.</Parameter>
            <Parameter Name="SEC_RELEVANT_COLS">Enables column-level Virtual Private Database (VPD), which enforces security policies when a column containing sensitive information is referenced in a query. Applies to tables and views, but not to synonyms. Specify a list of comma- or space-separated valid column names of the policy-protected object. The policy is enforced only if a specified column is referenced (or, for an abstract datatype column, its attributes are referenced) in the user SQL statement or its underlying view definition. Default is all the user-defined columns for the object.</Parameter>
            <Parameter Name="SEC_RELEVANT_COLS_OPT">Use with sec_relevant_cols to display all rows for column-level VPD filtered queries (SELECT only), but where sensitive columns appear as NULL. Default is set to NULL, which allows the filtering defined with sec_relevant_cols to take effect. Set to dbms_rls.ALL_ROWS to display all rows, but with sensitive column values, which are filtered by sec_relevant_cols, displayed as NULL. See "Usage Notes" for restrictions and additional information about this option.</Parameter>
            <Parameter Name="NAMESPACE">Name which determines the application context namespace</Parameter>
            <Parameter Name="ATTRIBUTE">Attribute which determines the application context attribute name</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADD_POLICY_CONTEXT" ElementId="#i1002054">
          <Description>Adds the context for the active application</Description>
          <Parameters>
            <Parameter Name="OBJECT_SCHEMA">The schema containing the table, view, or synonym.</Parameter>
            <Parameter Name="OBJECT_NAME">The name of the table, view, or synonym to which the policy is added.</Parameter>
            <Parameter Name="NAMESPACE">Name which determines the application context namespace</Parameter>
            <Parameter Name="ATTRIBUTE">Attribute which determines the application context attribute name</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ALTER_POLICY" ElementId="#CIHHADDH">
          <Description>Associates an application context attribute with VPD policies</Description>
          <Parameters>
            <Parameter Name="OBJECT_SCHEMA">Schema containing the table, view, or synonym. Default is NULL, which means that the current user schema is used as the object_schema.</Parameter>
            <Parameter Name="OBJECT_NAME">Name of the table, view, or synonym to which the policy is added</Parameter>
            <Parameter Name="POLICY_NAME">Name of the policy, unique for the same table or view</Parameter>
            <Parameter Name="ALTER_OPTION">Used to determine whether the application context is being added or removed from VPD policy</Parameter>
            <Parameter Name="NAMESPACE">Name which determines the application context namespace</Parameter>
            <Parameter Name="ATTRIBUTE">Attribute which determines the application context attribute name</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ALTER_GROUPED_POLICY" ElementId="#CIHCFBDA">
          <Description>Adds application context related changes</Description>
          <Parameters>
            <Parameter Name="OBJECT_SCHEMA">Schema containing the table, view, or synonym. Default is NULL, which means that the current user schema is used as the object_schema.</Parameter>
            <Parameter Name="OBJECT_NAME">Name of the table, view, or synonym to which the policy is added</Parameter>
            <Parameter Name="POLICY_GROUP">Name of the policy group to which this policy belongs; must be unique for the same table or view</Parameter>
            <Parameter Name="POLICY_NAME">Name of the policy, unique for the same table or view</Parameter>
            <Parameter Name="ALTER_OPTION">Used to determine whether the application context is being added or removed from VPD policy</Parameter>
            <Parameter Name="NAMESPACE">Names which determines the application context namespace</Parameter>
            <Parameter Name="ATTRIBUTE">Attribute determines the application context attribute name</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_POLICY_GROUP" ElementId="#i1002040">
          <Description>Creates a policy group</Description>
          <Parameters>
            <Parameter Name="OBJECT_SCHEMA">Schema containing the table, view, or synonym.</Parameter>
            <Parameter Name="OBJECT_NAME">Name of the table, view, or synonym to which the policy is added.</Parameter>
            <Parameter Name="POLICY_GROUP">Name of the policy group that the policy belongs to.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_POLICY_GROUP" ElementId="#i1002061">
          <Description>Deletes a policy group</Description>
          <Parameters>
            <Parameter Name="OBJECT_SCHEMA">Schema containing the table, view, or synonym.</Parameter>
            <Parameter Name="OBJECT_NAME">Name of the table, view, or synonym to which the policy is added.</Parameter>
            <Parameter Name="POLICY_GROUP">Name of the policy group that the policy belongs to.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DISABLE_GROUPED_POLICY" ElementId="#i1003610">
          <Description>Disables a row-level group security policy</Description>
        </SubProgram>
        <SubProgram Name="DROP_GROUPED_POLICY" ElementId="#i1002068">
          <Description>Drops a policy associated with a policy group</Description>
          <Parameters>
            <Parameter Name="OBJECT_SCHEMA">Schema containing the table, view, or synonym</Parameter>
            <Parameter Name="OBJECT_NAME">Name of the table, view, or synonym to which the policy is dropped</Parameter>
            <Parameter Name="POLICY_GROUP">Name of the policy group to which the policy belongs</Parameter>
            <Parameter Name="POLICY_NAME">Name of the policy</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_POLICY" ElementId="#CIHGHJGG">
          <Description>Drops a fine-grained access control policy from a table, view, or synonym</Description>
        </SubProgram>
        <SubProgram Name="DROP_POLICY_CONTEXT" ElementId="#i1002075">
          <Description>Drops a driving context from the object so that it will have one less driving context</Description>
          <Parameters>
            <Parameter Name="OBJECT_SCHEMA">Schema containing the table, view, or synonym. If no object_schema is specified, or NULL is provided, then the current user's schema is assumed.</Parameter>
            <Parameter Name="OBJECT_NAME">Name of the table, view, or synonym to which the policy is dropped</Parameter>
            <Parameter Name="NAMESPACE">Namespace of the driving context</Parameter>
            <Parameter Name="ATTRIBUTE">Attribute of the driving context</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ENABLE_GROUPED_POLICY" ElementId="#i1002088">
          <Description>Enables or disables a row-level group security policy</Description>
          <Parameters>
            <Parameter Name="OBJECT_SCHEMA">Schema containing the table, view, or synonym</Parameter>
            <Parameter Name="OBJECT_NAME">Name of the table, view, or synonym with which the policy is associated</Parameter>
            <Parameter Name="GROUP_NAME">Name of the group of the policy</Parameter>
            <Parameter Name="POLICY_NAME">Name of the policy to be enabled or disabled</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ENABLE_POLICY" ElementId="#i998317">
          <Description>Enables or disables a fine-grained access control policy</Description>
          <Parameters>
            <Parameter Name="OBJECT_SCHEMA">Schema containing table, view, or synonym. If no object_schema is specified, or NULL is provided, then the current user's schema is assumed.</Parameter>
            <Parameter Name="OBJECT_NAME">Name of table, view, or synonym with which the policy is associated</Parameter>
            <Parameter Name="POLICY_NAME">Name of policy to be enabled or disabled</Parameter>
            <Parameter Name="ENABLE">TRUE to enable the policy, FALSE to disable the policy</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REFRESH_GROUPED_POLICY" ElementId="#i1002095">
          <Description>Reparses the SQL statements associated with a refreshed policy</Description>
          <Parameters>
            <Parameter Name="OBJECT_SCHEMA">Schema containing the table, view, or synonym. If no object_schema is specified, or NULL is provided, then the current user's schema is assumed.</Parameter>
            <Parameter Name="OBJECT_NAME">Name of the table, view, or synonym with which the policy is associated</Parameter>
            <Parameter Name="GROUP_NAME">Name of the group of the policy</Parameter>
            <Parameter Name="POLICY_NAME">Name of the policy</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REFRESH_POLICY" ElementId="#i998280">
          <Description>Causes all the cached statements associated with the policy to be reparsed</Description>
          <Parameters>
            <Parameter Name="OBJECT_SCHEMA">Schema containing the table, view, or synonym. If no object_schema is specified, or NULL is provided, then the current user's schema is assumed.</Parameter>
            <Parameter Name="OBJECT_NAME">Name of table, view, or synonym with which the policy is associated.</Parameter>
            <Parameter Name="POLICY_NAME">Name of policy to be refreshed.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_ROLLING" Url="http://docs.oracle.com/database/121/ARPLS/d_rolling.htm">
      <Description>The DBMS_ROLLING PL/SQL package is used to implement the Rolling Upgrade Using Active Data Guard feature, which streamlines the process of upgrading Oracle Database software in a Data Guard configuration in a rolling fashion. The Rolling Upgrade Using Active Data Guard feature requires a license for the Oracle Active Data Guard option, and can be used for database version upgrades starting with the first patchset of Oracle Database 12c.</Description>
      <SubPrograms>
        <SubProgram Name="INIT_PLAN" ElementId="#CACFBEDJ">
          <Description>Initializes a rolling operation plan with system-generated default values.</Description>
          <Parameters>
            <Parameter Name="FUTURE_PRIMARY">DB_UNIQUE_NAME of the future primary (also known as the Leading Group Master (LGM))</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DESTROY_PLAN" ElementId="#BCGJCCAI">
          <Description>Destroys any existing rolling operation plan, its parameters, and all resources associated with the rolling operation.</Description>
        </SubProgram>
        <SubProgram Name="BUILD_PLAN" ElementId="#BCGEHIFC">
          <Description>Validates plan parameters and creates or modifies a rolling operation plan.</Description>
        </SubProgram>
        <SubProgram Name="SET_PARAMETER" ElementId="#BCGEECJD">
          <Description>Modifies a rolling operation parameter.</Description>
          <Parameters>
            <Parameter Name="SCOPE">Parameter scope. It can either be NULL for global parameters, or the DB_UNIQUE_NAME of a specific database for local parameters.</Parameter>
            <Parameter Name="NAME">The DBMS_ROLLING constant for a given parameter.</Parameter>
            <Parameter Name="VALUE">New value for the parameter or NULL to revert to a default value.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="START_PLAN" ElementId="#BCGHFGHE">
          <Description>Starts the rolling operation.</Description>
        </SubProgram>
        <SubProgram Name="SWITCHOVER" ElementId="#BCGCBEAC">
          <Description>Performs a switchover between the current primary database and the transient logical standby database.</Description>
        </SubProgram>
        <SubProgram Name="FINISH_PLAN" ElementId="#BCGHEDJH">
          <Description>Finalizes the rolling operation.</Description>
        </SubProgram>
        <SubProgram Name="ROLLBACK_PLAN" ElementId="#BCGIGBHH">
          <Description>Completely rolls back the rolling operation.</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_ROWID" Url="http://docs.oracle.com/database/121/ARPLS/d_rowid.htm">
      <Description>The DBMS_ROWID package lets you create ROWIDs and obtain information about ROWIDs from PL/SQL programs and SQL statements. You can find the data block number, the object number, and other ROWID components without writing code to interpret the base-64 character external ROWID. DBMS_ROWID is intended for upgrading from Oracle database version 7 to Oracle database version 8.X.</Description>
      <SubPrograms>
        <SubProgram Name="ROWID_BLOCK_NUMBER" ElementId="#CIHDGIGD">
          <Description>Returns the block number of a ROWID</Description>
          <Parameters>
            <Parameter Name="ROW_ID">ROWID to be interpreted</Parameter>
            <Parameter Name="TS_TYPE_IN">The type of the tablespace (bigfile/smallfile) to which the row belongs</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ROWID_CREATE" ElementId="#i1004385">
          <Description>Creates a ROWID, for testing only</Description>
          <Parameters>
            <Parameter Name="ROWID_TYPE">Type (restricted or extended)Set the rowid_type parameter to 0 for a restricted ROWID. Set it to 1 to create an extended ROWID.If you specify rowid_type as 0, then the required object_number parameter is ignored, and ROWID_CREATE returns a restricted ROWID.</Parameter>
            <Parameter Name="OBJECT_NUMBER">Data object number (rowid_object_undefined for restricted)</Parameter>
            <Parameter Name="RELATIVE_FNO">Relative file number</Parameter>
            <Parameter Name="BLOCK_NUMBER">Block number in this file</Parameter>
            <Parameter Name="ROW_NUMBER">Returns row number in this block</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ROWID_INFO" ElementId="#CIHCAIFH">
          <Description>Returns the type and components of a ROWID</Description>
          <Parameters>
            <Parameter Name="ROWID_IN">ROWID to be interpreted. This determines if the ROWID is a restricted (0) or extended (1) ROWID.</Parameter>
            <Parameter Name="ROWID_TYPE">Returns type (restricted/extended)</Parameter>
            <Parameter Name="OBJECT_NUMBER">Returns data object number (rowid_object_undefined for restricted)</Parameter>
            <Parameter Name="RELATIVE_FNO">Returns relative file number</Parameter>
            <Parameter Name="BLOCK_NUMBER">Returns block number in this file</Parameter>
            <Parameter Name="ROW_NUMBER">Returns row number in this block</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ROWID_OBJECT" ElementId="#i997153">
          <Description>Returns the object number of the extended ROWID</Description>
          <Parameters>
            <Parameter Name="ROW_ID">ROWID to be interpreted</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ROWID_RELATIVE_FNO" ElementId="#i997186">
          <Description>Returns the file number of a ROWID</Description>
          <Parameters>
            <Parameter Name="ROW_ID">ROWID to be interpreted</Parameter>
            <Parameter Name="TS_TYPE_IN">Type of the tablespace (bigfile/smallfile) to which the row belongs</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ROWID_ROW_NUMBER" ElementId="#i997251">
          <Description>Returns the row number</Description>
          <Parameters>
            <Parameter Name="ROW_ID">ROWID to be interpreted.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ROWID_TO_ABSOLUTE_FNO" ElementId="#CIHHJEEF">
          <Description>Returns the absolute file number associated with the ROWID for a row in a specific table</Description>
          <Parameters>
            <Parameter Name="ROW_ID">ROWID to be interpreted</Parameter>
            <Parameter Name="SCHEMA_NAME">Name of the schema which contains the table</Parameter>
            <Parameter Name="OBJECT_NAME">Table name</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ROWID_TO_EXTENDED" ElementId="#i1004441">
          <Description>Converts a ROWID from restricted format to extended</Description>
          <Parameters>
            <Parameter Name="OLD_ROWID">ROWID to be converted</Parameter>
            <Parameter Name="SCHEMA_NAME">Name of the schema which contains the table (optional)</Parameter>
            <Parameter Name="OBJECT_NAME">Table name (optional).</Parameter>
            <Parameter Name="CONVERSION_TYPE">The following constants are defined:ROWID_CONVERT_INTERNAL (:=0)ROWID_CONVERT_EXTERNAL (:=1)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ROWID_TO_RESTRICTED" ElementId="#i997392">
          <Description>Converts an extended ROWID to restricted format</Description>
          <Parameters>
            <Parameter Name="OLD_ROWID">ROWID to be converted</Parameter>
            <Parameter Name="CONVERSION_TYPE">The following constants are defined:ROWID_CONVERT_INTERNAL (:=0)ROWID_CONVERT_EXTERNAL (:=1)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ROWID_TYPE" ElementId="#i1004963">
          <Description>Returns the ROWID type: 0 is restricted, 1 is extended</Description>
          <Parameters>
            <Parameter Name="ROW_ID">ROWID to be interpreted</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ROWID_VERIFY" ElementId="#i997423">
          <Description>Checks if a ROWID can be correctly extended by the ROWID_TO_EXTENDED function</Description>
          <Parameters>
            <Parameter Name="ROWID_IN">ROWID to be verified</Parameter>
            <Parameter Name="SCHEMA_NAME">Name of the schema which contains the table</Parameter>
            <Parameter Name="OBJECT_NAME">Table name</Parameter>
            <Parameter Name="CONVERSION_TYPE">The following constants are defined:ROWID_CONVERT_INTERNAL (:=0)ROWID_CONVERT_EXTERNAL (:=1)</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_RULE" Url="http://docs.oracle.com/database/121/ARPLS/d_rule.htm">
      <Description>The DBMS_RULE package contains subprograms that enable the evaluation of a rule set for a specified event.</Description>
      <SubPrograms>
        <SubProgram Name="CLOSE_ITERATOR" ElementId="#i998673">
          <Description>Closes an open iterator</Description>
        </SubProgram>
        <SubProgram Name="EVALUATE" ElementId="#CHDBDCDA">
          <Description>Evaluates the rules in the specified rule set that use the evaluation context specified</Description>
          <Parameters>
            <Parameter Name="RULE_SET_NAME">Name of the rule set in the form [schema_name.]rule_set_name. For example, to evaluate all of the rules in a rule set named hr_rules in the hr schema, enter hr.hr_rules for this parameter. If the schema is not specified, then the schema of the current user is used.</Parameter>
            <Parameter Name="EVALUATION_CONTEXT">An evaluation context name in the form [schema_name.]evaluation_context_name. If the schema is not specified, then the name of the current user is used.Only rules that use the specified evaluation context are evaluated.</Parameter>
            <Parameter Name="EVENT_CONTEXT">A list of name-value pairs that identify events that cause evaluation</Parameter>
            <Parameter Name="TABLE_VALUES">Contains the data for table rows using the table aliases specified when the evaluation context was created. Each table alias in the list must be unique.</Parameter>
            <Parameter Name="COLUMN_VALUES">Contains the partial data for table rows. It must not contain column values for tables, whose values are already specified in table_values.</Parameter>
            <Parameter Name="VARIABLE_VALUES">A list containing the data for variables.The only way for an explicit variable value to be known is to specify its value in this list.If an implicit variable value is not specified in the list, then the function used to obtain the value of the implicit variable is invoked. If an implicit variable value is specified in the list, then this value is used and the function is not invoked.</Parameter>
            <Parameter Name="ATTRIBUTE_VALUES">Contains the partial data for variables. It must not contain attribute values for variables whose values are already specified in variable_values.</Parameter>
            <Parameter Name="STOP_ON_FIRST_HIT">If TRUE, then the rules engine stops evaluation as soon as it finds a TRUE rule.If TRUE and there are no TRUE rules, then the rules engine stops evaluation as soon as it finds a rule that may evaluate to TRUE given more data.If FALSE, then the rules engine continues to evaluate rules even after it finds a TRUE rule.</Parameter>
            <Parameter Name="SIMPLE_RULES_ONLY">If TRUE, then only those rules that are simple enough to be evaluated fast (without issuing SQL) are considered for evaluation.If FALSE, then evaluates all rules.</Parameter>
            <Parameter Name="TRUE_RULES">Receives the output of the EVALUATE procedure into a varray of RE$RULE_HIT_LIST type.If no rules evaluate to TRUE, then true_rules is empty.If at least one rule evaluates to TRUE and stop_on_first_hit is TRUE, then true_rules contains one rule that evaluates to TRUE.If stop_on_first_hit is FALSE, then true_rules contains all rules that evaluate to TRUE.</Parameter>
            <Parameter Name="MAYBE_RULES">If all rules can be evaluated completely, without requiring any additional data, then maybe_rules is empty.If stop_on_first_hit is TRUE, then if there is at least one rule that may evaluate to TRUE given more data, and no rules evaluate to TRUE, then maybe_rules contains one rule that may evaluate to TRUE.If stop_on_first_hit is FALSE, then maybe_rules contains all rules that may evaluate to TRUE given more data.</Parameter>
            <Parameter Name="TRUE_RULES_ITERATOR">Contains the iterator for accessing rules that are TRUE</Parameter>
            <Parameter Name="MAYBE_RULES_ITERATOR">Contains the iterator for accessing rules that may be TRUE given additional data or the ability to issue SQL</Parameter>
            <Parameter Name="RESULT_CACHE">If TRUE, Result Cache will be created. If evalate procedure is called with either true_rules_iterator or maybe_rules_iterator, then result_cache is not enabled.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EVALUATE_EXPRESSION" ElementId="#BIBDHHGJ">
          <Description>Evaluates an expression under the logged in user in a session</Description>
          <Parameters>
            <Parameter Name="RULE_EXPRESSION">Contains an expression string.</Parameter>
            <Parameter Name="TABLE_ALIAS">Contains alias of tables referred in the expression string.</Parameter>
            <Parameter Name="VARIABLE_TYPES">Contains type definitions of variables used in expression.</Parameter>
            <Parameter Name="TABLE_VALUES">Contains ROWID of table row for expression evaluation.</Parameter>
            <Parameter Name="COLUMN_VALUES">Contains values of columns referred in the expression.</Parameter>
            <Parameter Name="VARIABLE_VALUES">Contains values of variables referred in the expression.</Parameter>
            <Parameter Name="ATTRIBUTE_VALUES">Contains values of attributes referred in the expression.</Parameter>
            <Parameter Name="CACHE">If TRUE, Result Cache will be created.</Parameter>
            <Parameter Name="RESULT_VAL">Result of the evaluation.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_NEXT_HIT" ElementId="#i998761">
          <Description>Returns the next rule that evaluated to TRUE from a true rules iterator, or returns the next rule that evaluated to MAYBE from a maybe rules iterator; returns NULL if there are no more rules that evaluated to TRUE or MAYBE.</Description>
        </SubProgram>
        <SubProgram Name="IS_FAST" ElementId="#CIACDEFE">
          <Description>Returns TRUE if the expression can be evaluated fast. An expression can be evaluated fast if the engine does not need to run any internal SQL and does not need to go to PL/SQL layer in case there are any PL/SQL functions referred.</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_RULE_ADM" Url="http://docs.oracle.com/database/121/ARPLS/d_rule_a.htm">
      <Description>The DBMS_RULE_ADM package provides the subprograms for creating and managing rules, rule sets, and rule evaluation contexts.</Description>
      <SubPrograms>
        <SubProgram Name="ADD_RULE" ElementId="#CDEFCEHF">
          <Description>Adds the specified rule to the specified rule set</Description>
          <Parameters>
            <Parameter Name="RULE_NAME">The name of the rule you are adding to the rule set, specified as [schema_name.]rule_name. For example, to add a rule named all_a in the hr schema, enter hr.all_a for this parameter. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="RULE_SET_NAME">The name of the rule set to which you are adding the rule, specified as [schema_name.]rule_set_name. For example, to add the rule to a rule set named apply_rules in the hr schema, enter hr.apply_rules for this parameter. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="EVALUATION_CONTEXT">An evaluation context name in the form [schema_name.]evaluation_context_name. If the schema is not specified, then the current user is the default.Only specify an evaluation context if the rule itself does not have an evaluation context and you do not want to use the rule set's evaluation context for the rule.</Parameter>
            <Parameter Name="RULE_COMMENT">Optional description, which can contain the reason for adding the rule to the rule set</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ALTER_EVALUATION_CONTEXT" ElementId="#CDEEBGHC">
          <Description>Alters a rule evaluation context</Description>
          <Parameters>
            <Parameter Name="EVALUATION_CONTEXT_NAME">The name of the evaluation context you are altering, specified as [schema_name.]evaluation_context_name.For example, to alter an evaluation context named dept_eval_context in the hr schema, enter hr.dept_eval_context for this parameter. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="TABLE_ALIASES">If NULL and remove_table_aliases is FALSE, then the procedure retains the existing table aliases. If NULL and remove_table_aliases is TRUE, then the procedure removes the existing table aliases.If non-NULL, then the procedure replaces the existing table aliases for the evaluation context with the specified table aliases.Table aliases specify the tables in an evaluation context. The table aliases can be used to reference tables in rule conditions.</Parameter>
            <Parameter Name="REMOVE_TABLE_ALIASES">If TRUE and table_aliases is NULL, then the procedure removes the existing table aliases for the evaluation context. If TRUE and table_aliases is non-NULL, then the procedure raises an error.If FALSE, then the procedure does not remove table aliases.</Parameter>
            <Parameter Name="VARIABLE_TYPES">If NULL and remove_variable_types is FALSE, then the procedure retains the variable types. If NULL and remove_variable_types is TRUE, then the procedure removes the existing variable types.If non-NULL, then the procedure replaces the existing variable types for the evaluation context with the specified variable types.</Parameter>
            <Parameter Name="REMOVE_VARIABLE_TYPES">If TRUE and variable_types is NULL, then the procedure removes the existing variable types for the evaluation context. If TRUE and variable_types is non-NULL, then the procedure raises an error.If FALSE, then the procedure does not remove the variable types.</Parameter>
            <Parameter Name="EVALUATION_FUNCTION">If NULL and remove_evaluation_function is FALSE, then the procedure retains the existing evaluation function. If NULL and remove_evaluation_function is TRUE, then the procedure removes the existing evaluation function.If non-NULL, then the procedure replaces the existing evaluation function for the evaluation context with the specified evaluation function.An evaluation function is an optional function that will be called to evaluate rules that use the evaluation context. It must have the same form as the DBMS_RULE.EVALUATE procedure. If the schema is not specified, then the current user is the default.See CREATE_EVALUATION_CONTEXT Procedurefor more information about evaluation functions.</Parameter>
            <Parameter Name="REMOVE_EVALUATION_FUNCTION">If TRUE and evaluation_function is NULL, then the procedure removes the existing evaluation function for the evaluation context. If TRUE and evaluation_function is non-NULL, then the procedure raises an error.If FALSE, then the procedure does not remove the evaluation function.</Parameter>
            <Parameter Name="EVALUATION_CONTEXT_COMMENT">If NULL and remove_eval_context_comment is FALSE, then the procedure retains the existing evaluation context comment. If NULL and remove_evaluation_function is TRUE, then the procedure removes the existing evaluation context comment.If non-NULL, then the procedure replaces the existing comment for the evaluation context with the specified comment.An evaluation context comment is an optional description of the rule evaluation context.</Parameter>
            <Parameter Name="REMOVE_EVAL_CONTEXT_COMMENT">If TRUE and evaluation_context_comment is NULL, then the procedure removes the existing comment for the evaluation context. If TRUE and evaluation_context_comment is non-NULL, then the procedure raises an error.If FALSE, then the procedure does not remove the evaluation context comment.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ALTER_RULE" ElementId="#i996965">
          <Description>Changes one or more aspects of the specified rule</Description>
          <Parameters>
            <Parameter Name="RULE_NAME">The name of the rule you are altering, specified as [schema_name.]rule_name. For example, to alter a rule named all_a in the hr schema, enter hr.all_a for this parameter. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="CONDITION">The condition to be associated with the rule.If non-NULL, then the procedure replaces the existing condition of the rule with the specified condition.</Parameter>
            <Parameter Name="EVALUATION_CONTEXT">An evaluation context name in the form [schema_name.]evaluation_context_name. If the schema is not specified, then the current user is the default.If non-NULL, then the procedure replaces the existing evaluation context of the rule with the specified evaluation context.</Parameter>
            <Parameter Name="REMOVE_EVALUATION_CONTEXT">If TRUE, then the procedure sets the evaluation context for the rule to NULL, which effectively removes the evaluation context from the rule.If FALSE, then the procedure retains any evaluation context for the specified rule.If the evaluation_context parameter is non-NULL, then this parameter should be set to FALSE.</Parameter>
            <Parameter Name="ACTION_CONTEXT">If non-NULL, then the procedure changes the action context associated with the rule. A rule action context is information associated with a rule that is interpreted by the client of the rules engine when the rule is evaluated.</Parameter>
            <Parameter Name="REMOVE_ACTION_CONTEXT">If TRUE, then the procedure sets the action context for the rule to NULL, which effectively removes the action context from the rule.If FALSE, then the procedure retains any action context for the specified rule.If the action_context parameter is non-NULL, then this parameter should be set to FALSE.</Parameter>
            <Parameter Name="RULE_COMMENT">If non-NULL, then the existing comment of the rule is replaced by the specified comment.</Parameter>
            <Parameter Name="REMOVE_RULE_COMMENT">If TRUE, then the procedure sets the comment for the rule to NULL, which effectively removes the comment from the rule.If FALSE, then the procedure retains any comment for the specified rule.If the rule_comment parameter is non-NULL, then this parameter should be set to FALSE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_EVALUATION_CONTEXT" ElementId="#i997052">
          <Description>Creates a rule evaluation context</Description>
          <Parameters>
            <Parameter Name="EVALUATION_CONTEXT_NAME">The name of the evaluation context you are creating, specified as [schema_name.]evaluation_context_name.For example, to create an evaluation context named dept_eval_context in the hr schema, enter hr.dept_eval_context for this parameter. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="TABLE_ALIASES">Table aliases that specify the tables in an evaluation context. The table aliases can be used to reference tables in rule conditions.</Parameter>
            <Parameter Name="VARIABLE_TYPES">A list of variables for the evaluation context</Parameter>
            <Parameter Name="EVALUATION_FUNCTION">An optional function that will be called to evaluate rules using the evaluation context. It must have the same form as the DBMS_RULE.EVALUATE procedure. If the schema is not specified, then the current user is the default.See "Usage Notes" for more information about the evaluation function.</Parameter>
            <Parameter Name="EVALUATION_CONTEXT_COMMENT">An optional description of the rule evaluation context.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_RULE" ElementId="#i997137">
          <Description>Creates a rule with the specified name</Description>
          <Parameters>
            <Parameter Name="RULE_NAME">The name of the rule you are creating, specified as [schema_name.]rule_name. For example, to create a rule named all_a in the hr schema, enter hr.all_a for this parameter. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="CONDITION">The condition to be associated with the rule. A condition evaluates to TRUE or FALSE and can be any condition allowed in the WHERE clause of a SELECT statement. For example, the following is a valid rule condition:Ensure that the proper case is used for text in rule conditions.Note: Do not include the word "WHERE" in the condition.</Parameter>
            <Parameter Name="EVALUATION_CONTEXT">An optional evaluation context name in the form [schema_name.]evaluation_context_name, which is associated with the rule. If the schema is not specified, then the current user is the default.If evaluation_context is not specified, then the rule inherits the evaluation context from its rule set.</Parameter>
            <Parameter Name="ACTION_CONTEXT">The action context associated with the rule. A rule action context is information associated with a rule that is interpreted by the client of the rules engine when the rule is evaluated.</Parameter>
            <Parameter Name="RULE_COMMENT">An optional description of the rule</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_RULE_SET" ElementId="#CDEIHAAB">
          <Description>Creates a rule set with the specified name</Description>
          <Parameters>
            <Parameter Name="RULE_SET_NAME">The name of the rule set you are creating, specified as [schema_name.]rule_set_name. For example, to create a rule set named apply_rules in the hr schema, enter hr.apply_rules for this parameter. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="EVALUATION_CONTEXT">An optional evaluation context name in the form [schema_name.]evaluation_context_name, which applies to all rules in the rule set that are not associated with an evaluation context explicitly. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="RULE_SET_COMMENT">An optional description of the rule set</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_EVALUATION_CONTEXT" ElementId="#i1005236">
          <Description>Drops the rule evaluation context with the specified name</Description>
          <Parameters>
            <Parameter Name="EVALUATION_CONTEXT_NAME">The name of the evaluation context you are dropping, specified as [schema_name.]evaluation_context_name.For example, to drop an evaluation context named dept_eval_context in the hr schema, enter hr.dept_eval_context for this parameter. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="FORCE">If TRUE, then the procedure removes the rule evaluation context from all rules and rule sets that use it.If FALSE and no rules or rule sets use the rule evaluation context, then the procedure drops the rule evaluation context.If FALSE and one or more rules or rule sets use the rule evaluation context, then the procedure raises an exception.Caution: Setting force to TRUE can result in rules and rule sets that do not have an evaluation context. If neither a rule nor the rule set it is in has an evaluation context, and no evaluation context was specified for the rule by the ADD_RULE procedure, then the rule cannot be evaluated.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_RULE" ElementId="#CDEDDDCH">
          <Description>Drops the rule with the specified name</Description>
          <Parameters>
            <Parameter Name="RULE_NAME">The name of the rule you are dropping, specified as [schema_name.]rule_name. For example, to drop a rule named all_a in the hr schema, enter hr.all_a for this parameter. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="FORCE">If TRUE, then the procedure removes the rule from all rule sets that contain it.If FALSE and no rule sets contain the rule, then the procedure drops the rule.If FALSE and one or more rule sets contain the rule, then the procedure raises an exception.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_RULE_SET" ElementId="#i997321">
          <Description>Drops the rule set with the specified name</Description>
          <Parameters>
            <Parameter Name="RULE_SET_NAME">The name of the rule set you are dropping, specified as [schema_name.]rule_set_name. For example, to drop a rule set named apply_rules in the hr schema, enter hr.apply_rules for this parameter. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="DELETE_RULES">If TRUE, then the procedure drops any rules that are in the rule set. If any of the rules in the rule set are also in another rule set, then these rules are not dropped.If FALSE, then the procedure does not drop the rules in the rule set.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GRANT_OBJECT_PRIVILEGE" ElementId="#i997359">
          <Description>Grants the specified object privilege on the specified object to the specified user or role</Description>
          <Parameters>
            <Parameter Name="PRIVILEGE">The name of the object privilege to grant to the grantee on the object. See "Usage Notes" for the available object privileges.</Parameter>
            <Parameter Name="OBJECT_NAME">The name of the object for which you are granting the privilege to the grantee, specified as [schema_name.]object_name. For example, to grant the privilege on a rule set named apply_rules in the hr schema, enter hr.apply_rules for this parameter. If the schema is not specified, then the current user is the default. The object must be an existing rule, rule set, or evaluation context.</Parameter>
            <Parameter Name="GRANTEE">The name of the user or role for which the privilege is granted. The specified user cannot be the owner of the object.</Parameter>
            <Parameter Name="GRANT_OPTION">If TRUE, then the specified user or users granted the specified privilege can grant this privilege to others.If FALSE, then the specified user or users granted the specified privilege cannot grant this privilege to others.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GRANT_SYSTEM_PRIVILEGE" ElementId="#i997477">
          <Description>Grants the specified system privilege to the specified user or role</Description>
          <Parameters>
            <Parameter Name="PRIVILEGE">The name of the system privilege to grant to the grantee.</Parameter>
            <Parameter Name="GRANTEE">The name of the user or role for which the privilege is granted</Parameter>
            <Parameter Name="GRANT_OPTION">If TRUE, then the specified user or users granted the specified privilege can grant the system privilege to others.If FALSE, then the specified user or users granted the specified privilege cannot grant the system privilege to others.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVE_RULE" ElementId="#i997608">
          <Description>Removes the specified rule from the specified rule set</Description>
          <Parameters>
            <Parameter Name="RULE_NAME">The name of the rule you are removing from the rule set, specified as [schema_name.]rule_name. For example, to remove a rule named all_a in the hr schema, enter hr.all_a for this parameter. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="RULE_SET_NAME">The name of the rule set from which you are removing the rule, specified as [schema_name.]rule_set_name. For example, to remove the rule from a rule set named apply_rules in the hr schema, enter hr.apply_rules for this parameter. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="EVALUATION_CONTEXT_NAME">The name of the evaluation context associated with the rule you are removing, specified as [schema_name.]evaluation_context_name. For example, to specify an evaluation context named dept_eval_context in the hr schema, enter hr.dept_eval_context for this parameter. If the schema is not specified, then the current user is the default.If an evaluation context was specified for the rule you are removing when you added the rule to the rule set using the ADD_RULE procedure, then specify the same evaluation context. If you added the same rule more than once with different evaluation contexts, then specify the rule with the evaluation context you want to remove. If you specify an evaluation context that is not associated with the rule, then the procedure raises an error.Specify NULL if you did not specify an evaluation context when you added the rule to the rule set. If you specify NULL and there are one or more evaluation contexts associated with the rule, then the procedure raises an error.</Parameter>
            <Parameter Name="ALL_EVALUATION_CONTEXTS">If TRUE, then the procedure removes the rule from the rule set with all of its associated evaluation contexts.If FALSE, then the procedure only removes the rule with the specified evaluation context.This parameter is relevant only if the same rule is added more than once to the rule set with different evaluation contexts.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REVOKE_OBJECT_PRIVILEGE" ElementId="#i997660">
          <Description>Revokes the specified object privilege on the specified object from the specified user or role</Description>
          <Parameters>
            <Parameter Name="PRIVILEGE">The name of the object privilege on the object to revoke from the revokee. See GRANT_OBJECT_PRIVILEGE Procedure for a list of the object privileges.</Parameter>
            <Parameter Name="OBJECT_NAME">The name of the object for which you are revoking the privilege from the revokee, specified as [schema_name.]object_name. For example, to revoke an object privilege on a rule set named apply_rules in the hr schema, enter hr.apply_rules for this parameter. If the schema is not specified, then the current user is the default. The object must be an existing rule, rule set, or evaluation context.</Parameter>
            <Parameter Name="REVOKEE">The name of the user or role from which the privilege is revoked. The user who owns the object cannot be specified.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REVOKE_SYSTEM_PRIVILEGE" ElementId="#i997700">
          <Description>Revokes the specified system privilege from the specified user or role</Description>
          <Parameters>
            <Parameter Name="PRIVILEGE">The name of the system privilege to revoke from the revokee. See GRANT_SYSTEM_PRIVILEGE Procedure for a list of the system privileges.</Parameter>
            <Parameter Name="REVOKEE">The name of the user or role from which the privilege is revoked</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_SERVER_ALERT" Url="http://docs.oracle.com/database/121/ARPLS/d_server_alert.htm">
      <Description>The DBMS_SERVER_ALERT package enables you to configure the Oracle Database server to issue an alert when a threshold for a specified server metric has been violated. You can configure both warning and critical thresholds for a large number of predefined metrics.</Description>
      <SubPrograms>
        <SubProgram Name="EXPAND_MESSAGE" ElementId="#CHDDEFDJ">
          <Description>Expands alert messages</Description>
          <Parameters>
            <Parameter Name="USER_LANGUAGE">The language of the current session.</Parameter>
            <Parameter Name="MESSAGE_ID">Id of the alert message</Parameter>
            <Parameter Name="ARGUMENT_1">The first argument in the alert message.</Parameter>
            <Parameter Name="ARGUMENT_2">The second argument in the alert message.</Parameter>
            <Parameter Name="ARGUMENT_3">The third argument in the alert message.</Parameter>
            <Parameter Name="ARGUMENT_4">The fourth argument in the alert message.</Parameter>
            <Parameter Name="ARGUMENT_5">The fifth argument in the alert message.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_THRESHOLD" ElementId="#CHDHIEAH">
          <Description>Gets the current threshold settings for a specified metric</Description>
          <Parameters>
            <Parameter Name="METRICS_ID">The internal name of the metric. See "Supported Metrics".</Parameter>
            <Parameter Name="WARNING_OPERATOR">The operator for the compa3ring the actual value with the warning threshold.</Parameter>
            <Parameter Name="WARNING_VALUE">The warning threshold value.</Parameter>
            <Parameter Name="CRITICAL_OPERATOR">The operator for the comparing the actual value with the critical threshold.</Parameter>
            <Parameter Name="CRITICAL_VALUE">The critical threshold value.</Parameter>
            <Parameter Name="OBSERVATION_PERIOD">The period at which the metric values are computed and verified against the threshold setting.</Parameter>
            <Parameter Name="CONSECUTIVE_OCCURRENCES">The number of observation periods the metric value should violate the threshold value before the alert is issued.</Parameter>
            <Parameter Name="INSTANCE_NAME">The name of the instance for which the threshold is set. This is NULL for database-wide alerts. In cases in which this parameter is not NULL, this should be set to one of the INSTANCE_NAME values found in the GV$INSTANCE View.</Parameter>
            <Parameter Name="OBJECT_TYPE">Either OBJECT_TYPE_SYSTEM or OBJECT_TYPE_SERVICE.</Parameter>
            <Parameter Name="OBJECT_NAME">The name of the object.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_THRESHOLD" ElementId="#CHDFHEHB">
          <Description>Sets the warning and critical thresholds for a specified metric</Description>
          <Parameters>
            <Parameter Name="METRICS_ID">The internal name of the metric. See "Supported Metrics".</Parameter>
            <Parameter Name="WARNING_OPERATOR">The operator for the comparing the actual value with the warning threshold (such as OPERATOR_GE). See "Relational Operators".</Parameter>
            <Parameter Name="WARNING_VALUE">The warning threshold value. This is NULL if no warning threshold is set. A list of values may be specified for OPERATOR_CONTAINS.</Parameter>
            <Parameter Name="CRITICAL_OPERATOR">The operator for the comparing the actual value with the critical threshold. See "Relational Operators".</Parameter>
            <Parameter Name="CRITICAL_VALUE">The critical threshold value. This is NULL if not set. A list of values may be specified for OPERATOR_CONTAINS.</Parameter>
            <Parameter Name="OBSERVATION_PERIOD">The period at which the metric values are computed and verified against the threshold setting. The valid range is 1 to 60 minutes.</Parameter>
            <Parameter Name="CONSECUTIVE_OCCURRENCES">The number of observation periods the metric value should violate the threshold value before the alert is issued.</Parameter>
            <Parameter Name="INSTANCE_NAME">The name of the instance for which the threshold is set. This is NULL for database-wide alerts.</Parameter>
            <Parameter Name="OBJECT_TYPE">See "Object Types".</Parameter>
            <Parameter Name="OBJECT_NAME">The name of the object. This is NULL for SYSTEM.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_SERVICE" Url="http://docs.oracle.com/database/121/ARPLS/d_serv.htm">
      <Description>The DBMS_SERVICE package lets you create, delete, activate, and deactivate services for a single instance.</Description>
      <SubPrograms>
        <SubProgram Name="CREATE_SERVICE" ElementId="#i1001480">
          <Description>Creates service</Description>
          <Parameters>
            <Parameter Name="SERVICE_NAME">Name of the service, limited to 64 characters in the Data Dictionary</Parameter>
            <Parameter Name="NETWORK_NAME">Network name of the service as used in SQLNet connect descriptors for client connections. This is limited to the NET service_names character set (see Oracle Database Net Services Reference).</Parameter>
            <Parameter Name="PARAMETER_ARRAY">Associative array with name-value pairs of the service attributes. Supported names:goaldtpaq_ha_notificationsfailover_methodfailover_typefailover_retriesfailover_delayclb_goaleditioncommit_outcomeretention_timeoutreplay_initiation_timeoutsession_state_consistencysql_translation_profile</Parameter>
            <Parameter Name="GOAL">Workload management goal directive for the service. Valid values:DBMS_SERVICE.GOAL_SERVICE_TIMEDBMS_SERVICE.GOAL_THROUGHPUTDBMS_SERVICE.GOAL_NONE</Parameter>
            <Parameter Name="DTP">Declares the service to be for X/Open Distributed Transaction Processing (DTP) or any distributed transaction (especially XA)</Parameter>
            <Parameter Name="AQ_HA_NOTIFICATIONS">Determines whether Fast Application Notification (FAN) is enabled for OCI/OCCI/ODP. In Oracle Database12c, FAN uses Oracle Notification Services (ONS). This parameter is still used to enable FAN. FAN is recommended for all High Availability systems, and is on by default for Application Continuity</Parameter>
            <Parameter Name="FAILOVER_METHOD">Failover TYPE for the service for Application Continuity and TAF. If the failover_type is set to TRANSACTION on the service, this automatically sets COMMIT_OUTCOME to TRUE. JDBC Replay Driver uses the FAILOVER_TYPE service attribute setting of TRANSACTION for TRANSACTION failover. OCI uses the older settings of SELECT and SESSION. The server only accepts FAILOVER_METHOD = BASIC with the TRANSACTION setting.</Parameter>
            <Parameter Name="FAILOVER_TYPE">Failover TYPE for the service for Application Continuity and TAF.</Parameter>
            <Parameter Name="FAILOVER_RETRIES">Number of connection retries for Application Continuity and TAF. Using the failover_retries and failover_delay parameters, the failover can be delayed until the service is next available. This parameter is for connecting. It does not control the number of failovers, which is 3 for each incident for Application Continuity.</Parameter>
            <Parameter Name="FAILOVER_DELAY">Delay in seconds between connection retries for Application Continuity and TAF. The default is 10 seconds for Application Continuity. Do not use a 0-second delay if the service needs time to failover and register. Long delays are good for planned outages and to failover to Data Guard. Short delays work well with RAC when the service is already available.</Parameter>
            <Parameter Name="EDITION">If this argument has a non-NULL value, this provides the initial session edition for subsequent database connections using this service that do not specify an edition. If no value is specified, this argument has no effect.During service creation or modification, no validation is performed on this parameter.At connection time, if the connecting user does not have USE privilege on the edition, or the edition does not exist, this raises the error ORA-38802 (edition does not exist).</Parameter>
            <Parameter Name="COMMIT_OUTCOME">Determines whether transaction COMMIT outcome is accessible after the COMMIT has executed. While the database guarantees that COMMIT is durable, this ensures that the outcome of the COMMIT is durable. Applications use the feature to probe the status of the commit last executed after an outage, and is available to applications to determine an outcome. Note:Invoking the GET_LTXID_OUTCOME Procedure of the DBMS_APP_CONT package requires that the commit_outcome attribute be set.commit_outcome has no effect on active Data Guard and read-only databases.commit_outcome is only allowed on the database service and on user-defined database services</Parameter>
            <Parameter Name="RETENTION_TIMEOUT">Used in conjunction with commit_outcome, it determines the amount of time (in seconds) that the COMMIT_OUTCOME is retained. Default is 24 hours (86400). Maximum value is 30 days (2592000).</Parameter>
            <Parameter Name="REPLAY_INITIATION_TIMEOUT">For Application Continuity, replay_initiation_timeout is the difference between the time of original execution of first operation of a request, and the time that the replay is ready to start after a successful reconnect. Replay initiation time is measured from the time that the request was originally submitted until the time that replay has connected and is ready to replay. When replay is expected, keep this value high. Default is 900 seconds.</Parameter>
            <Parameter Name="SESSION_STATE_CONSISTENCY">Describes how nontransactional is changed during a request (values are DYNAMIC or STATIC). This parameter is considered only if failover_type is set to TRANSACTION for Application Continuity. Examples of session state are NLS settings, optimizer preferences, event settings, PL/SQL global variables, temporary tables, advanced queues, LOBs, and result cache. If these values change after the request starts, set to DYNAMIC (default). Almost all applications should use DYNAMIC mode. If you are unsure, use DYNAMIC mode.</Parameter>
            <Parameter Name="SQL_TRANSLATION_NAME">Name of SQL translation unit</Parameter>
            <Parameter Name="CLB_GOAL">Method used for Connection Load Balancing (see Table 142-2, "Constants Used in Connection Balancing Goal Arguments")</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_SERVICE" ElementId="#i1002210">
          <Description>Deletes service</Description>
          <Parameters>
            <Parameter Name="SERVICE_NAME">Name of the service, limited to 64 characters in the Data Dictionary</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DISCONNECT_SESSION" ElementId="#i1001968">
          <Description>Disconnects sessions running under this service</Description>
          <Parameters>
            <Parameter Name="SERVICE_NAME">Name of the service, limited to 64 characters in the Data Dictionary</Parameter>
            <Parameter Name="DISCONNECT_OPTION">The options, package constants, are expressed as NUMBER:POST_TRANSACTION = 0: session disconnects after the current transaction commits or rolls backIMMEDIATE = 1: session disconnects immediatelyNOREPLAY = 2: session disconnects immediately and be flagged to not be replayed by application continuity, that is IMMEDIATE and NOREPLAY togetherNote: IMMEDIATE or POST_TRANSACTION and NOREPLAY is automatically translated as 1 or 0 or 2 respectively. However, passing a string literal (quoted using either the ' or " characters, such as "IMMEDIATE" or 'POST_TRANSACTION' or 'NOREPLAY') raises an error.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MODIFY_SERVICE" ElementId="#BABHGBBA">
          <Description>Modifies service</Description>
          <Parameters>
            <Parameter Name="SERVICE_NAME">Name of the service, limited to 64 characters in the Data Dictionary</Parameter>
            <Parameter Name="PARAMETER_ARRAY">Associative array with name/value pairs of the service attributes. Supported names:goaldtpaq_ha_notificationsfailover_methodfailover_typefailover_retriesfailover_delayeditioncommit_outcomeretention_timeoutreplay_initiation_timeoutsession_state_consistencysql_translation_name</Parameter>
            <Parameter Name="GOAL">Workload management goal directive for the service. Valid values:DBMS_SERVICE.GOAL_SERVICE_TIMEDBMS_SERVICE.GOAL_THROUGHPUTDBMS_SERVICE.GOAL_NONE</Parameter>
            <Parameter Name="DTP">Declares the service to be for X/Open Distributed Transaction Processing (DTP) or any distributed transaction (especially XA)</Parameter>
            <Parameter Name="AQ_HA_NOTIFICATIONS">Determines whether Fast Application Notification (FAN) is enabled for OCI/OCCI/ODP. In Oracle Database12c, FAN uses Oracle Notification Services (ONS). This parameter is still used to enable FAN. FAN is recommended for all High Availability systems, and is on by default for Application Continuity</Parameter>
            <Parameter Name="FAILOVER_METHOD">Failover TYPE for the service for Application Continuity and TAF. If the failover_type is set to TRANSACTION on the service, this automatically sets COMMIT_OUTCOME to TRUE. JDBC Replay Driver uses the FAILOVER_TYPE service attribute setting of TRANSACTION for TRANSACTION failover. OCI uses the older settings of SELECT and SESSION. The server only accepts FAILOVER_METHOD = BASIC with the TRANSACTION setting.</Parameter>
            <Parameter Name="FAILOVER_TYPE">Failover TYPE for the service for Application Continuity and TAF.</Parameter>
            <Parameter Name="FAILOVER_RETRIES">Number of connection retries for Application Continuity and TAF. Using the failover_retries and failover_delay parameters, the failover can be delayed until the service is next available. This parameter is for connecting. It does not control the number of failovers, which is 3 for each incident for Application Continuity.</Parameter>
            <Parameter Name="FAILOVER_DELAY">Delay in seconds between connection retries for Application Continuity and TAF. The default is 10 seconds for Application Continuity. Do not use a 0-second delay if the service needs time to failover and register. Long delays are good for planned outages and to failover to Data Guard. Short delays work well with RAC when the service is already available.</Parameter>
            <Parameter Name="EDITION">If this argument has a non-NULL value, this provides the initial session edition for subsequent database connections using this service that do not specify an edition. If no value is specified, this argument has no effect.During service creation or modification, no validation is performed on this parameter.At connection time, if the connecting user does not have USE privilege on the edition, or the edition does not exist, this raises the error ORA-38802 (edition does not exist).</Parameter>
            <Parameter Name="COMMIT_OUTCOME">Determines whether transaction COMMIT outcome is accessible after the COMMIT has executed. While the database guarantees that COMMIT is durable, this ensures that the outcome of the COMMIT is durable.Applications use the feature to probe the status of the commit last executed after an outage, and is available to applications to determine an outcome. Note:Invoking the GET_LTXID_OUTCOME Procedure of the DBMS_APP_CONT package requires that the commit_outcome attribute be set.commit_outcome has no effect on active Data Guard and read-only databases.commit_outcome is allowed only on user-defined database services</Parameter>
            <Parameter Name="RETENTION_TIMEOUT">Used in conjunction with commit_outcome, it determines the amount of time (in seconds) that the COMMIT_OUTCOME is retained. Default is 24 hours (86400). Maximum value is 30 days (2592000).</Parameter>
            <Parameter Name="REPLAY_INITIATION_TIMEOUT">For Application Continuity, replay_initiation_timeout is the difference between the time of original execution of first operation of a request, and the time that the replay is ready to start after a successful reconnect. Replay initiation time is measured from the time that the request was originally submitted until the time that replay has connected and is ready to replay. When replay is expected, keep this value high. Default is 900 seconds.</Parameter>
            <Parameter Name="SESSION_STATE_CONSISTENCY">Describes how nontransactional is changed during a request (values are DYNAMIC or STATIC). This parameter is considered only if failover_type is set to TRANSACTION for Application Continuity. Examples of session state are NLS settings, optimizer preferences, event settings, PL/SQL global variables, temporary tables, advanced queues, LOBs, and result cache. If these values change after the request starts, set to DYNAMIC (default). Almost all applications should use DYNAMIC mode. If you are unsure, use DYNAMIC mode.</Parameter>
            <Parameter Name="SQL_TRANSLATION_NAME">Name of SQL translation unit</Parameter>
            <Parameter Name="MODIFY_EDITION">If TRUE, the edition service attribute is updated to use the edition argument value. If FALSE or NULL, the edition attribute is not updated.</Parameter>
            <Parameter Name="CLB_GOAL">Method used for Connection Load Balancing (see Table 142-2, "Constants Used in Connection Balancing Goal Arguments")</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="START_SERVICE" ElementId="#i1002164">
          <Description>Activates service</Description>
          <Parameters>
            <Parameter Name="SERVICE_NAME">Name of the service limited to 64 characters in the Data Dictionary</Parameter>
            <Parameter Name="INSTANCE_NAME">Name of the instance where the service must be activated (optional). NULL results in starting of the service on the local instance. In single instance, this can only be the current instance or NULL. Specify DBMS_SERVICE.ALL_INSTANCES to start the service on all configured instances.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="STOP_SERVICE" ElementId="#i1002724">
          <Description>Stops service</Description>
          <Parameters>
            <Parameter Name="SERVICE_NAME">Name of the service limited to 64 characters in the Data Dictionary</Parameter>
            <Parameter Name="INSTANCE_NAME">Name of the instance where the service must be stopped (optional). NULL results in stopping of the service locally. In single instance, this can only be the current instance or NULL. The default in Oracle RAC and exclusive case is NULL. Specify DBMS_SERVICE.ALL_INSTANCES to stop the service on all configured instances.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_SESSION" Url="http://docs.oracle.com/database/121/ARPLS/d_sessio.htm">
      <Description>This package provides access to SQL ALTER SESSION and SET ROLE statements, and other session information, from PL/SQL. You can use DBMS_SESSION to set preferences and security levels.</Description>
      <SubPrograms>
        <SubProgram Name="CLEAR_ALL_CONTEXT" ElementId="#i1009975">
          <Description>Clears all context information</Description>
          <Parameters>
            <Parameter Name="NAMESPACE">The namespace where the application context information is to be cleared. Required.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CLEAR_CONTEXT" ElementId="#i1009938">
          <Description>Clears the context</Description>
          <Parameters>
            <Parameter Name="NAMESPACE">Namespace in which the application context is to be cleared. Required.For a session-local context, namespace must be specified. If namespace is defined as Session Local Context, then client_identifier is optional since it is only associated with a globally accessed context.For a globally accessed context, namespace must be specified. NULL is a valid value for client_identifier because a session with no identifier set can see a context that looks like the (namespace, attribute, value, username, null) set using SET_CONTEXT.</Parameter>
            <Parameter Name="CLIENT_IDENTIFIER">Applies to a global context and is optional for other types of contexts; 64-byte maximum</Parameter>
            <Parameter Name="ATTRIBUTE">Specific attribute in the namespace to be cleared. Optional. the default is NULL. If you specify attribute as NULL, then (namespace, attribute, value) for that namespace are cleared from the session. If attribute is not specified, then all context information that has the namespace and client_identifier arguments is cleared.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CLEAR_IDENTIFIER" ElementId="#i1010000">
          <Description>Clears the identifier</Description>
        </SubProgram>
        <SubProgram Name="CLOSE_DATABASE_LINK" ElementId="#i1011038">
          <Description>Closes database link</Description>
          <Parameters>
            <Parameter Name="DBLINK">Name of the database link to close</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="FREE_UNUSED_USER_MEMORY" ElementId="#i1010058">
          <Description>Lets you reclaim unused memory after performing operations requiring large amounts of memory</Description>
        </SubProgram>
        <SubProgram Name="GET_PACKAGE_MEMORY_UTILIZATION" ElementId="#CHDEGEAJ">
          <Description>Describes static package memory usage</Description>
          <Parameters>
            <Parameter Name="OWNER_NAME">Owner of package</Parameter>
            <Parameter Name="UNIT_NAME">Name of package</Parameter>
            <Parameter Name="UNIT_TYPES">Value of the type# columns of the dictionary table obj$</Parameter>
            <Parameter Name="USED_AMOUNTS">Amount of allocated memory specified in bytes</Parameter>
            <Parameter Name="FREE_AMOUNTS">Amount of available memory specified in bytes</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IS_ROLE_ENABLED" ElementId="#i1010291">
          <Description>Determines if the named role is enabled for the session.</Description>
          <Parameters>
            <Parameter Name="ROLENAME">Name of the role.\</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IS_SESSION_ALIVE" ElementId="#i1010302">
          <Description>Determines if the specified session is active</Description>
          <Parameters>
            <Parameter Name="UNIQUEID">Unique ID of the session: This is the same one as returned by UNIQUE_SESSION_ID.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LIST_CONTEXT" ElementId="#i1010363">
          <Description>Returns a list of active namespace and context for the current session</Description>
          <Parameters>
            <Parameter Name="LIST">Buffer to store a list of application context set in the current session</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MODIFY_PACKAGE_STATE" ElementId="#CEGIICCC">
          <Description>Used to perform various actions (as specified by the action_flags parameter) on the session state of all PL/SQL program units active in the session</Description>
          <Parameters>
            <Parameter Name="ACTION_FLAGS">Bit flags that determine the action taken on PL/SQL program units:DBMS_SESSION.FREE_ALL_RESOURCES (or 1)—frees all memory associated with each of the previously run PL/SQL programs from the session. Clears the current values of any package globals and closes cached cursors. On subsequent use, the PL/SQL program units are reinstantiated and package globals are reinitialized. Invoking MODIFY_PACKAGE_STATE with the DBMS_SESSION.FREE_ALL_RESOURCES parameter provides functionality identical to the DBMS_SESSION.RESET_PACKAGE() interface.DBMS_SESSION.REINITIALIZE (or 2)—reinitializes packages without actually being freed and recreated from scratch. Instead the package memory is reused. In terms of program semantics, the DBMS_SESSION.REINITIALIZE flag is similar to the DBMS_SESSION.FREE_ALL_RESOURCES flag in that both have the effect of reinitializing all packages.However, DBMS_SESSION.REINITIALIZE should exhibit better performance than the DBMS_SESSION.FREE_ALL_RESOURCES option because:Packages are reinitialized without actually being freed and recreated from scratch. Instead the package memory gets reused.Any open cursors are closed, semantically speaking. However, the cursor resource is not actually freed. It is simply returned to the PL/SQL cursor cache. The cursor cache is not flushed. Hence, cursors corresponding to frequently accessed static SQL in PL/SQL remains cached in the PL/SQL cursor cache and the application does not incur the overhead of opening, parsing, and closing a new cursor for those statements on subsequent use.The session memory for PL/SQL modules without global state (such as types, stored-procedures) are not freed and recreated.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SESSION_TRACE_DISABLE" ElementId="#CEGJHGDB">
          <Description>Resets the session-level SQL trace for the session from which it was called.</Description>
        </SubProgram>
        <SubProgram Name="SESSION" ElementId="#i1010518">
          <Description>Enables session-level SQL trace for the invoking session</Description>
        </SubProgram>
        <SubProgram Name="RESET_PACKAGE" ElementId="#i1010767">
          <Description>De-instantiates all packages in the session</Description>
        </SubProgram>
        <SubProgram Name="SET_CONTEXT" ElementId="#i1010942">
          <Description>Sets or resets the value of a context attribute</Description>
          <Parameters>
            <Parameter Name="NAMESPACE">Namespace of the application context to be set, limited to 30 bytes</Parameter>
            <Parameter Name="ATTRIBUTE">Attribute of the application context to be set, limited to 30 bytes</Parameter>
            <Parameter Name="VALUE">Value of the application context to be set, limited to 4 kilobytes.</Parameter>
            <Parameter Name="USERNAME">Database username attribute of the application context.Default: NULL</Parameter>
            <Parameter Name="CLIENT_ID">Application-specific client_id attribute of the application context (64-byte maximum).Default: NULL</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_EDITION_DEFERRED" ElementId="#CHDGADDD">
          <Description>Requests a switch to the specified edition</Description>
          <Parameters>
            <Parameter Name="EDITION">Name of the edition to which to switch. The contents of the string are processed as a SQL identifier; double quotation marks must surround the remainder of the string if special characters or lower case characters are present in the edition's actual name and, if double quotation marks are not used, the contents are set in uppercase. The caller must have USE privilege on the named edition.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_IDENTIFIER" ElementId="#i996935">
          <Description>Sets the identifier</Description>
          <Parameters>
            <Parameter Name="CLIENT_ID">Case-sensitive application-specific identifier of the current database session</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_NLS" ElementId="#i1010906">
          <Description>Sets Globalization Support (NLS)</Description>
          <Parameters>
            <Parameter Name="PARAM">Globalization Support parameter. The parameter name must begin with 'NLS'.</Parameter>
            <Parameter Name="VALUE">Parameter value.If the parameter is a text literal, then it needs embedded single-quotes. For example, "set_nls ('nls_date_format','''DD-MON-YY''')".</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_ROLE" ElementId="#i997099">
          <Description>Sets role</Description>
          <Parameters>
            <Parameter Name="ROLE_CMD">Text is appended to "set role" and then run as SQL</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_SQL_TRACE" ElementId="#i997123">
          <Description>Turns tracing on or off</Description>
          <Parameters>
            <Parameter Name="SQL_TRACE">TRUE turns tracing on, FALSE turns tracing off</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SWITCH_CURRENT_CONSUMER_GROUP" ElementId="#i997666">
          <Description>Facilitates changing the current resource consumer group of a user's current session</Description>
          <Parameters>
            <Parameter Name="NEW_CONSUMER_GROUP">Name of consumer group to which you want to switch</Parameter>
            <Parameter Name="OLD_CONSUMER_GROUP">Name of the consumer group from which you just switched out</Parameter>
            <Parameter Name="INITIAL_GROUP_ON_ERROR">If TRUE, then sets the current consumer group of the caller to his/her initial consumer group in the event of an error</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UNIQUE_SESSION_ID" ElementId="#i1011002">
          <Description>Returns an identifier that is unique for all sessions currently connected to this database</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_SHARED_POOL" Url="http://docs.oracle.com/database/121/ARPLS/d_shared_pool.htm">
      <Description>The DBMS_SHARED_POOL package provides access to the shared pool, which is the shared memory area where cursors and PL/SQL objects are stored. DBMS_SHARED_POOL enables you to display the sizes of objects in the shared pool, and mark them for keeping or not-keeping in order to reduce memory fragmentation.</Description>
      <SubPrograms>
        <SubProgram Name="ABORTED_REQUEST_THRESHOLD" ElementId="#i999181">
          <Description>Sets the aborted request threshold for the shared pool</Description>
          <Parameters>
            <Parameter Name="THRESHOLD_SIZE">Size, in bytes, of a request which does not try to free unpinned (not "unkeep-ed") memory within the shared pool. The range of threshold_size is 5000 to ~2 GB inclusive.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="KEEP" ElementId="#i999221">
          <Description>Keeps an object in the shared pool</Description>
          <Parameters>
            <Parameter Name="NAME">Name of the object to keep.The value for this identifier is the concatenation of the address and hash_value columns from the v$sqlarea view. This is displayed by the SIZES procedure.Currently, TABLE and VIEW objects may not be kept.</Parameter>
            <Parameter Name="FLAG">(Optional) If this is not specified, then the package assumes that the first parameter is the name of a package/procedure/function and resolves the name.Set to 'P' or 'p' to fully specify that the input is the name of a package/procedure/function.Set to 'T' or 't' to specify that the input is the name of a type.Set to 'R' or 'r' to specify that the input is the name of a trigger.Set to 'Q' or 'q' to specify that the input is the name of a sequence.In case the first argument is a cursor address and hash-value, the parameter should be set to any character except 'P' or 'p' or 'Q' or 'q' or 'R' or 'r' or 'T' or 't'.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MARKHOT" ElementId="#CHDCBEBB">
          <Description>Marks a library cache object as a hot object</Description>
          <Parameters>
            <Parameter Name="SCHEMA">User name or the schema to which the object belongs</Parameter>
            <Parameter Name="OBJNAME">Name of the object</Parameter>
            <Parameter Name="NAMESPACE">Number indicating the library cache namespace in which the object is to be searched. Views, such as USER_OBJECTS and DBA_OBJECTS, reflect the namespace as a number column, as do most dictionary tables such as OBJ$.</Parameter>
            <Parameter Name="GLOBAL">If TRUE (default), mark the object hot on all Oracle RAC instances</Parameter>
            <Parameter Name="HASH">16-byte hash value for the object</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PURGE" ElementId="#CIHIGHAI">
          <Description>Purges the named object or specified heap(s) of the object</Description>
          <Parameters>
            <Parameter Name="NAME">Name of the object to purge.The value for this identifier is the concatenation of the address and hash_value columns from the v$sqlarea view. This is displayed by the SIZES procedure.Currently, TABLE and VIEW objects may not be purged.</Parameter>
            <Parameter Name="FLAG">(Optional) If this is not specified, then the package assumes that the first parameter is the name of a package/procedure/function and resolves the name.Set to 'P' or 'p' to fully specify that the input is the name of a package/procedure/function.Set to 'T' or 't' to specify that the input is the name of a type.Set to 'R' or 'r' to specify that the input is the name of a trigger.Set to 'Q' or 'q' to specify that the input is the name of a sequence.In case the first argument is a cursor address and hash-value, the parameter should be set to any character except 'P' or 'p' or 'Q' or 'q' or 'R' or 'r' or 'T' or 't'.</Parameter>
            <Parameter Name="HEAPS">Heaps to be purged. For example, if heap 0 and heap 6 are to be purged:1&lt;&lt;0 | 1&lt;&lt;6 =&gt; hex 0x41 =&gt; decimal 65, so specify heaps =&gt;65.Default is 1, that is, heap 0 which means the whole object would be purged</Parameter>
            <Parameter Name="SCHEMA">User name or the schema to which the object belongs</Parameter>
            <Parameter Name="OBJNAME">Name of the object to purge</Parameter>
            <Parameter Name="NAMESPACE">Parameter is a number indicating the library cache namespace in which the object is to be searched</Parameter>
            <Parameter Name="HASH">16-byte hash value for the object</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SIZES" ElementId="#BHBFDAEA">
          <Description>Shows objects in the shared pool that are larger than the specified size</Description>
          <Parameters>
            <Parameter Name="MINSIZE">Size, in kilobytes, over which an object must be occupying in the shared pool, in order for it to be displayed.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UNKEEP" ElementId="#i996877">
          <Description>Unkeeps the named object</Description>
          <Parameters>
            <Parameter Name="NAME">Name of the object to unkeep. See description of the name object for the KEEP procedure.</Parameter>
            <Parameter Name="FLAG">See description of the flag parameter for the KEEP procedure.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UNMARKHOT" ElementId="#CIHIJAHG">
          <Description>Unmarks a library cache object as a hot object</Description>
          <Parameters>
            <Parameter Name="SCHEMA">User name or the schema to which the object belongs</Parameter>
            <Parameter Name="OBJNAME">Name of the object</Parameter>
            <Parameter Name="NAMESPACE">Number indicating the library cache namespace in which the object is to be searched</Parameter>
            <Parameter Name="GLOBAL">If TRUE (default), unmark the object hot on all Oracle RAC instances</Parameter>
            <Parameter Name="HASH">16-byte hash value for the object</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_SCHEDULER" Url="http://docs.oracle.com/database/121/ARPLS/d_sched.htm">
      <Description>The DBMS_SCHEDULER package provides a collection of scheduling functions and procedures that can be called from any PL/SQL program.</Description>
      <SubPrograms>
        <SubProgram Name="ADD_EVENT_QUEUE_SUBSCRIBER" ElementId="#AddEventQSubscr93">
          <Description>Adds a user as a subscriber to the Scheduler event queue SYS.SCHEDULER$_EVENT_QUEUE</Description>
          <Parameters>
            <Parameter Name="SUBSCRIBER_NAME">Name of the Oracle Streams Advanced Queuing (AQ) agent to be used to subscribe to the Scheduler event queue. If NULL, an agent is created and assigned the user name of the calling user.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADD_GROUP_MEMBER" ElementId="#BABFFDCH">
          <Description>Adds one or more members to an existing group</Description>
          <Parameters>
            <Parameter Name="GROUP_NAME">The name of the group.</Parameter>
            <Parameter Name="MEMBER">A comma-separated list of members to add to the group. Members must match the group type. A group of the same type can be a member. The Scheduler immediately expands the included group name into its list of members.An error is returned if any of the members do not exist. A member that is already in the group is skipped, and no error is generated.The keyword LOCAL can be included as a member for database destination or external destination groups. See the "CREATE_GROUP Procedure" for information about this keyword.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADD_JOB_EMAIL_NOTIFICATION" ElementId="#BABBFBGI">
          <Description>Adds e-mail notifications for a job for a list of recipients and a list of job state events</Description>
          <Parameters>
            <Parameter Name="JOB_NAME">Name of the job that e-mail notifications are added for. Cannot be NULL.</Parameter>
            <Parameter Name="RECIPIENTS">Comma-separated list of e-mail addresses to send notifications to. E-mail notifications for all listed events are sent to all recipients. Cannot be NULL.</Parameter>
            <Parameter Name="SENDER">e-mail address to use as the sender address (the From: address) in the e-mail header. If NULL or omitted, the e-mail address specified in the Scheduler attribute email_sender is used. See Oracle Database Administrator's Guide for more information on this Scheduler attribute.</Parameter>
            <Parameter Name="SUBJECT">The subject to use in the e-mail header. Table 140-15 describes the variables that you can include within this parameter. The Scheduler assigns values to these variables before sending the notification. If subject is omitted, the default subject is used. The default subject is the following text, where text enclosed in the '%' character represents a variable:</Parameter>
            <Parameter Name="BODY">The body of the e-mail message. Table 140-15 describes the variables that you can include within this parameter. The Scheduler assigns values to these variables before sending the notification. If body is omitted, the default body is used. The default body is the following text, where text enclosed in the '%' character represents a variable:</Parameter>
            <Parameter Name="EVENTS">Comma-separate list of job state events to send e-mail notifications for. Cannot be NULL. A notification is sent to all recipients if any of the listed events is raised. Table 140-78 lists the valid events for this parameter. If events is omitted, notifications are sent for the following default events:</Parameter>
            <Parameter Name="FILTER_CONDITION">Used to filter events to send e-mail notifications for. If NULL, all occurrences of the specified events cause e-mail notifications to be sent. filter_condition must be a boolean SQL WHERE clause that may refer to the :event bind variable. This bind variable is automatically bound to an object of type SCHEDULER$_EVENT_INFO that represents the raised event.For example, to send an e-mail notification only when the error number in an event is 600 or 700, use the following filter_condition:See "SCHEDULER$_EVENT_INFO Object Type".</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ALTER_CHAIN" ElementId="#CHDIAICJ">
          <Description>Alters specified steps of a chain</Description>
          <Parameters>
            <Parameter Name="CHAIN_NAME">The name of the chain to alter</Parameter>
            <Parameter Name="STEP_NAME">The name of the step or a comma-separated list of steps to alter. This cannot be NULL.</Parameter>
            <Parameter Name="ATTRIBUTE">The attribute of the steps to change. Must be one of the following:'PAUSE'If set to TRUE for a step, after the step has run, its state changes to PAUSED (and the completed attribute remains FALSE).If PAUSE is reset to FALSE for a paused chain step (using ALTER_RUNNING_CHAIN), the state is set to its completion state (SUCCEEDED, FAILED, or STOPPED) and the completed attribute is set to TRUE.Setting PAUSE has no effect on steps that have already run. This allows execution of a chain to be suspended after the execution of certain steps.'PAUSED_BEFORE'If set to TRUE for a step and if any of the rule conditions that start the step are true, then its state changes to PAUSED and the step does not run.If PAUSE_BEFORE is reset to FALSE for a chain step that has paused before starting (using ALTER_RUNNING_CHAIN), then the step starts running if any of the rule conditions that start the step are true.Setting PAUSE_BEFORE has no effect on steps that are running or have already run. This allows execution of a chain to be suspended before the execution of certain steps.'SKIP'If set to TRUE for a step, when the step condition is met, instead of being run, the step is treated as if it has immediately succeeded. Setting SKIP to TRUE has no effect for a step that is running, scheduled to run after a delay, or has already run. If SKIP is set TRUE for a step that PAUSE is also set for, when the step condition is met, the step immediately changes to state PAUSED.'RESTART_ON_FAILURE'If set to TRUE for a step and the step fails due to an application error, then the step is retried using the normal Scheduler retry mechanism (after 1 second, after 10 seconds, after 100 seconds, and so on, up to a maximum of 6 times). If all 6 retries fail (after about 30 hours), then the chain step is marked FAILED.If set to FALSE (the default), a failed chain step is immediately marked FAILED.'RESTART_ON_RECOVERY'If set to TRUE for a step and the step is stopped by a database shutdown, then the step is restarted when the database is recovered.If set to FALSE, and the step is stopped by a database shutdown, then the step is marked as stopped when the database is recovered and the chain continues.'DESTINATION_NAME'The name of an existing database destination or external destination. You can view external destination names in the view ALL_SCHEDULER_EXTERNAL_DESTS, and database destination names in the views *_SCHEDULER_DB_DESTS. You cannot specify a destination group for this attribute. This parameter is NULL by default.'CREDENTIAL_NAME'The credential to use when running this step. NULL by default.</Parameter>
            <Parameter Name="VALUE">The value to set for the attribute (for a boolean attribute).</Parameter>
            <Parameter Name="CHAR_VALUE">The value to set for the attribute (for a character attribute).</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ALTER_RUNNING_CHAIN" ElementId="#CHDGAEDD">
          <Description>Alters specified steps of a running chain</Description>
          <Parameters>
            <Parameter Name="JOB_NAME">The name of the job that is running the chain</Parameter>
            <Parameter Name="STEP_NAME">The name of the step or a comma-separated list of steps to alter. If this is set to NULL and attribute is PAUSE or SKIP, then all steps of the running chain are altered.</Parameter>
            <Parameter Name="ATTRIBUTE CONTINUED">'SKIP'If the SKIP attribute is set to TRUE for a step, when the step condition is met, instead of being run, the step is treated as if it has immediately succeeded. Setting SKIP to TRUE has no effect for a step that is running, scheduled to run after a delay, or has already run.If step_name is set to NULL, SKIP is set TRUE for all steps of this running chain. If SKIP is set TRUE for a step that PAUSE is also set for, when the step condition is met the step immediately changes to state PAUSED.'RESTART_ON_FAILURE'If set to TRUE for a step and the step fails due to an application error, then the step is retried using the normal Scheduler retry mechanism (after 1 second, after 10 seconds, after 100 seconds, and so on, up to a maximum of 6 times). If all 6 retries fail (after about 30 hours), then the chain step is marked FAILED.If set to FALSE (the default), a failed chain step is immediately marked FAILED.'RESTART_ON_RECOVERY'If the RESTART_ON_RECOVERY attribute is set to TRUE for a step, then if the step is stopped by a database shutdown, it is restarted when the database is recovered.If set to FALSE, then if the step is stopped by a database shutdown, the step is marked as stopped when the database is recovered and the chain continues.'STATE'This changes the state of the steps. The state can only be changed if the step is not running. The state can only be changed to one of the following:If the state is being changed to FAILED, an error code must be included (this must be a positive integer).</Parameter>
            <Parameter Name="VALUE">The value to set for the attribute. Valid values are: TRUE, FALSE, 'NOT_STARTED', 'SUCCEEDED', or 'FAILED error_code'</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CLOSE_WINDOW" ElementId="#i1011066">
          <Description>Closes an open window prematurely</Description>
          <Parameters>
            <Parameter Name="WINDOW_NAME">The name of the window</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="COPY_JOB" ElementId="#i1009982">
          <Description>Copies an existing job</Description>
          <Parameters>
            <Parameter Name="OLD_JOB">The name of the existing job</Parameter>
            <Parameter Name="NEW_JOB">The name of the new job</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_CHAIN" ElementId="#CHDCJFCI">
          <Description>Creates a chain, which is a named series of programs that are linked together for a combined objective</Description>
          <Parameters>
            <Parameter Name="CHAIN_NAME">The name to assign to the new chain, which can optionally be qualified with a schema. This must be unique in the SQL namespace, therefore, there cannot already be a table or other object with this name and schema.</Parameter>
            <Parameter Name="RULE_SET_NAME">In the normal case, no rule set should be passed in. The Scheduler automatically creates a rule set and associated empty evaluation context. You then use DEFINE_CHAIN_RULE to add rules and DROP_CHAIN_RULE to remove them.Advanced users can create a rule set that describes their chain dependencies and pass it in here. This allows greater flexibility in defining rules. For example, conditions can refer to external variables, and tables can be exposed through the evaluation context. If you pass in a rule set, you must ensure that it is in the format of a chain rule set. (For example, all steps must be listed as variables in the evaluation context). If no rule set is passed in, the rule set created is of the form SCHED_RULESET${N} and the evaluation context created is of the form SCHED_EVCTX${N}See Oracle Streams Concepts and Administration for information on rules and rule sets.</Parameter>
            <Parameter Name="EVALUATION_INTERVAL">If this is NULL, reevaluation of the rules of a running chain are performed only when the job starts and when a step completes. A non-NULL value causes rule evaluations to also occur periodically at the specified interval. Because evaluation may be CPU-intensive, this should be conservatively set to the highest possible value or left at NULL if possible. evaluation_interval cannot be less than a minute or greater than a day.</Parameter>
            <Parameter Name="COMMENTS">An optional comment describing the purpose of the chain</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_CREDENTIAL" ElementId="#BABCAEAC">
          <Description>Creates a credential</Description>
          <Parameters>
            <Parameter Name="CREDENTIAL_NAME">The name to assign to the credential. It can optionally be prefixed with a schema name. It cannot be set to NULL. It is converted to uppercase unless enclosed in double quotation marks.</Parameter>
            <Parameter Name="USERNAME">The user name for logging into to the host operating system or remote Oracle database. This cannot be set to NULL and is case-sensitive. It cannot contain double quotes or spaces. Maximum length is 64.</Parameter>
            <Parameter Name="PASSWORD">The password for the user name. This cannot be set to NULL and is case sensitive. The password is stored obfuscated and is not displayed in the Scheduler dictionary views. Maximum length is 128.</Parameter>
            <Parameter Name="DATABASE_ROLE">The value of the database_role attribute is used as the system privilege for logging into a remote database to run a remote database job.Valid values are: SYSDBA and SYSOPER</Parameter>
            <Parameter Name="WINDOWS_DOMAIN">For a Windows remote executable target, this is the domain that the specified user belongs to. The domain is converted to uppercase automatically. Maximum length is 64.</Parameter>
            <Parameter Name="COMMENTS">A text string that can be used to describe the credential. Scheduler does not use this parameter. Maximum length is 240.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_DATABASE_DESTINATION" ElementId="#BABEEIIF">
          <Description>Creates a database destination for use with remote database jobs</Description>
          <Parameters>
            <Parameter Name="DESTINATION_NAME">The name to assign to the database destination. It can optionally be prefixed with a schema name. Cannot be NULL. It is converted to uppercase unless enclosed in double quotation marks.</Parameter>
            <Parameter Name="AGENT">The external destination name of the Scheduler agent to connect. Equivalent to an agent name.The external destination must already exist. The external destination representing an agent is created automatically on a database instance when the agent registers with that instance.An agent's name is specified in its agent configuration file. If it is not specified, it defaults to the first part (before the first period) of the name of the host it resides on.</Parameter>
            <Parameter Name="TNS_NAME">An Oracle Net connect identifier that is resolved to the Oracle database instance being connected to. The exact syntax depends on the Oracle Net configuration.The connect identifier can be a complete Oracle Net connect descriptor (network address and database service name) or a net service name, which is an alias for a connect descriptor. The alias must be resolved in the tnsnames.ora file on the local computer. The maximum size for tns_name is 2000 characters.If tns_name is NULL, the agent connects to the default Oracle database on its host. You specify the default database by assigning values to the ORACLE_HOME and ORACLE_SID parameters in the agent configuration file, schagent.conf, located in the agent home directory.See Oracle Database Net Services Administrator's Guide for more information on connect identifiers.</Parameter>
            <Parameter Name="COMMENTS">A text string that describes the database destination. Scheduler does not use this argument.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_EVENT_SCHEDULE" ElementId="#CHDEBDFH">
          <Description>Creates an event schedule, which is a schedule that starts a job based on the detection of an event</Description>
        </SubProgram>
        <SubProgram Name="CREATE_FILE_WATCHER" ElementId="#BABFFJIJ">
          <Description>Creates a file watcher, which is a Scheduler object that defines the location, name, and other properties of a file whose arrival on a system causes the Scheduler to start a job</Description>
        </SubProgram>
        <SubProgram Name="CREATE_GROUP" ElementId="#BABFGABJ">
          <Description>Creates a group</Description>
          <Parameters>
            <Parameter Name="GROUP_NAME">The name to assign to the group. It can optionally be prefixed with a schema name. It cannot be NULL. It is converted to uppercase unless enclosed in double quotation marks.</Parameter>
            <Parameter Name="GROUP_TYPE">The type of members in the group. All members must be of the same type. Possible types are:'DB_DEST'Database destination: Members are database destinations, for running remote database jobs.'EXTERNAL_DESTExternal destination: Members are external destinations, for running remote external jobs.'WINDOW'Members are Scheduler windows. You must have the MANAGE SCHEDULER privilege to create a group of this type.Members in database destination and external destination groups have the following format:where:credential is the name of an existing credential.destination is the name of an existing database destination or external destination.The credential portion of a destination member is optional. If omitted, the job using this destination member uses its default credential.Members in window groups are window names. Because all Scheduler windows reside in the SYS schema, you do not specify a schema name for windows.</Parameter>
            <Parameter Name="MEMBER">Optional comma-separated list of group members. The default is NULL. If NULL, use the ADD_GROUP_MEMBER procedure to add members. You can also use ADD_GROUP_MEMBER to add additional members at a later time.The keyword LOCAL can be used as a member in database destination groups and external destination groups.In database destination groups, LOCAL represents the source database on which the job is created. It cannot be preceded with a credential.In external destination groups, LOCAL represents the host on which the source database resides. It can be optionally preceded with a credential name. If no credential is provided, jobs that use this group as their destination must have a default credential.</Parameter>
            <Parameter Name="COMMENTS">A text string that describes the group. Scheduler does not use this argument.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_JOB" ElementId="#i1000363">
          <Description>Creates a single job</Description>
          <Parameters>
            <Parameter Name="JOB_NAME">The name to assign to the job. The name must be unique in the SQL namespace. For example, a job cannot have the same name as a table in a schema. If the job being created will reside in another schema, it must be qualified with the schema name.If job_name is not specified, an error is generated. If you want to have a name generated by the Scheduler, you can use the GENERATE_JOB_NAME procedure to generate a name and then use the output in the CREATE_JOB procedure. The GENERATE_JOB_NAME procedure generates a number from a sequence, which is the job name. You can prefix the number with a string. The job name will then be the string with the number from the sequence appended to it. See "GENERATE_JOB_NAME Function" for more information.</Parameter>
            <Parameter Name="JOB_TYPE">This attribute specifies the type of job that you are creating. If it is not specified, an error is generated. See job_action in the next row for related information.The supported values are:'PLSQL_BLOCK'This specifies that the job is an anonymous PL/SQL block. Job or program arguments are not supported when the job or program type is PLSQL_BLOCK. In this case, the number of arguments must be 0.'STORED_PROCEDURE'This specifies that the job is a PL/SQL or Java stored procedure, or an external C subprogram. Only procedures, not functions with return values, are supported.'EXECUTABLE'This specifies that the job is going to be run outside the database using an external executable. External jobs are anything that can be executed from the command line of the operating system. Anydata arguments are not supported with a job or program type of EXECUTABLE. The job owner must have the CREATE EXTERNAL JOB system privilege before the job can be enabled or run.'CHAIN'This specifies that the job is a chain. Arguments are not supported for a chain, so number_of_arguments must be 0.</Parameter>
            <Parameter Name="JOB_ACTION">This attribute specifies the action of the job. If job_action is not specified for an inline program, then an error is generated when creating the job.The following actions are possible:For a PL/SQL block:The action is to execute PL/SQL code. These blocks must end with a semicolon. For example, my_proc(); or BEGIN my_proc(); END; or DECLARE arg pls_integer:= 10; BEGIN my_proc2(arg); END;.Note that the Scheduler wraps job_action in its own block and passes the following to PL/SQL for execution: DECLARE ... BEGIN job_action END; This is done to declare some internal Scheduler variables. You can include any Scheduler metadata attribute except event_message in your PL/SQL code. You use the attribute name as you use any other PL/SQL identifier, and the Scheduler assigns it a value.See Table 140-37 for details on available metadata attributes.For a stored procedure:The action is the name of the stored procedure. You have to specify the schema if the procedure resides in another schema than the job. If case sensitivity is needed, enclose the schema name and the store procedure name in double quotes. For example, job_action_action=&gt;'"Schema"."Procedure"'.PL/SQL procedures with INOUT or OUT arguments are not supported as job_action when the job or program type is STORED_PROCEDURE.For an executable:The action is the name of the external executable, including the full path name, but excluding any command-line arguments. If the action starts with a single question mark ('?'), the question mark is replaced by the path to the Oracle home directory for a local job or to the Scheduler agent home for a remote job. If the action contains an at-sign ('@') and the job is local, the at-sign is replaced with the SID of the current Oracle instance.NOTE: Shell script syntax is not supported, only syntax for the name of and path to an executable is supported.For a chain:The action is the name of a Scheduler chain object. You must specify the schema of the chain if it resides in a different schema than the job.</Parameter>
            <Parameter Name="NUMBER_OF_ARGUMENTS">This attribute specifies the number of arguments that the job expects. The range is 0-255, with the default being 0.</Parameter>
            <Parameter Name="PROGRAM_NAME">The name of the program associated with this job. If the program is of type EXECUTABLE, the job owner must have the CREATE EXTERNAL JOB system privilege before the job can be enabled or run.</Parameter>
            <Parameter Name="START_DATE">This attribute specifies the first date and time on which this job is scheduled to start. If start_date and repeat_interval are left null, then the job is scheduled to run as soon as the job is enabled.For repeating jobs that use a calendaring expression to specify the repeat interval, start_date is used as a reference date. The first time the job runs is the first match of the calendaring expression that is on or after the current date and time.The Scheduler cannot guarantee that a job executes on an exact time because the system may be overloaded and thus resources unavailable.</Parameter>
            <Parameter Name="EVENT_CONDITION">This is a conditional expression based on the columns of the event source queue table. The expression must have the syntax of an Advanced Queuing rule. Accordingly, you can include user data properties in the expression provided that the message payload is an object type, and that you prefix object attributes in the expression with tab.user_data. For more information on rules, see the DBMS_AQADM.ADD_SUBSCRIBER procedure.</Parameter>
            <Parameter Name="QUEUE_SPEC">This argument specifies either of the following:The source queue where events that start this particular job are enqueued. If it is secure, then the queue_spec argument is a pair of values of the form queue_name, agent name. If it is not secure, then only the queue name need be provided. If a fully qualified queue name is not provided, the queue is assumed to be in the job owner's schema. In the case of secure queues, the agent name provided should belong to a valid agent that is currently subscribed to the queue.A file watcher name. For more information on this option, see Oracle Database Administrator's Guide.</Parameter>
            <Parameter Name="REPEAT_INTERVAL">This attribute specifies how often the job repeats. You can specify the repeat interval by using calendaring or PL/SQL expressions.The expression specified is evaluated to determine the next time the job should run. If repeat_interval is not specified, the job runs only once at the specified start date. See "Calendaring Syntax" for further information.</Parameter>
            <Parameter Name="SCHEDULE_NAME">The name of the schedule, window, or window group associated with this job.</Parameter>
            <Parameter Name="JOB_CLASS">The class this job is associated with.</Parameter>
            <Parameter Name="END_DATE">This attribute specifies the date and time after which the job expires and is no longer run. After the end_date, if auto_drop is TRUE, the job is dropped. If auto_drop is FALSE, the job is disabled and the STATE of the job is set to COMPLETED.If no value for end_date is specified, the job repeats forever unless max_runs or max_failures is set, in which case the job stops when either value is reached.The value for end_date must be after the value for start_date. If it is not, an error is generated when the job is enabled.</Parameter>
            <Parameter Name="COMMENTS">This attribute specifies a comment about the job. By default, this attribute is NULL.</Parameter>
            <Parameter Name="JOB_STYLE">Style of the job being created. This argument can have one of the following values:'REGULAR' creates a regular job. This is the default.'LIGHTWEIGHT' creates a lightweight job. This value is permitted only when the job references a program object. Use lightweight jobs when you have many short-duration jobs that run frequently. Under certain circumstances, using lightweight jobs can deliver a small performance gain.</Parameter>
            <Parameter Name="CREDENTIAL_NAME">The default credential to use with the job. Applicable only to remote database jobs, remote external jobs, local external jobs, script jobs, and event-based jobs that process file arrival events. The credential must exist.For local database jobs, it must be NULL.For local external jobs only, if this attribute is NULL (the default), then a preferred (default) credential is selected. See Oracle Database Administrator's Guide for information about preferred credentials for local external jobs.See also: "CREATE_CREDENTIAL Procedure"</Parameter>
            <Parameter Name="DESTINATION_NAME">The database destination or external destination for the job. Use for remote database jobs and remote external jobs only. Must be NULL for jobs running on the local database or for local external jobs (executables).This attribute can be a single destination name or the name of a group of type 'EXTERNAL_DEST' or 'DB_DEST'. The single destination or group must already exist.The following applies to this attribute:If it is a database destination, it must have been created by the CREATE_DATABASE_DESTINATION Procedure.If it is an external destination, it must have been implicitly created by registering a remote Scheduler agent with the local database.If it is a group, each member of the group must exist, and the job must run on all destinations named in the group. See "CREATE_GROUP Procedure".destination_name cannot reference a destination group when:The job type is 'CHAIN'The job style is 'LIGHTWEIGHT'If the credential_name argument of CREATE_JOB is NULL, each destination must be preceded by a credential, in the following format:The credential must already exist. If the credential_name argument is provided, then it serves as the default credential for every destination that is not preceded by a credential.You can query the views *_SCHEDULER_DB_DESTS and ALL_SCHEDULER_EXTERNAL DESTS for existing destinations and *_SCHEDULER_GROUP_MEMBERS for existing groups and their members.*** destination job attribute is deprecated in Oracle Database 11gR2 and superseded by destination_name.</Parameter>
            <Parameter Name="ENABLED">This attribute specifies whether the job is created enabled or not. The possible settings are TRUE or FALSE. By default, this attribute is set to FALSE and, therefore, the job is created as disabled. A disabled job means that the metadata about the job has been captured, and the job exists as a database object. However, the Scheduler ignores the job and the job coordinator does not pick it for processing. In order for the job coordinator to process the job, the job must be enabled. You can enable a job by setting this argument to TRUE or by using the ENABLE procedure.</Parameter>
            <Parameter Name="AUTO_DROP">This flag, if TRUE, causes a job to be automatically dropped after it has completed or has been automatically disabled. A job is considered completed if:Its end date (or the end date of the job schedule) has passed.It has run max_runs number of times. max_runs must be set with SET_ATTRIBUTE.It is not a repeating job and has run once.A job is disabled when it has failed max_failures times. max_failures is also set with SET_ATTRIBUTE.If this flag is set to FALSE, the jobs are not dropped and their metadata is kept until the job is explicitly dropped with the DROP_JOB procedure.By default, jobs are created with auto_drop set to TRUE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_JOB_CLASS" ElementId="#i1011092">
          <Description>Creates a job class, which provides a way to group jobs for resource allocation and prioritization</Description>
          <Parameters>
            <Parameter Name="JOB_CLASS_NAME">The name to assign to the job class. Job classes can only be created in the SYS schema.This attribute specifies the name of the job class and uniquely identifies the job class. The name must be unique in the SQL namespace. For example, a job class cannot have the same name as a table in a schema.</Parameter>
            <Parameter Name="RESOURCE_CONSUMER_GROUP">This attribute specifies the resource consumer group that his class is associated with. A resource consumer group is a set of synchronous or asynchronous sessions that are grouped together based on their processing needs. A job class has a many-to-one relationship with a resource consumer group. The resource consumer group that the job class associates with determines the resources that are allocated to the job class.If a resource consumer group is dropped, job classes associated with it are then associated with the default resource consumer group.If no resource consumer group is specified, job classes are associated with the default resource consumer group.If the specified resource consumer group does not exist when creating the job class, an error occurs.</Parameter>
            <Parameter Name="SERVICE">This attribute specifies the database service that the jobs in this class have affinity to. In an Oracle RAC environment, this means that the jobs in this class only run on those database instances that are assigned to the specific service.Note that a service can be mapped to a resource consumer group, so you can also control resources allocated to jobs by specifying a service. See DBMS_RESOURCE_MANAGER.SET_CONSUMER_GROUP_MAPPING for details. If both the resource_consumer_group and service attributes are specified, and if the service is mapped to a resource consumer group, the resource_consumer_group attribute takes precedence.If no service is specified, the job class belongs to the default service, which means it has no service affinity and any one of the database instances within the cluster might run the job. If the service that a job class belongs to is dropped, the job class will then belong to the default service.If the specified service does not exist when creating the job class, then an error occurs.</Parameter>
            <Parameter Name="LOGGING_LEVEL">This attribute specifies how much information is logged. The possible options are:DBMS_SCHEDULER.LOGGING_OFFNo logging is performed for any jobs in this class.DBMS_SCHEDULER.LOGGING_RUNSThe Scheduler writes detailed information to the job log for all runs of each job in this class. This is the default.DBMS_SCHEDULER.LOGGING_FAILED_RUNSThe Scheduler logs only jobs that failed in this class.DBMS_SCHEDULER.LOGGING_FULLIn addition to recording every run of a job, the Scheduler records all operations performed on all jobs in this class. Every time a job is created, enabled, disabled, altered (with SET_ATTRIBUTE), stopped, and so, an entry is recorded in the log.</Parameter>
            <Parameter Name="LOG_HISTORY">This attribute controls the number of days that job log entries for jobs in this class are retained. It helps prevent the job log from growing indiscriminately.The range of valid values is 0 through1000000. If set to 0, no history is kept. If NULL (the default), retention days are set by the log_history Scheduler attribute (set with SET_SCHEDULER_ATTRIBUTE).</Parameter>
            <Parameter Name="COMMENTS">This attribute is for an optional comment about the job class. By default, this attribute is NULL.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_JOBS" ElementId="#BABCIJJA">
          <Description>Creates multiple jobs</Description>
          <Parameters>
            <Parameter Name="JOBDEF_ARRAY">The array of job definitions. See "Data Structures" for a description of the JOB_DEFINITION_ARRAY and JOB_DEFINITION datatypes.</Parameter>
            <Parameter Name="COMMIT_SEMANTICS">The commit semantics. The following types are supported:STOP_ON_FIRST_ERROR returns on the first error. Previous successfully created jobs are committed to disk. This is the default.TRANSACTIONAL returns on the first error and everything that happened before that error is rolled back.ABSORB_ERRORS tries to absorb any errors and attempts to create the rest of the jobs on the list. It commits all successfully created jobs. If errors occur, you can query the view SCHEDULER_BATCH_ERRORS for details.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_PROGRAM" ElementId="#i1010013">
          <Description>Creates a program</Description>
          <Parameters>
            <Parameter Name="PROGRAM_NAME">The name to assign to the program. The name must be unique in the SQL namespace. For example, a program cannot have the same name as a table in a schema. If no name is specified, then an error occurs.</Parameter>
            <Parameter Name="PROGRAM_TYPE">This attribute specifies the type of program you are creating. If it is not specified then you get an error. These are the supported values for program_type:'PLSQL_BLOCK'This specifies that the program is a PL/SQL block. Job or program arguments are not supported when the job or program type is PLSQL_BLOCK. In this case, the number of arguments must be 0.'STORED_PROCEDURE'This specifies that the program is a PL/SQL or Java stored procedure, or an external C subprogram. Only procedures, not functions with return values, are supported. PL/SQL procedures with INOUT or OUT arguments are not supported.'EXECUTABLE'This specifies that the job is going to be run outside the database using an external executable. External programs imply anything that can be executed from the operating system command line. AnyData arguments are not supported with job or program type EXECUTABLE.'EXTERNAL_SCRIPT'This specifies that the job is an external script that uses the command shell of the computer running the job. For Windows this is cmd.exe and for UNIX based systems the sh shell, unless a different interpreter is specified by prefixing the first line of the script with #!.'SQL_SCRIPT'This specifies that the program is a SQL*Plus script.A job using this program must point to a credential that contains a valid operating system username and password. The SQL*Plus script is run by SQL*Plus executable. The job using this program may point to a connect credential that contains a database credential. If so, this credential is used to connect to the database before running the SQL*Plus script.Note that if you choose to use connect credential, you must use set_attribute to specify the Connect_Credential_Name attribute. If you do not have connect credential, you must include an explicit SQL*Plus connect statement providing a valid database userid / password.</Parameter>
            <Parameter Name="PROGRAM_ACTION">This attribute specifies the action of the program. If program_action is not specified, an error is generated.The following actions are possible:For a PL/SQL block, the action is to execute PL/SQL code. These blocks must end with a semicolon.For example, my_proc(); or BEGIN my_proc(); END; or DECLARE arg pls_integer:= 10; BEGIN my_proc2(arg); END;.Note that the Scheduler wraps job_action in its own block and passes the following to PL/SQL for execution: DECLARE ... BEGIN job_action END; This is done to declare some internal Scheduler variables. You can include any Scheduler metadata attribute except event_message in your PL/SQL code. You use the attribute name as you use any other PL/SQL identifier, and the Scheduler assigns it a value. See Table 140-37 for details on available metadata attributes.If it is an anonymous block, special Scheduler metadata may be accessed using the following variable names: job_name, job_owner, job_start, window_start, window_end. For more information, see the "DEFINE_METADATA_ARGUMENT Procedure".</Parameter>
            <Parameter Name="NUMBER_OF_ARGUMENTS">This attribute specifies the number of arguments the program takes. If this parameter is not specified, then the default is 0. A program can have a maximum of 255 arguments.If the program_type is PLSQL_BLOCK, then this parameter is ignored.</Parameter>
            <Parameter Name="ENABLED">This flag specifies whether the program should be created as enabled or not. If the flag is set to TRUE, then validity checks are made and the program is created as ENABLED if all the checks be successful. By default, this flag is set to FALSE, meaning not created enabled. You can also call the ENABLE procedure to enable the program before it can be used.</Parameter>
            <Parameter Name="COMMENTS">A comment about the program. By default, this attribute is NULL.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_SCHEDULE" ElementId="#i1010076">
          <Description>Creates a schedule</Description>
          <Parameters>
            <Parameter Name="SCHEDULE_NAME">The name to assign to the schedule. The name must be unique in the SQL namespace. For example, a schedule cannot have the same name as a table in a schema. If no name is specified, then an error occurs.</Parameter>
            <Parameter Name="START_DATE">This attribute specifies the first date and time on which this schedule becomes valid. For a repeating schedule, the value for start_date is a reference date. In this case, the start of the schedule is not the start_date; it depends on the repeat interval specified. start_date is used to determine the first instance of the schedule.If start_date is specified in the past and no value for repeat_interval is specified, the schedule is invalid. For a repeating job or window, start_date can be derived from the repeat_interval if it is not specified.If start_date is null, then the date that the job or window is enabled is used. start_date and repeat_interval cannot both be null.</Parameter>
            <Parameter Name="REPEAT_INTERVAL">This attribute specifies how often the schedule repeats. It is expressed using calendaring syntax. See "Calendaring Syntax" for further information. PL/SQL expressions are not allowed as repeat intervals for named schedules.</Parameter>
            <Parameter Name="END_DATE">The date and time after which jobs will not run and windows will not open.A non-repeating schedule that has no end_date is valid forever.end_date has to be after the start_date. If this is not the case, then an error is generated when the schedule is created.</Parameter>
            <Parameter Name="COMMENTS">This attribute specifies an optional comment about the schedule. By default, this attribute is NULL.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_WINDOW" ElementId="#i1016629">
          <Description>Creates a window, which provides a way to automatically activate different resource plans at different times</Description>
          <Parameters>
            <Parameter Name="WINDOW_NAME">The name to assign to the window. The name must be unique in the SQL namespace. All windows are in the SYS schema, so the preface 'SYS' is optional.</Parameter>
            <Parameter Name="RESOURCE_PLAN">This attribute specifies the resource plan that automatically activates when the window opens. When the window closes, the system switches to the appropriate resource plan, which is usually the plan that was in effect before the window opened, but can also be the plan of a different window.Only one resource plan can be associated with a window. It may be NULL or the empty string (""). When it is NULL, the resource plan in effect when the window opens stays in effect for the duration of the window. When it is the empty string, the resource manager is disabled for the duration of the window.If the window is open and the resource plan is dropped, then the resource allocation for the duration of the window is not affected.</Parameter>
            <Parameter Name="START_DATE">This attribute specifies the first date and time on which this window is scheduled to open. If the value for start_date specified is in the past or is not specified, the window opens as soon as it is created.For repeating windows that use a calendaring expression to specify the repeat interval, the value for start_date is a reference date. The first time the window opens depends on the repeat interval specified and the value for start_date.</Parameter>
            <Parameter Name="DURATION">This attribute specifies how long the window stays open. For example, 'interval '5' hour' for five hours. There is no default value for this attribute. Therefore, if no value is specified when the window is created, an error occurs. The duration is of type interval day to seconds and ranges from one minute to 99 days.</Parameter>
            <Parameter Name="SCHEDULE_NAME">This attribute specifies the name of the schedule associated with the window.</Parameter>
            <Parameter Name="REPEAT_INTERVAL">This attribute specifies how often the window repeats. It is expressed using the Scheduler calendaring syntax. See "Calendaring Syntax" for more information.A PL/SQL expression cannot be used to specify the repeat interval for a window.The expression specified is evaluated to determine the next time the window opens. If no repeat_interval is specified, the window opens only once at the specified start date.</Parameter>
            <Parameter Name="END_DATE">This attribute specifies the date and time after which the window no longer opens. When the value for end_date is reached, the window is disabled. In the *_SCHEDULER_WINDOWS views, the enabled flag of the window is set to FALSE.A non-repeating window that has no value for end_date opens only once for the duration of the window. For a repeating window, if no end_date is specified, then the window keeps repeating forever.The end_date must be after the start_date. If it is not, then an error is generated when the window is created.</Parameter>
            <Parameter Name="WINDOW_PRIORITY">This attribute is only relevant when two windows overlap. Because only one window can be in effect at one time, the window priority determines which window opens. The two possible values for this attribute are 'HIGH' and 'LOW'. A high priority window has precedence over a low priority window, therefore, the low priority window does not open if it overlaps a high priority window. By default, windows are created with priority 'LOW'.</Parameter>
            <Parameter Name="COMMENTS">This attribute specifies an optional comment about the window. By default, this attribute is NULL.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DEFINE_ANYDATA_ARGUMENT" ElementId="#i1013213">
          <Description>Defines a program argument whose value is of a complex type and must be passed encapsulated in an AnyData object</Description>
          <Parameters>
            <Parameter Name="PROGRAM_NAME">The name of the program to be altered. A program with this name must exist.</Parameter>
            <Parameter Name="ARGUMENT_POSITION">The position of the argument as it is passed to the executable. Argument numbers go from one to the number_of_arguments specified for the program. This must be unique, so it can replace any argument already defined at this position.</Parameter>
            <Parameter Name="ARGUMENT_NAME">The name to assign to the argument. It is optional, but must be unique for the program if it is specified. If you assign a name, the name can then be used by other package procedures, including the SET_JOB_ANYDATA_VALUE Procedure.</Parameter>
            <Parameter Name="ARGUMENT_TYPE">The datatype of the argument being defined. This is not verified or used by the Scheduler. It is only used by the user of the program when deciding what value to assign to the argument.</Parameter>
            <Parameter Name="DEFAULT_VALUE">The default value to be assigned to the argument encapsulated within an AnyData object. This is optional.</Parameter>
            <Parameter Name="OUT_ARGUMENT">This parameter is reserved for future use. It must be set to FALSE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DEFINE_CHAIN_EVENT_STEP" ElementId="#CHDCAFGJ">
          <Description>Adds or replaces a chain step and associates it with an event schedule or inline event. See also: DEFINE_CHAIN_STEP.</Description>
          <Parameters>
            <Parameter Name="CHAIN_NAME">The name of the chain that the step is in</Parameter>
            <Parameter Name="STEP_NAME">The name of the step</Parameter>
            <Parameter Name="EVENT_SCHEDULE_NAME">The name of the event schedule that the step waits for</Parameter>
            <Parameter Name="TIMEOUT">This parameter is reserved for future use</Parameter>
            <Parameter Name="EVENT_CONDITION">See the CREATE_EVENT_SCHEDULE Procedure</Parameter>
            <Parameter Name="QUEUE_SPEC">See the CREATE_EVENT_SCHEDULE Procedure</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DEFINE_CHAIN_RULE" ElementId="#CHDBAFJE">
          <Description>Adds a rule to an existing chain</Description>
          <Parameters>
            <Parameter Name="CHAIN_NAME">The name of the chain to alter</Parameter>
            <Parameter Name="CONDITION">A boolean expression which must evaluate to TRUE for the action to be performed. Every chain must have a rule that evaluates to TRUE to start the chain. For this purpose, you can use a rule that has 'TRUE' as its condition if you are using Scheduler chain condition syntax, or '1=1' as its condition if you are using SQL syntax.Scheduler Chain Condition SyntaxSee "Scheduler Chain Condition Syntax" for detailsSQL WHERE Clause SyntaxConditions expressed with SQL must use the syntax of a SELECT statement WHERE clause.You can refer to chain step attributes by using the chain step name as a bind variable.The bind variable syntax is :step_name.attribute. (step_name refers to a typed object.) Possible attributes are: completed, state, start_date, end_date, error_code, and duration.Possible values for the state attribute include: 'NOT_STARTED', 'SCHEDULED', 'RUNNING', 'PAUSED', 'STALLED', 'SUCCEEDED', 'FAILED', and 'STOPPED'. If a step is in the state 'SUCCEEDED', 'FAILED', or 'STOPPED', its completed attribute is set to 'TRUE', otherwise completed is 'FALSE'.</Parameter>
            <Parameter Name="ACTION">The action to be performed when the rule evaluates to TRUE. The action must consist of at least one keyword with an optional value and an optional delay clause.Possible actions include:[AFTER delay_interval] START step_1[,step_2 ...]STOP step_1[,step_2 ...]END [{end_value|step_name.error_code}]At the beginning of the START action, a delay clause can specify a delay interval before performing the action. delay_interval is a formatted datetime interval of the form HH:MM:SS.The END action ends the chain with an error code equal to either the supplied end_value or the error code that step_name completes with. The default error code is 0, indicating a successful chain run.</Parameter>
            <Parameter Name="RULE_NAME">The name of the rule being created. If no rule_name is given, one is generated in the form SCHED_RULE$_{N}.</Parameter>
            <Parameter Name="COMMENTS">An optional comment describing the rule. This is stored in the rule object created.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DEFINE_CHAIN_STEP" ElementId="#CHDEJDHJ">
          <Description>Defines a chain step, which can be a program or another (nested) chain. See also: DEFINE_CHAIN_EVENT_STEP.</Description>
          <Parameters>
            <Parameter Name="CHAIN_NAME">The name of the chain to alter.</Parameter>
            <Parameter Name="STEP_NAME">The name of the step being defined. If a step already exists with this name, the new step replaces the old one.</Parameter>
            <Parameter Name="PROGRAM_NAME">The name of a program or chain to run during this step. The chain owner must have EXECUTE privileges on this program or chain.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DEFINE_METADATA_ARGUMENT" ElementId="#i1011138">
          <Description>Defines a special metadata argument for the program. You can retrieve specific metadata through this argument.</Description>
          <Parameters>
            <Parameter Name="PROGRAM_NAME">The name of the program to be altered</Parameter>
            <Parameter Name="METADATA_ATTRIBUTE">The metadata to be passed. Valid metadata attributes are: 'job_name', 'job_subname', 'job_owner', 'job_start', 'window_start', 'window_end', and 'event_message'.Table 140-37 describes these attributes in detail.</Parameter>
            <Parameter Name="ARGUMENT_POSITION">The position of the argument as it is passed to the executable. The position cannot be greater than the number_of_arguments specified for the program. It must be unique, so it replaces any argument already defined at this position.</Parameter>
            <Parameter Name="ARGUMENT_NAME">The name to assign to the argument. It is optional, but must be unique for the program if it is specified. If you assign a name, the name can then be used by other package procedures.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DEFINE_PROGRAM_ARGUMENT" ElementId="#i1011161">
          <Description>Defines a program argument whose value can be passed as a string literal to the program</Description>
          <Parameters>
            <Parameter Name="PROGRAM_NAME">The name of the program to be altered. A program with this name must exist.</Parameter>
            <Parameter Name="ARGUMENT_POSITION">The position of the argument as it is passed to the executable. Argument numbers go from one to the number_of_arguments specified for the program. This must be unique so it replaces any argument already defined at this position.</Parameter>
            <Parameter Name="ARGUMENT_NAME">The name to assign to the argument. It is optional, but must be unique for the program if specified. If you assign a name, the name can then be used by other package procedures, including the SET_JOB_ARGUMENT_VALUE Procedure.</Parameter>
            <Parameter Name="ARGUMENT_TYPE">The datatype of the argument being defined. This is not verified or used by the Scheduler. The program user uses argument_type when deciding what value to assign to the argument. Any valid SQL datatype is allowed.</Parameter>
            <Parameter Name="DEFAULT_VALUE">The default value to be assigned to the argument if none is specified by the job.</Parameter>
            <Parameter Name="OUT_ARGUMENT">This parameter is reserved for future use. It must be set to FALSE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DISABLE" ElementId="#i1003538">
          <Description>Disables a program, job, chain, window, database destination, external destination, file watcher, group, or incompatibilty</Description>
          <Parameters>
            <Parameter Name="NAME">The name of the object being disabled. Can be a comma-delimited list.If a job class name is specified, then all the jobs in the job class are disabled. The job class is not disabled.If a group name is specified, then the group is disabled, but the enabled state of the group members is unaffected.</Parameter>
            <Parameter Name="FORCE">If TRUE, objects are disabled even if other objects depend on them. See the usage notes for more information.</Parameter>
            <Parameter Name="COMMIT_SEMANTICS">The commit semantics. The following types are supported:STOP_ON_FIRST_ERROR: The procedure returns on the first error and the previous disable operations that were successful are committed to disk.This is the default.TRANSACTIONAL: The procedure returns on the first error and everything that happened before that error is rolled back.This type is only supported when disabling a job or a list of jobs. In addition, this type is not supported when force is set to TRUE.ABSORB_ERRORS: The procedure tries to absorb any errors and disable the rest of the jobs and commits all the disable operations that were successful. If errors occur, you can query the view SCHEDULER_BATCH_ERRORS for details.This type is only supported when disabling a job or a list of jobs.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_AGENT_DESTINATION" ElementId="#BABBFHBG">
          <Description>Drops one or more external destinations. Use only when the preferred method of dropping external destinations—unregistering the Scheduler agent with the database—fails.</Description>
          <Parameters>
            <Parameter Name="DESTINATION_NAME">A comma-separated list of external destinations to drop. Because user SYS owns all external destinations, do not prefix them with a schema name.The procedure stops processing if it encounters an external destination that does not exist. All external destinations processed before the error are dropped.Cannot be NULL.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_CHAIN" ElementId="#CHDIAFHG">
          <Description>Drops an existing chain</Description>
          <Parameters>
            <Parameter Name="CHAIN_NAME">The name of the chain to drop. Can also be a comma-delimited list of chains.</Parameter>
            <Parameter Name="FORCE">If force is set to FALSE, the chain must not be referenced by any job, otherwise an error will occur.If force is set to TRUE, all jobs pointing to the chain are disabled before the chain is dropped.Running jobs that point to this chain are stopped before the chain is dropped.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_CHAIN_RULE" ElementId="#CHDJEIJB">
          <Description>Removes a rule from an existing chain</Description>
          <Parameters>
            <Parameter Name="CHAIN_NAME">The name of the chain to alter</Parameter>
            <Parameter Name="RULE_NAME">The name of the rule to drop</Parameter>
            <Parameter Name="FORCE">If force is set to TRUE, the drop operation proceeds even if the chain is currently running. The running chain is not stopped or interrupted. If force is set to FALSE and the chain is running, an error is generated.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_CHAIN_STEP" ElementId="#CHDBDCAI">
          <Description>Drops a chain step</Description>
          <Parameters>
            <Parameter Name="CHAIN_NAME">The name of the chain to alter</Parameter>
            <Parameter Name="STEP_NAME">The name of the step being dropped. Can be a comma-separated list.</Parameter>
            <Parameter Name="FORCE">If force is set to TRUE, this succeeds even if this chain is currently running. The running chain will not be stopped or interrupted.If force is set to FALSE and this chain is currently running, an error is thrown.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_CREDENTIAL" ElementId="#BABIJAJG">
          <Description>Drops a credential</Description>
          <Parameters>
            <Parameter Name="CREDENTIAL_NAME">The name of the credential being dropped. This can optionally be prefixed with a schema name. This cannot be set to NULL.</Parameter>
            <Parameter Name="FORCE">If set to FALSE, the credential must not be referenced by any job, or an error will occur. If set to TRUE, the credential is dropped whether or not there are jobs referencing it. Jobs that reference the credential will continue to point to a nonexistent credential and throw an error at runtime.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_DATABASE_DESTINATION" ElementId="#BABBDAIF">
          <Description>Drops one or more database destinations</Description>
          <Parameters>
            <Parameter Name="DESTINATION_NAME">The name of the destination to drop. Can be a comma-separated list of database destinations to drop. Each database destination can optionally be prefixed with a schema name.The procedure stops processing if it encounters a database destination that does not exist. All database destinations processed before the error are dropped.Cannot be NULL.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_FILE_WATCHER" ElementId="#BABJEJHF">
          <Description>Drops one or more file watchers</Description>
          <Parameters>
            <Parameter Name="FILE_WATCHER_NAME">The file watcher to drop. Can be a comma-separated list of file watchers. Each file watcher name can optionally be prefixed with a schema name.Cannot be NULL.</Parameter>
            <Parameter Name="FORCE">If set to FALSE, the file watcher must not be referenced by any job, or an error occurs. If set to TRUE, the file watcher is dropped whether or not there are jobs referencing it. In this case, jobs that reference the dropped file watcher are disabled.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_GROUP" ElementId="#BABDHDGH">
          <Description>Drops one or more groups</Description>
          <Parameters>
            <Parameter Name="GROUP_NAME">A group to drop. Can be a comma-separated list of group names. Each group name can optionally be prefixed with a schema name.The procedure stops processing if it encounters a group that does not exist. All groups processed before the error are dropped.Cannot be NULL.</Parameter>
            <Parameter Name="FORCE">If FALSE, the group must not be referenced by any job, otherwise an error occurs. If TRUE, the group is dropped whether or not there are jobs referencing it. In this case, all jobs referencing the group are disabled and all job instances that reference the group are removed from the *_SCHEDULER_JOB_DESTS views.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_JOB" ElementId="#i1000364">
          <Description>Drops a job or all jobs in a job class</Description>
          <Parameters>
            <Parameter Name="JOB_NAME">The name of a job or job class. Can be a comma-delimited list. For a job class, the SYS schema should be specified.If the name of a job class is specified, the jobs that belong to that job class are dropped, but the job class itself is not dropped.</Parameter>
            <Parameter Name="FORCE">If force is set to TRUE, the Scheduler first attempts to stop the running job instances (by issuing the STOP_JOB call with the force flag set to false), and then drops the jobs.</Parameter>
            <Parameter Name="DEFER">If defer is set to TRUE, the Scheduler allows the running jobs to complete and then drops the jobs.</Parameter>
            <Parameter Name="COMMIT_SEMANTICS">The commit semantics. The following types are supported:STOP_ON_FIRST_ERROR returns on the first error and previous successful drop operations are committed to disk. This is the default.TRANSACTIONAL returns on the first error. Everything that happened before that error is rolled back. This type is not supported when force is set to TRUE.ABSORB_ERRORS tries to absorb any errors and drop the rest of the jobs, and commits all the successful drops. If errors occur, you can query the view SCHEDULER_BATCH_ERRORS for details.Only STOP_ON_FIRST_ERROR is permitted when job classes are included in the job_name list.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_JOB_CLASS" ElementId="#i1009950">
          <Description>Drops a job class</Description>
          <Parameters>
            <Parameter Name="JOB_CLASS_NAME">The name of the job class. Can be a comma-delimited list.</Parameter>
            <Parameter Name="FORCE">If force is set to FALSE, a class being dropped must not be referenced by any jobs, otherwise an error occurs.If force is set to TRUE, jobs belonging to the class are disabled and their class is set to the default class. Only if this is successful is the class dropped.Running jobs that belong to the job class are not affected.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_PROGRAM" ElementId="#i1011194">
          <Description>Drops a program</Description>
          <Parameters>
            <Parameter Name="PROGRAM_NAME">The name of the program to be dropped. Can be a comma-delimited list.</Parameter>
            <Parameter Name="FORCE">If force is set to FALSE, the program must not be referenced by any job, otherwise an error occurs.If force is set to TRUE, all jobs referencing the program are disabled before the program is dropped.Running jobs that point to the program are not affected by the DROP_PROGRAM call and are allowed to continue.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_PROGRAM_ARGUMENT" ElementId="#i1011195">
          <Description>Drops a program argument</Description>
          <Parameters>
            <Parameter Name="PROGRAM_NAME">The name of the program to be altered. A program with this name must exist.</Parameter>
            <Parameter Name="ARGUMENT_NAME">The name of the argument being dropped</Parameter>
            <Parameter Name="ARGUMENT_POSITION">The position of the argument to be dropped</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_SCHEDULE" ElementId="#CIHBGDFG">
          <Description>Drops a schedule</Description>
          <Parameters>
            <Parameter Name="SCHEDULE_NAME">The name of the schedule. Can be a comma-delimited list.</Parameter>
            <Parameter Name="FORCE">If force is set to FALSE, the schedule must not be referenced by any job or window, otherwise an error will occur.If force is set to TRUE, any jobs or windows that use this schedule are disabled before the schedule is droppedRunning jobs and open windows that point to the schedule are not affected.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_WINDOW" ElementId="#i1014414">
          <Description>Drops a window</Description>
          <Parameters>
            <Parameter Name="WINDOW_NAME">The name of the window. Can be a comma-delimited list.</Parameter>
            <Parameter Name="FORCE">If force is set to FALSE, the window must be not be open or referenced by any job, otherwise an error occurs.If force is set to TRUE, the window is dropped and those jobs that have the window as their schedule are disabled. However, jobs that have a window group, of which the dropped window is a member, as their schedule, are not disabled. If the window is open then, the Scheduler attempts to first close the window and then drop it. When the window is closed, normal close window rules apply.Running jobs that have the window as their schedule is allowed to continue, unless the stop_on_window_close flag is set to TRUE for the job. If this is the case, the job is stopped when the window is dropped.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ENABLE" ElementId="#i1012587">
          <Description>Enables a program, job, chain, window, database destination, external destination, file watcher, or group</Description>
          <Parameters>
            <Parameter Name="NAME">The name of the Scheduler object being enabled. Can be a comma-delimited list of names.If a job class name is specified, then all the jobs in the job class are enabled.If a group name is specified, then the group is enabled, but the enabled state of the group members is unaffected.</Parameter>
            <Parameter Name="COMMIT_SEMANTICS">The commit semantics. The following types are supported:STOP_ON_FIRST_ERROR - The procedure returns on the first error and previous successful enable operations are committed to disk. This is the default.TRANSACTIONAL - The procedure returns on the first error and everything that happened before that error is rolled back.This type is only supported when enabling a job or a list of jobs.ABSORB_ERRORS - The procedure tries to absorb any errors and enable the rest of the jobs. It commits all the enable operations that were successful. If errors occur, you can query the view SCHEDULER_BATCH_ERRORS for details.This type is only supported when enabling a job or a list of jobs.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="END_DETACHED_JOB_RUN" ElementId="#BABCDIFA">
          <Description>Ends a running detached job</Description>
          <Parameters>
            <Parameter Name="JOB_NAME">The name of the job to end. Must be a detached job that is running.</Parameter>
            <Parameter Name="ERROR_NUMBER">If zero, then the job run is logged as succeeded. If -1013, then the job run is logged as stopped. If non-zero, then the job run is logged as failed with this error number.</Parameter>
            <Parameter Name="ADDITIONAL_INFO">This text is stored in the additional_info column of the *_scheduler_job_run_details views for this job run.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EVALUATE_CALENDAR_STRING" ElementId="#i1009923">
          <Description>Evaluates the calendar string and tells you what the next execution date of a job or window will be</Description>
          <Parameters>
            <Parameter Name="CALENDAR_STRING">The calendar expression to be evaluated. The string must be in the calendaring syntax described in "Operational Notes".</Parameter>
            <Parameter Name="START_DATE">The date and time after which the repeat interval becomes valid. It can also be used to fill in specific items that are missing from the calendar string. Can optionally be NULL.</Parameter>
            <Parameter Name="RETURN_DATE_AFTER">The return_date_after argument helps the Scheduler determine which one of all possible matches (all valid execution dates) to return from those determined by the start_date and the calendar string.When a NULL value is passed for this argument, the Scheduler automatically fills in systimestamp as its value.</Parameter>
            <Parameter Name="NEXT_RUN_DATE">The first timestamp that matches the calendar string and start date that occur after the value passed in for the return_date_after argument.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EVALUATE_RUNNING_CHAIN" ElementId="#BABGCFFG">
          <Description>Forces reevaluation of the rules of a running chain to trigger any rules for conditions that have been satisfied</Description>
        </SubProgram>
        <SubProgram Name="GENERATE_JOB_NAME" ElementId="#i1011295">
          <Description>Generates a unique name for a job. This enables you to identify jobs by adding a prefix, so, for example, Sally's jobs would be named sally1, sally2, and so on</Description>
        </SubProgram>
        <SubProgram Name="GET_AGENT_INFO" ElementId="#CHDJDGJI">
          <Description>Returns job information specific to an agent, such as how many are running and so on, depending on the attribute selected</Description>
        </SubProgram>
        <SubProgram Name="GET_AGENT_VERSION" ElementId="#CHDGAEFF">
          <Description>Returns the version string of a Scheduler agent that is registered with the database and is currently running</Description>
        </SubProgram>
        <SubProgram Name="GET_ATTRIBUTE" ElementId="#i1011296">
          <Description>Retrieves the value of an attribute of an object</Description>
          <Parameters>
            <Parameter Name="NAME">The name of the object</Parameter>
            <Parameter Name="ATTRIBUTE">The attribute being retrieved. See the SET_ATTRIBUTE Procedure for tables of attribute values.</Parameter>
            <Parameter Name="VALUE">The existing value of the attribute</Parameter>
            <Parameter Name="VALUE2">The value2 argument is for an optional second value.Most attributes have only one value associated with them, but some can have two.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_FILE" ElementId="#BABDDBFH">
          <Description>Retrieves a file from a host</Description>
          <Parameters>
            <Parameter Name="SOURCE_FILE">Fully qualified path name of the file to retrieve from the operating system. The file name is case-sensitive and is not converted to uppercase. If the file name starts with a question mark ('?'), the question mark is replaced by the path to the Oracle home if getting a file from the local host, or to the Scheduler agent home if getting a file from a remote host.If the format of this parameter is external_log_id_stdout, then the stdout from the designated external job run is returned.If the format of this parameter is external_log_id_stderr, the error text from the designated external job run is returned.You obtain the value of external_log_id from the ADDITIONAL_INFO column of the *_SCHEDULER_JOB_RUN_DETAILS views. This column contains a set of name/value pairs in an indeterminate order, so you must parse this column for the external_log_id name/value pair, and then append either "_stdout" or "_stderr" to its value.The external job must have an associated credential. The credential_name parameter of GET_FILE must name the same credential that is used by the job, and the source_host parameter must be the same as the destination attribute of the job.</Parameter>
            <Parameter Name="SOURCE_HOST">If the file is to be retrieved from a remote host, then this parameter must be a valid an external destination name. (An external destination is created when you register a remote Scheduler agent with the database. You can view external destination names in the views *_SCHEDULER_EXTERNAL_DESTS.)If source_host is NULL or set to 'localhost', then the file is retrieved from the file system of the local host. To determine the port number of a Scheduler agent, view the schagent.conf file, which is located in the Scheduler agent home directory on the remote host.</Parameter>
            <Parameter Name="CREDENTIAL_NAME">The name of the credential to use for accessing the file system.</Parameter>
            <Parameter Name="FILE_CONTENTS">The variable into which the file contents is read.</Parameter>
            <Parameter Name="DESTINATION_FILE_NAME">The file to which the file contents is written.</Parameter>
            <Parameter Name="DESTINATION_DIRECTORY_OBJECT">The directory object that specifies the path to the destination file, when destination_file_name is used. The caller must have the necessary privileges on the directory object.</Parameter>
            <Parameter Name="DESTINATION_PERMISSIONS">Reserved for future use</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_SCHEDULER_ATTRIBUTE" ElementId="#i1011297">
          <Description>Retrieves the value of a Scheduler attribute</Description>
          <Parameters>
            <Parameter Name="ATTRIBUTE">The name of the attribute</Parameter>
            <Parameter Name="VALUE">The existing value of the attribute</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="OPEN_WINDOW" ElementId="#i1011298">
          <Description>Opens a window prematurely. The window is opened immediately for the duration</Description>
          <Parameters>
            <Parameter Name="WINDOW_NAME">The name of the window</Parameter>
            <Parameter Name="DURATION">The duration of the window. It is of type interval day to second. If it is NULL, then the window opens for the regular duration as specified in the window metadata.</Parameter>
            <Parameter Name="FORCE">If force is set to FALSE, then opening an already open window generates an error.If force is set to TRUE:You can open a window that is already open. The window stays open for the duration specified in the call, from the time the OPEN_WINDOW command was issued.For example: window1 was created with a duration of four hours. It has how been open for two hours. If, at this point, you reopen window1 using the OPEN_WINDOW call and do not specify a duration, then window1 stays open for four hours because it was created with that duration. If you specified a duration of 30 minutes, the window will close in 30 minutes.The Scheduler automatically closes any window that is open at that time, even if it has a higher priority. For the duration of this manually opened window, the Scheduler does not open any other scheduled windows even if they have a higher priority.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PURGE_LOG" ElementId="#i1011299">
          <Description>Purges specific rows from the job and window logs</Description>
          <Parameters>
            <Parameter Name="LOG_HISTORY">This specifies how much history (in days) to keep. The valid range is 0 - 1000000. If set to 0, no history is kept.</Parameter>
            <Parameter Name="WHICH_LOG">This specifies the log type. Valid values are: job_log, window_log, and job_and_window_log.</Parameter>
            <Parameter Name="JOB_NAME">This specifies which job-specific entries must be purged from the jog log. This can be a comma-delimited list of job names and job classes. Whenever job_name has a value other than NULL, the which_log argument implicitly includes the job log.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PUT_FILE" ElementId="#BABHDFFF">
          <Description>Saves a file to one or more hosts</Description>
          <Parameters>
            <Parameter Name="DESTINATION_FILE">Fully qualified path name of the file to save to the operating system file system. The file name is case-sensitive. If the file name starts with a question mark ('?'), the question mark is replaced by the path to the Oracle home if saving to the local host, or to the Scheduler agent home if saving to a remote host.</Parameter>
            <Parameter Name="DESTINATION_HOST">If NULL or set to 'localhost', the file is saved to the file system of the local computer.To save to a remote host, this parameter must be a valid external destination name. (An external destination is created when you register a remote Scheduler agent with the database. You can view external destination names in the views *_SCHEDULER_EXTERNAL_DESTS.)</Parameter>
            <Parameter Name="CREDENTIAL_NAME">The name of the credential to use for accessing the destination file system.</Parameter>
            <Parameter Name="FILE_CONTENTS">The variable from which the file contents is read.</Parameter>
            <Parameter Name="SOURCE_FILE_NAME">The file from which the file contents is written</Parameter>
            <Parameter Name="SOURCE_DIRECTORY_OBJECT">The directory object that specifies the path to the source file, when source_file_name is used. The caller must have the necessary privileges on the directory object.</Parameter>
            <Parameter Name="DESTINATION_PERMISSIONS">Reserved for future use</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVE_EVENT_QUEUE_SUBSCRIBER" ElementId="#RemoveEventQSubsc95">
          <Description>Unsubscribes a user from the Scheduler event queue SYS.SCHEDULER$_EVENT_QUEUE</Description>
          <Parameters>
            <Parameter Name="SUBSCRIBER_NAME">Name of the Oracle Streams Advanced Queuing (AQ) agent to remove the subscription from. If NULL, the user name of the calling user is used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVE_GROUP_MEMBER" ElementId="#BABHECBB">
          <Description>Removes one or more members from a group</Description>
          <Parameters>
            <Parameter Name="GROUP_NAME">The name of the group.</Parameter>
            <Parameter Name="MEMBER_NAME">The name of the member to remove from group. Comma-separated list of members to remove. An error is returned if any of the members is not part of the group.A group of the same type can be named as a member. The Scheduler immediately expands the included group name into its list of members.If the member is a destination, any job instances that run on this destination are removed from the *_SCHEDULER_JOB_DESTS views.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVE_JOB_EMAIL_NOTIFICATION" ElementId="#BABIIFIC">
          <Description>Removes e-mail notifications for a job</Description>
        </SubProgram>
        <SubProgram Name="RESET_JOB_ARGUMENT_VALUE" ElementId="#i1014573">
          <Description>Resets the current value assigned to an argument defined with the associated program</Description>
          <Parameters>
            <Parameter Name="JOB_NAME">The name of the job being altered</Parameter>
            <Parameter Name="ARGUMENT_POSITION">The position of the program argument being reset</Parameter>
            <Parameter Name="ARGUMENT_NAME">The name of the program argument being reset</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RUN_CHAIN" ElementId="#CHDGHBGJ">
          <Description>Immediately runs a chain by creating a run-once job</Description>
          <Parameters>
            <Parameter Name="CHAIN_NAME">The name of the chain to run</Parameter>
            <Parameter Name="JOB_NAME">The name of the job to create to run the chain</Parameter>
            <Parameter Name="START_STEPS">Comma-separated list of the steps to start when the chain starts running</Parameter>
            <Parameter Name="STEP_STATE_LIST">List of chain steps with an initial state (SUCCEEDED or FAILED) to set for each.Set the attributes of sys.scheduler$_step_type as follows:step_name The name of the stepstep_type 'SUCCEEDED' or 'FAILED error_number'where error_number is a positive or negative integer.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RUN_JOB" ElementId="#i1013568">
          <Description>Runs a job immediately</Description>
          <Parameters>
            <Parameter Name="JOB_NAME">A job name or a comma-separate list of entries, where each is the name of an existing job, optionally preceded by a schema name and dot separator.If you specify a multiple-destination job, the job runs on all destinations. In this case, the use_current_session argument must be FALSE.</Parameter>
            <Parameter Name="USE_CURRENT_SESSION">This specifies whether or not the job run should occur in the same session that the procedure was invoked from.The job always runs as the job owner, in the job owner's schema, unless it has credential specified, then the job runs using the user named in the credential.When use_current_session is set to TRUE:You can test a job and see any possible errors on the command line.state, run_count, last_start_date, last_run_duration, and failure_count of *_scheduler_jobs are not updated.RUN_JOB can be run in parallel with a regularly scheduled job run.When use_current_session is set to FALSE:You need to check the job log to find error information.All relevant fields in *_scheduler_jobs are updated.RUN_JOB fails if a regularly scheduled job is running.For jobs that have a specified destination or destination group, or point to chains or programs with the detached attribute set to TRUE, use_current_session must be FALSE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_AGENT_REGISTRATION_PASS" ElementId="#BABEJADF">
          <Description>Sets the agent registration password for a database</Description>
          <Parameters>
            <Parameter Name="REGISTRATION_PASSWORD">This is the password that remote agents must specify in order to successfully register with the database. If this is NULL, then no agents will be able to register with the database.</Parameter>
            <Parameter Name="EXPIRATION_DATE">If this is set to a non-NULL value, then the registration_password is not valid after this date. After this date, no agents can register with the database. This cannot be set to a date in the past.</Parameter>
            <Parameter Name="MAX_USES">This is the maximum number of successful registrations that can be performed with this password. After the number of successful registrations has been performed with this password, then no agents can register with the database. This cannot be set to 0 or a negative value. If this is set to NULL, then there will be no limit on the number of successful registrations.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_ATTRIBUTE" ElementId="#CIHDAIIH">
          <Description>Changes an attribute of a job, schedule, or other Scheduler object</Description>
          <Parameters>
            <Parameter Name="NAME">The name of the object.</Parameter>
            <Parameter Name="ATTRIBUTE">See Table 140-77 through Table 140-87.</Parameter>
            <Parameter Name="VALUE">The new value being set for the attribute. This cannot be NULL. To set an attribute value to NULL, use the SET_ATTRIBUTE_NULL procedure.</Parameter>
            <Parameter Name="VALUE2">The value2 argument is for an optional second value. Most attributes have only one value associated with them, but some can have two.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_ATTRIBUTE_NULL" ElementId="#i1000809">
          <Description>Changes an attribute of an object to NULL</Description>
          <Parameters>
            <Parameter Name="NAME">The name of the object</Parameter>
            <Parameter Name="ATTRIBUTE">The attribute being changed</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_JOB_ANYDATA_VALUE" ElementId="#i1000820">
          <Description>Sets the value of a job argument encapsulated in an AnyData object</Description>
          <Parameters>
            <Parameter Name="JOB_NAME">The name of the job to be altered</Parameter>
            <Parameter Name="ARGUMENT_NAME">The name of the program argument being set</Parameter>
            <Parameter Name="ARGUMENT_POSITION">The position of the program argument being set</Parameter>
            <Parameter Name="ARGUMENT_VALUE">The new value to be assigned to the program argument, encapsulated in an AnyData object</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_JOB_ARGUMENT_VALUE" ElementId="#i1011390">
          <Description>Sets the value of a job argument</Description>
          <Parameters>
            <Parameter Name="JOB_NAME">The name of the job to be altered</Parameter>
            <Parameter Name="ARGUMENT_NAME">The name of the program argument being set</Parameter>
            <Parameter Name="ARGUMENT_POSITION">The position of the program argument being set</Parameter>
            <Parameter Name="ARGUMENT_VALUE">The new value to be set for the program argument. To set a non-VARCHAR value, use the SET_JOB_ANYDATA_VALUE procedure.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_JOB_ATTRIBUTES" ElementId="#BABCECGB">
          <Description>Sets the value of a job attribute</Description>
          <Parameters>
            <Parameter Name="JOBATTR_ARRAY">The array of job attribute changes.</Parameter>
            <Parameter Name="COMMIT_SEMANTICS">The commit semantics. The following types are supported:STOP_ON_FIRST_ERROR returns on the first error and commits previous successful attribute changes to disk. This is the default.TRANSACTIONAL returns on the first error and rolls back everything that happened before that error.ABSORB_ERRORS tries to absorb any errors and complete the rest of the job attribute changes on the list. It commits all the successful changes. If errors occur, you can query the view SCHEDULER_BATCH_ERRORS for details.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_RESOURCE_CONSTRAINT" ElementId="#CHDHJCCB">
          <Description>Specifies the resources used by jobs</Description>
          <Parameters>
            <Parameter Name="OBJECT_NAME">The name of a program or a job, or a comma separated list of these objects.</Parameter>
            <Parameter Name="RESOURCE_NAME">The name of the resource.</Parameter>
            <Parameter Name="UNITS">The number of units of this resource that the job or program uses.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_SCHEDULER_ATTRIBUTE" ElementId="#i1004630">
          <Description>Sets the value of a Scheduler attribute</Description>
          <Parameters>
            <Parameter Name="ATTRIBUTE">The name of the Scheduler attribute. Possible values are:'default_timezone': Repeating jobs and windows that use the calendaring syntax retrieve the time zone from this attribute when start_date is not specified. See "Calendaring Syntax" for more information.'email_server': The SMTP server address that the Scheduler uses to send e-mail notifications for job state events. E-mail notifications cannot be sent if this attribute is NULL.'email_sender': The default e-mail address of the sender of job state e-mail notifications.'email_server_credential': The schema and name of an existing credential object that SYS has execute object privileges on. Default is NULL. The username and password stored in this credential are used to authenticate with the e-mail server when sending e-mail notifications.'email_server_encryption': This attribute indicates whether or not encryption is enabled for this email server connection, and if so, at what point encryption starts, and with which protocol. Values are:NONE: the default, indicating no encryption usedSSL_TLS: indicating that either SSL or TLS are used, from the beginning of the connectionSTARTTLS:indicating that the connection starts unencrypted, but the command STARTTLS is sent to the e-mail server and starts encryption'event_expiry_time': The time, in seconds, before a job state event generated by the Scheduler expires from the Scheduler event queue. If NULL, job state events expire after 24 hours.'log_history': The number of days that log entries for both the job log and the window log are retained. Default is 30 and the range of valid values is 0 through 1000000.'max_job_slave_processes': This Scheduler attribute is not used.</Parameter>
            <Parameter Name="VALUE">The new value of the attribute</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="STOP_JOB" ElementId="#i1009818">
          <Description>Stops a currently running job or all jobs in a job class</Description>
          <Parameters>
            <Parameter Name="JOB_NAME">Name of a job to stop. Can be a comma-separate list of jobs, where each entry can be one of the following:Job name: the name of an existing job, optionally preceded by a schema name and dot separator.Job destination ID: a number, obtained from the JOB_DEST_ID column of the *_SCHEDULER_JOB_DESTS views, that represents the unique combination of a job, a credential, and a destination.Job class: the name of a job class. Must be preceded by the SYS schema name and a dot separator.If you specify a job class, all jobs that belong to that job class are stopped. If you specify a job that was created with a destination group as its destination_name attribute, all job instances on all destinations are stopped.</Parameter>
            <Parameter Name="FORCE">If force is set to FALSE, the Scheduler tries to gracefully stop the job using an interrupt mechanism. This method gives control back to the slave process, which can update the status of the job in the job queue to stopped. If this fails, an error is returned.If force is set to TRUE, the Scheduler immediately terminates the job slave. Oracle recommends that STOP_JOB with force set to TRUE be used only after a STOP_JOB with force set to FALSE has failed.Use of the force option requires the MANAGE SCHEDULER system privilege.</Parameter>
            <Parameter Name="COMMIT_SEMANTICS">The commit semantics. The following two types are supported:STOP_ON_FIRST_ERROR: The procedure returns on the first error and commits previous successful stop operations to disk. This is the default.ABSORB_ERRORS: The procedure tries to absorb any errors, stops the rest of the jobs, and commits all the successful stop operations. This type is available only if no job classes are specified in the job_name list. If errors occur, you can query the view SCHEDULER_BATCH_ERRORS for details.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_SPACE" Url="http://docs.oracle.com/database/121/ARPLS/d_space.htm">
      <Description>The DBMS_SPACE package enables you to analyze segment growth and space requirements.</Description>
      <SubPrograms>
        <SubProgram Name="ASA_RECOMMENDATIONS" ElementId="#CHDDBGED">
          <Description>Returns recommendations/findings of segment advisor run automatically by the system or manually invoked by the user</Description>
          <Parameters>
            <Parameter Name="ALL_RUNS">If TRUE, returns recommendations/findings for all runs of auto segment advisor. If FALSE, returns the results of the LATEST run only. LATEST does not make sense for manual invocation of segment advisor. This is applicable only for auto advisor.</Parameter>
            <Parameter Name="SHOW_MANUAL">If TRUE, we show the results of manual invocations only. The auto advisor results are excluded. If FALSE, results of manual invocation of segment advisor are not returned.</Parameter>
            <Parameter Name="SHOW_FINDINGS">Show only the findings instead of the recommendations</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_INDEX_COST" ElementId="#i1002659">
          <Description>Determines the cost of creating an index on an existing table</Description>
          <Parameters>
            <Parameter Name="DDL">The create index DDL statement</Parameter>
            <Parameter Name="USED_BYTES">The number of bytes representing the actual index data</Parameter>
            <Parameter Name="ALLOC_BYTES">Size of the index when created in the tablespace</Parameter>
            <Parameter Name="PLAN_TABLE">Which plan table to use, default NULL</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_TABLE_COST" ElementId="#i1003180">
          <Description>Determines the size of the table given various attributes</Description>
          <Parameters>
            <Parameter Name="TABLESPACE_NAME">The tablespace in which the object will be created. The default is SYSTEM tablespace.</Parameter>
            <Parameter Name="AVG_ROW_SIZE">The anticipated average row size in the table</Parameter>
            <Parameter Name="COLINFOS">The description of the columns</Parameter>
            <Parameter Name="ROW_COUNT">The anticipated number of rows in the table</Parameter>
            <Parameter Name="PCT_FREE">The percentage of free space in each block for future expansion of existing rows due to updates</Parameter>
            <Parameter Name="USED_BYTES">The space used by user data</Parameter>
            <Parameter Name="ALLOC_BYTES">The size of the object taking into account the tablespace extent characteristics</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="FREE_BLOCKS" ElementId="#i1002261">
          <Description>Returns information about free blocks in an object (table, index, or cluster)</Description>
          <Parameters>
            <Parameter Name="SEGMENT_OWNER">Schema name of the segment to be analyzed</Parameter>
            <Parameter Name="SEGMENT_NAME">Segment name of the segment to be analyzed</Parameter>
            <Parameter Name="SEGMENT_TYPE">Type of the segment to be analyzed (TABLE, INDEX, or CLUSTER):TABLETABLE PARTITIONTABLE SUBPARTITIONINDEXINDEX PARTITIONINDEX SUBPARTITIONCLUSTERLOBLOB PARTITIONLOB SUBPARTITION</Parameter>
            <Parameter Name="FREELIST_GROUP_ID">Freelist group (instance) whose free list size is to be computed</Parameter>
            <Parameter Name="FREE_BLKS">Returns count of free blocks for the specified group</Parameter>
            <Parameter Name="SCAN_LIMIT">Maximum number of free list blocks to read (optional).Use a scan limit of X you are interested only in the question, "Do I have X blocks on the free list?"</Parameter>
            <Parameter Name="PARTITION_NAME">Partition name of the segment to be analyzed.This is only used for partitioned tables. The name of subpartition should be used when partitioning is composite.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ISDATAFILEDROPPABLE_NAME" ElementId="#BABEJBHE">
          <Description>Checks whether a datafile is droppable</Description>
          <Parameters>
            <Parameter Name="FILENAME">Name of the file</Parameter>
            <Parameter Name="VALUE">Values: 0 if the file is not droppable, 1 if the file is droppable.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="OBJECT_DEPENDENT_SEGMENTS" ElementId="#i1001702">
          <Description>Returns the list of segments that are associated with the object</Description>
          <Parameters>
            <Parameter Name="OBJOWNER">The schema containing the object</Parameter>
            <Parameter Name="OBJNAME">The name of the object</Parameter>
            <Parameter Name="PARTNAME">The name of the partition</Parameter>
            <Parameter Name="OBJTYPE">Type of the object:OBJECT_TYPE_TABLE constant positive := 1;OBJECT_TYPE_NESTED_TABLE constant positive := 2;OBJECT_TYPE_INDEX constant positive := 3;OBJECT_TYPE_CLUSTER constant positive := 4;OBJECT_TYPE_TABLE_PARTITION constant positive := 7;OBJECT_TYPE_INDEX_PARTITION constant positive := 8;OBJECT_TYPE_TABLE_SUBPARTITION constant positive := 9;OBJECT_TYPE_INDEX_SUBPARTITION constant positive := 10;OBJECT_TYPE_MV constant positive := 13;OBJECT_TYPE_MVLOG constant positive := 14;</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="OBJECT_GROWTH_TREND" ElementId="#i1002179">
          <Description>A table function where each row describes the space usage of the object at a specific point in time</Description>
          <Parameters>
            <Parameter Name="OBJECT_OWNER">The schema containing the object</Parameter>
            <Parameter Name="OBJECT_NAME">The name of the object</Parameter>
            <Parameter Name="OBJECT_TYPE">The type of the object</Parameter>
            <Parameter Name="PARTITION_NAME">The name of the partition</Parameter>
            <Parameter Name="START_TIME">Statistics generated after this time will be used in generating the growth trend</Parameter>
            <Parameter Name="END_TIME">Statistics generated until this time will be used in generating the growth trend</Parameter>
            <Parameter Name="INTERVAL">The interval at which to sample</Parameter>
            <Parameter Name="SKIP_INTERPOLATED">Whether interpolation of missing values should be skipped</Parameter>
            <Parameter Name="TIMEOUT_SECONDS">The time-out value for the function in seconds</Parameter>
            <Parameter Name="SINGLE_DATA_POINT_FLAG">Whether in the absence of statistics the segment should be sampled</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SPACE_USAGE" ElementId="#CACBDJIH">
          <Description>Returns information about free blocks in an auto segment space managed segment</Description>
          <Parameters>
            <Parameter Name="SEGMENT_OWNER">Schema name of the segment to be analyzed</Parameter>
            <Parameter Name="SEGMENT_NAME">Name of the segment to be analyzed</Parameter>
            <Parameter Name="PARTITION_NAME">Partition name of the segment to be analyzed</Parameter>
            <Parameter Name="SEGMENT_TYPE">Type of the segment to be analyzed (TABLE, INDEX, or CLUSTER):TABLETABLE PARTITIONTABLE SUBPARTITIONINDEXINDEX PARTITIONINDEX SUBPARTITIONCLUSTERLOBLOB PARTITIONLOB SUBPARTITION</Parameter>
            <Parameter Name="UNFORMATTED_BLOCKS">Total number of blocks unformatted</Parameter>
            <Parameter Name="UNFORMATTED BYTES">Total number of bytes unformatted</Parameter>
            <Parameter Name="FS1_BLOCKS">Number of blocks having at least 0 to 25% free space</Parameter>
            <Parameter Name="FS1_BYTES">Number of bytes having at least 0 to 25% free space</Parameter>
            <Parameter Name="FS2_BLOCKS">Number of blocks having at least 25 to 50% free space</Parameter>
            <Parameter Name="FS2_BYTES">Number of bytes having at least 25 to 50% free space</Parameter>
            <Parameter Name="FS3_BLOCKS">Number of blocks having at least 50 to 75% free space</Parameter>
            <Parameter Name="FS3_BYTES">Number of bytes having at least 50 to 75% free space</Parameter>
            <Parameter Name="FS4_BLOCKS">Number of blocks having at least 75 to 100% free space</Parameter>
            <Parameter Name="FS4_BYTES">Number of bytes having at least 75 to 100% free space</Parameter>
            <Parameter Name="FUL1_BLOCKS">Total number of blocks full in the segment</Parameter>
            <Parameter Name="FULL_BYTES">Total number of bytes full in the segment</Parameter>
            <Parameter Name="SEGMENT_SIZE_BLOCKS">Number of blocks allocated to the segment</Parameter>
            <Parameter Name="SEGMENT_SIZE_BYTES">Number of bytes allocated to the segment</Parameter>
            <Parameter Name="USED_BLOCKS">Number blocks allocated to the LOB that contains active data</Parameter>
            <Parameter Name="USED_BYTES">Number bytes allocated to the LOB that contains active data</Parameter>
            <Parameter Name="EXPIRED_BLOCKS">Number of expired blocks used by the LOB to keep version data</Parameter>
            <Parameter Name="EXPIRED_BYTES">Number of expired bytes used by the LOB to keep version data</Parameter>
            <Parameter Name="UNEXPIRED_BLOCKS">Number of unexpired blocks used by the LOB to keep version data</Parameter>
            <Parameter Name="UNEXPIRED_BYTES">Number of unexpired bytes used by the LOB to keep version data</Parameter>
            <Parameter Name="PARTITION_NAME">Name of the partition (NULL if not a partition)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UNUSED_SPACE" ElementId="#i1000324">
          <Description>Returns information about unused space in an object (table, index, or cluster)</Description>
          <Parameters>
            <Parameter Name="SEGMENT_OWNER">Schema name of the segment to be analyzed</Parameter>
            <Parameter Name="SEGMENT_NAME">Segment name of the segment to be analyzed</Parameter>
            <Parameter Name="SEGMENT_TYPE">Type of the segment to be analyzed (TABLE, INDEX, or CLUSTER):TABLETABLE PARTITIONTABLE SUBPARTITIONINDEXINDEX PARTITIONINDEX SUBPARTITIONCLUSTERLOBLOB PARTITIONLOB SUBPARTITION</Parameter>
            <Parameter Name="TOTAL_BLOCKS">Returns total number of blocks in the segment</Parameter>
            <Parameter Name="TOTAL_BYTES">Returns total number of blocks in the segment, in bytes</Parameter>
            <Parameter Name="UNUSED_BLOCKS">Returns number of blocks which are not used</Parameter>
            <Parameter Name="UNUSED_BYTES">Returns, in bytes, number of blocks which are not used</Parameter>
            <Parameter Name="LAST_USED_EXTENT_FILE_ID">Returns the file ID of the last extent which contains data</Parameter>
            <Parameter Name="LAST_USED_EXTENT_BLOCK_ID">Returns the starting block ID of the last extent which contains data</Parameter>
            <Parameter Name="LAST_USED_BLOCK">Returns the last block within this extent which contains data</Parameter>
            <Parameter Name="PARTITION_NAME">Partition name of the segment to be analyzed.This is only used for partitioned tables; the name of subpartition should be used when partitioning is compose.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_SPACE_ADMIN" Url="http://docs.oracle.com/database/121/ARPLS/d_spadmn.htm">
      <Description>The DBMS_SPACE_ADMIN package provides functionality for locally managed tablespaces.</Description>
      <SubPrograms>
        <SubProgram Name="ASSM_SEGMENT_VERIFY" ElementId="#CACFGICA">
          <Description>Verifies segments created in ASSM (Automatic Segment-Space Management) tablespaces</Description>
          <Parameters>
            <Parameter Name="SEGMENT_OWNER">Schema that owns the segment</Parameter>
            <Parameter Name="SEGMENT_NAME">Name of the segment to be verified</Parameter>
            <Parameter Name="SEGMENT_TYPE">Segment namespace is one of TABLE, TABLE PARTITION, TABLE SUBPARTITION, INDEX, INDEX PARTITION, INDEX SUBPARTITION, LOB, LOB PARTITION, LOB SUBPARTITION, CLUSTER</Parameter>
            <Parameter Name="PARTITION_NAME">Name of the partition or subpartition</Parameter>
            <Parameter Name="VERIFY_OPTION">One of the following options:SEGMENT_VERIFY_BASIC := 9. Performs the basic metadata checks (Default)SEGMENT_VERIFY_DEEP := 10. Performs deep verificationSEGMENT_VERIFY_SPECIFIC := 11. Performs a specific check for the segment</Parameter>
            <Parameter Name="ATTRIB">When option SEGMENT_VERIFY_SPECIFIC is specified as option, attrib can be one of the following:HWM_CHECK := 12. Checks whether high water mark information is accurateBMB_CHECK := 13. Checks whether space bitmap blocks have correct backpointers to the segment headerSEG_DICT_CHECK := 14. Checks whether dictionary information for segment is accurateEXTENT_TS_BITMAP_CHECK := 15. Checks whether extent maps are consistent with file level bitmapsDB_BACKPOINTER_CHECK := 16. Checks whether datablocks have correct backpointers to the space metadata blocksEXTENT_SEGMENT_BITMAP_CHECK := 17. Checks whether extent map in the segment matches the bitmaps in the segmentBITMAPS_CHECK := 18. Checks whether space bitmap blocks are accurate</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ASSM_TABLESPACE_VERIFY" ElementId="#CACBDCIF">
          <Description>Verifies ASSM tablespaces</Description>
          <Parameters>
            <Parameter Name="TABLESPACE_NAME">Name of the tablespace to verify. The tablespace must be an ASSM tablespace.</Parameter>
            <Parameter Name="TS_OPTION">TS_VERIFY_BITMAPS := 19. The bitmaps are verified against the extents. This detects bits that are marked used or free wrongly and detects multiple allocation of extents. The file metadata is validated against file$ and control file.TS_VERIFY_DEEP := 20. This option is used to verify the file bitmaps as well perform checks on all the segments.TS_VERIFY_SEGMENTS := 21. This option is used to invoke SEGMENT_VERIFY on all the segments in the tablespace. Optionally you can write a script that queries all the segments in the tablespace and invoke SEGMENT_VERIFY.</Parameter>
            <Parameter Name="SEGMENT_OPTION">When TS_VERIFY_SEGMENTS is specified, segment_option can be one of the following:SEGMENT_VERIFY_BASIC := 9SEGMENT_VERIFY_DEEP := 10The value of segment_option is NULL when TS_VERIFY_DEEP or TS_VERIFY_BITMAPS is specified.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_EMPTY_SEGMENTS" ElementId="#CACGGIAF">
          <Description>Drops segments from empty tables or table fragments and dependent objects</Description>
          <Parameters>
            <Parameter Name="SCHEMA_NAME">Name of schema</Parameter>
            <Parameter Name="TABLE_NAME">Name of table</Parameter>
            <Parameter Name="PARTITION_NAME">Name of partition</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MATERIALIZE_DEFERRED_SEGMENTS" ElementId="#CACFEJDA">
          <Description>Materializes segments for tables and table fragments with deferred segment creation and their dependent objects</Description>
          <Parameters>
            <Parameter Name="SCHEMA_NAME">Name of schema</Parameter>
            <Parameter Name="TABLE_NAME">Name of table</Parameter>
            <Parameter Name="PARTITION_NAME">Name of partition</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SEGMENT_CORRUPT" ElementId="#i1003202">
          <Description>Marks the segment corrupt or valid so that appropriate error recovery can be done</Description>
          <Parameters>
            <Parameter Name="TABLESPACE_NAME">Name of tablespace in which segment resides</Parameter>
            <Parameter Name="HEADER_RELATIVE_FILE">Relative file number of segment header</Parameter>
            <Parameter Name="HEADER_BLOCK">Block number of segment header</Parameter>
            <Parameter Name="CORRUPT_OPTION">SEGMENT_MARK_CORRUPT (default) or SEGMENT_MARK_VALID</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SEGMENT_DROP_CORRUPT" ElementId="#i997057">
          <Description>Drops a segment currently marked corrupt (without reclaiming space)</Description>
          <Parameters>
            <Parameter Name="TABLESPACE_NAME">Name of tablespace in which segment resides</Parameter>
            <Parameter Name="HEADER_RELATIVE_FILE">Relative file number of segment header</Parameter>
            <Parameter Name="HEADER_BLOCK">Block number of segment header</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SEGMENT_DUMP" ElementId="#i997098">
          <Description>Dumps the segment header and extent maps of a given segment</Description>
          <Parameters>
            <Parameter Name="TABLESPACE_NAME">Name of tablespace in which segment resides</Parameter>
            <Parameter Name="HEADER_RELATIVE_FILE">Relative file number of segment header</Parameter>
            <Parameter Name="HEADER_BLOCK">Block number of segment header</Parameter>
            <Parameter Name="DUMP_OPTION">One of the following options:SEGMENT_DUMP_EXTENT_MAPSEGMENT_DUMP_BITMAP_SUMMARY</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SEGMENT_VERIFY" ElementId="#i1003253">
          <Description>Verifies the consistency of the extent map of the segment</Description>
          <Parameters>
            <Parameter Name="TABLESPACE_NAME">Name of tablespace in which segment resides</Parameter>
            <Parameter Name="HEADER_RELATIVE_FILE">Relative file number of segment header</Parameter>
            <Parameter Name="HEADER_BLOCK">Block number of segment header</Parameter>
            <Parameter Name="VERIFY_OPTION">What kind of check to do: SEGMENT_VERIFY_EXTENTS or SEGMENT_VERIFY_EXTENTS_GLOBAL</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="TABLESPACE_FIX_BITMAPS" ElementId="#i997164">
          <Description>Marks the appropriate block range (extent) as free or used in bitmap</Description>
          <Parameters>
            <Parameter Name="TABLESPACE_NAME">Name of tablespace</Parameter>
            <Parameter Name="DBARANGE_RELATIVE_FILE">Relative file number of block range (extent)</Parameter>
            <Parameter Name="DBARANGE_BEGIN_BLOCK">Block number of beginning of extent</Parameter>
            <Parameter Name="DBARANGE_END_BLOCK">Block number (inclusive) of end of extent</Parameter>
            <Parameter Name="FIX_OPTION">One of the following options:TABLESPACE_EXTENT_MAKE_FREETABLESPACE_EXTENT_MAKE_USED</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="TABLESPACE_FIX_SEGMENT_STATES" ElementId="#i1003383">
          <Description>Fixes the state of the segments in a tablespace in which migration was aborted</Description>
        </SubProgram>
        <SubProgram Name="TABLESPACE_MIGRATE_FROM_LOCAL" ElementId="#i1003433">
          <Description>Migrates a locally managed tablespace to dictionary-managed tablespace</Description>
        </SubProgram>
        <SubProgram Name="TABLESPACE_MIGRATE_TO_LOCAL" ElementId="#i997300">
          <Description>Migrates a tablespace from dictionary-managed format to locally managed format</Description>
        </SubProgram>
        <SubProgram Name="TABLESPACE_REBUILD_BITMAPS" ElementId="#i1003443">
          <Description>Rebuilds the appropriate bitmaps</Description>
          <Parameters>
            <Parameter Name="TABLESPACE_NAME">Name of tablespace</Parameter>
            <Parameter Name="BITMAP_RELATIVE_FILE">Relative file number of bitmap block to rebuild</Parameter>
            <Parameter Name="BITMAP_BLOCK">Block number of bitmap block to rebuild</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="TABLESPACE_REBUILD_QUOTAS" ElementId="#i1003484">
          <Description>Rebuilds quotas for given tablespace</Description>
          <Parameters>
            <Parameter Name="TABLESPACE_NAME">Name of tablespace</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="TABLESPACE_RELOCATE_BITMAPS" ElementId="#i997372">
          <Description>Relocates the bitmaps to the destination specified</Description>
        </SubProgram>
        <SubProgram Name="TABLESPACE_VERIFY" ElementId="#i1003313">
          <Description>Verifies that the bitmaps and extent maps for the segments in the tablespace are synchronized</Description>
          <Parameters>
            <Parameter Name="TABLESPACE_NAME">Name of tablespace</Parameter>
            <Parameter Name="VERIFY_OPTION">One option is supported: TABLESPACE_VERIFY_BITMAP</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_SPD" Url="http://docs.oracle.com/database/121/ARPLS/d_spd.htm">
      <Description>The DBMS_SPD package provides subprograms for managing SQL plan directives (SPD).</Description>
      <SubPrograms>
        <SubProgram Name="ALTER_SQL_PLAN_DIRECTIVE" ElementId="#CIHEFGBI">
          <Description>Changes different attributes of a SQL plan directive</Description>
          <Parameters>
            <Parameter Name="DIRECTIVE_ID">SQL plan directive ID</Parameter>
            <Parameter Name="ATTRIBUTE_NAME">ENABLEDAUTO_DROP</Parameter>
            <Parameter Name="ATTRIBUTE_VALUE">Possible values:ENABLED:- If YES directive is enabled and may be used- If NO directive is not enabled and will not be usedAUTO_DROP:- If YES directive will be dropped automatically if not used for SPD_RETENTION_WEEKS. This is the default behavior.- If NO directive will not be dropped automatically</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_STGTAB_DIRECTIVE" ElementId="#CIHEFDGI">
          <Description>Creates a staging table into which to pack (export) SQL plan directives.</Description>
          <Parameters>
            <Parameter Name="TABLE_NAME">Name of staging table</Parameter>
            <Parameter Name="TABLE_OWNER">Name of schema owner of staging table. Default is current schema.</Parameter>
            <Parameter Name="TABLESPACE_NAME">Name of tablespace. Default NULL means create staging table in the default tablespace:</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_SQL_PLAN_DIRECTIVE" ElementId="#CIHEIAFA">
          <Description>Drops a SQL plan directive</Description>
          <Parameters>
            <Parameter Name="DIRECTIVE_ID">SQL plan directive ID</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="FLUSH_SQL_PLAN_DIRECTIVE" ElementId="#CIHDIFFC">
          <Description>Allows for manual flushing of the SQL plan directives that are automatically recorded in SGA memory while executing SQL statements.</Description>
        </SubProgram>
        <SubProgram Name="GET_PREFS" ElementId="#CIHJGBJG">
          <Description>Gets the values for preferences for SQL plan directives</Description>
          <Parameters>
            <Parameter Name="PNAME">Preference name. The procedure supports the preference SPD_RETENTION_WEEKS.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PACK_STGTAB_DIRECTIVE" ElementId="#CIHBEHIF">
          <Description>Packs (exports) SQL plan directives into a staging table.</Description>
          <Parameters>
            <Parameter Name="TABLE_NAME">Name of staging table</Parameter>
            <Parameter Name="TABLE_OWNER">Name of schema owner of staging table. Default is current schema.</Parameter>
            <Parameter Name="DIRECTIVE_ID">SQL plan directive ID. Default NULL means all directives in the system.</Parameter>
            <Parameter Name="OBJ_LIST">Used to filter the directives to be packed based on the objects used in directives. If obj_list is not NULL, a directive is packed only if all the objects in the directive exist in obj_list.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_PREFS" ElementId="#CIHJJFHA">
          <Description>Allows the setting of different preferences for SQL plan directives</Description>
          <Parameters>
            <Parameter Name="PNAME">Preference name. The procedure supports the preference SPD_RETENTION_WEEKS.</Parameter>
            <Parameter Name="PVALUE">Preference value.SPD_RETENTION_WEEKS: SQL plan directives are purged if not used for more than the value set for this preference. Default is 53 (SPD_RETENTION_WEEKS_DEFAULT) weeks, which means a directive is purged if it has been left unused for little over a year. It can be set to any value greater than or equal to 0. Also value NULL can be passed to set the preference to default.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UNPACK_STGTAB_DIRECTIVE" ElementId="#CIHEFIFG">
          <Description>Unpacks (imports) SQL plan directives from a staging table.</Description>
          <Parameters>
            <Parameter Name="TABLE_NAME">Name of staging table</Parameter>
            <Parameter Name="TABLE_OWNER">Name of schema owner of staging table. Default is current schema.</Parameter>
            <Parameter Name="DIRECTIVE_ID">SQL plan directive ID. Default NULL means all directives in the system.</Parameter>
            <Parameter Name="OBJ_LIST">Used to filter the directives to be unpacked based on the objects used in directives. If obj_list is not NULL, a directive is unpacked only if all the objects in the directive exist in obj_list.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_SPM" Url="http://docs.oracle.com/database/121/ARPLS/d_spm.htm">
      <Description>The DBMS_SPM package supports the SQL plan management feature by providing an interface for the DBA or other user to perform controlled manipulation of plan history and SQL plan baselines maintained for various SQL statements.</Description>
      <SubPrograms>
        <SubProgram Name="ACCEPT_SQL_PLAN_BASELINE" ElementId="#CACDEIBC">
          <Description>Accepts a plan based on the recommendation of an evolve task</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Identifier of task to implement</Parameter>
            <Parameter Name="OBJECT_ID">Identifier of the advisor framework object that represents a single plan. If NULL, the report is generated for all objects.</Parameter>
            <Parameter Name="TASK_OWNER">Owner of the evolve task. Defaults to the current schema owner.</Parameter>
            <Parameter Name="FORCE">Accept the plan even if the advisor did not recommend such an action. The default is FALSE requiring acceptance of the plan only if the plan is verified and shows sufficient improvement in benefit.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ALTER_SQL_PLAN_BASELINE" ElementId="#CACJJFDB">
          <Description>Changes an attribute of a single plan or all plans associated with a SQL statement using the attribute name/value format</Description>
          <Parameters>
            <Parameter Name="SQL_HANDLE">SQL statement handle. It identifies plans associated with a SQL statement for an attribute change. If NULL then plan_name must be specified.</Parameter>
            <Parameter Name="PLAN_NAME">Plan name. It identifies a specific plan. Default NULL means set the attribute for all plans associated with a SQL statement identified by sql_handle. If NULL then sql_handle must be specified.</Parameter>
            <Parameter Name="ATTRIBUTE_NAME">Name of plan attribute to set (see table below).</Parameter>
            <Parameter Name="ATTRIBUTE_VALUE">Value of plan attribute to use (see table below)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CANCEL_EVOLVE_TASK" ElementId="#CACCCJDF">
          <Description>Cancels a currently executing evolve task</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Identifier of task to cancel</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CONFIGURE" ElementId="#CACHAGGA">
          <Description>Sets configuration options for SQL management base, in parameter/value format</Description>
          <Parameters>
            <Parameter Name="PARAMETER_NAME">Name of parameter to set (see table below)</Parameter>
            <Parameter Name="PARAMETER_VALUE">Value of parameter to use (see table below)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_EVOLVE_TASK" ElementId="#CACBHAHJ">
          <Description>Creates an advisor task and sets its parameters</Description>
          <Parameters>
            <Parameter Name="SQL_HANDLE">Handle of a SQL statement. The default NULL considers all SQL statements with non-accepted plans.</Parameter>
            <Parameter Name="PLAN_LIST">List of plan names. The plans may belong to different SQL statements.</Parameter>
            <Parameter Name="PLAN_NAME">Plan identifier. The default NULL considers all non-accepted plans of the specified SQL handle or all SQL statements if the SQL handle is NULL.</Parameter>
            <Parameter Name="TIME_LIMIT">Time limit in number of minutes. The time limit is global and it is used in the following manner. The time limit for first non-accepted plan is equal to the input value. The time limit for the second non-accepted plan is equal to (input value - time spent in first plan verification) and so on. The default DBMS_SPM.AUTO_LIMIT means let the system choose an appropriate time limit based on the number of plan verifications required to be done. The value DBMS_SPM.NO_LIMIT means no time limit.</Parameter>
            <Parameter Name="TASK_NAME">Evolve task name</Parameter>
            <Parameter Name="DESCRIPTION">Description of the task (maximum 256 characters)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_STGTAB_BASELINE" ElementId="#CACBHIHE">
          <Description>Creates a staging table that used for transporting SQL plan baselines from one system to another</Description>
          <Parameters>
            <Parameter Name="TABLE_NAME">Name of staging table to create for the purpose of packing and unpacking SQL plan baselines</Parameter>
            <Parameter Name="TABLE_OWNER">Name of owner of the staging table. Default NULL means current schema is the table owner.</Parameter>
            <Parameter Name="TABLESPACE_NAME">Name of tablespace. Default NULL means create staging table in the default tablespace.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_EVOLVE_TASK" ElementId="#CACDAICC">
          <Description>Drops an evolved task</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Identifier of task to drop</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_SQL_PLAN_BASELINE" ElementId="#CACGAHJF">
          <Description>Drops a single plan, or all plans associated with a SQL statement</Description>
          <Parameters>
            <Parameter Name="SQL_HANDLE">SQL statement handle. It identifies plans associated with a SQL statement that are to be dropped. If NULL then plan_name must be specified.</Parameter>
            <Parameter Name="PLAN_NAME">Plan name. It identifies a specific plan. Default NULL means to drop all plans associated with the SQL statement identified by sql_handle.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EVOLVE_SQL_PLAN_BASELINE" ElementId="#CACEBBEI">
          <Description>Evolves SQL plan baselines associated with one or more SQL statements</Description>
          <Parameters>
            <Parameter Name="SQL_HANDLE">SQL statement identifier. Unless plan_name is specified, NULL means to consider all statements with non-accepted plans in their SQL plan baselines.</Parameter>
            <Parameter Name="PLAN_NAME">Plan identifier. Default NULL means to consider all non- accepted plans in the SQL plan baseline of either the identified SQL statement or all SQL statements if sql_handle is NULL.</Parameter>
            <Parameter Name="PLAN_LIST">A list of plan names. Each plan in the list can belong to same or different SQL statement.</Parameter>
            <Parameter Name="TIME_LIMIT">Time limit in number of minutes. This applies only if verify = 'YES'. The time limit is global and it is used as follows: The time limit for first non-accepted plan verification is set equal to the input value; the time limit for second non-accepted plan verification is set equal to (input value - time spent in first plan verification); and so on.DBMS_SPM.AUTO_LIMIT (Default) lets the system choose an appropriate time limit based on the number of plan verifications required to be done.DBMS_SPM.NO_LIMIT means there is no time limit.A positive integer value represents a user specified time limit.</Parameter>
            <Parameter Name="VERIFY">Specifies whether to execute the plans and compare the performance before changing non-accepted plans into accepted plans. A performance verification involves executing a non-accepted plan and a plan chosen from corresponding SQL plan baseline and comparing their performance statistics. If non-accepted plan shows performance improvement, it is changed to an accepted plan.'YES' (Default) - verifies that a non-accepted plan gives better performance before changing it to an accepted plan'NO' - directs not to execute plans but only to change non-accepted plans into accepted plans</Parameter>
            <Parameter Name="COMMIT">Specifies whether to update the ACCEPTED status of non-accepted plans from 'NO' to 'YES'.'YES' (Default) - perform updates of qualifying non-accepted plans and generate a report that shows the updates and the result of performance verification when verify = 'YES'.'NO' - generate a report without any updates. Note that commit = 'NO' together with verify = 'NO' represents a no-op.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXECUTE_EVOLVE_TASK" ElementId="#CACBAAHG">
          <Description>Executes a previously created evolve task</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Evolve task name</Parameter>
            <Parameter Name="EXECUTION_NAME">Name to qualify and identify an execution. If not specified, it is generated by the advisor and returned by the function.</Parameter>
            <Parameter Name="EXECUTION_DESC">Description of the execution (maximum 256 characters)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IMPLEMENT_EVOLVE_TASK" ElementId="#CACGEEDF">
          <Description>Implements a plan based on the recommendation of an evolve task</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Identifier of task to report</Parameter>
            <Parameter Name="TASK_OWNER">Owner of the evolve task. Defaults to the current schema owner.</Parameter>
            <Parameter Name="EXECUTION_NAME">Name to qualify and identify an execution. If NULL, the action will be taken for the last task execution.</Parameter>
            <Parameter Name="FORCE">Accept all plans even if the advisor did not recommend such an action. The default is FALSE requiring acceptance of the plan only if the plan is verified and shows sufficient improvement in benefit.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="INTERRUPT_EVOLVE_TASK" ElementId="#CACDIEEJ">
          <Description>Interrupts a currently executing evolve task</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Identifier of task to interrupt</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LOAD_PLANS_FROM_CURSOR_CACHE" ElementId="#CACBFHHJ">
          <Description>Loads one or more plans present in the cursor cache for a SQL statement</Description>
          <Parameters>
            <Parameter Name="SQL_ID">SQL statement identifier. Identifies a SQL statement in the cursor cache. Note: In the third overload the text of identified SQL statement is extracted from cursor cache and is used to identify the SQL plan baseline into which the plan(s) are loaded. If the SQL plan baseline doesn't exist it is created.</Parameter>
            <Parameter Name="PLAN_HASH_VALUE">Plan identifier. Default NULL means capture all plans present in the cursor cache for the SQL statement identified by SQL_ID.</Parameter>
            <Parameter Name="SQL_TEXT">SQL text to use in identifying the SQL plan baseline into which the plans are loaded. If the SQL plan baseline does not exist, it is created. The use of text is crucial when the user tunes a SQL statement by adding hints to its text and then wants to load the resulting plan(s) into the SQL plan baseline of the original SQL statement.</Parameter>
            <Parameter Name="SQL_HANDLE">SQL handle to use in identifying the SQL plan baseline into which the plans are loaded. The sql_handle must denote an existing SQL plan baseline. The use of handle is crucial when the user tunes a SQL statement by adding hints to its text and then wants to load the resulting plan(s) into the SQL plan baseline of the original SQL statement.</Parameter>
            <Parameter Name="FIXED">Default 'NO' means the loaded plans are used as non-fixed plans. Value 'YES' means the loaded plans are used as fixed plans and the SQL plan baseline will not be evolved over time.</Parameter>
            <Parameter Name="ATTRIBUTE_NAME">One of possible attribute names:SQL_TEXT'''PARSING_SCHEMA_NAME''MODULE''ACTION'</Parameter>
            <Parameter Name="ATTRIBUTE_VALUE">Attribute value is used as a search pattern of LIKE predicate if attribute name is 'SQL_TEXT'. Otherwise, it is used as an equality search value. (for example, for specifying attribute_name =&gt; 'SQL_TEXT', and attribute_value =&gt; '% HR-123 %' means applying SQL_TEXT LIKE '% HR-123 %' as a selection filter. Similarly, specifying attribute_name =&gt; 'MODULE', and attribute_value =&gt; 'HR' means applying 'MODULE = 'HR' as a plan selection filter). The attribute value is upper-cased except when it is enclosed in double quotes or attribute name is 'SQL_TEXT'.</Parameter>
            <Parameter Name="ENABLED">Default 'YES' means the loaded plans are enabled for use by the optimizer</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LOAD_PLANS_FROM_SQLSET" ElementId="#CACBCAGD">
          <Description>Loads plans stored in a SQL tuning set (STS) into SQL plan baselines</Description>
          <Parameters>
            <Parameter Name="SQLSET_NAME">Name of the STS from where the plans are loaded into SQL plan baselines</Parameter>
            <Parameter Name="SQLSET_OWNER">Owner of STS. NULL means current schema is the owner.</Parameter>
            <Parameter Name="BASIC_FILTER">A filter applied to the STS to select only qualifying plans to be loaded. The filter can take the form of any WHERE clause predicate that can specified against the view DBA_SQLSET_STATEMENTS. For example basic_filter =&gt; 'sql_text like ''select /*LOAD_STS*/%''' or basic_filter =&gt; 'sql_id=''b62q7nc33gzwx'''.</Parameter>
            <Parameter Name="FIXED">Default 'NO' means the loaded plans are used as non-fixed plans. Value 'YES' means the loaded plans are used as fixed plans and the SQL plan baseline will not be evolved over time.</Parameter>
            <Parameter Name="ENABLED">Default 'YES' means the loaded plans are enabled for use by the optimizer</Parameter>
            <Parameter Name="COMMIT_ROWS">Number of SQL plans to load before doing a periodic commit. This helps to shorten the undo log.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MIGRATE_STORED_OUTLINE" ElementId="#CACCGDBG">
          <Description>Migrates existing stored outlines to SQL plan baselines</Description>
          <Parameters>
            <Parameter Name="ATTRIBUTE_NAME">Specifies the type of parameter used in attribute_value to identify the migrated stored outlines. It is case insensitive. Possible values:outline_namesql_textcategoryall</Parameter>
            <Parameter Name="ATTRIBUTE_VALUE">Based on attribute_name, this can be:Name of stored outline to be migratedSQL text of stored outlines to be migratedCategory of stored outlines to be migratedNULL if attribute_name is all</Parameter>
            <Parameter Name="FIXED">NO (default) or YES. Specifies the "fixed" status of the plans generated during migration. By default, plans are generated as "non-fixed" plans.</Parameter>
            <Parameter Name="OUTLN_LIST">List of outline names to be migrated</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PACK_STGTAB_BASELINE" ElementId="#CACEGFAI">
          <Description>Packs (exports) SQL plan baselines from SQL management base into a staging table</Description>
          <Parameters>
            <Parameter Name="TABLE_NAME">Name of staging table into which SQL plan baselines are packed (case insensitive unless double quoted)</Parameter>
            <Parameter Name="TABLE_OWNER">Name of staging table owner.Default NULL means current schema is the table owner</Parameter>
            <Parameter Name="SQL_HANDLE">SQL handle (case sensitive)</Parameter>
            <Parameter Name="PLAN_NAME">Plan name (case sensitive, % wildcards accepted)</Parameter>
            <Parameter Name="SQL_TEXT">SQL text string (case sensitive, % wildcards accepted)</Parameter>
            <Parameter Name="CREATOR">Creator of SQL plan baseline (case insensitive unless double quoted)</Parameter>
            <Parameter Name="ORIGIN">Origin of SQL plan baseline, should be 'MANUAL-LOAD', 'AUTO-CAPTURE', 'MANUAL_SQLTUNE' or 'AUTO-SQLTUNE' (case insensitive)</Parameter>
            <Parameter Name="ENABLED">Must be 'YES' or 'NO' (case insensitive)</Parameter>
            <Parameter Name="ACCEPTED">Must be 'YES' or 'NO' (case insensitive)</Parameter>
            <Parameter Name="FIXED">Must be 'YES' or 'NO' (case insensitive)</Parameter>
            <Parameter Name="MODULE">Module (case sensitive)</Parameter>
            <Parameter Name="ACTION">Action (case sensitive)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RESET_EVOLVE_TASK" ElementId="#CACBGCGF">
          <Description>Resets an evolve task to its initial state</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Identifier of task to reset</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RESUME_EVOLVE_TASK" ElementId="#CACFICCF">
          <Description>Resumes a previously interrupted task</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Identifier of task to resume</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REPORT_AUTO_EVOLVE_TASK" ElementId="#CACEEIDJ">
          <Description>Displays the results of an execution of an automatic evolve task.</Description>
          <Parameters>
            <Parameter Name="TYPE">Type of the report. Possible values are TEXT, HTML, XML</Parameter>
            <Parameter Name="LEVEL">Format of the report. Possible values are BASIC, TYPICAL, ALL.</Parameter>
            <Parameter Name="SECTION">Particular section in the report. Possible values are: SUMMARY, FINDINGS, PLANS, INFORMATION, ERRORS, ALL.</Parameter>
            <Parameter Name="OBJECT_ID">Identifier of the advisor framework object that represents a single plan. If NULL, the report is generated for all objects.</Parameter>
            <Parameter Name="EXECUTION_NAME">Name to qualify and identify an execution. If NULL, the report is generated for the last task execution.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REPORT_EVOLVE_TASK" ElementId="#CACCIGBG">
          <Description>Displays the results of an evolved task</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Identifier of task to report</Parameter>
            <Parameter Name="TYPE">Type of the report. Possible values are TEXT, HTML, XML</Parameter>
            <Parameter Name="LEVEL">Format of the report. Possible values are BASIC, TYPICAL, ALL.</Parameter>
            <Parameter Name="SECTION">Particular section in the report. Possible values are: SUMMARY, FINDINGS, PLANS, INFORMATION, ERRORS, ALL.</Parameter>
            <Parameter Name="OBJECT_ID">Identifier of the advisor framework object that represents a single plan. If NULL, the report is generated for all objects.</Parameter>
            <Parameter Name="TASK_OWNER">Owner of the evolve task. Defaults to the current schema owner.</Parameter>
            <Parameter Name="EXECUTION_NAME">Name to qualify and identify an execution. If NULL, the report is generated for the last task execution.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_EVOLVE_TASK_PARAMETER" ElementId="#CACECGEG">
          <Description>Sets a parameter of an evolve task</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Evolve task name</Parameter>
            <Parameter Name="PARAMETER">Name of the parameter to set</Parameter>
            <Parameter Name="VALUE">New value of the parameter</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UNPACK_STGTAB_BASELINE" ElementId="#CACHBGBD">
          <Description>Unpacks (imports) SQL plan baselines from a staging table into SQL management base</Description>
          <Parameters>
            <Parameter Name="TABLE_NAME">Name of staging table from which SQL plan baselines are unpacked (case insensitive unless double quoted)</Parameter>
            <Parameter Name="TABLE_OWNER">Name of staging table owner.Default NULL means current schema is the table owner</Parameter>
            <Parameter Name="SQL_HANDLE">SQL handle (case sensitive)</Parameter>
            <Parameter Name="PLAN_NAME">Plan name (case sensitive,% wildcards accepted)</Parameter>
            <Parameter Name="SQL_TEXT">SQL text string (case sensitive, % wildcards accepted)</Parameter>
            <Parameter Name="CREATOR">Creator of SQL plan baseline (case insensitive unless double quoted)</Parameter>
            <Parameter Name="ORIGIN">Origin of SQL plan baseline, should be 'MANUAL-LOAD', 'AUTO-CAPTURE','MANUAL_SQLTUNE' or 'AUTO-SQLTUNE' (case insensitive)</Parameter>
            <Parameter Name="ENABLED">Must be 'YES' or 'NO' (case insensitive)</Parameter>
            <Parameter Name="ACCEPTED">Must be 'YES' or 'NO' (case insensitive)</Parameter>
            <Parameter Name="FIXED">Must be 'YES' or 'NO' (case insensitive)</Parameter>
            <Parameter Name="MODULE">Module (case sensitive)</Parameter>
            <Parameter Name="ACTION">Action (case sensitive)</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_SQL" Url="http://docs.oracle.com/database/121/ARPLS/d_sql.htm">
      <Description>The DBMS_SQL package provides an interface to use dynamic SQL to parse any data manipulation language (DML) or data definition language (DDL) statement using PL/SQL. For example, you can enter a DROP TABLE statement from within a stored procedure by using the PARSE Procedures supplied with the DBMS_SQL package.</Description>
      <SubPrograms>
        <SubProgram Name="BIND_ARRAY" ElementId="#i1025085">
          <Description>Binds a given value to a given collection</Description>
          <Parameters>
            <Parameter Name="C">ID number of the cursor to which you want to bind a value.</Parameter>
            <Parameter Name="NAME">Name of the collection in the statement.</Parameter>
            <Parameter Name="TABLE_VARIABLE">Local variable that has been declared as &lt;datatype&gt;.</Parameter>
            <Parameter Name="INDEX1">Index for the table element that marks the lower bound of the range.</Parameter>
            <Parameter Name="INDEX2">Index for the table element that marks the upper bound of the range.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BIND_VARIABLE" ElementId="#i1030093">
          <Description>Binds a given value to a given variable</Description>
          <Parameters>
            <Parameter Name="C">ID number of the cursor to which you want to bind a value.</Parameter>
            <Parameter Name="NAME">Name of the variable in the statement.</Parameter>
            <Parameter Name="VALUE">Value that you want to bind to the variable in the cursor.For IN and IN/OUT variables, the value has the same type as the type of the value being passed in for this parameter.</Parameter>
            <Parameter Name="OUT_VALUE_SIZE">Maximum expected OUT value size, in bytes, for the VARCHAR2, RAW, CHAR OUT or IN/OUT variable.If no size is given, then the length of the current value is used. This parameter must be specified if the value parameter is not initialized.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CLOSE_CURSOR" ElementId="#i1026299">
          <Description>Closes given cursor and frees memory</Description>
          <Parameters>
            <Parameter Name="C">INID number of the cursor that you want to close.</Parameter>
            <Parameter Name="C">OUTCursor is set to null.After you call CLOSE_CURSOR, the memory allocated to the cursor is released and you can no longer fetch from that cursor.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="COLUMN_VALUE" ElementId="#i1025449">
          <Description>Returns value of the cursor element for a given position in a cursor</Description>
        </SubProgram>
        <SubProgram Name="COLUMN_VALUE_LONG" ElementId="#i1025399">
          <Description>Returns a selected part of a LONG column, that has been defined using DEFINE_COLUMN_LONG</Description>
          <Parameters>
            <Parameter Name="C">Cursor ID number of the cursor from which to get the value.</Parameter>
            <Parameter Name="POSITION">Position of the column of which to get the value.</Parameter>
            <Parameter Name="LENGTH">Number of bytes of the long value to fetch.</Parameter>
            <Parameter Name="OFFSET">Offset into the long field for start of fetch.</Parameter>
            <Parameter Name="VALUE">Value of the column as a VARCHAR2.</Parameter>
            <Parameter Name="VALUE_LENGTH">Number of bytes actually returned in value.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DEFINE_ARRAY" ElementId="#i1025685">
          <Description>Defines a collection to be selected from the given cursor, used only with SELECT statements</Description>
          <Parameters>
            <Parameter Name="C">ID number of the cursor to which you want to bind an array.</Parameter>
            <Parameter Name="POSITION">Relative position of the column in the array being defined.The first column in a statement has position 1.</Parameter>
            <Parameter Name="TABLE_VARIABLE">Local variable that has been declared as &lt;datatype&gt;.</Parameter>
            <Parameter Name="CNT">Number of rows that must be fetched.</Parameter>
            <Parameter Name="LOWER_BND">Results are copied into the collection, starting at this lower bound index.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DEFINE_COLUMN" ElementId="#i1025686">
          <Description>Defines a column to be selected from the given cursor, used only with SELECT statements</Description>
          <Parameters>
            <Parameter Name="C">ID number of the cursor for the row being defined to be selected</Parameter>
            <Parameter Name="POSITION">Relative position of the column in the row being defined.The first column in a statement has position 1.</Parameter>
            <Parameter Name="COLUMN">Value of the column being defined. The type of this value determines the type for the column being defined.</Parameter>
            <Parameter Name="COLUMN_SIZE">Maximum expected size of the column value in bytes for columns of type VARCHAR2, and RAW.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DEFINE_COLUMN_CHAR" ElementId="#CIHGCGBF">
          <Description>Defines a column of type CHAR to be selected from the given cursor, used only with SELECT statements</Description>
          <Parameters>
            <Parameter Name="C">ID number of the cursor for the row being defined to be selected</Parameter>
            <Parameter Name="POSITION">Relative position of the column in the row being defined.The first column in a statement has position 1.</Parameter>
            <Parameter Name="COLUMN">Value of the column being defined. The type of this value determines the type for the column being defined.</Parameter>
            <Parameter Name="COLUMN_SIZE">Maximum expected size of the column value in characters for columns of type CHAR.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DEFINE_COLUMN_LONG" ElementId="#i1025656">
          <Description>Defines a LONG column to be selected from the given cursor, used only with SELECT statements</Description>
          <Parameters>
            <Parameter Name="C">ID number of the cursor for the row being defined to be selected.</Parameter>
            <Parameter Name="POSITION">Relative position of the column in the row being defined.The first column in a statement has position 1.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DEFINE_COLUMN_RAW" ElementId="#CIHECACB">
          <Description>Defines a column of type RAW to be selected from the given cursor, used only with SELECT statements</Description>
        </SubProgram>
        <SubProgram Name="DEFINE_COLUMN_ROWID" ElementId="#CIHJJFJD">
          <Description>Defines a column of type ROWID to be selected from the given cursor, used only with SELECT statements</Description>
        </SubProgram>
        <SubProgram Name="DESCRIBE_COLUMNS" ElementId="#i1026120">
          <Description>Describes the columns for a cursor opened and parsed through DBMS_SQL</Description>
          <Parameters>
            <Parameter Name="C">ID number of the cursor for the columns being described</Parameter>
            <Parameter Name="COL_CNT">Number of columns in the select list of the query</Parameter>
            <Parameter Name="DESC_T">Describe table to fill in with the description of each of the columns of the query</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DESCRIBE_COLUMNS2" ElementId="#i1029368">
          <Description>Describes describes the specified column, an alternative to DESCRIBE_COLUMNS Procedure</Description>
          <Parameters>
            <Parameter Name="C">ID number of the cursor for the columns being described.</Parameter>
            <Parameter Name="COL_CNT">Number of columns in the select list of the query.</Parameter>
            <Parameter Name="DESC_T">Describe table to fill in with the description of each of the columns of the query. This table is indexed from one to the number of elements in the select list of the query.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DESCRIBE_COLUMNS3" ElementId="#CHDJBBFH">
          <Description>Describes describes the specified column, an alternative to DESCRIBE_COLUMNS Procedure</Description>
          <Parameters>
            <Parameter Name="C">ID number of the cursor for the columns being described.</Parameter>
            <Parameter Name="COL_CNT">Number of columns in the select list of the query.</Parameter>
            <Parameter Name="DESC_T">Describe table to fill in with the description of each of the columns of the query. This table is indexed from one to the number of elements in the select list of the query.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXECUTE" ElementId="#i1025983">
          <Description>Executes a given cursor</Description>
          <Parameters>
            <Parameter Name="C">Cursor ID number of the cursor to execute.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXECUTE_AND_FETCH" ElementId="#i1025711">
          <Description>Executes a given cursor and fetch rows</Description>
          <Parameters>
            <Parameter Name="C">ID number of the cursor to execute and fetch.</Parameter>
            <Parameter Name="EXACT">Set to TRUE to raise an exception if the number of rows actually matching the query differs from one.Note: Oracle does not support the exact fetch TRUE option with LONG columns.Even if an exception is raised, the rows are still fetched and available.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="FETCH_ROWS" ElementId="#i1026065">
          <Description>Fetches a row from a given cursor</Description>
          <Parameters>
            <Parameter Name="C">ID number.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_NEXT_RESULT" ElementId="#CIHEBDFJ">
          <Description>Gets the statement of the next result returned to the caller of the recursive statement or, if this caller sets itself as the client for the recursive statement, the next result returned to this caller as client</Description>
          <Parameters>
            <Parameter Name="C">Recursive statement cursor</Parameter>
            <Parameter Name="RC">Cursor or ref cursor of the statement of the next returned result</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IS_OPEN" ElementId="#i1026423">
          <Description>Returns TRUE if given cursor is open</Description>
          <Parameters>
            <Parameter Name="C">Cursor ID number of the cursor to check.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LAST_ERROR_POSITION" ElementId="#i1026408">
          <Description>Returns byte offset in the SQL statement text where the error occurred</Description>
        </SubProgram>
        <SubProgram Name="LAST_ROW_COUNT" ElementId="#i1026354">
          <Description>Returns cumulative count of the number of rows fetched</Description>
        </SubProgram>
        <SubProgram Name="LAST_ROW_ID" ElementId="#i1026364">
          <Description>Returns ROWID of last row processed</Description>
        </SubProgram>
        <SubProgram Name="LAST_SQL_FUNCTION_CODE" ElementId="#i1026374">
          <Description>Returns SQL function code for statement</Description>
        </SubProgram>
        <SubProgram Name="OPEN_CURSOR" ElementId="#i997665">
          <Description>Returns cursor ID number of new cursor</Description>
          <Parameters>
            <Parameter Name="SECURITY_LEVEL">Specifies the level of security protection to enforce on the opened cursor. Valid security level values are 0, 1, and 2. When a NULL argument value is provided to this overload, as well as for cursors opened using the overload of open_cursor without the security_level parameter, the default security level value 1 will be enforced on the opened cursor.Level 0 - allows all DBMS_SQL operations on the cursor without any security checks. The cursor may be fetched from, and even re-bound and re-executed, by code running with a different effective userid or roles than those in effect at the time the cursor was parsed. This level of security is off by default.Level 1 - requires that the referenced container, effective userid, and roles of the caller to DBMS_SQL for bind and execute operations on this cursor must be the same as those of the caller of the most recent parse operation on this cursor.Level 2 - requires that the referenced container, effective userid, and roles of the caller to DBMS_SQL for all bind, execute, define, describe, and fetch operations on this cursor must be the same as those of the caller of the most recent parse operation on this cursor.</Parameter>
            <Parameter Name="TREAT_AS_CLIENT_FOR RESULTS">Allows the caller of the recursive statement to set itself as the client to receive the statement results returned from the recursive statement to client. The statement results returned may be retrieved by the GET_NEXT_RESULT Procedures.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PARSE" ElementId="#i997676">
          <Description>Parses given statement</Description>
          <Parameters>
            <Parameter Name="C">ID number of the cursor in which to parse the statement.</Parameter>
            <Parameter Name="STATEMENT">SQL statement to be parsed. SQL statements larger than 32K that may be stored in CLOBs.Unlike a PL/SQL statement, your SQL statement must not include a final semicolon. For example:DBMS_SQL.PARSE(cursor1, 'BEGIN proc; END;', 2);DBMS_SQL.PARSE(cursor1, 'INSERT INTO tab VALUES(1)', 2);</Parameter>
            <Parameter Name="LB">Lower bound for elements in the statement</Parameter>
            <Parameter Name="UB">Upper bound for elements in the statement</Parameter>
            <Parameter Name="LFFLG">If TRUE, then insert a linefeed after each element on concatenation.</Parameter>
            <Parameter Name="LANGUAGE_FLAG">Note: This parameter is non-operative with Oracle Database 12c. The parameter is provided for backwards compatibility only.</Parameter>
            <Parameter Name="EDITION">Specifies the edition in which to run the statement under the following conditions:If NULL and container is NULL, the statement will be run in the current edition.If a valid container is specified, passing NULL indicates the statement is to run in the target container's default edition.Given the user and the edition with which the statement is to be executed, the user must have USE privilege on the edition.The following general conditions apply. The contents of the string are processed as a SQL identifier; double quotation marks must surround the remainder of the string if special characters or lowercase characters are present in the edition's actual name, and if double quotation marks are not used the contents will be uppercased.</Parameter>
            <Parameter Name="APPLY_CROSSEDITION_TRIGGER">Specifies the unqualified name of a forward crossedition trigger that is to be applied to the specified SQL. The name is resolved using the edition and current_schema setting in which the statement is to be executed. The trigger must be owned by the user that will execute the statement.If a non-NULL value is specified, the specified crossedition trigger will be executed assuming fire_apply_trigger is TRUE, the trigger is enabled, the trigger is defined on the table which is the target of the statement, the type of the statement matches the trigger's dml_event_clause, any effective WHEN and UPDATE OF restrictions are satisfied, and so on. Other forward crossedition triggers may also be executed, selected using the "crossedition trigger DML rules" applied as if the specified trigger was doing a further DML to the table that is the target of the statement. Non-crossedition triggers and reverse crossedition triggers will not be executed.The contents of the string are processed as a SQL identifier; double quotation marks must surround the remainder of the string if special characters or lowercase characters are present in the trigger's actual name, and if double quotation marks are not used, the contents will be uppercased.</Parameter>
            <Parameter Name="FIRE_APPLY_TRIGGER">Indicates whether the specified apply_crossedition_trigger is itself to be executed, or must only be a guide used in selecting other triggers. This is typically set FALSE when the statement is a replacement for the actions the apply_crossedition_trigger would itself perform. If FALSE, the specified trigger is not executed, but other triggers are still selected for firing as if the specified trigger was doing a DML to the table that is the target of the statement. The apply_crossedition_trigger and fire_apply_trigger parameters are ignored if the statement is not a DML.</Parameter>
            <Parameter Name="SCHEMA">Specifies the schema in which to resolve unqualified object names. If NULL, the current schema is the effective user's schema.</Parameter>
            <Parameter Name="CONTAINER">Name of the target container in which the cursor is to run. If NULL or unspecified, the name of the target container is that of the calling container and no container switch is performed. If a valid container name is specified, the current user must be a common user with SET CONTAINER privilege to switch to the target container. If a container switch completes, the effective user will have its default roles.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RETURN_RESULT" ElementId="#CIHIICAG">
          <Description>Returns the result of an executed statement to the client application</Description>
          <Parameters>
            <Parameter Name="RC">Statement cursor or ref cursor</Parameter>
            <Parameter Name="TO_CLIENT">Returns (or does not return) the statement result to the client. If not, it is returned to the immediate caller.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="TO_CURSOR_NUMBER" ElementId="#CHDJDGDG">
          <Description>Takes an OPENed strongly or weakly-typed ref cursor and transforms it into a DBMS_SQL cursor number</Description>
          <Parameters>
            <Parameter Name="RC">REF CURSOR to be transformed into a cursor number</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="TO_REFCURSOR" ElementId="#CHDFDCDE">
          <Description>Takes an OPENed, PARSEd, and EXECUTEd cursor and transforms/migrates it into a PL/SQL manageable REF CURSOR (a weakly-typed cursor) that can be consumed by PL/SQL native dynamic SQL switched to use native dynamic SQL</Description>
          <Parameters>
            <Parameter Name="CURSOR_NUMBER">Cursor number of the cursor to be transformed into REF CURSOR</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="VARIABLE_VALUE" ElementId="#i998371">
          <Description>Returns value of named variable for given cursor</Description>
          <Parameters>
            <Parameter Name="C">ID number of the cursor from which to get the values.</Parameter>
            <Parameter Name="NAME">Name of the variable for which you are retrieving the value.</Parameter>
            <Parameter Name="VALUE">Single row option: Returns the value of the variable for the specified position. Oracle raises the exception ORA-06562, inconsistent_type, if the type of this output parameter differs from the actual type of the value, as defined by the call to BIND_VARIABLE.Array option: Local variable that has been declared &lt;table_type&gt;. For bulk operations, value is an OUT NOCOPY parameter.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_SQL_MONITOR" Url="http://docs.oracle.com/database/121/ARPLS/d_sql_monitor.htm">
      <Description>The DBMS_SQL_MONITOR package provides information about Real-time SQL Monitoring and Real-time Database Operation Monitoring.</Description>
      <SubPrograms>
        <SubProgram Name="BEGIN_OPERATION" ElementId="#CHDJADIH">
          <Description>Starts a composite database operation in the current session</Description>
          <Parameters>
            <Parameter Name="DBOP_NAME">Name for the composite database operation</Parameter>
            <Parameter Name="DBOP_EID">Unique identifier for the current execution of the composite database operation</Parameter>
            <Parameter Name="FORCED_TRACKING">Values: (see defined Constants):FORCE_TRACKING - forces the composite database operation to be tracked when the operation starts. You can also use the string variable 'Y'.NO_FORCE_TRACKING - the operation will be tracked only when it has consumed at least 5 seconds of CPU or I/O time. You can also use the string variable 'N'.</Parameter>
            <Parameter Name="ATTRIBUTE_LIST">List of user-created attributes. It is a comma-separated list of name-value pairs (for example, 'table_name=emp, operation=load')</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="END_OPERATION" ElementId="#CHDDHCGJ">
          <Description>Ends the monitoring operation in the current session</Description>
          <Parameters>
            <Parameter Name="DBOP_NAME">Name of a composite database operation</Parameter>
            <Parameter Name="DBOP_EID">Unique identifier for the current execution of the composite database operation</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REPORT_SQL_MONITOR" ElementId="#CHDEJFGD">
          <Description>Builds a detailed report for a specific database operation that has been monitored by Oracle</Description>
          <Parameters>
            <Parameter Name="SQL_ID">SQL_ID of the simple database operation for which monitoring information should be displayed. Use NULL (default) to display monitoring information for the last simple database operation monitored by Oracle.</Parameter>
            <Parameter Name="DBOP_NAME">DBOP_NAME for which monitoring information of the composite database operation is displayed</Parameter>
            <Parameter Name="DBOP_EXEC_ID">Execution ID for the composite database operation for which monitoring information is displayed</Parameter>
            <Parameter Name="SESSION_ID">Targets only the subset of statements executed and monitored on behalf of the specified session. Default is NULL. Use -1 or USERENV('SID') for the current session.</Parameter>
            <Parameter Name="SESSION_SERIAL">In addition to session_id, you can specify the session serial number to ensure the desired session incarnation is targeted. This is ignored when session_id is NULL.</Parameter>
            <Parameter Name="SQL_EXEC_START">Time at which execution of the monitored SQL was started. Only applicable when sql_id is specified. Used to display monitoring information for a particular execution of sql_id When NULL (default), the last execution of sql_id is shown.</Parameter>
            <Parameter Name="SQL_EXEC_ID">A numeric ID generated internally by SQL monitor to identify different executions of the same SQL statement. Thus each execution will have the same sql_id but a different sql_exec_id. Only applicable when sql_id is specified and is used to display monitoring information for a particular execution of sql_id. When NULL (default), the last execution of sql_id is shown.</Parameter>
            <Parameter Name="INST_ID">Looks only at queries started on the specified instance. Use -1 to target the current instance. The default, NULL will target all instances.</Parameter>
            <Parameter Name="START_TIME_FILTER">If not NULL, the report shows activity from V$ACTIVE_SESSION_HISTORY started after this date. If NULL, the reported activity starts once the targeted database operation has started.</Parameter>
            <Parameter Name="END_TIME_FILTER">If not NULL, the report shows activity from V$ACTIVE_SESSION_HISTORY started before this date. If NULL, the reported activity ends when the targeted database operation has ended or SYSDATE if the operation is still executing.</Parameter>
            <Parameter Name="INSTANCE_ID_FILTER">Only looks at activity for the specified instance. Use NULL (the default) to target all instances. Only relevant if the query runs in parallel.</Parameter>
            <Parameter Name="PARALLEL_FILTER">Parallel filter applies only to parallel execution and allows you to select only a subset of the processes involved in the parallel execution. The string parallel_filter can be:NULL - target all parallel execution servers as wells as the query coordinator['qc'][servers(&lt;svr_grp&gt;[,] &lt;svr_set&gt;[,] &lt;srv_num&gt;)] where any NULL value is interpreted as ALL</Parameter>
            <Parameter Name="PLAN_LINE_FILTER">Selects activity and execution statistics for the specified line number in the plan of a SQL</Parameter>
            <Parameter Name="EVENT_DETAIL">When set to NO, the activity is aggregated by wait_class only. Use YES (default) to aggregate by wait_class, event_name.</Parameter>
            <Parameter Name="BUCKET_MAX_COUNT">Specifies the maximum number of buckets to create in the report</Parameter>
            <Parameter Name="BUCKET_INTERVAL">Represents the exact time interval, in seconds, of all histogram buckets. If specified, bucket_max_count is ignored.</Parameter>
            <Parameter Name="BASE_PATH">URL path for flex HTML resources since flex HTML format requires access to external files (java scripts and the flash swf file).</Parameter>
            <Parameter Name="LAST_REFRESH_TIME">If not NULL (default), the time when the report was last retrieved (SYSDATE attribute of the report tag). Use this option when you want to display the report of an running query and when that report is refreshed on a regular basis. This optimizes the size of the report since only the new changed information will be returned. In particular, the following will be optimized:SQL text will not be returned when this option is specifiedActivity histogram will start at the bucket that intersects that time. The entire content of the bucket is returned, even if last_refresh_time is after the start of that bucket</Parameter>
            <Parameter Name="REPORT_LEVEL">Level of detail for the report. Of the following, only one can be specified:NONE: Minimum possibleBASIC: This is equivalent to sql_text-plan-xplan-sessions-instance-activity_histogram-plan_histogram-metrics where the token "-" implies that report section will not be included in the report.TYPICAL: Everything but plan_histogramALL: EverythingIn addition, individual report sections can also be enabled or disabled by using a ±section_name. Several sections are defined:XPLAN: Shows explain plan. ON by default.PLAN: Shows plan monitoring statistics. ON by default.SESSIONS: Show session details. Applies only to parallel queries. ON by default.INSTANCE: Shows instance details. Applies only to parallel and cross instance queries. ON by default.PARALLEL: An umbrella parameter for specifying sessions as well as instance detailsACTIVITY: Shows activity summary at global level, plan line level and sessionINSTANCE LEVEL: (If applicable). ON by default.BINDS: Shows bind information when available. ON by default.METRICS: Shows metric data (such as CPU and IOs) over time. ON by defaultACTIVITY_HISTOGRAM: Shows a histogram of the overall query activity. ON by default.PLAN_HISTOGRAM: Shows activity histogram at plan line level. OFF by default.OTHER: Other information. ON by default.In addition, SQL text can be specified at different levels:-SQL_TEXT: No SQL text in report+SQL_TEXT: Alright with partial SQL text, that is, up to the first 2000 chars as stored in GV$SQL_MONITORSQL_FULLTEXT: No full SQL text, that is, +sql_text+SQL_FULLTEXT: Show full SQL text (default)</Parameter>
            <Parameter Name="TYPE">Report type:TEXT: text report (default)HTML: simple HTML reportACTIVE: database active report. Some information (explain plan, activity_histogram, metrics and plan_histogram) is only shown when this type is selectedXML: raw data for the report</Parameter>
            <Parameter Name="SQL_PLAN_HASH_VALUE">Targets only those with the specified plan hash value. Default is NULL.</Parameter>
            <Parameter Name="CON_NAME">Container name</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REPORT_SQL_MONITOR_LIST" ElementId="#CHDHEJGA">
          <Description>Builds a report for all or a subset of database operations that have been monitored by Oracle</Description>
          <Parameters>
            <Parameter Name="SQL_ID">SQL_ID of the simple database operation for which monitoring information should be displayed. Use NULL (default) to display monitoring information for the last operation monitored by Oracle.</Parameter>
            <Parameter Name="DBOP_NAME">DBOP_NAME for which monitoring information of the composite database operation is displayed</Parameter>
            <Parameter Name="MONITOR_TYPE">Monitor type:MONITOR_TYPE_SQL returns only simple database operationsMONITOR_TYPE_DBOP returns composite database operationsMONITOR_TYPE_ALL returns all types</Parameter>
            <Parameter Name="SESSION_ID">Targets only the subset of database operations executed and monitored on behalf of the specified session. Default is NULL. Use -1 or USERENV('SID') for the current session.</Parameter>
            <Parameter Name="SESSION_SERIAL">In addition to session_id, you can specify the session serial number to ensure the desired session incarnation is targeted. This is ignored when session_id is NULL.</Parameter>
            <Parameter Name="INST_ID">Looks only at monitored database operations originating from the specified instance. Use -1 to target the instance where the report executed. To target all instances, use NULL (default).</Parameter>
            <Parameter Name="ACTIVE_SINCE_DATE">If not NULL (default), returns monitored database operations that have been active since the specified time. This includes all operations that are executing, as well as all operations that have completed their execution after the specified start time.</Parameter>
            <Parameter Name="ACTIVE_SINCE_SEC">If not NULL (default), returns monitored database operations that have been active since the specified time. This includes all operations that are executing, as well as all operations that have completed their execution after the specified date and time. In this case, the start time is specified relative to the current SYSDATE minus a specified number of seconds. For example, use 3600 to limit the report to all operations that have been active in the past 1 hour.</Parameter>
            <Parameter Name="LAST_REFRESH_TIME">If not NULL (default), the time when the list report was last retrieved. This optimizes the case where an application shows the list and refreshes the report on a regular basis (such as once every 5 seconds). In this case, the report will show details about the execution of monitored queries that have been active since the specified last_refresh_time. For other queries, the report returns the execution key (sql_id, sql_exec_start, and sql_exec_id). Also, for queries that have their first refresh time after the specified date, only the SQL execution key and statistics are returned.</Parameter>
            <Parameter Name="REPORT_LEVEL">Level of detail for the report. The level can be BASIC (SQL text up to 200 character), TYPICAL (which include full SQL text assuming that cursor has not aged out, in which case the SQL text is included up to 2000 characters), or ALL which is the same as TYPICAL.</Parameter>
            <Parameter Name="AUTO_REFRESH">Specifies the duration in seconds after which report data will be automatically refreshed while the monitored SQL or database operation is still executing. This applies to active report types.</Parameter>
            <Parameter Name="BASE_PATH">URL path for flex HTML resources since flex HTML format requires access to external files (java scripts and the flash swf file).</Parameter>
            <Parameter Name="TYPE">Report type:TEXT: text report (default)HTML: simple HTML reportACTIVE: database active report. Some information (explain plan, activity_histogram, metrics, and plan_histogram) is only shown when this type is selected.XML: raw data for the report</Parameter>
            <Parameter Name="CON_NAME">Container name</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_SQL_TRANSLATOR" Url="http://docs.oracle.com/database/121/ARPLS/d_sql_trans.htm">
      <Description>The DBMS_SQL_TRANSLATOR package provides an interface for creating, configuring, and using SQL translation profiles.</Description>
      <SubPrograms>
        <SubProgram Name="CREATE_PROFILE" ElementId="#BABHCDAF">
          <Description>Creates a SQL translation profile</Description>
          <Parameters>
            <Parameter Name="PROFILE_NAME">Name of profile</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DEREGISTER_SQL_TRANSLATION" ElementId="#BABJAICF">
          <Description>Deregisters the custom translation of a SQL statement in a SQL translation profile</Description>
          <Parameters>
            <Parameter Name="PROFILE_NAME">Name of profile</Parameter>
            <Parameter Name="SQL_TEXT">SQL statement</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DEREGISTER_ERROR_TRANSLATION" ElementId="#BABDGEAG">
          <Description>Deregisters the translation of an Oracle error code and SQLSTATE in a SQL translation profile</Description>
          <Parameters>
            <Parameter Name="PROFILE_NAME">Name of profile</Parameter>
            <Parameter Name="ERROR_CODE">Oracle error code</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_PROFILE" ElementId="#BABGJEEB">
          <Description>Drops a SQL translation profile and its contents</Description>
          <Parameters>
            <Parameter Name="PROFILE_NAME">Name of profile</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ENABLE_ERROR_TRANSLATION" ElementId="#BABCDFFB">
          <Description>Enables or disables a custom translation of an Oracle error code in a SQL translation profile</Description>
          <Parameters>
            <Parameter Name="PROFILE_NAME">Name of profile</Parameter>
            <Parameter Name="SQL_TEXT">SQL statement</Parameter>
            <Parameter Name="ENABLE">Enable or disable the translation</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ENABLE_SQL_TRANSLATION" ElementId="#BABJCAIB">
          <Description>Enables or disables a custom translation of a SQL statement in a SQL translation profile</Description>
          <Parameters>
            <Parameter Name="PROFILE_NAME">Name of profile</Parameter>
            <Parameter Name="SQL_TEXT">SQL statement</Parameter>
            <Parameter Name="ENABLE">Enable or disable the translation</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXPORT_PROFILE" ElementId="#BABCIBFH">
          <Description>Exports the content of a SQL translation profile</Description>
          <Parameters>
            <Parameter Name="PROFILE_NAME">Name of profile</Parameter>
            <Parameter Name="CONTENT">Content of profile</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IMPORT_PROFILE" ElementId="#BABHGBJJ">
          <Description>Imports the content of a SQL translation profile</Description>
          <Parameters>
            <Parameter Name="PROFILE_NAME">Name of profile</Parameter>
            <Parameter Name="CONTENT">Content of profile</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REGISTER_ERROR_TRANSLATION" ElementId="#BABEIHGE">
          <Description>Registers a custom translation of an Oracle error code and SQLSTATE in a SQL translation profile</Description>
          <Parameters>
            <Parameter Name="PROFILE_NAME">Name of profile</Parameter>
            <Parameter Name="ERROR_CODE">Oracle error code</Parameter>
            <Parameter Name="TRANSLATED_CODE">Translated error code</Parameter>
            <Parameter Name="TRANSLATED_SQLSTATE">Translated SQLSTATE</Parameter>
            <Parameter Name="ENABLE">Enable or disable the translation</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REGISTER_SQL_TRANSLATION" ElementId="#BABJGBDB">
          <Description>Registers a custom translation of a SQL statement in a SQL translation profile</Description>
          <Parameters>
            <Parameter Name="PROFILE_NAME">Name of profile</Parameter>
            <Parameter Name="SQL_TEXT">SQL statement</Parameter>
            <Parameter Name="TRANSLATED_TEXT">Translated SQL statement</Parameter>
            <Parameter Name="ENABLE">Enable or disable the translation</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_ATTRIBUTE" ElementId="#BABIEHBA">
          <Description>Sets an attribute of a SQL translation profile</Description>
          <Parameters>
            <Parameter Name="PROFILE_NAME">Name of profile</Parameter>
            <Parameter Name="ATTRIBUTE_NAME">Name of attribute</Parameter>
            <Parameter Name="ATTRIBUTE_VALUE">Value of attribute</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SQL_HASH" ElementId="#BABFFFHF">
          <Description>Computes the hash value of a SQL statement in a SQL translation profile</Description>
          <Parameters>
            <Parameter Name="SQL_TEXT">SQL statement</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SQL_ID" ElementId="#BABDFCAE">
          <Description>Computes the SQL identifier of a SQL statement in a SQL translation profile</Description>
          <Parameters>
            <Parameter Name="SQL_TEXT">SQL statement</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="TRANSLATE_ERROR" ElementId="#BABIJCJG">
          <Description>Translates an Oracle error code and an ANSI SQLSTATE using a SQL translation profile</Description>
          <Parameters>
            <Parameter Name="ERROR_CODE">Oracle error code</Parameter>
            <Parameter Name="TRANSLATED_CODE">Translated error code</Parameter>
            <Parameter Name="TRANSLATED_SQLSTATE">Translated SQLSTATE</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="TRANSLATE_SQL" ElementId="#BABBHGII">
          <Description>Translates a SQL statement using a SQL translation profile</Description>
          <Parameters>
            <Parameter Name="SQL_TEXT">SQL statement</Parameter>
            <Parameter Name="TRANSLATED_TEXT">Translated SQL statement</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_SQLDIAG" Url="http://docs.oracle.com/database/121/ARPLS/d_sqldiag.htm">
      <Description>The DBMS_SQLDIAG package provides an interface to the SQL Diagnosability functionality.</Description>
      <SubPrograms>
        <SubProgram Name="ACCEPT_SQL_PATCH" ElementId="#CEGBDHEJ">
          <Description>Accepts a recommended SQL patch as recommended by the specified SQL diagnosis task</Description>
        </SubProgram>
        <SubProgram Name="ALTER_SQL_PATCH" ElementId="#CEGFAFII">
          <Description>Alters specific attributes of an existing SQL patch object</Description>
          <Parameters>
            <Parameter Name="NAME">Name of SQL patch to alter.</Parameter>
            <Parameter Name="ATTRIBUTE_NAME">Name of SQL patch to alter. Possible values:STATUS -&gt; can be set to ENABLED or DISABLEDNAME -&gt; can be reset to a valid name (must be a valid Oracle identifier and must be unique).DESCRIPTION -&gt; can be set to any string of size no more than 500CATEGORY -&gt; can be reset to a valid category name (must be valid Oracle identifier and must be unique when combined with normalized SQL text)This parameter is mandatory and is case sensitive.</Parameter>
            <Parameter Name="VALUE">New value of the attribute. See attribute_name for valid attribute values. This parameter is mandatory.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CANCEL_DIAGNOSIS_TASK" ElementId="#CHDFJBAI">
          <Description>Cancels a diagnostic task</Description>
          <Parameters>
            <Parameter Name="TASKNAME">Name of task</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_DIAGNOSIS_TASK" ElementId="#CHDHFBAA">
          <Description>Creates a diagnostic task in order to diagnose a single SQL statement</Description>
          <Parameters>
            <Parameter Name="SQL_TEXT">Text of a SQL statement</Parameter>
            <Parameter Name="BIND_LIST">Set of bind values</Parameter>
            <Parameter Name="USER_NAME">Username for who the statement/sqlset will be diagnosed</Parameter>
            <Parameter Name="SCOPE">Diagnosis scope (limited/comprehensive)</Parameter>
            <Parameter Name="TIME_LIMIT">Maximum duration in seconds for the diagnosis session</Parameter>
            <Parameter Name="TASK_NAME">Optional diagnosis task name</Parameter>
            <Parameter Name="PROBLEM_TYPE">Determines the goal of the task. Possible values are:PROBLEM_TYPE_WRONG_RESULTSPROBLEM_TYPE_COMPILATION_ERRORPROBLEM_TYPE_EXECUTION_ERROR</Parameter>
            <Parameter Name="SQL_ID">Identifier of the statement</Parameter>
            <Parameter Name="PLAN_HASH_VALUE">Hash value of the SQL execution plan</Parameter>
            <Parameter Name="SQLSET_NAME">Sqlset name</Parameter>
            <Parameter Name="BASIC_FILTER">SQL predicate to filter the SQL from the SQL tuning set (STS)</Parameter>
            <Parameter Name="OBJECT_FILTER">Object filter</Parameter>
            <Parameter Name="RANK(I)">Order-by clause on the selected SQL</Parameter>
            <Parameter Name="RESULT_PERCENTAGE">Percentage on the sum of a ranking measure</Parameter>
            <Parameter Name="RESULT_LIMIT">Top L(imit) SQL from (filtered/ranked) SQL</Parameter>
            <Parameter Name="PLAN_FILTER">Plan filter. It is applicable in case there are multiple plans (plan_hash_value). This filter allows selecting one plan (plan_hash_value) only. Possible values are:LAST_GENERATED: plan with most recent timestampFIRST_GENERATED: opposite to LAST_GENERATEDLAST_LOADED: plan with most recent first_load_time stat infoFIRST_LOADED: opposite to LAST_LOADEDMAX_ELAPSED_TIME: plan with maximum elapsed timeMAX_BUFFER_GETS: plan with maximum buffer getsMAX_DISK_READS: plan with maximum disk readsMAX_DIRECT_WRITES: plan with maximum direct writesMAX_OPTIMIZER_COST: plan with maximum optimum cost</Parameter>
            <Parameter Name="SQLSET_OWNER">Owner of the sqlset, or null for current schema owner</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_STGTAB_SQLPATCH" ElementId="#CEGBBDBF">
          <Description>Creates the staging table used for transporting SQL patches from one system to another</Description>
          <Parameters>
            <Parameter Name="TABLE_NAME">(Mandatory) Name of the table to create (case-sensitive)</Parameter>
            <Parameter Name="SCHEMA_NAME">Schema to create the table in, or NULL for current schema (case-sensitive)</Parameter>
            <Parameter Name="TABLESPACE_NAME">Tablespace to store the staging table within, or NULL for current user's default tablespace (case-sensitive)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_DIAGNOSIS_TASK" ElementId="#CHDBIECH">
          <Description>Drops a diagnostic task</Description>
          <Parameters>
            <Parameter Name="TASKNAME">Name of task</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_SQL_PATCH" ElementId="#CEGDJEEI">
          <Description>Drops the named SQL patch from the database</Description>
        </SubProgram>
        <SubProgram Name="EXECUTE_DIAGNOSIS_TASK" ElementId="#CHDJEJDH">
          <Description>Executes a diagnostic task</Description>
          <Parameters>
            <Parameter Name="TASKNAME">Name of task</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXPLAIN_SQL_TESTCASE" ElementId="#CHDFBAFB">
          <Description>Explains a SQL test case</Description>
          <Parameters>
            <Parameter Name="SQLTESTCASE">XML document describing the SQL test case</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXPORT_SQL_TESTCASE" ElementId="#CHDJEHIC">
          <Description>Exports a SQL test case to a directory</Description>
          <Parameters>
            <Parameter Name="DIRECTORY">Directory to store the various generated files</Parameter>
            <Parameter Name="SQL_TEXT">Text of the SQL statement to export</Parameter>
            <Parameter Name="INCIDENT_ID">Incident ID containing the offending SQL</Parameter>
            <Parameter Name="SQL_ID">Identifier of the statement in the cursor cache</Parameter>
            <Parameter Name="USERNAME">Name of the user schema to use to parse the SQL, defaults to SYS</Parameter>
            <Parameter Name="BIND_LIST">List of bind values associated to the statement</Parameter>
            <Parameter Name="EXPORTENVIRONMENT">TRUE if the compilation environment should be exported</Parameter>
            <Parameter Name="EXPORTMETADATA">TRUE if the definition of the objects referenced in the SQL should be exported</Parameter>
            <Parameter Name="EXPORTDATA">TRUE if the data of the objects referenced in the SQL should be exported</Parameter>
            <Parameter Name="EXPORTPKGBODY">TRUE if the body of the packages referenced in the SQL are exported</Parameter>
            <Parameter Name="SAMPLINGPERCENT">If is TRUE, specify the sampling percentage to use to create the dump file</Parameter>
            <Parameter Name="CTRLOPTIONS">Opaque control parameters. For example, to execute three times, set ctrlOptions with the following string: '&lt;parameter name="mexec_count"&gt;3&lt;/parameter&gt;'.capture - BASIC (default) or WITH_RUNTIME_INFO. This parameter defines the mode of TCB capture.BASIC: runs as Oracle Release 11g TCB and captures all the information that is captured in that release as well as AWR reports, SQL monitor reports and parameter information.WITH_RUNTIME_INFO: TCB captures runtime information for the SQL, such as dynamic sampling data, list of binds, Dynamic Plan info, along with information captured under BASIC mode.Note this must be the same value as used in the IMPORT_SQL_TESTCASE Procedures, and that if the user gives incorrect an parameter value, then the TCB runs in default mode and no error is thrown.replay - EXPLAIN (default), OUTLINE, EXECUTION or OUTLINE EXECUTION. This parameter defines TCB replay functionality.EXPLAIN: Replay explains the statement without using outlinesOUTLINE: Replay uses outlines mode and explains the statement using outlinesEXECUTION: Replay executes the statement without using outlinesOUTLINE EXECUTION: Replay executes the statement using outlinesNote that if the user gives an incorrect parameter value, then the replay runs in default mode and no error is thrown.name=mexec_count - Value is any positive number (N). This parameter tells TCB to execute the statement for N time and capture runtime info at end of each execution.name=stat_history_since - Value is date. The object statistics history is exported using this parameter. Statistics history after date specified will be exported.</Parameter>
            <Parameter Name="TIMELIMIT">How much time should we spend exporting the SQL test case</Parameter>
            <Parameter Name="TESTCASENAME">An optional name for the SQL test case. This is used to prefix all the generated scripts</Parameter>
            <Parameter Name="TESTCASE">Resulting testcase</Parameter>
            <Parameter Name="PRESERVESCHEMAMAPPING">TRUE if the schema (or schemas) are not re-mapped from the original environment to the test environment</Parameter>
            <Parameter Name="VERSION">Version of database objects to be extracted. This option is only valid for EXPORT. Database objects or attributes incompatible with the version will not be extracted.COMPATIBLE - (default) the version of the metadata corresponds to the database compatibility level and the compatibility release level for feature (as given in the V$COMPATIBILITY view). Database compatibility must be set to 9.2 or higher.LATEST - the version of the metadata that specifies the current database version.A specific database version. For example, if '10.0.0', this cannot be lower than Oracle Database Release 10.0.0.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXPORT_SQL_TESTCASE_DIR_BY_INC" ElementId="#CEGEEAAG">
          <Description>Generates a SQL Test Case corresponding to the incident ID passed as an argument.</Description>
          <Parameters>
            <Parameter Name="INCIDENT_ID">Incident ID containing the offending SQL. For more information about Incidents, see Oracle Database Performance Tuning Guide.</Parameter>
            <Parameter Name="DIRECTORY">Directory path to the generated files</Parameter>
            <Parameter Name="EXPORTENVIRONMENT">TRUE if the compilation environment should be exported</Parameter>
            <Parameter Name="EXPORTMETADATA">TRUE if the definition of the objects referenced in the SQL should be exported</Parameter>
            <Parameter Name="EXPORTDATA">TRUE if the data of the objects referenced in the SQL should be exported</Parameter>
            <Parameter Name="SAMPLINGPERCENT">If is TRUE, specify the sampling percentage to use to create the dump file</Parameter>
            <Parameter Name="CTRLOPTIONS">Opaque control parameters. For example, to execute three times, set ctrlOptions with the following string: '&lt;parameter name="mexec_count"&gt;3&lt;/parameter&gt;'.capture - BASIC (default) or WITH_RUNTIME_INFO. This parameter defines the mode of TCB capture.BASIC: runs as Oracle Release 11g TCB and captures all the information that is captured in that release as well as AWR reports, SQL monitor reports and parameter information.WITH_RUNTIME_INFO: TCB captures runtime information for the SQL, such as dynamic sampling data, list of binds, Dynamic Plan info, along with information captured under BASIC mode.Note that if the user gives incorrect an parameter value, then the TCB runs in default mode and no error is thrown.replay - EXPLAIN (default), OUTLINE, EXECUTION or OUTLINE EXECUTION. This parameter defines TCB replay functionality.EXPLAIN: Replay explains the statement without using outlinesOUTLINE: Replay uses outlines mode and explains the statement using outlinesEXECUTION: Replay executes the statement without using outlinesOUTLINE EXECUTION: Replay executes the statement using outlinesNote that if the user gives an incorrect parameter value, then the replay runs in default mode and no error is thrown.name=mexec_count - Value is any positive number (N). This parameter tells TCB to execute the statement for N time and capture runtime info at end of each execution.name=stat_history_since - Value is date. The object statistics history is exported using this parameter. Statistics history after date specified will be exported.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXPORT_SQL_TESTCASE_DIR_BY_TXT" ElementId="#CEGDACIA">
          <Description>Generates a SQL Test Case corresponding to the SQL passed as an argument</Description>
          <Parameters>
            <Parameter Name="INCIDENT_ID">Incident ID containing the offending SQL</Parameter>
            <Parameter Name="DIRECTORY">Directory to store the various generated files</Parameter>
            <Parameter Name="SQL_TEXT">Text of the SQL statement to explain</Parameter>
            <Parameter Name="USERNAME">Name of the user schema to use to parse the SQL, defaults to SYS</Parameter>
            <Parameter Name="EXPORTENVIRONMENT">TRUE if the compilation environment should be exported</Parameter>
            <Parameter Name="EXPORTMETADATA">TRUE if the definition of the objects referenced in the SQL should be exported</Parameter>
            <Parameter Name="EXPORTDATA">TRUE if the data of the objects referenced in the SQL should be exported</Parameter>
            <Parameter Name="SAMPLINGPERCENT">If is TRUE, specify the sampling percentage to use to create the dump file</Parameter>
            <Parameter Name="CTRLOPTIONS">Opaque control parameters. For example, to execute three times, set ctrlOptions with the following string: '&lt;parameter name="mexec_count"&gt;3&lt;/parameter&gt;'.capture - BASIC (default) or WITH_RUNTIME_INFO. This parameter defines the mode of TCB capture.BASIC: runs as Oracle Release 11g TCB and captures all the information that is captured in that release as well as AWR reports, SQL monitor reports and parameter information.WITH_RUNTIME_INFO: TCB captures runtime information for the SQL, such as dynamic sampling data, list of binds, Dynamic Plan info, along with information captured under BASIC mode.Note that if the user gives incorrect an parameter value, then the TCB runs in default mode and no error is thrown.replay - EXPLAIN (default), OUTLINE, EXECUTION or OUTLINE EXECUTION. This parameter defines TCB replay functionality.EXPLAIN: Replay explains the statement without using outlinesOUTLINE: Replay uses outlines mode and explains the statement using outlinesEXECUTION: Replay executes the statement without using outlinesOUTLINE EXECUTION: Replay executes the statement using outlinesNote that if the user gives an incorrect parameter value, then the replay runs in default mode and no error is thrown.name=mexec_count - Value is any positive number (N). This parameter tells TCB to execute the statement for N time and capture runtime info at end of each execution.name=stat_history_since - Value is date. The object statistics history is exported using this parameter. Statistics history after date specified will be exported.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_FIX_CONTROL" ElementId="#CHDCHFHC">
          <Description>Returns the value of fix control for a given bug number</Description>
          <Parameters>
            <Parameter Name="BUG_NUMBER">Bug number</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_SQL" ElementId="#CEGBACCC">
          <Description>Imports a SQL test case</Description>
          <Parameters>
            <Parameter Name="INCIDENT_ID">Identifier of the incident</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IMPORT_SQL_TESTCASE" ElementId="#CEGEEHFF">
          <Description>Imports a SQL test case into a schema</Description>
          <Parameters>
            <Parameter Name="DIRECTORY">Directory containing test case files</Parameter>
            <Parameter Name="FILENAME">Name of a file containing an XML document describing the SQL test case</Parameter>
            <Parameter Name="IMPORTENVIRONMENT">TRUE if the compilation environment should be imported</Parameter>
            <Parameter Name="IMPORTMETADATA">TRUE if the definition of the objects referenced in the SQL should be imported</Parameter>
            <Parameter Name="IMPORTDATA">TRUE if the data of the objects referenced in the SQL should be imported</Parameter>
            <Parameter Name="IMPORTPKGBODY">TRUE if the body of the packages referenced in the SQL are imported</Parameter>
            <Parameter Name="IMPORTDIAGNOSIS">TRUE if the diagnostic information associated to the task should be imported</Parameter>
            <Parameter Name="IGNORESTORAGE">TRUE if the storage attributes should be ignored</Parameter>
            <Parameter Name="CTRLOPTIONS">Opaque control parameters, of which only capture is valid for this subprogam.capture - BASIC (default) or WITH_RUNTIME_INFO. This parameter defines the mode of TCB capture.BASIC: runs as Oracle Release 11g TCB and captures all the information that is captured in that release as well as AWR reports, SQL monitor reports and parameter information.WITH_RUNTIME_INFO: TCB captures runtime information for the SQL, such as dynamic sampling data, list of binds, Dynamic Plan info, along with information captured under BASIC mode.Note that if the user gives incorrect an parameter value, then the TCB runs in default mode and no error is thrown.</Parameter>
            <Parameter Name="PRESERVESCHEMAMAPPING">TRUE if the schema (or schemas) are not re-mapped from the original environment to the test environment (schema mapping in the target database will be identical to the source database). Note that when an import is run with preservesSchemaMapping set to TRUE, if the objects in the schemas exists then the import will overwrite the existing objects.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="INCIDENTID_2_SQL" ElementId="#CHDIEJDC">
          <Description>Initializes a sql_setrow from an incident ID</Description>
          <Parameters>
            <Parameter Name="INCIDENT_ID">Identifier of the incident</Parameter>
            <Parameter Name="SQL_STMT">Resulting SQL</Parameter>
            <Parameter Name="PROBLEM_TYPE">Tentative type of SQL problem (currently among PROBLEM_TYPE_COMPILATION_ERROR and PROBLEM_TYPE_EXECUTION_ERROR)</Parameter>
            <Parameter Name="ERR_CODE">Error code if any otherwise it is set to NULL</Parameter>
            <Parameter Name="ERR_MSG">Error message if any otherwise it is set to NULL</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="INTERRUPT_DIAGNOSIS_TASK" ElementId="#CHDBCIFC">
          <Description>Interrupts a diagnostic task</Description>
          <Parameters>
            <Parameter Name="TASKNAME">Name of task</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LOAD_SQLSET_FROM_TCB" ElementId="#CEGHJHJE">
          <Description>Loads a SQLSET from Test Case Builder (TCB) file</Description>
          <Parameters>
            <Parameter Name="DIRECTORY">Name of directory</Parameter>
            <Parameter Name="FILENAME">Name of file</Parameter>
            <Parameter Name="SQLSET_NAME">Name of SQLSET</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PACK_STGTAB_SQLPATCH" ElementId="#CEGBIFAH">
          <Description>SQL patches into the staging table created by the CREATE_STGTAB_SQLPATCH Procedure</Description>
        </SubProgram>
        <SubProgram Name="REPLAY_SQL_TESTCASE" ElementId="#CEGGFABG">
          <Description>Reports on a diagnostic task</Description>
          <Parameters>
            <Parameter Name="DIRECTORY">Directory containing test case files</Parameter>
            <Parameter Name="FILENAME">Name of a file containing an XML document describing the SQL test case</Parameter>
            <Parameter Name="CTRLOPTIONS">Opaque control parameters. For example, to execute three times, set ctrlOptions with the following string: '&lt;parameter name="mexec_count"&gt;3&lt;/parameter&gt;'.replay - EXPLAIN (default), OUTLINE, EXECUTION or OUTLINE EXECUTION. This parameter defines TCB replay functionality.EXPLAIN: Replay explains the statement without using outlinesOUTLINE: Replay uses outlines mode and explains the statement using outlinesEXECUTION: Replay executes the statement without using outlinesOUTLINE EXECUTION: Replay executes the statement using outlinesNote that if the user gives an incorrect parameter value, then the replay runs in default mode and no error is thrown.name=mexec_count - Value is any positive number (N). This parameter tells TCB to execute the statement for N time and capture runtime info at end of each execution.</Parameter>
            <Parameter Name="SQLTESTCASE">SQL test case</Parameter>
            <Parameter Name="FORMAT">Format of the replay report. Possible formats are: TEXT, XML and HTML..</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REPORT_DIAGNOSIS_TASK" ElementId="#CHDJDIGI">
          <Description>Reports on a diagnostic task</Description>
          <Parameters>
            <Parameter Name="TASKNAME">Name of task to report</Parameter>
            <Parameter Name="TYPE">Type of the report. Possible values are: TEXT, HTML, XML (see Table 152-4, "DBMS_SQLDIAG Constants - Report Type (possible values) Constants").</Parameter>
            <Parameter Name="LEVEL">Format of the recommendations. Possible values are TYPICAL, BASIC, ALL (Table 152-5, "DBMS_SQLDIAG Constants - Report Level (possible values) Constants").</Parameter>
            <Parameter Name="SECTION">Particular section in the report. Possible values are: SUMMARY, FINDINGS, PLAN, INFORMATION, ERROR, ALL (Table 152-6, "DBMS_SQLDIAG Constants - Report Section (possible values) Constants").</Parameter>
            <Parameter Name="OBJECT_ID">Identifier of the advisor framework object that represents a given statement in a SQL Tuning Set (STS).</Parameter>
            <Parameter Name="RESULT_LIMIT">Number of statements in a STS for which the report is generated</Parameter>
            <Parameter Name="OWNER_NAME">Name of the task execution to use. If NULL, the report will be generated for the last task execution.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RESET_DIAGNOSIS_TASK" ElementId="#CHDJCDHG">
          <Description>Resets a diagnostic task</Description>
          <Parameters>
            <Parameter Name="TASKNAME">Name of task</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RESUME_DIAGNOSIS_TASK" ElementId="#CEGBGGDG">
          <Description>Resumes a diagnostic task</Description>
          <Parameters>
            <Parameter Name="TASKNAME">Name of task</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_DIAGNOSIS_TASK_PARAMETER" ElementId="#CHDFGDDF">
          <Description>Sets a diagnosis task parameter</Description>
          <Parameters>
            <Parameter Name="TASKNAME">Identifier of the task to execute</Parameter>
            <Parameter Name="PARAMETER">Name of the parameter to set</Parameter>
            <Parameter Name="VALUE">New value of the specified parameter</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UNPACK_STGTAB_SQLPATCH" ElementId="#CEGCJDBB">
          <Description>Unpacks from the staging table populated by a call to the PACK_STGTAB_SQLPATCH Procedure, using the patch data stored in the staging table to create patches on this system</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_SQLPA" Url="http://docs.oracle.com/database/121/ARPLS/d_sqlpa.htm">
      <Description>The DBMS_SQLPA package provides the interface to implement the SQL Performance Analyzer.</Description>
      <SubPrograms>
        <SubProgram Name="CANCEL_ANALYSIS_TASK" ElementId="#i1006894">
          <Description>Cancels the currently executing task analysis of one or more SQL statements</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the task to cancel</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_ANALYSIS_TASK" ElementId="#i1006896">
          <Description>Creates an advisor task to process and analyze one or more SQL statements</Description>
          <Parameters>
            <Parameter Name="SQL_TEXT">Text of a SQL statement</Parameter>
            <Parameter Name="BIND_LIST">A set of bind values</Parameter>
            <Parameter Name="PARSING_SCHEMA">Name of the schema where the statement can be compiled</Parameter>
            <Parameter Name="TASK_NAME">Optional analysis task name</Parameter>
            <Parameter Name="DESCRIPTION">Description of the SQL analysis task to a maximum of 256 characters</Parameter>
            <Parameter Name="SQL_ID">Identifier of a SQL statement</Parameter>
            <Parameter Name="PLAN_HASH_VALUE">Hash value of the SQL execution plan</Parameter>
            <Parameter Name="BEGIN_SNAP">Begin snapshot identifier</Parameter>
            <Parameter Name="END_SNAP">End snapshot identifier</Parameter>
            <Parameter Name="SQLSET_NAME">SQL tuning set name</Parameter>
            <Parameter Name="BASIC_FILTER">SQL predicate to filter the SQL from the SQL tuning set</Parameter>
            <Parameter Name="ORDER_BY">Order-by clause on the selected SQL</Parameter>
            <Parameter Name="TOP_SQL">Top N SQL after filtering and ranking</Parameter>
            <Parameter Name="SQLSET_OWNER">The owner of the SQL tuning set, or NULL for the current schema owner</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_ANALYSIS_TASK" ElementId="#i1006900">
          <Description>Drops a SQL analysis task</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">The name of the analysis task to drop</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXECUTE_ANALYSIS_TASK" ElementId="#CHEFGHHI">
          <Description>Executes a previously created analysis task</Description>
        </SubProgram>
        <SubProgram Name="INTERRUPT_ANALYSIS_TASK" ElementId="#CHECJJHH">
          <Description>Interrupts the currently executing analysis task</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Identifier of the analysis task to interrupt</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REPORT_ANALYSIS_TASK" ElementId="#i1006953">
          <Description>Displays the results of an analysis task</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the task to report</Parameter>
            <Parameter Name="TYPE">Type of the report to produce. Possible values are TEXT (default), HTML, XML and ACTIVE (see Usage Notes).</Parameter>
            <Parameter Name="LEVEL">Level of detail in the report:ALL - details of all SQLBASIC - currently the same as typicalCHANGED - only SQL with changed performanceCHANGED_PLANS - only SQL with plan changesERRORS - SQL with errors onlyIMPROVED - only improved SQLREGRESSED - only regressed SQLTIMEOUT - only SQL which timed-out during executionTYPICAL (default) - show information about every statement analyzed, including changing and errorsUNCHANGED - only SQL with unchanged performanceUNCHANGED_PLANS - only SQL with unchanged plansUNSUPPORTED - only SQL not supported by SPAs</Parameter>
            <Parameter Name="SECTION">Optionally limit the report to a single section (ALL for all sections):SUMMARY (default) - workload summary onlyALL - summary and details on SQL</Parameter>
            <Parameter Name="OBJECT_ID">Identifier of the advisor framework object that represents a given SQL in a tuning set (STS)</Parameter>
            <Parameter Name="TOP_SQL">Number of SQL statements in a STS for which the report is generated</Parameter>
            <Parameter Name="EXECUTION_NAME">Name of the task execution to use. If NULL, the report will be generated for the last task execution.</Parameter>
            <Parameter Name="TASK_OWNER">Owner of the relevant analysis task. Defaults to the current schema owner.</Parameter>
            <Parameter Name="ORDER_BY">How to sort SQL statements in the report (summary and body). Possible values:CHANGE_DIFF - sort SQL statements by change difference in SQL performance in terms of the comparison MetricNULL (default) - order SQL statement by impact on workloadSQL_IMPACT - order SQL statement by change impact on SQLWORKLOAD_IMPACT - same as NULLMETRIC_DELTA - same as CHANGE_DIFF</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RESET_ANALYSIS_TASK" ElementId="#i1006954">
          <Description>Resets the currently executing analysis task to its initial state</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Identifier of the analysis task to reset</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RESUME_ANALYSIS_TASK" ElementId="#CACEJGJF">
          <Description>Resumes a previously interrupted analysis task that was created to process a SQL tuning set.</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Identifier of the analysis task to resume</Parameter>
            <Parameter Name="BASIC_FILTER">A SQL predicate to filter the SQL from the SQL tuning set. Note that this filter will be applied in conjunction with the basic filter (parameter basic_filter) that was specified when calling the CREATE_ANALYSIS_TASK Functions.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_ANALYSIS_TASK_PARAMETER" ElementId="#CACIFFJE">
          <Description>Sets the SQL analysis task parameter value</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Identifier of the task to execute</Parameter>
            <Parameter Name="PARAMETER">Name of the parameter to set. The possible analysis parameters that can be set by this procedure are:APPLY_CAPTURED_COMPILENV: indicates whether the advisor could use the compilation environment captured with the SQL statements. The default is 0 (that is, NO).BASIC_FILTER: basic filter for SQL tuning setCELL_SIMULATION_ENABLED: for more details, see the helper script tcellsim.sql in the ADMIN directory.COMPARISON_METRIC: specify an expression of execution statistics to use in performance comparison (Example: buffer_gets, cpu_time + buffer_gets * 10)DATABASE_LINK: can be set to the global name of a PUBLIC database link. When it is set, SQL Performance Analyzer will use the database link for all TEST EXECUTE and EXPLAIN PLAN operations by sending the SQL statements to the remote database to be processed remotely. The analysis results will still be stored on the local database.DAYS_TO_EXPIRE: number of days until the task is deletedDEFAULT_EXECUTION_TYPE: the task will default to this type of execution when none is specified by the EXECUTE_ANALYSIS_TASK Function &amp; Procedure.</Parameter>
            <Parameter Name="PARAMETER">DISABLE_MULTI_EXEC: SQL statements are executed multiple times and runtime statistics are then averaged. Set this parameter to 'TRUE' to disable this capability. In this case, each SQL in the SQL tuning set is executed only once.EXECUTION_DAYS_TO_EXPIRE: number of days until the tasks's executions will be deleted (without deleting the task)EXECUTE_FULLDML: TRUE to execute DML statement fully, including acquiring row locks and modifying rows; FALSE (default) to execute only the query part of the DML without modifying data. When TRUE, SQL Performance Analyzer will issue a rollback following DML execution to prevent persistent changes from being made by the DML.EXECUTION_NAME1: name of the first task execution to analyzeEXECUTION_NAME2: name of the second task execution to analyzeLOCAL_TIME_LIMIT: per-statement time out (seconds)METRIC_DELTA_THRESHOLD: threshold of the difference between the SQL performance metric before and after the change. The default value is zero.PLAN_FILTER: plan filter for SQL tuning set (see SELECT_SQLSET for possible values)PLAN_LINES_COMPARISON:- ALWAYS --line by line comparison of plans in all scenarios.- AUTO -Line by Line comparison of plans only if phv2 is not available and phv1 is different- NONE (default) - line by line comparison of plans only if phv is unknownRANK_MEASURE1: first ranking measure for SQL tuning setRANK_MEASURE2: second possible ranking measure for SQL tuning setRANK_MEASURE3: third possible ranking measure for SQL tuning setRESUME_FILTER: a extra filter for SQL tuning sets besides BASIC_FILTERSQL_IMPACT_THRESHOLD: threshold of a change impact on a SQL statement. Same as the previous parameter, but at the level of the SQL statement.SQL_LIMIT: maximum number of SQL statements to processSQL_PERCENTAGE: percentage filter of SQL tuning set statementsSQLSET_NAME: name of the SQL tuning set to associate to the specified task or task execution. This parameter is mainly using in comparing two SQL tuning sets using SPA.SQLSET_OWNER: owner of the SQL tuning set specified using task parameter SQLSET_NAME.TIME_LIMIT: global time out (seconds)</Parameter>
            <Parameter Name="PARAMETER">WORKLOAD_IMPACT_THRESHOLD: threshold of a SQL statement impact on a workload. Statements which workload change impact is below the absolute value of this threshold will be ignored and not considered for improvement or regression.CON_DBID_MAPPING: provide a mapping of multitenant container database (CDB) IDs. When it is set, SQL Performance Analyzer uses the new CDB ID when it finds a match for the old CDB ID and executes the SQL in that container.</Parameter>
            <Parameter Name="VALUE">New value of the specified parameter</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_ANALYSIS_DEFAULT_PARAMETER" ElementId="#CHDEHJAB">
          <Description>Sets the SQL analysis task parameter default value</Description>
          <Parameters>
            <Parameter Name="PARAMETER">Name of the parameter to set. The possible analysis parameters that can be set by this procedure are:APPLY_CAPTURED_COMPILENV: indicates whether the advisor could use the compilation environment captured with the SQL statements. The default is 0 (that is, NO).BASIC_FILTER: basic filter for SQL tuning setCOMPARISON_METRIC: specify an expression of execution statistics to use in performance comparison (Example: buffer_gets, cpu_time + buffer_gets * 10)DATABASE_LINK: can be set to the global name of a PUBLIC database link. When it is set, SQL Performance Analyzer will use the database link for all TEST EXECUTE and EXPLAIN PLAN operations by sending the SQL statements to the remote database to be processed remotely. The analysis results will still be stored on the local database.DAYS_TO_EXPIRE: number of days until the task is deletedDEFAULT_EXECUTION_TYPE: the task will default to this type of execution when none is specified by the EXECUTE_ANALYSIS_TASK Function &amp; Procedure.EXECUTE_FULLDML: TRUE to execute DML statement fully, including acquiring row locks and modifying rows; FALSE (default) to execute only the query part of the DML without modifying data. When TRUE, SQL Performance Analyzer will issue a rollback following DML execution to prevent persistent changes from being made by the DML.EXECUTION_DAYS_TO_EXPIRE: number of days until the tasks's executions will be deleted (without deleting the task)EXECUTION_NAME1: name of the first task execution to analyzeEXECUTION_NAME2: name of the second task execution to analyzeLOCAL_TIME_LIMIT: per-statement time out (seconds)</Parameter>
            <Parameter Name="PARAMETER">PLAN_FILTER: plan filter for SQL tuning set (see SELECT_SQLSET for possible values)RANK_MEASURE1: first ranking measure for SQL tuning setRANK_MEASURE2: second possible ranking measure for SQL tuning setRANK_MEASURE3: third possible ranking measure for SQL tuning setRESUME_FILTER: a extra filter for SQL tuning sets besides BASIC_FILTERSQL_IMPACT_THRESHOLD: threshold of a change impact on a SQL statement. Same as the previous parameter, but at the level of the SQL statement.SQL_LIMIT: maximum number of SQL statements to processSQL_PERCENTAGE: percentage filter of SQL tuning set statementsTIME_LIMIT: global time out (seconds)WORKLOAD_IMPACT_THRESHOLD: threshold of a SQL statement impact on a workload. Statements which workload change impact is below the absolute value of this threshold will be ignored and not considered for improvement or regression.</Parameter>
            <Parameter Name="VALUE">New value of the specified parameter</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_SQLTUNE" Url="http://docs.oracle.com/database/121/ARPLS/d_sqltun.htm">
      <Description>The DBMS_SQLTUNE package is the interface for tuning SQL on demand. The related package DBMS_AUTO_SQLTUNE package provides the interface for SQL Tuning Advisor run as an automated task.</Description>
      <SubPrograms>
        <SubProgram Name="ACCEPT_ALL_SQL_PROFILES" ElementId="#CACEIFDE">
          <Description>SQL Profile Subprograms</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">The (mandatory) name of the SQL tuning task</Parameter>
            <Parameter Name="CATEGORY">This is the category name which must match the value of the SQLTUNE_CATEGORY parameter in a session for the session to use this SQL profile. It defaults to the value "DEFAULT". This is also the default of the SQLTUNE_CATEGORY parameter. The category must be a valid Oracle identifier. The category name specified is always converted to upper case. The combination of the normalized SQL text and category name creates a unique key for a SQL profile. An ACCEPT_SQL_PROFILE fails if this combination is duplicated.</Parameter>
            <Parameter Name="REPLACE">If the profile already exists, it is replaced if this argument is TRUE. It is an error to pass a name that is already being used for another signature/category pair, even with replace set to TRUE.</Parameter>
            <Parameter Name="FORCE_MATCH">If TRUE this causes SQL profiles to target all SQL statements which have the same text after normalizing all literal values into bind variables. (Note that if a combination of literal values and bind values is used in a SQL statement, no bind transformation occurs.) This is analogous to the matching algorithm used by the FORCE option of the cursor_sharing parameter.If FALSE, literals are not transformed. This is analogous to the matching algorithm used by the EXACT option of the cursor_sharing parameter.</Parameter>
            <Parameter Name="PROFILE_TYPE">Options:REGULAR_PROFILE - profile without a change to parallel execution (Default, equivalent to NULL). Note that if the SQL statement currently has a parallel execution plan, the regular profile will cause the optimizer to choose a different, but still parallel, execution plan.PX_PROFILE - regular profile with a change to parallel execution</Parameter>
            <Parameter Name="AUTOTUNE_PERIOD">The time period for the automatic SQL tuning. This setting applies only to the automatic SQL Tuning Advisor task. Possible values are as follows:null or negative value (default) - all or full. The result includes all task executions.0 - result of the current or most recent task execution.1 - result for the most recent 24-hour period.7 - result for the most recent 7-day period.The procedure interprets any other value as the time of the most recent task execution minus the value of this argument.</Parameter>
            <Parameter Name="EXECUTION_NAME">Name of the task execution to use. If null, then the procedure generates the report for the most recent task execution.</Parameter>
            <Parameter Name="TASK_OWNER">Owner of the tuning task. This is an optional parameter that must be specified to accept a SQL profile associated to a tuning task owned by another user. The current user is the default value.</Parameter>
            <Parameter Name="DESCRIPTION">A user specified string describing the purpose of the SQL profile. The description is truncated if longer than 256 characters. The maximum size is 500 characters.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ACCEPT_SQL_PROFILE" ElementId="#i1010403">
          <Description>SQL Profile Subprograms</Description>
        </SubProgram>
        <SubProgram Name="ADD_SQLSET_REFERENCE" ElementId="#i1006814">
          <Description>SQL Tuning Set Subprograms</Description>
          <Parameters>
            <Parameter Name="SQLSET_NAME">The SQL tuning set name</Parameter>
            <Parameter Name="DESCRIPTION">The description of the usage of SQL tuning set. The description is truncated if longer than 256 characters.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ALTER_SQL_PROFILE" ElementId="#i1008294">
          <Description>SQL Profile Subprograms</Description>
          <Parameters>
            <Parameter Name="NAME">The (mandatory) name of the existing SQL profile to alter</Parameter>
            <Parameter Name="ATTRIBUTE_NAME">The (mandatory) attribute name to alter (case insensitive) using valid attribute names</Parameter>
            <Parameter Name="VALUE">The (mandatory) new value of the attribute using valid attribute values</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CANCEL_TUNING_TASK" ElementId="#CHDCHFDB">
          <Description>SQL Tuning Advisor Subprograms</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">The name of the task to cancel</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CAPTURE_CURSOR_CACHE_SQLSET" ElementId="#CACJHDDC">
          <Description>SQL Tuning Set Subprograms</Description>
          <Parameters>
            <Parameter Name="SQLSET_NAME">The SQL tuning set name</Parameter>
            <Parameter Name="TIME_LIMIT">The total amount of time, in seconds, to execute</Parameter>
            <Parameter Name="REPEAT_INTERVAL">The amount of time, in seconds, to pause between sampling</Parameter>
            <Parameter Name="CAPTURE_OPTION">During capture, either insert new statements, update existing statements, or both. 'INSERT', 'UPDATE', or 'MERGE' just like load_option in load_sqlset</Parameter>
            <Parameter Name="CAPTURE_MODE">Capture mode (UPDATE and MERGE capture options). Possible values:MODE_REPLACE_OLD_STATS - Replace statistics when the number of executions seen is greater than that stored in the SQL tuning setMODE_ACCUMULATE_STATS - Add new values to current values for SQL we already store. Note that this mode detects if a statement has been aged out, so the final value for a statistics is the sum of the statistics of all cursors that statement existed under.</Parameter>
            <Parameter Name="BASIC_FILTER">Filter to apply to shared SQL area on each sampling (see SELECT_XXX subprograms). If basic_filter is not set by the caller, the subprogram captures only statements of the type CREATE TABLE, INSERT, SELECT, UPDATE, DELETE, and MERGE.</Parameter>
            <Parameter Name="SQLSET_OWNER">The owner of the SQL tuning set or NULL for current schema owner</Parameter>
            <Parameter Name="RECURSIVE_SQL">Filter that includes recursive SQL in the SQL tuning set (HAS_RECURSIVE_SQL) or excludes it (NO_RECURSIVE_SQL).</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_SQL_PLAN_BASELINE" ElementId="#CHDFECGH">
          <Description>SQL Tuning Advisor Subprograms</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the task for which to get a script</Parameter>
            <Parameter Name="OBJECT_ID">Object ID to which the SQL corresponds</Parameter>
            <Parameter Name="PLAN_HASH_VALUE">Plan to create plan baseline</Parameter>
            <Parameter Name="OWNER_NAME">Owner of the relevant tuning task. Defaults to the current schema owner.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_SQLSET" ElementId="#i1006897">
          <Description>SQL Tuning Set Subprograms</Description>
          <Parameters>
            <Parameter Name="SQLSET_NAME">The SQL tuning set name</Parameter>
            <Parameter Name="DESCRIPTION">The description of the SQL tuning set</Parameter>
            <Parameter Name="SQLSET_OWNER">The owner of the SQL tuning set, or NULL for the current schema owner</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_STGTAB_SQLPROF" ElementId="#CACHIGBF">
          <Description>SQL Profile Subprograms</Description>
          <Parameters>
            <Parameter Name="TABLE_NAME">The name of the table to create (case-insensitive unless double quoted). Required.</Parameter>
            <Parameter Name="SCHEMA_NAME">The schema to create the table in, or NULL for current schema (case-insensitive unless double quoted)</Parameter>
            <Parameter Name="TABLESPACE_NAME">The tablespace to store the staging table within, or NULL for current user's default tablespace (case-insensitive unless double quoted)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_STGTAB_SQLSET" ElementId="#CACBCEEH">
          <Description>SQL Tuning Set Subprograms</Description>
          <Parameters>
            <Parameter Name="TABLE_NAME">Name of the table to create (case-sensitive)</Parameter>
            <Parameter Name="SCHEMA_NAME">Schema in which to create the table in, or NULL for current schema (case-sensitive)</Parameter>
            <Parameter Name="TABLESPACE_NAME">Tablespace in which to store the staging table, or NULL for current user's default tablespace (case-sensitive)</Parameter>
            <Parameter Name="DB_VERSION">Database (DB) version determining the format of the staging table. User can also create an older DB version staging table to export STS to an older DB version. One of the following values:NULL (default) — current DB versionSTS_STGTAB_10_2_VERSION — 10.2 DB versionSTS_STGTAB_11_1_VERSION — 11.1 DB versionSTS_STGTAB_11_2_VERSION — 11.2 DB version</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_TUNING_TASK" ElementId="#CHDGBCDB">
          <Description>SQL Tuning Advisor Subprograms</Description>
          <Parameters>
            <Parameter Name="SQL_TEXT">Text of a SQL statement</Parameter>
            <Parameter Name="BEGIN_SNAP">Begin snapshot identifier</Parameter>
            <Parameter Name="END_SNAP">End snapshot identifier</Parameter>
            <Parameter Name="SQL_ID">Identifier of a SQL statement</Parameter>
            <Parameter Name="BIND_LIST">An ordered list of bind values in ANYDATA type</Parameter>
            <Parameter Name="PLAN_HASH_VALUE">Hash value of the SQL execution plan</Parameter>
            <Parameter Name="SQLSET_NAME">SQL tuning set name</Parameter>
            <Parameter Name="BASIC_FILTER">SQL predicate to filter the SQL from the SQL tuning set</Parameter>
            <Parameter Name="OBJECT_FILTER">Object filter</Parameter>
            <Parameter Name="RANK(I)">Order-by clause on the selected SQL</Parameter>
            <Parameter Name="RESULT_PERCENTAGE">Percentage on the sum of a ranking measure</Parameter>
            <Parameter Name="RESULT_LIMIT">Top L(imit) SQL from the (filtered/ranked) SQL</Parameter>
            <Parameter Name="USER_NAME">User name for whom the statement is to be tuned</Parameter>
            <Parameter Name="SCOPE">Tuning scope (limited/comprehensive)</Parameter>
            <Parameter Name="TIME_LIMIT">The maximum duration in seconds for the tuning session</Parameter>
            <Parameter Name="TASK_NAME">Optional tuning task name</Parameter>
            <Parameter Name="DESCRIPTION">Description of the SQL tuning session to a maximum of 256 characters.</Parameter>
            <Parameter Name="PLAN_FILTER">Plan filter. It is applicable when multiple plans (plan_hash_value) are associated with the same statement. This filter allows for selecting one plan (plan_hash_value) only. Possible values are:LAST_GENERATED: plan with the most recent timestampFIRST_GENERATED: plan with the earliest timestamp, the opposite to LAST_GENERATEDLAST_LOADED: plan with the most recent first_load_time statistics informationFIRST_LOADED: plan with the earliest first_load_time statistics information, the opposite to LAST_LOADEDMAX_ELAPSED_TIME: plan with the maximum elapsed timeMAX_BUFFER_GETS: plan with the maximum buffer getsMAX_DISK_READS: plan with the maximum disk readsMAX_DIRECT_WRITES: plan with the maximum direct writesMAX_OPTIMIZER_COST: plan with the maximum optimizer cost</Parameter>
            <Parameter Name="SQLSET_OWNER">Owner of the SQL tuning set, or NULL for the current schema owner</Parameter>
            <Parameter Name="SPA_TASK_NAME">Name of the SQL Performance Analyzer task whose regressions are to be tuned</Parameter>
            <Parameter Name="SPA_TASK_OWNER">Owner of specified SQL Performance Analyzer task or NULL for current user</Parameter>
            <Parameter Name="SPA_COMPARE_EXEC">Execution name of Compare Performance trial of SQL Performance Analyzer task. If NULL, we use the most recent execution of the given SQL Performance Analyzer task, of type COMPARE PERFORMANCE.</Parameter>
            <Parameter Name="CON_NAME">Specifies the container for the tuning task. The semantics depend on the function format:For the SQL text format, this parameter specifies the container in which SQL Tuning Advisor tunes the SQL statement. If null (default), then SQL Tuning Advisor uses the current container.For the SQL ID format, this parameter specifies the container from which the database fetches the SQL statement for tuning. SQL Tuning Advisor tunes the statement in this container. If null, then the database uses the current PDB for tuning, fetches the statement from the cursor cache of all valid containers executing the SQL statement, and tunes the most expensive statement in its container.For the AWR format, this parameter specifies the container from whose AWR data the database fetches the SQL statement for tuning. SQL Tuning Advisor tunes the statement in this container. If null, then the database uses the current PDB for tuning, fetches the statement from the AWR of all valid containers that have this SQL statement, and tunes the most expensive statement in its container.The following statements are true of all function formats:In a non-CDB, this parameter is ignored.In a PDB, this parameter must be null or match the container name of the PDB. Otherwise, an error occurs.In a CDB root, this parameter must be null or match the container name of a container in this CDB. Otherwise, an error occurs.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_SQLSET" ElementId="#i1006898">
          <Description>SQL Tuning Set Subprograms</Description>
          <Parameters>
            <Parameter Name="SQLSET_NAME">The SQL tuning set name</Parameter>
            <Parameter Name="BASIC_FILTER">SQL predicate to filter the SQL from the SQL tuning set. This basic filter is used as a where clause on the SQL tuning set content to select a desired subset of SQL from the Tuning Set.</Parameter>
            <Parameter Name="SQLSET_OWNER">The owner of the SQL tuning set, or NULL for current schema owner</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_SQL_PROFILE" ElementId="#i1007819">
          <Description>SQL Profile Subprograms</Description>
          <Parameters>
            <Parameter Name="NAME">The (mandatory) name of SQL profile to be dropped. The name is case sensitive.</Parameter>
            <Parameter Name="IGNORE">Ignores errors due to object not existing</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_SQLSET" ElementId="#i1007711">
          <Description>SQL Tuning Set Subprograms</Description>
          <Parameters>
            <Parameter Name="SQLSET_NAME">The SQL tuning set name</Parameter>
            <Parameter Name="SQLSET_OWNER">The owner of the SQL tuning set, or NULL for current schema owner</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_TUNING_TASK" ElementId="#CHDIGHHA">
          <Description>SQL Tuning Advisor Subprograms</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">The name of the tuning task to drop</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXECUTE_TUNING_TASK" ElementId="#CHDGEJJA">
          <Description>SQL Tuning Advisor Subprograms</Description>
        </SubProgram>
        <SubProgram Name="IMPLEMENT_TUNING_TASK" ElementId="#BABIECBJ">
          <Description>SQL Tuning Advisor Subprograms</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the tuning task for which to implement recommendations</Parameter>
            <Parameter Name="REC_TYPE">Filter the types of recommendations to implement. Only 'PROFILES' is supported.</Parameter>
            <Parameter Name="OWNER_NAME">Owner of the relevant tuning task or NULL for the current user.</Parameter>
            <Parameter Name="EXECUTION_NAME">name of the task execution to use. If NULL, recommendations from the last task execution are implemented.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="INTERRUPT_TUNING_TASK" ElementId="#CHDFIFAF">
          <Description>SQL Tuning Advisor Subprograms</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the tuning task to interrupt</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LOAD_SQLSET" ElementId="#i1006951">
          <Description>SQL Tuning Set Subprograms</Description>
          <Parameters>
            <Parameter Name="SQLSET_NAME">The SQL tuning set name to populate</Parameter>
            <Parameter Name="POPULATE_CURSOR">The cursor reference from which to populate</Parameter>
            <Parameter Name="LOAD_OPTION">Specifies how the statements are loaded into the SQL tuning set. The possible values are:INSERT (default) - add only new statementsUPDATE - update existing the SQL statements and ignores any new statementsMERGE - this is a combination of the two other options. This option inserts new statements and updates the information of the existing ones.</Parameter>
            <Parameter Name="UPDATE_OPTION">Specifies how the existing statements are updated. This parameter is considered only if load_option is specified with 'UPDATE'/'MERGE' as an option. The possible values are:REPLACE (default) - update the statement using the new statistics, bind list, object list, and so on.ACCUMULATE - when possible combine attributes (for example, statistics like elapsed_time, and so on) otherwise just replace the old values (for example, module, action, and so on) by the new provided ones. The SQL statement attributes that can be accumulated are: elapsed_time, buffer_gets, direct_writes, disk_reads, row_processed, fetches, executions, end_of_fetch_count, stat_period and active_stat_period.</Parameter>
            <Parameter Name="UPDATE_CONDITION">Specifies a where clause to execute the update operation. The update is performed only if the specified condition is true. The condition can refer to either the data source or destination. The condition must use the following prefixes to refer to attributes from the source or the destination:OLD - to refer to statement attributes from the SQL tuning set (destination)NEW - to refer to statements attributes from the input statements (source)</Parameter>
            <Parameter Name="UPDATE_ATTRIBUTES">Specifies the list of a SQL statement attributes to update during a merge or update operation.The possible values are:NULL (default) - the content of the input cursor except the execution context. On other terms, it is equivalent to ALL without execution context like module, action, and so on.BASIC - statistics and binds onlyTYPICAL - BASIC + SQL plans (without row source statistics) and without object reference listALL - all attributes including the execution context attributes like module, action, and so on.List of comma separated attribute names to update - EXECUTION_CONTEXT, EXECUTION_STATISTICS, BIND_LIST, OBJECT_LIST, SQL_PLAN, SQL_PLAN_STATISTICS (similar to SQL_PLAN + row source statistics)</Parameter>
            <Parameter Name="IGNORE_NULL">If TRUE do not update an attribute if the new value is NULL. That is, do not override with NULL values unless intentional.</Parameter>
            <Parameter Name="COMMIT_ROWS">If a value is provided, the load commits after each set of that many statements is inserted. If NULL is provided, the load commits only once, at the end of the operation. Providing a value for this argument allows you to monitor the progress of a SQL tuning set load operation in the DBA_/USER_SQLSET views. The STATEMENT_COUNT value increases as new SQL statements are loaded.</Parameter>
            <Parameter Name="SQLSET_OWNER">The owner of the SQL tuning set, or the current schema owner or NULL for current owner</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PACK_STGTAB_SQLPROF" ElementId="#CACFCAEC">
          <Description>SQL Profile Subprograms</Description>
          <Parameters>
            <Parameter Name="PROFILE_NAME">The name of the profile to pack (% wildcards acceptable, case-sensitive)</Parameter>
            <Parameter Name="PROFILE_CATEGORY">The category to pack profiles from (% wildcards acceptable, case-sensitive)</Parameter>
            <Parameter Name="STAGING_TABLE_NAME">The name of the table to use (case-insensitive unless double quoted). Required.</Parameter>
            <Parameter Name="STAGING_SCHEMA_OWNER">The schema where the table resides, or NULL for current schema (case-insensitive unless double quoted)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PACK_STGTAB_SQLSET" ElementId="#CACIFBAJ">
          <Description>SQL Tuning Set Subprograms</Description>
          <Parameters>
            <Parameter Name="SQLSET_NAME">The name of the SQL tuning set to pack (% wildcards acceptable, case-sensitive)</Parameter>
            <Parameter Name="SQLSET_OWNER">The category from which to pack SQL tuning sets (% wildcards acceptable, case-sensitive)</Parameter>
            <Parameter Name="STAGING_TABLE_NAME">The name of the table to use (case-sensitive)</Parameter>
            <Parameter Name="STAGING_SCHEMA_OWNER">The schema where the table resides, or NULL for current schema (case-sensitive)</Parameter>
            <Parameter Name="DB_VERSION">Database (DB) version determining the format of the staging table. User can also create an older DB version staging table to export STS to an older DB version. One of the following values:NULL (default) — current DB versionSTS_STGTAB_10_2_VERSION — 10.2 DB versionSTS_STGTAB_11_1_VERSION — 11.1 DB versionSTS_STGTAB_11_2_VERSION — 11.2 DB version</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMAP_STGTAB_SQLPROF" ElementId="#CACGGJBG">
          <Description>SQL Profile Subprograms</Description>
          <Parameters>
            <Parameter Name="OLD_PROFILE_NAME">The name of the profile to target for a remap operation (case-sensitive)</Parameter>
            <Parameter Name="NEW_PROFILE_NAME">The new name of the profile, or NULL to remain the same (case-sensitive)</Parameter>
            <Parameter Name="NEW_PROFILE_CATEGORY">The new category for the profile, or NULL to remain the same (case-sensitive)</Parameter>
            <Parameter Name="STAGING_TABLE_NAME">The name of the table on which to perform the remap operation (case-sensitive). Required.</Parameter>
            <Parameter Name="STAGING_SCHEMA_OWNER">The schema where the table resides, or NULL for current schema (case-sensitive)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMAP_STGTAB_SQLSET" ElementId="#CACIFDFG">
          <Description>SQL Tuning Set Subprograms</Description>
          <Parameters>
            <Parameter Name="OLD_SQLSET_NAME">The name of the tuning set to target for a remap operation. Wildcards are not supported.</Parameter>
            <Parameter Name="OLD_SQLSET_OWNER">The new name of the tuning set owner to target for a remap operation. NULL for current schema owner</Parameter>
            <Parameter Name="NEW_SQLSET_NAME">The new name for the tuning set, or NULL to keep the same tuning set name.</Parameter>
            <Parameter Name="NEW_SQLSET_OWNER">The new owner for the tuning set, or NULL to remain the same owner name.</Parameter>
            <Parameter Name="STAGING_TABLE_NAME">The name of the table on which to perform the remap operation (case-sensitive).</Parameter>
            <Parameter Name="STAGING_SCHEMA_OWNER">The name of staging table owner, or NULL for current schema owner (case-sensitive).</Parameter>
            <Parameter Name="OLD_CON_DBID">The old container DBID to be remapped to a new container DBID. Specify NULL to use the same container DBID. You must provide both old_con_dbid and new_con_dbid for the remap to succeed.</Parameter>
            <Parameter Name="NEW_CON_DBID">The new container DBID to replace with the old container DBID. Specify NULL to use the same container DBID. You must provide both old_con_dbid and new_con_dbid for the remap to succeed.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVE_SQLSET_REFERENCE" ElementId="#i1006952">
          <Description>SQL Tuning Set Subprograms</Description>
          <Parameters>
            <Parameter Name="SQLSET_NAME">The SQL tuning set name</Parameter>
            <Parameter Name="REFERENCE_ID">The identifier of the reference to remove</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REPORT_AUTO_TUNING_TASK" ElementId="#CACFICAE">
          <Description>SQL Tuning Set Subprograms</Description>
          <Parameters>
            <Parameter Name="BEGIN_EXEC">Name of execution from which to begin the report. NULL retrieves a report on the most recent run</Parameter>
            <Parameter Name="END_EXEC">Name of execution at which to end the report. NULL retrieves a report on the most recent run.</Parameter>
            <Parameter Name="TYPE">Type of the report to produce. Possible values are TYPE_TEXT which produces a text report</Parameter>
            <Parameter Name="LEVEL">Level of detail in the report:LEVEL_BASIC: simple version of the report. Just show info about the actions taken by the advisor.LEVEL_TYPICAL: show information about every statement analyzed, including requests not implemented.LEVEL_ALL: highly detailed report level, also provides annotations about statements skipped over.</Parameter>
            <Parameter Name="SECTION">Optionally limit the report to a single section (ALL for all sections):SECTION_SUMMARY - summary informationSECTION_FINDINGS - tuning findingsSECTION_PLAN - explain plansSECTION_INFORMATION - general informationSECTION_ERROR - statements with errorsSECTION_ALL - all statements</Parameter>
            <Parameter Name="OBJECT_ID">Advisor framework object id that represents a single statement to restrict reporting to. NULL for all statements. Only valid for reports that target a single execution.</Parameter>
            <Parameter Name="RESULT_LIMIT">Maximum number of SQL statements to show in the report</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REPORT_SQL_DETAIL" ElementId="#CHDIDGFA">
          <Description>SQL Performance Reporting Subprograms</Description>
          <Parameters>
            <Parameter Name="SQL_ID">SQLID for which monitoring information should be displayed. If NULL (the default), display statistics for the SQLID of the last SQL statement executed in the current session.</Parameter>
            <Parameter Name="SQL_PLAN_HASH_VALUE">Displays SQL statistics and details for a specific plan_hash_value. If NULL (default), displays statistics and details for all plans of the SQL_ID.</Parameter>
            <Parameter Name="START_TIME">If specified, shows SQL activity (from GV$ACTIVE_SESSION_HISTORY) starting at this time. On Oracle RAC, the minimum start_time is the earliest sample_time of the in-memory ASH buffers across all instances. If NULL (default), one hour before the current time.</Parameter>
            <Parameter Name="DURATION">Duration of activity in seconds for the report. If NULL (default) uses a value of 1 hour.</Parameter>
            <Parameter Name="INST_ID">Target instance to get SQL details from. If NULL, uses data from all instances. If 0 or -1, uses current instance.</Parameter>
            <Parameter Name="DBID">DBID from which to get SQL details. If NULL, uses current DBID.</Parameter>
            <Parameter Name="EVENT_DETAIL">When set to 'NO', the activity is aggregated by wait_class only. Use 'YES' (the default) to aggregate by (wait_class, event_name).</Parameter>
            <Parameter Name="BUCKET_MAX_COUNT">If specified, this should be the maximum number of histogram buckets created in the report. If not specified, a value of 128 is used.</Parameter>
            <Parameter Name="BUCKET_INTERVAL">If specified, this represents the exact time interval in seconds, of all histogram buckets. If specified, bucket_max_count is ignored.</Parameter>
            <Parameter Name="TOP_N">Controls the number of entries to display per dimension in the top dimensions section. If not specified, a default value of 10 is used.</Parameter>
            <Parameter Name="REPORT_LEVEL">Level of detail for the report, either 'BASIC', 'TYPICAL' or 'ALL'. Default assumes 'TYPICAL'. Their meanings are explained below.In addition, individual report sections can also be enabled or disabled by using a +/- section_name. Several sections are defined:'TOP'- Show top values for the ASH dimensions for a SQL statement; ON by default'SPM'- Show existing plan baselines for a SQL statement; OFF by default'MISMATCH'- Show reasons for creating new child cursors (sharing criteria violations); OFF by default.'STATS'- Show SQL execution statistics per plan from GV$SQLAREA_PLAN_HASH; ON by default'ACTIVITY' - Show top activity from ASH for each plan of a SQL statement; ON by default'ACTIVITY_ALL' - Show top activity from ASH for each line of the plan for a SQL statement; OFF by default'HISTOGRAM' - Show activity histogram for each plan of a SQL statement (plan time line histogram); ON by default'SESSIONS' - Show activity for top sessions for each plan of a SQL statement; OFF by default'MONITOR' - Show show one monitored SQL execution per execution plan; ON by default'XPLAN' - Show execution plans; ON by default'BINDS' - show captured bind data; ON by defaultIn addition, SQL text can be specified at different levels:-SQL_TEXT - No SQL text in report+SQL_TEXT - OK with partial SQL text up to the first 2000 chars as stored in GV$SQL_MONITOR-SQL_FULLTEXT - No full SQL text (+SQL_TEXT)+SQL_FULLTEXT - Show full SQL text (default value)The meanings of the three top-level report levels are:NONE - minimum possibleBASIC - SQL_TEXT+STATS+ACTIVITY+HISTOGRAMTYPICAL - SQL_FULLTEXT+TOP+STATS+ACTIVITY+HISTOGRAM+XPLAN+MONITORALL - everythingOnly one of these 4 levels can be specified and, if it is, it has to be at the start of the REPORT_LEVEL string</Parameter>
            <Parameter Name="TYPE">Report format: 'ACTIVE' by default. Can also be 'XML' (see Usage Notes).</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REPORT_TUNING_TASK" ElementId="#CHDGEIHJ">
          <Description>SQL Tuning Set Subprograms</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the tuning task to report.</Parameter>
            <Parameter Name="TYPE">Type of the report to produce. Possible values are TEXT which produces a text report.</Parameter>
            <Parameter Name="LEVEL">Level of detail in the report:BASIC: simple version of the report. Just show info about the actions taken by the advisor.TYPICAL: show information about every statement analyzed, including requests not implemented.ALL: highly detailed report level, also provides annotations about statements skipped over.</Parameter>
            <Parameter Name="SECTION">Optionally limit the report to a single section (ALL for all sections):SUMMARY - summary informationFINDINGS - tuning findingsPLAN - explain plansINFORMATION - general informationERROR - statements with errorsALL - all statements</Parameter>
            <Parameter Name="OBJECT_ID">Advisor framework object id that represents a single statement to restrict reporting to. NULL for all statements. Only valid for reports that target a single execution.</Parameter>
            <Parameter Name="RESULT_LIMIT">Maximum number of SQL statements to show in the report.</Parameter>
            <Parameter Name="OWNER_NAME">Owner of the relevant tuning task. Defaults to the current schema owner.</Parameter>
            <Parameter Name="EXECUTION_NAME">Name of the task execution to use. If NULL, the report is generated for the last task execution.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RESET_TUNING_TASK" ElementId="#CHDJEHBG">
          <Description>SQL Tuning Advisor Subprograms</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">The name of the tuning task to reset</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RESUME_TUNING_TASK" ElementId="#CHDJEABC">
          <Description>SQL Tuning Advisor Subprograms</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">The name of the tuning task to resume.</Parameter>
            <Parameter Name="BASIC_FILTER">A SQL predicate to filter the SQL from the SQL tuning set. Note that this filter is applied in conjunction with the basic filter (i.e., parameter basic_filter) when calling CREATE_TUNING_TASK Functions.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SCHEDULE_TUNING_TASK" ElementId="#CACGDDAH">
          <Description>SQL Tuning Advisor Subprograms</Description>
          <Parameters>
            <Parameter Name="BEGIN_SNAP">The beginning snapshot identifier. The range is exclusive, which means that SQL statements in this snapshot ID are not included.</Parameter>
            <Parameter Name="END_SNAP">The end snapshot identifier. The range is inclusive, which means that SQL statements in this snapshot ID are included.</Parameter>
            <Parameter Name="SQL_ID">The SQL ID of the statement to be tuned.</Parameter>
            <Parameter Name="PLAN_HASH_VALUE">The plan hash value of the statement to be tuned. For example, the tuning job fetches captured binds for this SQL plan.</Parameter>
            <Parameter Name="START_DATE">The date on which the schedule becomes valid. If null, then SQL Tuning Advisor immediately executes the task.</Parameter>
            <Parameter Name="SCOPE">The scope of the tuning job: limited, or comprehensive.</Parameter>
            <Parameter Name="TIME_LIMIT">The maximum duration in seconds for the SQL tuning session.</Parameter>
            <Parameter Name="TASK_NAME">Optional SQL tuning task name.</Parameter>
            <Parameter Name="DESCRIPTION">Description of the SQL tuning session. The description can contain a maximum of 256 characters.</Parameter>
            <Parameter Name="CON_NAME">The container from which SQL Tuning Advisor accesses the SQL statement information.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SCRIPT_TUNING_TASK" ElementId="#CHDCHDED">
          <Description>SQL Tuning Advisor Subprograms</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Name of the tuning task for which to apply a script</Parameter>
            <Parameter Name="REC_TYPE">Filter the script by types of recommendations to include. Any subset of the following separated by commas: or 'ALL: ''PROFILES' ''STATISTICS' ''INDEXES'. For example, a script with profiles and statistics: 'PROFILES,STATISTICS'</Parameter>
            <Parameter Name="OBJECT_ID">Optionally filters by a single object ID</Parameter>
            <Parameter Name="RESULT_LIMIT">Optionally shows commands for only top n SQL (ordered by object_id and ignored if an object_id is also specified)</Parameter>
            <Parameter Name="OWNER_NAME">Owner of the relevant tuning task. Defaults to the current schema owner</Parameter>
            <Parameter Name="EXCUTION_NAME">Name of the task execution to use. If NULL, the script is generated for the last task execution.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SELECT_CURSOR_CACHE" ElementId="#i1010615">
          <Description>SQL Tuning Set Subprograms</Description>
          <Parameters>
            <Parameter Name="BASIC_FILTER">The SQL predicate to filter the SQL from the shared SQL area defined on attributes of the SQLSET_ROW. If basic_filter is not set by the caller, the subprogram captures only statements of the type CREATE TABLE, INSERT, SELECT, UPDATE, DELETE, and MERGE.</Parameter>
            <Parameter Name="OBJECT_FILTER">Currently not supported.</Parameter>
            <Parameter Name="RANKING_MEASURE(N)">An order-by clause on the selected SQL.</Parameter>
            <Parameter Name="RESULT_PERCENTAGE">A filter which picks the top N% according to the ranking measure given. Note that this applies only if one ranking measure is given.</Parameter>
            <Parameter Name="RESULT_LIMIT">The top L(imit) SQL from the (filtered) source ranked by the ranking measure</Parameter>
            <Parameter Name="ATTRIBUTE_LIST">List of SQL statement attributes to return in the result. The possible values are:TYPICAL - BASIC + SQL plan (without row source statistics) and without object reference list (default)BASIC - all attributes (such as execution statistics and binds) are returned except the plans. The execution context is always part of the result.ALL - return all attributesComma separated list of attribute names this allows to return only a subset of SQL attributes: EXECUTION_STATISTICS, BIND_LIST, OBJECT_LIST, SQL_PLAN,SQL_PLAN_STATISTICS: similar to SQL_PLAN + row source statistics</Parameter>
            <Parameter Name="RECURSIVE_SQL">Filter that includes recursive SQL in the SQL tuning set (HAS_RECURSIVE_SQL) or excludes it (NO_RECURSIVE_SQL).</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SELECT_SQL_TRACE" ElementId="#CACBBIEH">
          <Description>SQL Tuning Set Subprograms</Description>
          <Parameters>
            <Parameter Name="DIRECTORY">The directory object containing the trace file(s). This field is mandatory.</Parameter>
            <Parameter Name="FILE_NAME">All or part of name of the trace file(s) to process. If NULL then the current or most recent file in the specified location or path is used. '%' wildcards are supported for matching trace file names.</Parameter>
            <Parameter Name="MAPPING_TABLE_NAME">The mapping table name. Note that the mapping table name is case insensitive. If the mapping table name is NULL, the mappings in the current database is used.</Parameter>
            <Parameter Name="MAPPING_TABLE_OWNER">the mapping table owner. If it is NULL, the current user is used.</Parameter>
            <Parameter Name="SELECT_MODE">the mode for selecting SQL from the trace. By default, it is SINGLE_EXECUTION.SINGLE_EXECUTION - return one execution of a SQL.(default).ALL_EXECUTIONS - return all executions.</Parameter>
            <Parameter Name="OPTIONS">The options. By default, it is LIMITED_COMMAND_TYPE which can be specified to include SQL statements from all Oracle command types.LIMITED_COMMAND_TYPE - returns the SQL statements with the command types CREATE, INSERT, SELECT, UPDATE, DELETE, UPSERT. It is the default.ALL_COMMAND_TYPE - returns the SQL statements with all command types.</Parameter>
            <Parameter Name="PATTERN_START">Opening delimiting pattern of the trace file section(s) to consider. CURRENTLY INOPERABLE.</Parameter>
            <Parameter Name="PATTERN_END">closing delimiting pattern of the trace file section(s) to process. CURRENTLY INOPERABLE.</Parameter>
            <Parameter Name="RESULT_LIMIT">Top SQL from the (filtered) source. Default to MAXSB4 if NULL.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SELECT_SQLSET" ElementId="#CHEHBBDF">
          <Description>SQL Tuning Set Subprograms</Description>
          <Parameters>
            <Parameter Name="SQLSET_NAME">The SQL tuning set name</Parameter>
            <Parameter Name="BASIC_FILTER">The SQL predicate to filter the SQL from the SQL tuning set defined on attributes of the SQLSET_ROW</Parameter>
            <Parameter Name="OBJECT_FILTER">Currently not supported.</Parameter>
            <Parameter Name="RANKING_MEASURE(N)">An order-by clause on the selected SQL</Parameter>
            <Parameter Name="RESULT_PERCENTAGE">A filter which picks the top N% according to the ranking measure given. Note that this applies only if one ranking measure is given.</Parameter>
            <Parameter Name="RESULT_LIMIT">The top L(imit) SQL from the (filtered) source ranked by the ranking measure</Parameter>
            <Parameter Name="ATTRIBUTE_LIST">List of SQL statement attributes to return in the result. The possible values are:TYPICAL - BASIC + SQL plan (without row source statistics) and without object reference list (default)BASIC - all attributes (such as execution statistics and binds) are returned except the plans. The execution context is always part of the result.ALL - return all attributesComma-separated list of attribute names this allows to return only a subset of SQL attributes: EXECUTION_STATISTICS, SQL_BINDS, SQL_PLAN_STATISTICS (similar to SQL_PLAN + row source statistics).</Parameter>
            <Parameter Name="PLAN_FILTER">The plan filter</Parameter>
            <Parameter Name="SQLSET_OWNER">The owner of the SQL tuning set, or NULL for the current schema owner</Parameter>
            <Parameter Name="RECURSIVE_SQL">Filter that includes recursive SQL in the SQL tuning set (HAS_RECURSIVE_SQL) or excludes it (NO_RECURSIVE_SQL).</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SELECT_WORKLOAD_REPOSITORY" ElementId="#i1009198">
          <Description>SQL Tuning Set Subprograms</Description>
          <Parameters>
            <Parameter Name="BEGIN_SNAP">Begin snapshot (non-inclusive).</Parameter>
            <Parameter Name="END_SNAP">End snapshot (inclusive).</Parameter>
            <Parameter Name="BASELINE_NAME">The name of the baseline period.</Parameter>
            <Parameter Name="BASIC_FILTER">The SQL predicate to filter the SQL from the workload repository defined on attributes of the SQLSET_ROW. If basic_filter is not set by the caller, the subprogram captures only statements of the type CREATE TABLE, INSERT, SELECT, UPDATE, DELETE, and MERGE.</Parameter>
            <Parameter Name="OBJECT_FILTER">Currently not supported.</Parameter>
            <Parameter Name="RANKING_MEASURE(N)">An order-by clause on the selected SQL.</Parameter>
            <Parameter Name="RESULT_PERCENTAGE">A filter which picks the top N% according to the ranking measure given. Note that this applies only if one ranking measure is given.</Parameter>
            <Parameter Name="RESULT_LIMIT">The top L(imit) SQL from the (filtered) source ranked by the ranking measure.</Parameter>
            <Parameter Name="ATTRIBUTE_LIST">List of SQL statement attributes to return in the result. The possible values are:TYPICAL - BASIC + SQL plan (without row source statistics) and without object reference list (default)BASIC - all attributes (such as execution statistics and binds) are returned except the plans. The execution context is always part of the result.ALL - return all attributesComma-separated list of attribute names this allows to return only a subset of SQL attributes: EXECUTION_STATISTICS, SQL_BINDS, SQL_PLAN_STATISTICS (similar to SQL_PLAN + row source statistics).</Parameter>
            <Parameter Name="RECURSIVE_SQL">Filter that includes recursive SQL in the SQL tuning set (HAS_RECURSIVE_SQL) or excludes it (NO_RECURSIVE_SQL).</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_TUNING_TASK_PARAMETER" ElementId="#CHDGAJDB">
          <Description>SQL Tuning Advisor Subprograms</Description>
          <Parameters>
            <Parameter Name="TASK_NAME">Identifier of the task to execute</Parameter>
            <Parameter Name="PARAMETER">Name of the parameter to set. The possible tuning parameters that can be set by this procedure using the parameter in the form VARCHAR2:APPLY_CAPTURED_COMPILENV: indicates whether the advisor could use the compilation environment captured with the SQL statements. The default is 0 (that is, NO).BASIC_FILTER: basic filter for SQL tuning setDAYS_TO_EXPIRE: number of days until the task is deletedDEFAULT_EXECUTION_TYPE: the task defaults to this type of execution when none is specified by the EXECUTE_TUNING_TASK Function and ProcedureEXECUTION_DAYS_TO_EXPIRE: number of days until the tasks's executions is deleted (without deleting the task)LOCAL_TIME_LIMIT: per-statement time out (seconds)MODE: tuning scope (comprehensive, limited)OBJECT_FILTER: object filter for SQL tuning setPLAN_FILTER: plan filter for SQL tuning set (see SELECT_SQLSET for possible values)RANK_MEASURE1: first ranking measure for SQL tuning setRANK_MEASURE2: second possible ranking measure for SQL tuning setRANK_MEASURE3: third possible ranking measure for SQL tuning setRESUME_FILTER: a extra filter for SQL tuning sets besides BASIC_FILTERSQL_LIMIT: maximum number of SQL statements to tuneSQL_PERCENTAGE: percentage filter of SQL tuning set statementsTEST_EXECUTE: FULL/AUTO/OFF.* FULL - test-execute for as much time as necessary, up to the local time limit for the SQL (or the global task time limit if no SQL time limit is set)* AUTO - test-execute for an automatically-chosen time proportional to the tuning time* OFF - do not test-executeTIME_LIMIT: global time out (seconds)USERNAME: username under which the statement is parsed</Parameter>
            <Parameter Name="VALUE">New value of the specified parameter</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SQLTEXT_TO_SIGNATURE" ElementId="#CACHJDEG">
          <Description>SQL Profile Subprograms</Description>
          <Parameters>
            <Parameter Name="SQL_TEXT">SQL text whose signature is required. Required.</Parameter>
            <Parameter Name="FORCE_MATCH">If TRUE, this returns a signature that supports SQL matching with literal values transformed into bind variables. If FALSE, returns the signature based on the text with literals not transformed</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UNPACK_STGTAB_SQLPROF" ElementId="#CACDIJJE">
          <Description>SQL Profile Subprograms</Description>
          <Parameters>
            <Parameter Name="PROFILE_NAME">The name of the profile to unpack (% wildcards acceptable, case-sensitive)</Parameter>
            <Parameter Name="PROFILE_CATEGORY">The category from which to unpack profiles (% wildcards acceptable, case-sensitive)</Parameter>
            <Parameter Name="REPLACE">The option to replace profiles if they already exist. Note that profiles cannot be replaced if one in the staging table has the same name as an active profile in a different SQL statement.If FALSE, this function raises errors if you try to create a profile that already exists</Parameter>
            <Parameter Name="STAGING_TABLE_NAME">The name of the table on which to perform the remap operation (case-insensitive unless double quoted). Required.</Parameter>
            <Parameter Name="STAGING_SCHEMA_OWNER">The schema where the table resides, or NULL for current schema (case-insensitive unless double quoted)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UNPACK_STGTAB_SQLSET" ElementId="#CACJDGFI">
          <Description>SQL Tuning Set Subprograms</Description>
          <Parameters>
            <Parameter Name="SQLSET_NAME">The name of the tuning set to unpack (not NULL). Wildcard characters ('%') are supported to unpack multiple tuning sets in a single call. For example, just specify '%' to unpack all tuning sets from the staging table.</Parameter>
            <Parameter Name="SQLSET_OWNER">The name of tuning set owner, or NULL for current schema owner. Wildcards supported.</Parameter>
            <Parameter Name="REPLACE">Replaces tuning set if they already exist.If FALSE, raises errors if you try to create a tuning set that already exists</Parameter>
            <Parameter Name="STAGING_TABLE_NAME">The name of the staging table, moved after a call to the PACK_STGTAB_SQLSET Procedure (case-sensitive)</Parameter>
            <Parameter Name="STAGING_SCHEMA_OWNER">The name of staging table owner, or NULL for current schema owner (case-sensitive)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UPDATE_SQLSET" ElementId="#i1007011">
          <Description>SQL Tuning Set Subprograms</Description>
          <Parameters>
            <Parameter Name="SQLSET_NAME">The SQL tuning set name</Parameter>
            <Parameter Name="SQL_ID">The identifier of the statement to update</Parameter>
            <Parameter Name="ATTRIBUTE_NAME">The name of the attribute to modify</Parameter>
            <Parameter Name="ATTRIBUTE_VALUE">The new value of the attribute</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_STAT_FUNCS" Url="http://docs.oracle.com/database/121/ARPLS/d_stat_f.htm">
      <Description>The DBMS_STAT_FUNCS package provides statistical functions.</Description>
      <SubPrograms>
        <SubProgram Name="EXPONENTIAL_DIST_FIT" ElementId="#CJHBJIAA">
          <Description>Tests how well a sample of values fits an exponential distribution</Description>
          <Parameters>
            <Parameter Name="OWNERNAME">The schema where the table resides.</Parameter>
            <Parameter Name="TABLENAME">The table where the column resides.</Parameter>
            <Parameter Name="COLUMNNAME">The column of the table against which to run the test.</Parameter>
            <Parameter Name="TEST_TYPE">The type of test to use: 'CHI_SQUARED', 'KOLMOGOROV_SMIRNOV' or 'ANDERSON_DARLING'.</Parameter>
            <Parameter Name="LAMBDA">The scale parameter.</Parameter>
            <Parameter Name="MU">The location parameter.</Parameter>
            <Parameter Name="SIG">The goodness of fit value, based on test type. A small value indicates a significant difference between the sample and the exponential distribution. A number close to 1 indicates a close match.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="NORMAL_DIST_FIT" ElementId="#i999113">
          <Description>Tests how well a sample of values fits a normal distribution</Description>
          <Parameters>
            <Parameter Name="OWNERNAME">The schema where the table resides.</Parameter>
            <Parameter Name="TABLENAME">The table where the column resides.</Parameter>
            <Parameter Name="COLUMNNAME">The column of the table against which to run the test.</Parameter>
            <Parameter Name="TEST_TYPE">The type of test to use: 'CHI_SQUARED', 'KOLMOGOROV_SMIRNOV', 'ANDERSON_DARLING' or 'SHAPIRO_WILKS'.</Parameter>
            <Parameter Name="MEAN">The mean of the distribution against which to compare.</Parameter>
            <Parameter Name="STDEV">The standard deviation of the distribution against which to compare.</Parameter>
            <Parameter Name="SIG">The goodness of fit value, based on test type. A small value indicates a significant difference between the sample and the normal distribution. A number close to 1 indicates a close match.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="POISSON_DIST_FIT" ElementId="#i1000328">
          <Description>Tests how well a sample of values fits a Poisson distribution</Description>
          <Parameters>
            <Parameter Name="OWNERNAME">The schema where the table resides.</Parameter>
            <Parameter Name="TABLENAME">The table where the column resides.</Parameter>
            <Parameter Name="COLUMNNAME">The column of the table against which to run the test.</Parameter>
            <Parameter Name="TEST_TYPE">The type of test to use: 'KOLMOGOROV_SMIRNOV' or 'ANDERSON_DARLING'.</Parameter>
            <Parameter Name="LAMBDA">The lambda parameter is the shape parameter.</Parameter>
            <Parameter Name="SIG">The goodness of fit value, based on test type. A small value indicates a significant difference between the sample and the Poisson distribution. A number close to 1 indicates a close match.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SUMMARY" ElementId="#i999450">
          <Description>Summarizes a numerical column of a table</Description>
          <Parameters>
            <Parameter Name="OWNERNAME">The schema where the table resides.</Parameter>
            <Parameter Name="TABLENAME">The table where the column resides.</Parameter>
            <Parameter Name="COLUMNNAME">The column of the table to be summarized.</Parameter>
            <Parameter Name="SIGMA_VALUE">The number of sigmas for the set of extreme values, defaults to 3.</Parameter>
            <Parameter Name="S">The Record containing summary information about given column.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UNIFORM_DIST_FIT" ElementId="#i996941">
          <Description>Tests how well a sample of values fits a uniform distribution</Description>
          <Parameters>
            <Parameter Name="OWNERNAME">The schema where the table resides.</Parameter>
            <Parameter Name="TABLENAME">The table where the column resides.</Parameter>
            <Parameter Name="COLUMNNAME">The column of the table against which to run the test.</Parameter>
            <Parameter Name="VAR_TYPE">The type of distribution: 'CONTINUOUS' (the default) or 'DISCRETE'</Parameter>
            <Parameter Name="TEST_TYPE">The type of test to use: 'CHI_SQUARED', 'KOLMOGOROV_SMIRNOV' or 'ANDERSON_DARLING'.</Parameter>
            <Parameter Name="PARAMA">Parameter A estimated from the sample (the location parameter).</Parameter>
            <Parameter Name="PARAMB">Parameter B estimated from the sample (the scale parameter).</Parameter>
            <Parameter Name="SIG">The goodness of fit value, based on test type. A small value indicates a significant difference between the sample and the uniform distribution. A number close to 1 indicates a close match.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="WEIBULL_DIST_FIT" ElementId="#i999931">
          <Description>Tests how well a sample of values fits a Weibull distribution</Description>
          <Parameters>
            <Parameter Name="OWNERNAME">The schema where the table resides.</Parameter>
            <Parameter Name="TABLENAME">The table where the column resides.</Parameter>
            <Parameter Name="COLUMNNAME">The column of the table against which to run the test.</Parameter>
            <Parameter Name="TEST_TYPE">The type of test to use: 'CHI_SQUARED', 'KOLMOGOROV_SMIRNOV' or 'ANDERSON_DARLING'.</Parameter>
            <Parameter Name="ALPHA">The scale parameter.</Parameter>
            <Parameter Name="MU">The location parameter.</Parameter>
            <Parameter Name="BETA">The slope/shape parameter.</Parameter>
            <Parameter Name="SIG">The goodness of fit value, based on test type. A small value indicates a significant difference between the sample and the Weibull distribution. A number close to 1 indicates a close match.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_STATS" Url="http://docs.oracle.com/database/121/ARPLS/d_stats.htm">
      <Description>With the DBMS_STATS package you can view and modify optimizer statistics gathered for database objects.</Description>
      <SubPrograms>
        <SubProgram Name="ALTER_STATS_HISTORY_RETENTION" ElementId="#i1048060">
          <Description>Changes the statistics history retention value</Description>
          <Parameters>
            <Parameter Name="RETENTION">The retention time in days. The statistics history will be retained for at least these many number of days.The valid range is [1,365000]. Also you can use the following values for special purposes:-1: Statistics history is never purged by automatic purge0: Old statistics are never saved. The automatic purge will delete all statistics historyNULL: Change statistics history retention to default value</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CONVERT_RAW_VALUE" ElementId="#i1035014">
          <Description>Converts the internal representation of a minimum value, maximum value, or histogram endpoint actual value into a datatype-specific value</Description>
          <Parameters>
            <Parameter Name="RAWVAL">Raw representation of a column minimum, maximum, histogram end point actual value</Parameter>
            <Parameter Name="RESVAL">Converted, type-specific value</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CONVERT_RAW_VALUE_NVARCHAR" ElementId="#i1038351">
          <Description>Converts the internal representation of a minimum value, maximum value, or histogram endpoint actual value into a datatype-specific value</Description>
          <Parameters>
            <Parameter Name="RAWVAL">The raw representation of a column minimum or maximum datatype-specific output parameters</Parameter>
            <Parameter Name="RESVAL">The converted, type-specific value</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CONVERT_RAW_VALUE_ROWID" ElementId="#i1038352">
          <Description>Converts the internal representation of a minimum value, maximum value, or histogram endpoint actual value into a datatype-specific value</Description>
          <Parameters>
            <Parameter Name="RAWVAL">The raw representation of a column minimum or maximum datatype-specific output parameters</Parameter>
            <Parameter Name="RESVAL">The converted, type-specific value</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="COPY_TABLE_STATS" ElementId="#BABDDBGH">
          <Description>Copies the statistics of the source [sub] partition to the destination [sub] partition after scaling</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Schema of the table of source and destination [sub] partitions</Parameter>
            <Parameter Name="TABNAME">Table name of source and destination [sub] partitions</Parameter>
            <Parameter Name="SRCPARTNAME">Source [sub] partition</Parameter>
            <Parameter Name="DTSPARTNAME">Destination [sub] partition</Parameter>
            <Parameter Name="SCALE_FACTOR">Scale factor to scale nblks, nrows etc. in dstpartname</Parameter>
            <Parameter Name="FLAGS">For internal Oracle use (should be left as NULL)</Parameter>
            <Parameter Name="FORCE">When value of this argument is TRUE copy statistics even if the destination [sub]partition is locked</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_EXTENDED_STATS" ElementId="#BABHFIBI">
          <Description>Creates a virtual column for a user specified column group or an expression in a table</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Owner name of a table</Parameter>
            <Parameter Name="TABNAME">Name of the table</Parameter>
            <Parameter Name="EXTENSION">Can be either a column group or an expression. Suppose the specified table has two column c1, c2. An example column group can be "(c1, c2)" and an example expression can be "(c1 + c2)".</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_STAT_TABLE" ElementId="#i1035018">
          <Description>Creates a table with name stattab in ownname's schema which is capable of holding statistics</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Name of the schema</Parameter>
            <Parameter Name="STATTAB">Name of the table to create. This value should be passed as the stattab parameter to other procedures when the user does not want to modify the dictionary statistics directly.</Parameter>
            <Parameter Name="TBLSPACE">Tablespace in which to create the statistics tables. If none is specified, then they are created in the user's default tablespace.</Parameter>
            <Parameter Name="GLOBAL_TEMPORARY">Whether or not the table should be created as a global temporary table</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_COLUMN_STATS" ElementId="#i1035206">
          <Description>Deletes column-related statistics</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Name of the schema</Parameter>
            <Parameter Name="TABNAME">Name of the table to which this column belongs</Parameter>
            <Parameter Name="COLNAME">Name of the column or extension</Parameter>
            <Parameter Name="PARTNAME">Name of the table partition for which to delete the statistics. If the table is partitioned and if partname is NULL, then global column statistics are deleted.</Parameter>
            <Parameter Name="STATTAB">User statistics table identifier describing from where to delete the statistics. If stattab is NULL, then the statistics are deleted directly from the dictionary.</Parameter>
            <Parameter Name="STATID">Identifier (optional) to associate with these statistics within stattab (Only pertinent if stattab is not NULL).</Parameter>
            <Parameter Name="CASCADE_PARTS">If the table is partitioned and if partname is NULL, then setting this to true causes the deletion of statistics for this column for all underlying partitions as well.</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different than ownname)</Parameter>
            <Parameter Name="NO_INVALIDATE">Does not invalidate the dependent cursors if set to TRUE. The procedure invalidates the dependent cursors immediately if set to FALSE. Use DBMS_STATS.AUTO_INVALIDATE. to have Oracle decide when to invalidate dependent cursors. This is the default. The default can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="FORCE">When value of this argument is TRUE, deletes column statistics even if locked</Parameter>
            <Parameter Name="COL_STAT_TYPE">Type of column statistics to be deleted.This argument takes the following values:HISTOGRAM - delete column histogram onlyALL - delete base column statistics and histogram</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_DATABASE_PREFS" ElementId="#BEIHGEBD">
          <Description>Deletes the statistics preferences of all the tables</Description>
          <Parameters>
            <Parameter Name="PNAME">Preference name. The existing value for following preferences can be deleted and default preference values will be used:CASCADEDEGREEESTIMATE_PERCENTMETHOD_OPTNO_INVALIDATEGRANULARITYPUBLISHINCREMENTALINCREMENTAL_STALENESSINCREMENTAL_LEVELSTALE_PERCENTGLOBAL_TEMP_TABLE_STATSTABLE_CACHED_BLOCKSOPTIONS</Parameter>
            <Parameter Name="ADD_SYS">Determines whether SYS tables will be included.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_DATABASE_STATS" ElementId="#i1035352">
          <Description>Deletes statistics for the entire database</Description>
          <Parameters>
            <Parameter Name="STATTAB">User statistics table identifier describing from where to delete the statistics. If stattab is NULL, then the statistics are deleted directly in the dictionary.</Parameter>
            <Parameter Name="STATID">Identifier (optional) to associate with these statistics within stattab (Only pertinent if stattab is not NULL)</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different from current schema)</Parameter>
            <Parameter Name="NO_INVALIDATE">Does not invalidate the dependent cursors if set to TRUE. The procedure invalidates the dependent cursors immediately if set to FALSE. Use DBMS_STATS.AUTO_INVALIDATE. to have Oracle decide when to invalidate dependent cursors. This is the default. The default can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="FORCE">When the value of this argument is TRUE, deletes statistics of tables in a database even if they are locked</Parameter>
            <Parameter Name="STAT_CATEGORY">Statistics to delete. It accepts multiple values separated by comma:OBJECT_STATS - table statistics, column statistics and index statisticsSYNOPSES - information to support incremental statisticsThe default is 'OBJECT_STATS, SYNOPSES'</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_DICTIONARY_STATS" ElementId="#i1042571">
          <Description>Deletes statistics for all dictionary schemas ('SYS', 'SYSTEM' and RDBMS component schemas)</Description>
          <Parameters>
            <Parameter Name="STATTAB">User statistics table identifier describing from where to delete the statistics. If stattab is NULL, then the statistics are deleted directly in the dictionary.</Parameter>
            <Parameter Name="STATID">Identifier (optional) to associate with these statistics within stattab (Only pertinent if stattab is not NULL)</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different from current schema)</Parameter>
            <Parameter Name="NO_INVALIDATE">Does not invalidate the dependent cursors if set to TRUE. The procedure invalidates the dependent cursors immediately if set to FALSE. Use DBMS_STATS.AUTO_INVALIDATE. to have Oracle decide when to invalidate dependent cursors. This is the default. The default can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure</Parameter>
            <Parameter Name="STATTYPE">Statistics type</Parameter>
            <Parameter Name="FORCE">When the value of this argument is TRUE, deletes statistics of tables in a database even if they are locked</Parameter>
            <Parameter Name="STAT_CATEGORY">Statistics to delete. It accepts multiple values separated by comma:OBJECT_STATS - table statistics, column statistics and index statisticsSYNOPSES - information to support incremental statisticsThe default is 'OBJECT_STATS, SYNOPSES'</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_FIXED_OBJECTS_STATS" ElementId="#i1039357">
          <Description>Deletes statistics of all fixed tables</Description>
          <Parameters>
            <Parameter Name="STATTAB">The user statistics table identifier describing from where to delete the current statistics. If stattab is NULL, the statistics will be deleted directly in the dictionary.</Parameter>
            <Parameter Name="STATID">The (optional) identifier to associate with these statistics within stattab. This only applies if stattab is not NULL.</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different from current schema)</Parameter>
            <Parameter Name="NO_INVALIDATE">Does not invalidate the dependent cursors if set to TRUE. The procedure invalidates the dependent cursors immediately if set to FALSE. Use DBMS_STATS.AUTO_INVALIDATE. to have Oracle decide when to invalidate dependent cursors. This is the default. The default can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure</Parameter>
            <Parameter Name="FORCE">Ignores the statistics lock on objects and deletes the statistics if set to TRUE</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_INDEX_STATS" ElementId="#i1035428">
          <Description>Deletes index-related statistics</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Name of the schema</Parameter>
            <Parameter Name="INDNAME">Name of the index</Parameter>
            <Parameter Name="PARTNAME">Name of the index partition for which to delete the statistics. If the index is partitioned and if partname is NULL, then index statistics are deleted at the global level.</Parameter>
            <Parameter Name="STATTAB">User statistics table identifier describing from where to delete the statistics. If stattab is NULL, then the statistics are deleted directly from the dictionary.</Parameter>
            <Parameter Name="STATID">Identifier (optional) to associate with these statistics within stattab (Only pertinent if stattab is not NULL)</Parameter>
            <Parameter Name="CASCADE_PARTS">If the index is partitioned and if partname is NULL, then setting this to TRUE causes the deletion of statistics for this index for all underlying partitions as well</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different than ownname)</Parameter>
            <Parameter Name="NO_INVALIDATE">Does not invalidate the dependent cursors if set to TRUE. The procedure invalidates the dependent cursors immediately if set to FALSE. Use DBMS_STATS.AUTO_INVALIDATE. to have Oracle decide when to invalidate dependent cursors. This is the default. The default can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="STATTYPE">Statistics type</Parameter>
            <Parameter Name="FORCE">When value of this argument is TRUE, deletes index statistics even if locked</Parameter>
            <Parameter Name="STAT_CATEGORY">Statistics to delete. It accepts multiple values separated by comma:OBJECT_STATS - table statistics, column statistics and index statisticsSYNOPSES - information to support incremental statisticsThe default is 'OBJECT_STATS, SYNOPSES'</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_PENDING_STATS" ElementId="#BEIJGHFD">
          <Description>Deletes the private statistics that have been collected but have not been published</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Owner name</Parameter>
            <Parameter Name="TABNAME">Table name</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_PROCESSING_RATE" ElementId="#BABDCJDJ">
          <Description>Deletes the processing rate of a given statistics source. If the source is not specified, it deletes the statistics of all the sources</Description>
          <Parameters>
            <Parameter Name="STAT_SOURCE">Source of processing rates:'MANUAL': values set by the user manually using the SET_PROCESSING_RATE Procedure'CALIBRATION' : values collected by the calibration GATHER_PROCESSING_RATE Procedure run explicitly by the user'FEEDBACK': values obtained by time feedback</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_SCHEMA_PREFS" ElementId="#BEIFAGDH">
          <Description>Deletes the statistics preferences of all the tables owned by the specified owner name</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Owner name</Parameter>
            <Parameter Name="PNAME">Preference name. The existing value for following preferences can be deleted and default preference values will be used:CASCADEDEGREEESTIMATE_PERCENTMETHOD_OPTNO_INVALIDATEGRANULARITYPUBLISHINCREMENTALINCREMENTAL_STALENESSINCREMENTAL_LEVELSTALE_PERCENTGLOBAL_TEMP_TABLE_STATSTABLE_CACHED_BLOCKSOPTIONS</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_SCHEMA_STATS" ElementId="#i1035494">
          <Description>Deletes schema-related statistics</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Name of the schema</Parameter>
            <Parameter Name="STATTAB">User statistics table identifier describing from where to delete the statistics. If stattab is NULL, then the statistics are deleted directly in the dictionary.</Parameter>
            <Parameter Name="STATID">Identifier (optional) to associate with these statistics within stattab (Only pertinent if stattab is not NULL)</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different than ownname)</Parameter>
            <Parameter Name="NO_INVALIDATE">Does not invalidate the dependent cursors if set to TRUE. The procedure invalidates the dependent cursors immediately if set to FALSE. Use DBMS_STATS.AUTO_INVALIDATE. to have Oracle decide when to invalidate dependent cursors. This is the default. The default can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="FORCE">When value of this argument is TRUE, deletes statistics of tables in a schema even if locked</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_SYSTEM_STATS" ElementId="#i1035583">
          <Description>Deletes system statistics</Description>
          <Parameters>
            <Parameter Name="STATTAB">Identifier of the user statistics table where the statistics will be saved</Parameter>
            <Parameter Name="STATID">Optional identifier associated with the statistics saved in the stattab</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different from current schema)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_TABLE_PREFS" ElementId="#BEIEGCHI">
          <Description>Deletes statistics preferences of the specified table in the specified schema</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Owner name</Parameter>
            <Parameter Name="TABNAME">Table name</Parameter>
            <Parameter Name="PNAME">Preference name. The existing value for following preferences can be deleted and default preference values will be used:AUTOSTATS_TARGETCASCADECONCURRENTDEGREEESTIMATE_PERCENTMETHOD_OPTNO_INVALIDATEGRANULARITYPUBLISHINCREMENTALINCREMENTAL_STALENESSINCREMENTAL_LEVELSTALE_PERCENTGLOBAL_TEMP_TABLE_STATSTABLE_CACHED_BLOCKSOPTIONS</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_TABLE_STATS" ElementId="#i1035962">
          <Description>Deletes table-related statistics</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Name of the schema</Parameter>
            <Parameter Name="TABNAME">Name of the table to which this column belongs</Parameter>
            <Parameter Name="PARTNAME">Name of the table [sub]partition from which to get the statistics. If the table is partitioned and if partname is NULL, then the statistics are retrieved from the global table level.</Parameter>
            <Parameter Name="STATTAB">User statistics table identifier describing from where to retrieve the statistics. If stattab is NULL, then the statistics are retrieved directly from the dictionary.</Parameter>
            <Parameter Name="STATID">Identifier (optional) to associate with these statistics within stattab (Only pertinent if stattab is not NULL)</Parameter>
            <Parameter Name="CASCADE_PARTS">If the table is partitioned and if partname is NULL, then setting this to TRUE causes the deletion of statistics for this table for all underlying partitions as well</Parameter>
            <Parameter Name="CASCADE_COLUMNS">Indicates that DELETE_COLUMN_STATS should be called for all underlying columns (passing the cascade_parts parameter)</Parameter>
            <Parameter Name="CASCADE_INDEXES">Indicates that DELETE_INDEX_STATS should be called for all underlying indexes (passing the cascade_parts parameter)</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different than ownname)</Parameter>
            <Parameter Name="NO_INVALIDATE">Does not invalidate the dependent cursors if set to TRUE. The procedure invalidates the dependent cursors immediately if set to FALSE. Use DBMS_STATS.AUTO_INVALIDATE. to have Oracle decide when to invalidate dependent cursors. This is the default. The default can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="FORCE">When value of this argument is TRUE, deletes table statistics even if locked</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DIFF_TABLE_STATS_IN_HISTORY" ElementId="#BEIDHICC">
          <Description>Compares statistics for a table from two timestamps in past and compare the statistics as of that timestamps</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Owner of the table. Specify NULL for current schema.</Parameter>
            <Parameter Name="TABNAME">Table for which statistics are to be compared</Parameter>
            <Parameter Name="TIME1">First timestamp 1</Parameter>
            <Parameter Name="TIME2">Second timestamp 2</Parameter>
            <Parameter Name="PCTTHRESHOLD">The function reports difference in statistics only if it exceeds this limit. The default value is 10.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DIFF_TABLE_STATS_IN_PENDING" ElementId="#BABCBGHG">
          <Description>Compares pending statistics and statistics as of a timestamp or statistics from dictionary</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Owner of the table. Specify NULL for current schema.</Parameter>
            <Parameter Name="TABNAME">Table for which statistics are to be compared</Parameter>
            <Parameter Name="TIMESTAMP">Time stamp to get statistics from the history</Parameter>
            <Parameter Name="PCTTHRESHOLD">The function reports difference in statistics only if it exceeds this limit. The default value is 10.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DIFF_TABLE_STATS_IN_STATTAB" ElementId="#BEICGJDD">
          <Description>Compares statistics for a table from two different sources</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Owner of the table. Specify NULL for current schema.</Parameter>
            <Parameter Name="TABNAME">Table for which statistics are to be compared</Parameter>
            <Parameter Name="STATTAB1">User statistics table 1</Parameter>
            <Parameter Name="STATTAB2">User statistics table 2. If NULL, statistics in stattab1 is compared with current statistics in dictionary. This is the default. Specify same table as stattab1 to compare two sets within the statistics table (see statid below).</Parameter>
            <Parameter Name="PCTTHRESHOLD">The function reports difference in statistics only if it exceeds this limit. The default value is 10.</Parameter>
            <Parameter Name="STADID1">(optional) Identifies statistics set within stattab1.</Parameter>
            <Parameter Name="STADID2">(optional) Identifies statistics set within stattab2</Parameter>
            <Parameter Name="STATTAB1OWN">Schema containing stattab1 (if other than ownname)</Parameter>
            <Parameter Name="STATTAB2OWN">Schema containing stattab2 (if other than ownname)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_EXTENDED_STATS" ElementId="#BABEAECF">
          <Description>Drops the statistics entry that is created for the user specified extension</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Owner name of a table</Parameter>
            <Parameter Name="TABNAME">Name of the table</Parameter>
            <Parameter Name="EXTENSION">Can be either a column group or an expression. Suppose the specified table has two column c1, c2. An example column group can be "(c1, c2)" and an example expression can be "(c1 + c2)".</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_STAT_TABLE" ElementId="#i1035659">
          <Description>Drops a user statistics table created by CREATE_STAT_TABLE</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Name of the schema</Parameter>
            <Parameter Name="STATTAB">User statistics table identifier</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXPORT_COLUMN_STATS" ElementId="#i1035669">
          <Description>Retrieves statistics for a particular column and stores them in the user statistics table identified by stattab</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Name of the schema</Parameter>
            <Parameter Name="TABNAME">Name of the table to which this column belongs</Parameter>
            <Parameter Name="COLNAME">Name of the column or extension</Parameter>
            <Parameter Name="PARTNAME">Name of the table partition. If the table is partitioned and if partname is NULL, then global and partition column statistics are exported.</Parameter>
            <Parameter Name="STATTAB">User statistics table identifier describing where to store the statistics</Parameter>
            <Parameter Name="STATID">Identifier (optional) to associate with these statistics within stattab</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different than ownname)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXPORT_DATABASE_PREFS" ElementId="#BEIDACAE">
          <Description>Exports the statistics preferences of all the tables</Description>
          <Parameters>
            <Parameter Name="STATTAB">Statistics table name to where statistics should be exported</Parameter>
            <Parameter Name="STATID">(Optional) Identifier to associate with these statistics within stattab</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if other than ownname)</Parameter>
            <Parameter Name="ADD_SYS">Value TRUE will include the Oracle-owned tables</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXPORT_DATABASE_STATS" ElementId="#i1041371">
          <Description>Retrieves statistics for all objects in the database and stores them in the user statistics table identified by statown.stattab</Description>
          <Parameters>
            <Parameter Name="STATTAB">User statistics table identifier describing where to store the statistics</Parameter>
            <Parameter Name="STATID">Identifier (optional) to associate with these statistics within stattab</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different from current schema)</Parameter>
            <Parameter Name="STAT_CATEGORY">Specifies what statistics to import, accepting multiple values separated by a comma. Values supported:OBJECT_STATS - table statistics, column statistics and index statistics (Default)SYNOPSES - information to support incremental statisticsIf 'OBJECT_STATS, SYNOPSES' is specified, table statistics, column statistics, index statistics and synopses are deleted.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXPORT_DICTIONARY_STATS" ElementId="#i1042811">
          <Description>Retrieves statistics for all dictionary schemas ('SYS', 'SYSTEM' and RDBMS component schemas) and stores them in the user statistics table identified by stattab</Description>
          <Parameters>
            <Parameter Name="STATTAB">User statistics table identifier describing where to store the statistics</Parameter>
            <Parameter Name="STATID">Identifier (optional) to associate with these statistics within stattab</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different from current schema)</Parameter>
            <Parameter Name="STAT_CATEGORY">Specifies what statistics to import, accepting multiple values separated by a comma. Values supported:OBJECT_STATS - table statistics, column statistics and index statistics (Default)SYNOPSES - information to support incremental statisticsIf 'OBJECT_STATS, SYNOPSES' is specified, table statistics, column statistics, index statistics and synopses are deleted.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXPORT_FIXED_OBJECTS_STATS" ElementId="#i1041507">
          <Description>Retrieves statistics for fixed tables and stores them in the user statistics table identified by stattab</Description>
          <Parameters>
            <Parameter Name="STATTAB">User statistics table identifier describing where to store the statistics</Parameter>
            <Parameter Name="STATID">Identifier (optional) to associate with these statistics within stattab</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different from current schema)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXPORT_INDEX_STATS" ElementId="#i1041496">
          <Description>Retrieves statistics for a particular index and stores them in the user statistics table identified by stattab</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Name of the schema</Parameter>
            <Parameter Name="INDNAME">Name of the index</Parameter>
            <Parameter Name="PARTNAME">Name of the index partition. If the index is partitioned and if partname is NULL, then global and partition index statistics are exported.</Parameter>
            <Parameter Name="STATTAB">User statistics table identifier describing where to store the statistics</Parameter>
            <Parameter Name="STATID">Identifier (optional) to associate with these statistics within stattab</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different than ownname)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXPORT_PENDING_STATS" ElementId="#BEIEBEAE">
          <Description>Exports the statistics gathered and stored as pending</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Owner name</Parameter>
            <Parameter Name="TABNAME">Table name</Parameter>
            <Parameter Name="STATTAB">Statistics table name to where to export the statistics</Parameter>
            <Parameter Name="STATID">(Optional) Identifier to associate with these statistics within stattab</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if other than ownname)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXPORT_SCHEMA_PREFS" ElementId="#BEIFJJDF">
          <Description>Exports the statistics preferences of all the tables owned by the specified owner name</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Owner name</Parameter>
            <Parameter Name="STATTAB">Statistics table name to where to export the statistics</Parameter>
            <Parameter Name="STATID">(Optional) Identifier to associate with these statistics within stattab</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different than ownname)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXPORT_SCHEMA_STATS" ElementId="#i1036059">
          <Description>Retrieves statistics for all objects in the schema identified by ownname and stores them in the user statistics table identified by stattab</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Name of the schema</Parameter>
            <Parameter Name="STATTAB">User statistics table identifier describing where to store the statistics</Parameter>
            <Parameter Name="STATID">Identifier (optional) to associate with these statistics within stattab</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different than ownname)</Parameter>
            <Parameter Name="STAT_CATEGORY">Specifies what statistics to import, accepting multiple values separated by a comma. Values supported:OBJECT_STATS - table statistics, column statistics and index statistics (Default)SYNOPSES - information to support incremental statisticsIf 'OBJECT_STATS, SYNOPSES' is specified, table statistics, column statistics, index statistics and synopses are deleted.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXPORT_SYSTEM_STATS" ElementId="#i1035776">
          <Description>Retrieves system statistics and stores them in the user statistics table</Description>
          <Parameters>
            <Parameter Name="STATTAB">Identifier of the user statistics table that describes where the statistics will be stored</Parameter>
            <Parameter Name="STATID">Optional identifier associated with the statistics stored from the stattab</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different from current schema)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXPORT_TABLE_PREFS" ElementId="#BEIBGBHF">
          <Description>Exports statistics preferences of the specified table in the specified schema into the specified statistics table</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Owner name</Parameter>
            <Parameter Name="TABNAME">Table name</Parameter>
            <Parameter Name="STATTAB">Statistics table name where to export the statistics</Parameter>
            <Parameter Name="STATID">Optional identifier to associate with these statistics within stattab</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if other than ownname)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXPORT_TABLE_STATS" ElementId="#i1035814">
          <Description>Retrieves statistics for a particular table and stores them in the user statistics table</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Name of the schema</Parameter>
            <Parameter Name="TABNAME">Name of the table</Parameter>
            <Parameter Name="PARTNAME">Name of the table partition. If the table is partitioned and if partname is NULL, then global and partition table statistics are exported.</Parameter>
            <Parameter Name="STATTAB">User statistics table identifier describing where to store the statistics</Parameter>
            <Parameter Name="STATID">Identifier (optional) to associate with these statistics within stattab</Parameter>
            <Parameter Name="CASCADE">If true, then column and index statistics for this table are also exported</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different than ownname)</Parameter>
            <Parameter Name="STAT_CATEGORY">Specifies what statistics to import, accepting multiple values separated by a comma. Values supported:OBJECT_STATS - table statistics, column statistics and index statistics (Default)SYNOPSES - information to support incremental statisticsIf 'OBJECT_STATS, SYNOPSES' is specified, table statistics, column statistics, index statistics and synopses are deleted.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="FLUSH_DATABASE_MONITORING_INFO" ElementId="#i1036624">
          <Description>Flushes in-memory monitoring information for all the tables to the dictionary</Description>
        </SubProgram>
        <SubProgram Name="GATHER_DATABASE_STATS" ElementId="#i1036194">
          <Description>Gathers statistics for all objects in the database</Description>
          <Parameters>
            <Parameter Name="ESTIMATE_PERCENT">Percentage of rows to estimate (NULL means compute): The valid range is [0.000001,100]. Use the constant DBMS_STATS.AUTO_SAMPLE_SIZE to have Oracle determine the appropriate sample size for good statistics. This is the default.The default value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="BLOCK_SAMPLE">Whether or not to use random block sampling instead of random row sampling. Random block sampling is more efficient, but if the data is not randomly distributed on disk, then the sample values may be somewhat correlated. Only pertinent when doing an estimate statistics.</Parameter>
            <Parameter Name="METHOD_OPT">When setting preference on global, schema, database or dictionary level, only'FOR ALL' syntax is allowed.:FOR ALL [INDEXED | HIDDEN] COLUMNS [size_clause]size_clause is defined as size_clause := SIZE {integer | REPEAT | AUTO | SKEWONLY}The default is FOR ALL COLUMNS SIZE AUTO.The value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="DEGREE">Degree of parallelism. The default for degree is NULL. The default value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure. NULL means use the table default value specified by the DEGREE clause in the CREATE TABLE or ALTER TABLE statement. Use the constant DBMS_STATS.DEFAULT_DEGREE to specify the default value based on the initialization parameters. The AUTO_DEGREE value determines the degree of parallelism automatically. This is between 1 (serial execution) and DEFAULT_DEGREE (the system default value based on number of CPUs and initialization parameters) according to the size of the object. When using DEGREE=&gt;NULL, DEGREE=&gt;n, or DEGREE=&gt;DBMS_STATS.DEFAULT_DEGREE, the current implementation of DBMS_STATS may use serial execution if the size of the object does not warrant parallel execution.</Parameter>
            <Parameter Name="GRANULARITY">Granularity of statistics to collect (only pertinent if the table is partitioned).'ALL' - Gathers all (subpartition, partition, and global) statistics'AUTO'- Determines the granularity based on the partitioning type. This is the default value.'DEFAULT' - Gathers global and partition-level statistics. This option is obsolete, and while currently supported, it is included in the documentation for legacy reasons only. You should use the 'GLOBAL AND PARTITION' for this functionality. Note that the default value is now 'AUTO'.'GLOBAL' - Gathers global statistics'GLOBAL AND PARTITION' - Gathers the global and partition level statistics. No subpartition level statistics are gathered even if it is a composite partitioned object.'PARTITION '- Gathers partition-level statistics'SUBPARTITION' - Gathers subpartition-level statistics</Parameter>
            <Parameter Name="CASCADE">Gather statistics on the indexes as well. Using this option is equivalent to running the GATHER_INDEX_STATS Procedure on each of the indexes in the database in addition to gathering table and column statistics. Use the constant DBMS_STATS.AUTO_CASCADE to have Oracle determine whether index statistics to be collected or not. This is the default. The default value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="STATTAB">User statistics table identifier describing where to save the current statistics.The statistics table is assumed to reside in the same schema as the object being analyzed, so there must be one such table in each schema to use this option.</Parameter>
            <Parameter Name="STATID">Identifier (optional) to associate with these statistics within stattab.</Parameter>
            <Parameter Name="OPTIONS">Further specification of which objects to gather statistics for:GATHER: (Default) Gathers statistics on all objects in the schema.GATHER AUTO: Gathers all necessary statistics automatically. Oracle implicitly determines which objects need new statistics, and determines how to gather those statistics. When GATHER AUTO is specified, the only additional valid parameters are stattab, statid, objlist and statown; all other parameter settings are ignored. Returns a list of processed objects.GATHER STALE: Gathers statistics on stale objects as determined by looking at the *_tab_modifications views. Also, return a list of objects found to be stale.GATHER EMPTY: Gathers statistics on objects which currently have no statistics. Return a list of objects found to have no statistics.LIST AUTO: Returns a list of objects to be processed with GATHER AUTOLIST STALE: Returns a list of stale objects as determined by looking at the *_tab_modifications viewsLIST EMPTY: Returns a list of objects which currently have no statistics</Parameter>
            <Parameter Name="OBJLIST">List of objects found to be stale or empty</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different from current schema)</Parameter>
            <Parameter Name="GATHER_SYS">Gathers statistics on the objects owned by the 'SYS' user</Parameter>
            <Parameter Name="NO_INVALIDATE">Does not invalidate the dependent cursors if set to TRUE. The procedure invalidates the dependent cursors immediately if set to FALSE. Use DBMS_STATS.AUTO_INVALIDATE. to have Oracle decide when to invalidate dependent cursors. This is the default. The default can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="OBJ_FILTER_LIST">A list of object filters. When provided, GATHER_DATABASE_STATS will gather statistics only on objects which satisfy at least one object filter in the list as needed. In a single object filter, we can specify the constraints on the object attributes. The attribute values specified in the object filter are case- insensitive unless double-quoted. Wildcard is allowed in the attribute values. Suppose non-NULL values s1, s2, ... are specified for attributes a1, a2, ... in one object filter. An object o is said to satisfy this object filter if (o.a1 like s1) and (o.a2 like s2) and ... is true. See Applying an Object Filter List.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GATHER_DICTIONARY_STATS" ElementId="#i1055451">
          <Description>Gathers statistics for dictionary schemas 'SYS', 'SYSTEM' and schemas of RDBMS components</Description>
          <Parameters>
            <Parameter Name="COMP_ID">Component id of the schema to analyze (NULL will result in analyzing schemas of all RDBMS components).Please refer to comp_id column of DBA_REGISTRY view. The procedure always gather statistics on 'SYS' and 'SYSTEM' schemas regardless of this argument.</Parameter>
            <Parameter Name="ESTIMATE_PERCENT">Percentage of rows to estimate (NULL means compute). The valid range is [0.000001,100]. Use the constant DBMS_STATS.AUTO_SAMPLE_SIZE to have Oracle determine the appropriate sample size for good statistics. This is the default.The default value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="BLOCK_SAMPLE">Determines whether or not to use random block sampling instead of random row sampling. Random block sampling is more efficient, but if the data is not randomly distributed on disk then the sample values may be somewhat correlated. Only pertinent when performing estimate statistics.</Parameter>
            <Parameter Name="METHOD_OPT">Accepts:FOR ALL [INDEXED | HIDDEN] COLUMNS [size_clause]size_clause is defined as size_clause := SIZE {integer | REPEAT | AUTO | SKEWONLY}The default is FOR ALL COLUMNS SIZE AUTO.The default value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="DEGREE">Degree of parallelism. The default for degree is NULL. The default value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure. NULL means use the table default value specified by the DEGREE clause in the CREATE TABLE or ALTER TABLE statement. Use the constant DBMS_STATS.DEFAULT_DEGREE to specify the default value based on the initialization parameters. The AUTO_DEGREE value determines the degree of parallelism automatically. This is between 1 (serial execution) and DEFAULT_DEGREE (the system default value based on number of CPUs and initialization parameters) according to the size of the object. When using DEGREE=&gt;NULL, DEGREE=&gt;n, or DEGREE=&gt;DBMS_STATS.DEFAULT_DEGREE, the current implementation of DBMS_STATS may use serial execution if the size of the object does not warrant parallel execution.</Parameter>
            <Parameter Name="GRANULARITY">Granularity of statistics to collect (only pertinent if the table is partitioned).'ALL' - Gathers all (subpartition, partition, and global) statistics'AUTO'- Determines the granularity based on the partitioning type. This is the default value.'DEFAULT' - Gathers global and partition-level statistics. This option is obsolete, and while currently supported, it is included in the documentation for legacy reasons only. You should use the 'GLOBAL AND PARTITION' for this functionality. Note that the default value is now 'AUTO'.'GLOBAL' - Gathers global statistics'GLOBAL AND PARTITION' - Gathers the global and partition level statistics. No subpartition level statistics are gathered even if it is a composite partitioned object.'PARTITION '- Gathers partition-level statistics'SUBPARTITION' - gathers subpartition-level statistics</Parameter>
            <Parameter Name="CASCADE">Gathers statistics on indexes also.Index statistics gathering will not be parallelized. Using this option is equivalent to running the GATHER_INDEX_STATS Procedure on each of the indexes in the schema in addition to gathering table and column statistics. Use the constant DBMS_STATS.AUTO_CASCADE to have Oracle determine whether index statistics to be collected or not. This is the default.The default value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="STATTAB">User statistics table identifier describing where to save the current statistics</Parameter>
            <Parameter Name="STATID">The (optional) identifier to associate with these statistics within stattab</Parameter>
            <Parameter Name="OPTIONS">Further specification of objects for which to gather statistics:'GATHER' - Gathers statistics on all objects in the schema'GATHER AUTO' - (Default) Gathers all necessary statistics automatically. Oracle implicitly determines which objects need new statistics and determines how to gather those statistics. When 'GATHER AUTO' is specified, the only additional valid parameters are comp_id, stattab, statid and statown; all other parameter settings will be ignored. Also, returns a list of objects processed.'GATHER STALE' - Gathers statistics on stale objects as determined by looking at the *_tab_modifications views. Also, returns a list of objects found to be stale.'GATHER EMPTY' - Gathers statistics on objects which currently have no statistics. Also, returns a list of objects found to have no statistics.'LIST AUTO' - Returns list of objects to be processed with 'GATHER AUTO''LIST STALE' - Returns list of stale objects as determined by looking at the *_tab_modifications views'LIST EMPTY' - Returns list of objects which currently have no statistics</Parameter>
            <Parameter Name="OBJLIST">The list of objects found to be stale or empty</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different from current schema)</Parameter>
            <Parameter Name="NO_INVALIDATE">Does not invalidate the dependent cursors if set to TRUE. The procedure invalidates the dependent cursors immediately if set to FALSE. Use DBMS_STATS.AUTO_INVALIDATE. to have Oracle decide when to invalidate dependent cursors. This is the default. The default can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="OBJ_FILTER_LIST">A list of object filters. When provided, this will gather statistics only on objects which satisfy at least one object filter in the list as needed. In a single object filter, we can specify the constraints on the object attributes. The attribute values specified in the object filter are case- insensitive unless double-quoted. Wildcard is allowed in the attribute values. Suppose non-NULL values s1, s2, ... are specified for attributes a1, a2, ... in one object filter. An object o is said to satisfy this object filter if (o.a1 like s1) and (o.a2 like s2) and ... is true. See Applying an Object Filter List.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GATHER_FIXED_OBJECTS_STATS" ElementId="#i1039162">
          <Description>Gathers statistics of fixed objects</Description>
          <Parameters>
            <Parameter Name="STATTAB">User statistics table identifier describing where to save the current statistics</Parameter>
            <Parameter Name="STATID">Identifier to associate with these statistics within stattab (optional)</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different from current schema)</Parameter>
            <Parameter Name="NO_INVALIDATE">Does not invalidate the dependent cursors if set to TRUE. The procedure invalidates the dependent cursors immediately if set to FALSE. Use DBMS_STATS.AUTO_INVALIDATE. to have Oracle decide when to invalidate dependent cursors. This is the default. The default can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GATHER_INDEX_STATS" ElementId="#i1036276">
          <Description>Gathers index statistics</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Schema of index to analyze</Parameter>
            <Parameter Name="INDNAME">Name of index</Parameter>
            <Parameter Name="PARTNAME">Name of partition</Parameter>
            <Parameter Name="ESTIMATE_PERCENT">Percentage of rows to estimate (NULL means compute). The valid range is [0.000001,100]. Use the constant DBMS_STATS.AUTO_SAMPLE_SIZE to have Oracle determine the appropriate sample size for good statistics. This is the default.The default value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="STATTAB">User statistics table identifier describing where to save the current statistics</Parameter>
            <Parameter Name="STATID">Identifier (optional) to associate with these statistics within stattab</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different than ownname)</Parameter>
            <Parameter Name="DEGREE">Degree of parallelism. The default for degree is NULL. The default value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure. NULL means use the table default value specified by the DEGREE clause in the CREATE TABLE or ALTER TABLE statement. Use the constant DBMS_STATS.DEFAULT_DEGREE to specify the default value based on the initialization parameters. The AUTO_DEGREE value determines the degree of parallelism automatically. This is between 1 (serial execution) and DEFAULT_DEGREE (the system default value based on number of CPUs and initialization parameters) according to the size of the object. When using DEGREE=&gt;NULL, DEGREE=&gt;n, or DEGREE=&gt;DBMS_STATS.DEFAULT_DEGREE, the current implementation of DBMS_STATS may use serial execution if the size of the object does not warrant parallel execution.</Parameter>
            <Parameter Name="GRANULARITY">Granularity of statistics to collect (only pertinent if the table is partitioned).'ALL' - Gathers all (subpartition, partition, and global) statistics'AUTO'- Determines the granularity based on the partitioning type. This is the default value.'DEFAULT' - Gathers global and partition-level statistics. This option is obsolete, and while currently supported, it is included in the documentation for legacy reasons only. You should use the 'GLOBAL AND PARTITION' for this functionality. Note that the default value is now 'AUTO'.'GLOBAL' - Gathers global statistics'GLOBAL AND PARTITION' - Gathers the global and partition level statistics. No subpartition level statistics are gathered even if it is a composite partitioned object.'PARTITION '- Gathers partition-level statistics'SUBPARTITION' - Gathers subpartition-level statistics.</Parameter>
            <Parameter Name="NO_INVALIDATE">Does not invalidate the dependent cursors if set to TRUE. The procedure invalidates the dependent cursors immediately if set to FALSE. Use DBMS_STATS.AUTO_INVALIDATE. to have Oracle decide when to invalidate dependent cursors. This is the default. The default can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="FORCE">Gather statistics on object even if it is locked</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GATHER_PROCESSING_RATE" ElementId="#BABFEFDF">
          <Description>Starts the job of gathering the processing rates which end after interval defined in minutes</Description>
          <Parameters>
            <Parameter Name="GATHERING_MODE">Mode: 'START' or 'END'. The mode is based on the Active Session History (ASH) data when invoked with 'START' option. It stops gathering when invoked with 'END' option. When invoked with 'START', 'interval' option can be specified optionally. If interval is not specified, its default value is set to 60 minutes.</Parameter>
            <Parameter Name="INTERVAL">Time interval (number of minutes) for which the processing must be gathered</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GATHER_SCHEMA_STATS" ElementId="#i1036456">
          <Description>Gathers statistics for all objects in a schema</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Schema to analyze (NULL means current schema)</Parameter>
            <Parameter Name="ESTIMATE_PERCENT">Percentage of rows to estimate (NULL means compute): The valid range is [0.000001,100]. Use the constant DBMS_STATS.AUTO_SAMPLE_SIZE to have Oracle determine the appropriate sample size for good statistics. This is the default.The default value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="BLOCK_SAMPLE">Whether or not to use random block sampling instead of random row sampling. Random block sampling is more efficient, but if the data is not randomly distributed on disk, then the sample values may be somewhat correlated. Only pertinent when doing an estimate statistics.</Parameter>
            <Parameter Name="METHOD_OPT">Accepts:FOR ALL [INDEXED | HIDDEN] COLUMNS [size_clause]size_clause is defined as size_clause := SIZE {integer | REPEAT | AUTO | SKEWONLY}The default is FOR ALL COLUMNS SIZE AUTO.The default value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="DEGREE">Degree of parallelism. The default for degree is NULL. The default value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure. NULL means use the table default value specified by the DEGREE clause in the CREATE TABLE or ALTER TABLE statement. Use the constant DBMS_STATS.DEFAULT_DEGREE to specify the default value based on the initialization parameters. The AUTO_DEGREE value determines the degree of parallelism automatically. This is between 1 (serial execution) and DEFAULT_DEGREE (the system default value based on number of CPUs and initialization parameters) according to the size of the object. When using DEGREE=&gt;NULL, DEGREE=&gt;n, or DEGREE=&gt;DBMS_STATS.DEFAULT_DEGREE, the current implementation of DBMS_STATS may use serial execution if the size of the object does not warrant parallel execution.</Parameter>
            <Parameter Name="GRANULARITY">Granularity of statistics to collect (only pertinent if the table is partitioned).'ALL' - Gathers all (subpartition, partition, and global) statistics'AUTO'- Determines the granularity based on the partitioning type. This is the default value.'DEFAULT' - Gathers global and partition-level statistics. This option is obsolete, and while currently supported, it is included in the documentation for legacy reasons only. You should use the 'GLOBAL AND PARTITION' for this functionality. Note that the default value is now 'AUTO'.'GLOBAL' - Gathers global statistics'GLOBAL AND PARTITION' - Gathers the global and partition level statistics. No subpartition level statistics are gathered even if it is a composite partitioned object.'PARTITION '- Gathers partition-level statistics'SUBPARTITION' - Gathers subpartition-level statistics.</Parameter>
            <Parameter Name="CASCADE">Gather statistics on the indexes as well. Using this option is equivalent to running the GATHER_INDEX_STATS Procedure on each of the indexes in the schema in addition to gathering table and column statistics. Use the constant DBMS_STATS.AUTO_CASCADE to have Oracle determine whether index statistics to be collected or not. This is the default. The default value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="STATTAB">User statistics table identifier describing where to save the current statistics</Parameter>
            <Parameter Name="STATID">Identifier (optional) to associate with these statistics within stattab</Parameter>
            <Parameter Name="OPTIONS">Further specification of which objects to gather statistics for:GATHER: (Default) Gathers statistics on all objects in the schema.GATHER AUTO: Gathers all necessary statistics automatically. Oracle implicitly determines which objects need new statistics, and determines how to gather those statistics. When GATHER AUTO is specified, the only additional valid parameters are ownname, stattab, statid, objlist and statown; all other parameter settings are ignored. Returns a list of processed objects.GATHER STALE: Gathers statistics on stale objects as determined by looking at the *_tab_modifications views. Also, return a list of objects found to be stale.GATHER EMPTY: Gathers statistics on objects which currently have no statistics. also, return a list of objects found to have no statistics.LIST AUTO: Returns a list of objects to be processed with GATHER AUTO.LIST STALE: Returns list of stale objects as determined by looking at the *_tab_modifications views.LIST EMPTY: Returns list of objects which currently have no statistics.</Parameter>
            <Parameter Name="OBJLIST">List of objects found to be stale or empty</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different than ownname)</Parameter>
            <Parameter Name="NO_INVALIDATE">Does not invalidate the dependent cursors if set to TRUE. The procedure invalidates the dependent cursors immediately if set to FALSE. Use DBMS_STATS.AUTO_INVALIDATE. to have Oracle decide when to invalidate dependent cursors. This is the default. The default can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="FORCE">Gather statistics on objects even if they are locked</Parameter>
            <Parameter Name="OBJ_FILTER_LIST">A list of object filters. When provided, GATHER_SCHEMA_STATS will gather statistics only on objects which satisfy at least one object filter in the list as needed. In a single object filter, we can specify the constraints on the object attributes. The attribute values specified in the object filter are case- insensitive unless double-quoted. Wildcard is allowed in the attribute values. Suppose non-NULL values s1, s2, ... are specified for attributes a1, a2, ... in one object filter. An object o is said to satisfy this object filter if (o.a1 like s1) and (o.a2 like s2) and ... is true. See Applying an Object Filter List.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GATHER_SYSTEM_STATS" ElementId="#i1036401">
          <Description>Gathers system statistics</Description>
          <Parameters>
            <Parameter Name="GATHERING_MODE">Mode values are:NOWORKLOAD: Will capture characteristics of the I/O system. Gathering may take a few minutes and depends on the size of the database. During this period Oracle will estimate the average read seek time and transfer speed for the I/O system. This mode is suitable for the all workloads. Oracle recommends to run GATHER_SYSTEM_STATS ('NOWORKLOAD') after creation of the database and tablespaces. To fine tune system statistics for the workload use 'START' and 'STOP' or 'INTERVAL' options. If you gather both 'NOWORKLOAD' and workload specific (statistics collected using 'INTERVAL' or 'START' and 'STOP'), the workload statistics will be used by optimizer. Collected components: cpuspeednw, ioseektim, iotfrspeed.INTERVAL: Captures system activity during a specified interval. This works in combination with the interval parameter. You should provide an interval value in minutes, after which system statistics are created or updated in the dictionary or stattab. You can use GATHER_SYSTEM_STATS (gathering_mode=&gt;'STOP') to stop gathering earlier than scheduled. Collected components: maxthr, slavethr, cpuspeed, sreadtim, mreadtim, mbrc.START | STOP: Captures system activity during specified start and stop times and refreshes the dictionary or stattab with statistics for the elapsed period. Interval value is ignored. Collected components: maxthr, slavethr, cpuspeed, sreadtim, mreadtim, mbrc.EXADATA: In this mode the gathered system statistics take into account the unique capabilities provided by using EXADATA such as large IO size and high IO throughput. The multi-block read count and IO throughput statistics are set along with the CPU speed.</Parameter>
            <Parameter Name="INTERVAL">Time, in minutes, to gather statistics. This parameter applies only when gathering_mode='INTERVAL'</Parameter>
            <Parameter Name="STATTAB">Identifier of the user statistics table where the statistics will be saved</Parameter>
            <Parameter Name="STATID">Optional identifier associated with the statistics saved in the stattab</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different from current schema)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GATHER_TABLE_STATS" ElementId="#i1036461">
          <Description>Gathers table and column (and index) statistics</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Schema of table to analyze</Parameter>
            <Parameter Name="TABNAME">Name of table</Parameter>
            <Parameter Name="PARTNAME">Name of partition</Parameter>
            <Parameter Name="ESTIMATE_PERCENT">Percentage of rows to estimate (NULL means compute) The valid range is [0.000001,100]. Use the constant DBMS_STATS.AUTO_SAMPLE_SIZE to have Oracle determine the appropriate sample size for good statistics. This is the default.The default value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="BLOCK_SAMPLE">Whether or not to use random block sampling instead of random row sampling. Random block sampling is more efficient, but if the data is not randomly distributed on disk, then the sample values may be somewhat correlated. Only pertinent when doing an estimate statistics.</Parameter>
            <Parameter Name="METHOD_OPT">METHOD_OPT - When setting preference on global, schema, database or dictionary level, only'FOR ALL' syntax is allowed. Other than that, method_opt accepts either of the following options, or both in combination:FOR ALL [INDEXED | HIDDEN] COLUMNS [size_clause]FOR COLUMNS [column_clause] [size_clause]size_clause is defined as size_clause := SIZE {integer | REPEAT | AUTO | SKEWONLY}column_clause is defined as column_clause := column_name | extension name | extensionThe default is FOR ALL COLUMNS SIZE AUTO. The default value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="DEGREE">Degree of parallelism. The default for degree is NULL. The default value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure. NULL means use the table default value specified by the DEGREE clause in the CREATE TABLE or ALTER TABLE statement. Use the constant DBMS_STATS.DEFAULT_DEGREE to specify the default value based on the initialization parameters. The AUTO_DEGREE value determines the degree of parallelism automatically. This is between 1 (serial execution) and DEFAULT_DEGREE (the system default value based on number of CPUs and initialization parameters) according to the size of the object. When using DEGREE=&gt;NULL, DEGREE=&gt;n, or DEGREE=&gt;DBMS_STATS.DEFAULT_DEGREE, the current implementation of DBMS_STATS may use serial execution if the size of the object does not warrant parallel execution.</Parameter>
            <Parameter Name="GRANULARITY">Granularity of statistics to collect (only pertinent if the table is partitioned).'ALL' - Gathers all (subpartition, partition, and global) statistics'APPROX_GLOBAL AND PARTITION' - similar to 'GLOBAL AND PARTITION' but in this case the global statistics are aggregated from partition level statistics. This option will aggregate all statistics except the number of distinct values for columns and number of distinct keys of indexes. The existing histograms of the columns at the table level are also aggregated.The aggregation will use only partitions with statistics, so to get accurate global statistics, users should make sure to have statistics for all partitions. Global statistics are gathered if partname is NULL or if the aggregation cannot be performed (for example, if statistics for one of the partitions is missing).'AUTO'- Determines the granularity based on the partitioning type. This is the default value.'DEFAULT' - Gathers global and partition-level statistics. This option is obsolete, and while currently supported, it is included in the documentation for legacy reasons only. You should use the 'GLOBAL AND PARTITION' for this functionality. Note that the default value is now 'AUTO'.'GLOBAL' - Gathers global statistics'GLOBAL AND PARTITION' - Gathers the global and partition level statistics. No subpartition level statistics are gathered even if it is a composite partitioned object.'PARTITION '- Gathers partition-level statistics'SUBPARTITION' - Gathers subpartition-level statistics.</Parameter>
            <Parameter Name="CASCADE">Gathers statistics on the indexes for this table. Using this option is equivalent to running the GATHER_INDEX_STATS Procedure on each of the table's indexes. Use the constant DBMS_STATS.AUTO_CASCADE to have Oracle determine whether index statistics are to be collected or not. This is the default. The default value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="STATTAB">User statistics table identifier describing where to save the current statistics</Parameter>
            <Parameter Name="STATID">Identifier (optional) to associate with these statistics within stattab</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different than ownname)</Parameter>
            <Parameter Name="NO_INVALIDATE">Does not invalidate the dependent cursors if set to TRUE. The procedure invalidates the dependent cursors immediately if set to FALSE. Use DBMS_STATS.AUTO_INVALIDATE. to have Oracle decide when to invalidate dependent cursors. This is the default. The default can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="STATTYPE">Statistics type. The only value allowed is DATA.</Parameter>
            <Parameter Name="FORCE">Gather statistics of table even if it is locked</Parameter>
            <Parameter Name="CONTEXT">[Non-operative]</Parameter>
            <Parameter Name="OPTIONS">Further specification of which objects to gather statistics:GATHER - gathers statistics on all objects in the schemaGATHER AUTO - gathers all necessary statistics automatically. Oracle implicitly determines which objects need new statistics.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GENERATE_STATS" ElementId="#i1036560">
          <Description>Generates object statistics from previously collected statistics of related objects</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Schema of object</Parameter>
            <Parameter Name="OBJNAME">Name of object</Parameter>
            <Parameter Name="ORGANIZED">Amount of ordering associated between the index and its underlying table. A heavily organized index would have consecutive index keys referring to consecutive rows on disk for the table (the same block). A heavily disorganized index would have consecutive keys referencing different table blocks on disk.This parameter is only used for b-tree indexes. The number can be in the range of 0-10, with 0 representing a completely organized index and 10 a completely disorganized one.</Parameter>
            <Parameter Name="FORCE">If TRUE, generates statistics for the target object even if it is locked</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_COLUMN_STATS" ElementId="#i1036689">
          <Description>Gets all column-related information</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Name of the schema</Parameter>
            <Parameter Name="TABNAME">Name of the table to which this column belongs</Parameter>
            <Parameter Name="COLNAME">Name of the column or extension</Parameter>
            <Parameter Name="PARTNAME">Name of the table partition from which to get the statistics. If the table is partitioned and if partname is NULL, statistics are retrieved from the global table level.</Parameter>
            <Parameter Name="STATTAB">User statistics table identifier describing from where to retrieve the statistics. If stattab is NULL, statistics are retrieved directly from the dictionary.</Parameter>
            <Parameter Name="STATID">Identifier (optional) to associate with these statistics within stattab (Only pertinent if stattab is not NULL)</Parameter>
            <Parameter Name="EXT_STATS">The user-defined statistics</Parameter>
            <Parameter Name="STATTYPOWN">Schema of the statistics type</Parameter>
            <Parameter Name="STATTYPNAME">Name of the statistics type</Parameter>
            <Parameter Name="DISTCNT">Number of distinct values</Parameter>
            <Parameter Name="DENSITY">Column density</Parameter>
            <Parameter Name="NULLCNT">Number of NULLs</Parameter>
            <Parameter Name="SREC">Structure holding internal representation of column minimum, maximum, and histogram values</Parameter>
            <Parameter Name="AVGCLEN">Average length of the column (in bytes)</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different than ownname)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_INDEX_STATS" ElementId="#i1036796">
          <Description>Gets all index-related information</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Name of the schema</Parameter>
            <Parameter Name="INDNAME">Name of the index</Parameter>
            <Parameter Name="PARTNAME">Name of the index partition for which to get the statistics. If the index is partitioned and if partname is NULL, then the statistics are retrieved for the global index level.</Parameter>
            <Parameter Name="STATTAB">User statistics table identifier describing from where to retrieve the statistics. If stattab is NULL, then the statistics are retrieved directly from the dictionary.</Parameter>
            <Parameter Name="STATID">Identifier (optional) to associate with these statistics within stattab (Only pertinent if stattab is not NULL)</Parameter>
            <Parameter Name="EXT_STATS">User-defined statistics</Parameter>
            <Parameter Name="STATTYPOWN">Schema of the statistics type</Parameter>
            <Parameter Name="STATTYPNAME">Name of the statistics type</Parameter>
            <Parameter Name="NUMROWS">Number of rows in the index (partition)</Parameter>
            <Parameter Name="NUMLBLKS">Number of leaf blocks in the index (partition)</Parameter>
            <Parameter Name="NUMDIST">Number of distinct keys in the index (partition)</Parameter>
            <Parameter Name="AVGLBLK">Average integral number of leaf blocks in which each distinct key appears for this index (partition)</Parameter>
            <Parameter Name="AVGDBLK">Average integral number of data blocks in the table pointed to by a distinct key for this index (partition)</Parameter>
            <Parameter Name="CLSTFCT">Clustering factor for the index (partition)</Parameter>
            <Parameter Name="INDLEVEL">Height of the index (partition)</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different than ownname)</Parameter>
            <Parameter Name="GUESSQ">Guess quality for the index (partition)</Parameter>
            <Parameter Name="CACHEDBLK">The average number of blocks in the buffer cache for the segment (index/table/index partition/table partition)</Parameter>
            <Parameter Name="CACHEHIT">The average cache hit ratio for the segment (index/table/index partition/table partition)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_PARAM" ElementId="#i1048775">
          <Description>Gets the default value of parameters of DBMS_STATS procedures [see Deprecated Subprograms ]</Description>
          <Parameters>
            <Parameter Name="PNAME">Parameter name</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_PREFS" ElementId="#BEICCEDB">
          <Description>Gets the default value of the specified preference</Description>
          <Parameters>
            <Parameter Name="PNAME">Preference name. The existing value for following preferences can be deleted and default preference values will be used:AUTOSTATS_TARGETCASCADECONCURRENTDEGREEESTIMATE_PERCENTMETHOD_OPTNO_INVALIDATEGRANULARITYPUBLISHINCREMENTALINCREMENTAL_STALENESSINCREMENTAL_LEVELSTALE_PERCENTGLOBAL_TEMP_TABLE_STATSTABLE_CACHED_BLOCKSOPTIONS</Parameter>
            <Parameter Name="METHOD_OPT">When setting preference on global, schema, database or dictionary level, only'FOR ALL' syntax is allowed.:FOR ALL [INDEXED | HIDDEN] COLUMNS [size_clause]size_clause is defined as size_clause := SIZE {integer | REPEAT | AUTO | SKEWONLY}The default is FOR ALL COLUMNS SIZE AUTO.The value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="OPTIONS">Further specification of which objects to gather statistics:GATHER - gathers statistics on all objects in the schemaGATHER AUTO - gathers all necessary statistics automatically. Oracle implicitly determines which objects need new statistics.</Parameter>
            <Parameter Name="OWNNAME">Owner name</Parameter>
            <Parameter Name="TABNAME">Table name</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_STATS_HISTORY_AVAILABILITY" ElementId="#i1050595">
          <Description>Gets the oldest timestamp where statistics history is available</Description>
        </SubProgram>
        <SubProgram Name="GET_STATS_HISTORY_RETENTION" ElementId="#i1048205">
          <Description>Returns the current statistics history retention value</Description>
        </SubProgram>
        <SubProgram Name="GET_SYSTEM_STATS" ElementId="#i1036927">
          <Description>Gets system statistics from stattab, or from the dictionary if stattab is NULL</Description>
          <Parameters>
            <Parameter Name="STATUS">Output is one of the following:COMPLETED:AUTOGATHERING:MANUALGATHERING:BADSTATS:</Parameter>
            <Parameter Name="DSTART">Date when statistics gathering started.If status = MANUALGATHERING, the start date is returned.</Parameter>
            <Parameter Name="DSTOP">Date when statistics gathering stopped.If status = COMPLETE, the finish date is returned.If status = AUTOGATHERING, the future finish date is returned.If status = BADSTATS, the must-finished-by date is returned.</Parameter>
            <Parameter Name="PNAME">The parameter name to get, which can have one of the following values:iotfrspeed - I/O transfer speed in bytes for each millisecondioseektim - seek time + latency time + operating system overhead time, in millisecondssreadtim - average time to read single block (random read), in millisecondsmreadtim - average time to read an mbrc block at once (sequential read), in millisecondscpuspeed - average number of CPU cycles for each second, in millions, captured for the workload (statistics collected using 'INTERVAL' or 'START' and 'STOP' options)cpuspeednw - average number of CPU cycles for each second, in millions, captured for the no-workload (statistics collected using 'NOWORKLOAD' option.mbrc - average multiblock read count for sequential read, in blocksmaxthr - maximum I/O system throughput, in bytes/secondslavethr - average slave I/O throughput, in bytes/second</Parameter>
            <Parameter Name="PVALUE">Parameter value to get</Parameter>
            <Parameter Name="STATTAB">Identifier of the user statistics table where the statistics will be obtained. If stattab is NULL, the statistics will be obtained from the dictionary.</Parameter>
            <Parameter Name="STATID">Optional identifier associated with the statistics saved in the stattab</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different from current schema)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_TABLE_STATS" ElementId="#i1037003">
          <Description>Gets all table-related information</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Name of the schema</Parameter>
            <Parameter Name="TABNAME">Name of the table to which this column belongs</Parameter>
            <Parameter Name="PARTNAME">Name of the table partition from which to get the statistics. If the table is partitioned and if partname is NULL, then the statistics are retrieved from the global table level.</Parameter>
            <Parameter Name="STATTAB">User statistics table identifier describing from where to retrieve the statistics. If stattab is NULL, then the statistics are retrieved directly from the dictionary.</Parameter>
            <Parameter Name="STATID">Identifier (optional) to associate with these statistics within stattab (Only pertinent if stattab is not NULL)</Parameter>
            <Parameter Name="NUMROWS">Number of rows in the table (partition)</Parameter>
            <Parameter Name="NUMBLKS">Number of blocks the table (partition) occupies</Parameter>
            <Parameter Name="AVGRLEN">Average row length for the table (partition)</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different than ownname)</Parameter>
            <Parameter Name="CACHEDBLK">The average number of blocks in the buffer cache for the segment (index/table/index partition/table partition)</Parameter>
            <Parameter Name="CACHEHIT">The average cache hit ratio for the segment (index/table/index partition/table partition)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IMPORT_COLUMN_STATS" ElementId="#i1037153">
          <Description>Retrieves statistics for a particular column from the user statistics table identified by stattab and stores them in the dictionary</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Name of the schema</Parameter>
            <Parameter Name="TABNAME">Name of the table to which this column belongs</Parameter>
            <Parameter Name="COLNAME">Name of the column or extension</Parameter>
            <Parameter Name="PARTNAME">Name of the table partition. If the table is partitioned and if partname is NULL, then global and partition column statistics are imported.</Parameter>
            <Parameter Name="STATTAB">User statistics table identifier describing from where to retrieve the statistics</Parameter>
            <Parameter Name="STATID">Identifier to associate with these statistics within stattab (optional)</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different than ownname)</Parameter>
            <Parameter Name="NO_INVALIDATE">Does not invalidate the dependent cursors if set to TRUE. The procedure invalidates the dependent cursors immediately if set to FALSE. Use DBMS_STATS.AUTO_INVALIDATE. to have Oracle decide when to invalidate dependent cursors. This is the default. The default can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="FORCE">If set to TRUE, imports statistics even if statistics are locked</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IMPORT_DATABASE_PREFS" ElementId="#BEIGFDAI">
          <Description>Imports the statistics preferences of all the tables</Description>
          <Parameters>
            <Parameter Name="STATTAB">Statistics table name where to import the statistics</Parameter>
            <Parameter Name="STATID">Optional identifier to associate with these statistics within stattab</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different than ownname)</Parameter>
            <Parameter Name="ADD_SYS">Value TRUE will include the Oracle-owned tables</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IMPORT_DATABASE_STATS" ElementId="#i1037134">
          <Description>Retrieves statistics for all objects in the database from the user statistics table and stores them in the dictionary</Description>
          <Parameters>
            <Parameter Name="STATTAB">User statistics table identifier describing from where to retrieve the statistics</Parameter>
            <Parameter Name="STATID">Identifier (optional) to associate with these statistics within stattab</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different from current schema)</Parameter>
            <Parameter Name="NO_INVALIDATE">Does not invalidate the dependent cursors if set to TRUE. The procedure invalidates the dependent cursors immediately if set to FALSE. Use DBMS_STATS.AUTO_INVALIDATE. to have Oracle decide when to invalidate dependent cursors. This is the default. The default can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="FORCE">Overrides statistics locked at the object (table) level:TRUE - Ignores the statistics lock and imports the statisticsFALSE - The statistics will be imported only if they are not locked</Parameter>
            <Parameter Name="STAT_CATEGORY">Specifies what statistics to import, accepting multiple values separated by a comma. Values supported:OBJECT_STATS - table statistics, column statistics and index statistics (Default)SYNOPSES - information to support incremental statistics</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IMPORT_DICTIONARY_STATS" ElementId="#i1043013">
          <Description>Retrieves statistics for all dictionary schemas ('SYS', 'SYSTEM' and RDBMS component schemas) from the user statistics table and stores them in the dictionary</Description>
          <Parameters>
            <Parameter Name="STATTAB">User statistics table identifier describing from where to retrieve the statistics</Parameter>
            <Parameter Name="STATID">The (optional) identifier to associate with these statistics within stattab</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different from current schema)</Parameter>
            <Parameter Name="NO_INVALIDATE">Does not invalidate the dependent cursors if set to TRUE. The procedure invalidates the dependent cursors immediately if set to FALSE. Use DBMS_STATS.AUTO_INVALIDATE. to have Oracle decide when to invalidate dependent cursors. This is the default. The default can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="FORCE">Overrides statistics lock at the object (table) level:TRUE - Ignores the statistics lock and imports the statistics.FALSE - The statistics will be imported only if there is no lock.</Parameter>
            <Parameter Name="STAT_CATEGORY">Specifies what statistics to import, accepting multiple values separated by a comma. Values supported:OBJECT_STATS - table statistics, column statistics and index statistics (Default)SYNOPSES - information to support incremental statistics</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IMPORT_FIXED_OBJECTS_STATS" ElementId="#i1041649">
          <Description>Retrieves statistics for fixed tables from the user statistics table identified by stattab and stores them in the dictionary</Description>
          <Parameters>
            <Parameter Name="STATTAB">User statistics table identifier describing from where to retrieve the statistics</Parameter>
            <Parameter Name="STATID">Identifier (optional) to associate with these statistics within stattab</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different from current schema)</Parameter>
            <Parameter Name="NO_INVALIDATE">Does not invalidate the dependent cursors if set to TRUE. The procedure invalidates the dependent cursors immediately if set to FALSE. Use DBMS_STATS.AUTO_INVALIDATE. to have Oracle decide when to invalidate dependent cursors. This is the default. The default can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="FORCE">Overrides statistics lock:TRUE - Ignores the statistics lock and imports the statisticsFALSE - The statistics will be imported only if there is no lock</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IMPORT_INDEX_STATS" ElementId="#i1037276">
          <Description>Retrieves statistics for a particular index from the user statistics table identified by stattab and stores them in the dictionary</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Name of the schema</Parameter>
            <Parameter Name="INDNAME">Name of the index</Parameter>
            <Parameter Name="PARTNAME">Name of the index partition. If the index is partitioned and if partname is NULL, then global and partition index statistics are imported.</Parameter>
            <Parameter Name="STATTAB">User statistics table identifier describing from where to retrieve the statistics</Parameter>
            <Parameter Name="STATID">Identifier (optional) to associate with these statistics within stattab</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different than ownname)</Parameter>
            <Parameter Name="NO_INVALIDATE">Does not invalidate the dependent cursors if set to TRUE. The procedure invalidates the dependent cursors immediately if set to FALSE. Use DBMS_STATS.AUTO_INVALIDATE. to have Oracle decide when to invalidate dependent cursors. This is the default. The default can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="FORCE">Imports statistics even if index statistics are locked</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IMPORT_SCHEMA_PREFS" ElementId="#BEIHBJBH">
          <Description>Imports the statistics preferences of all the tables owned by the specified owner name</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Owner name</Parameter>
            <Parameter Name="STATTAB">Statistics table name from where to import the statistics</Parameter>
            <Parameter Name="STATID">(Optional) Identifier to associate with these statistics within stattab</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if other than ownname)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IMPORT_SCHEMA_STATS" ElementId="#i1037487">
          <Description>Retrieves statistics for all objects in the schema identified by ownname from the user statistics table and stores them in the dictionary</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Name of the schema</Parameter>
            <Parameter Name="STATTAB">User statistics table identifier describing from where to retrieve the statistics</Parameter>
            <Parameter Name="STATID">Identifier (optional) to associate with these statistics within stattab</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different than ownname)</Parameter>
            <Parameter Name="NO_INVALIDATE">Does not invalidate the dependent cursors if set to TRUE. The procedure invalidates the dependent cursors immediately if set to FALSE. Use DBMS_STATS.AUTO_INVALIDATE. to have Oracle decide when to invalidate dependent cursors. This is the default. The default can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="FORCE">Overrides statistics locked at the object (table) level:TRUE - Ignores the statistics lock and imports the statistics.FALSE - Statistics will be imported only if there is no lock.</Parameter>
            <Parameter Name="STAT_CATEGORY">Specifies what statistics to import, accepting multiple values separated by a comma. Values supported:OBJECT_STATS - table statistics, column statistics and index statistics (Default)SYNOPSES - information to support incremental statistics</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IMPORT_SYSTEM_STATS" ElementId="#i1037380">
          <Description>Retrieves system statistics from the user statistics table and stores them in the dictionary</Description>
          <Parameters>
            <Parameter Name="STATTAB">Identifier of the user statistics table where the statistics will be retrieved</Parameter>
            <Parameter Name="STATID">Optional identifier associated with the statistics retrieved from the stattab</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different from current schema)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IMPORT_TABLE_PREFS" ElementId="#BEIDGEFG">
          <Description>Sets the statistics preferences of the specified table in the specified schema</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Owner name</Parameter>
            <Parameter Name="TABNAME">Table name</Parameter>
            <Parameter Name="STATTAB">Statistics table name from where to import the statistics</Parameter>
            <Parameter Name="STATID">(Optional) Identifier to associate with these statistics within stattab</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if other than ownname)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IMPORT_TABLE_STATS" ElementId="#i1037419">
          <Description>Retrieves statistics for a particular table from the user statistics table identified by stattab and stores them in the dictionary</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Name of the schema</Parameter>
            <Parameter Name="TABNAME">Name of the table</Parameter>
            <Parameter Name="PARTNAME">Name of the table partition. If the table is partitioned and if partname is NULL, then global and partition table statistics are imported.</Parameter>
            <Parameter Name="STATTAB">User statistics table identifier describing from where to retrieve the statistics</Parameter>
            <Parameter Name="STATID">Identifier (optional) to associate with these statistics within stattab</Parameter>
            <Parameter Name="CASCADE">If true, column and index statistics for this table are also imported</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different than ownname)</Parameter>
            <Parameter Name="NO_INVALIDATE">Does not invalidate the dependent cursors if set to TRUE. The procedure invalidates the dependent cursors immediately if set to FALSE. Use DBMS_STATS.AUTO_INVALIDATE. to have Oracle decide when to invalidate dependent cursors. This is the default. The default can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure</Parameter>
            <Parameter Name="FORCE">Imports statistics even if table statistics are locked</Parameter>
            <Parameter Name="STAT_CATEGORY">Specifies what statistics to import, accepting multiple values separated by a comma. Values supported:OBJECT_STATS - table statistics, column statistics and index statistics (Default)SYNOPSES - information to support incremental statistics</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LOCK_PARTITION_STATS" ElementId="#BABFJDFA">
          <Description>Locks statistics for a partition</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Name of the schema to lock</Parameter>
            <Parameter Name="TABNAME">Name of the table</Parameter>
            <Parameter Name="PARTNAME">[Sub]Partition name</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LOCK_SCHEMA_STATS" ElementId="#i1043184">
          <Description>Locks the statistics of all tables of a schema</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Name of the schema to lock</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LOCK_TABLE_STATS" ElementId="#i1043993">
          <Description>Locks the statistics on the table</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Name of the schema</Parameter>
            <Parameter Name="TABNAME">Name of the table</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MERGE_COL_USAGE" ElementId="#CHDEJICB">
          <Description>Merges column usage information from a source database, by means of a dblink, into the local database</Description>
          <Parameters>
            <Parameter Name="DBLINK">Name of dblink</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PREPARE_COLUMN_VALUES" ElementId="#i1035422">
          <Description>Converts user-specified minimum, maximum, and histogram endpoint datatype-specific values into Oracle's internal representation for future storage using the SEED_COL_USAGE Procedure</Description>
          <Parameters>
            <Parameter Name="SREC.EPC">Number of values specified in charvals, datevals, dblvals, fltvals, numvals, or rawvals. This value must be between 2 and 2050, inclusive, and it should be set to 2 for procedures which do not allow histogram information (nvarchar and rowid).The first corresponding array entry should hold the minimum value for the column, and the last entry should hold the maximum. If there are more than two entries, then all the others hold the remaining height-balanced or frequency histogram endpoint values (with in-between values ordered from next-smallest to next-largest). This value may be adjusted to account for compression, so the returned value should be left as is for a call to SET_COLUMN_STATS.</Parameter>
            <Parameter Name="SREC.BKVALS">If you want a frequency or hybrid histogram, this array contains the number of occurrences of each distinct value specified in charvals, datevals, dblvals, fltvals, numvals, or rawvals. Otherwise, it is merely an output parameter, and it must be set to NULL when this procedure is called.</Parameter>
            <Parameter Name="SREC.RPCNTS">If you want a hybrid histogram, this array contains the total frequency of values that are less than or equal to each distinct value specified in charvals, datevals, numvals, or rawvals. Otherwise, it is merely an output argument and must be set to NULL when this procedure is called.As an example, for a given array numvals with numvals(i)=4, rpcnts(i)=13 means that there are 13 rows in the column which are less than or equal to 4.Note:Whenever srec.rpcnts is populated, srec.bkvals must be populated as described above.Whenever bkvals and/or rpcnts are populated, there should not be any duplicates in charvals, datevals, numvals, or rawvals.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PREPARE_COLUMN_VALUES_NVARCHAR" ElementId="#i1038038">
          <Description>Converts user-specified minimum, maximum, and histogram endpoint datatype-specific values into Oracle's internal representation for future storage using the SEED_COL_USAGE Procedure</Description>
          <Parameters>
            <Parameter Name="SREC.EPC">Number of values specified in charvals, datevals, dblvals, fltvals, numvals, or rawvals. This value must be between 2 and 2050, inclusive, and it should be set to 2 for procedures which do not allow histogram information (nvarchar and rowid).The first corresponding array entry should hold the minimum value for the column, and the last entry should hold the maximum. If there are more than two entries, then all the others hold the remaining height-balanced or frequency histogram endpoint values (with in-between values ordered from next-smallest to next-largest). This value may be adjusted to account for compression, so the returned value should be left as is for a call to SET_COLUMN_STATS.</Parameter>
            <Parameter Name="SREC.BKVALS">If you want a frequency or hybrid histogram, then this array contains the number of occurrences of each distinct value specified in charvals, datevals, dblvals, fltvals, numvals, or rawvals. Otherwise, it is merely an output parameter, and it must be set to NULL when this procedure is called.</Parameter>
            <Parameter Name="SREC.RPCNTS">If you want a hybrid histogram, this array contains the total frequency of values that are less than or equal to each distinct value specified in charvals, datevals, numvals, or rawvals. Otherwise, it is merely an output argument and must be set to NULL when this procedure is called.As an example, for a given array numvals with numvals(i)=4, rpcnts(i)=13 means that there are 13 rows in the column which are less than or equal to 4.Note:Whenever srec.rpcnts is populated, srec.bkvals must be populated as described above.Whenever bkvals and/or rpcnts are populated, there should not be any duplicates in charvals, datevals, numvals, or rawvals.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PREPARE_COLUMN_VALUES_ROWID" ElementId="#i1038039">
          <Description>Converts user-specified minimum, maximum, and histogram endpoint datatype-specific values into Oracle's internal representation for future storage using the SEED_COL_USAGE Procedure</Description>
        </SubProgram>
        <SubProgram Name="PUBLISH_PENDING_STATS" ElementId="#BEIDCHEJ">
          <Description>Publishes the statistics gathered and stored as pending</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Owner name</Parameter>
            <Parameter Name="TABNAME">Table name</Parameter>
            <Parameter Name="NO_INVALIDATE">Do not invalidate the dependent cursors if set to TRUE. The procedure invalidates the dependent cursors immediately if set to FALSE. Use DBMS_STATS.AUTO_INVALIDATE to have Oracle decide when to invalidate dependent cursors. This is the default. The default can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="FORCE">If TRUE, will override the lock</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PURGE_STATS" ElementId="#i1047896">
          <Description>Purges old versions of statistics saved in the dictionary</Description>
          <Parameters>
            <Parameter Name="BEFORE_TIMESTAMP">Versions of statistics saved before this timestamp are purged. If NULL, it uses the purging policy used by automatic purge. The automatic purge deletes all history older than the older of (current time - statistics history retention) and (time of recent analyze in the system - 1). The statistics history retention value can be changed using ALTER_STATS_HISTORY_RETENTION Procedure.The default is 31 days.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMAP_STAT_TABLE" ElementId="#BABDGICG">
          <Description>Remaps the names of objects in the user statistics table</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Owner of the statistics table. NULL means the current schema.</Parameter>
            <Parameter Name="STATTAB">User statistics table identifier</Parameter>
            <Parameter Name="SRC_OWN">Owner of the table to be renamed. This argument cannot be NULL.</Parameter>
            <Parameter Name="SRC_TAB">Name of the table to be renamed. If NULL, all tables are owned by src_own.</Parameter>
            <Parameter Name="TGT_OWN">New name of the owner of the table. The owner name is also updated for the dependent objects such as columns and indexes. Note that an index of src_tab not owned by src_own is not renamed.This argument cannot be NULL.</Parameter>
            <Parameter Name="TGT_TAB">New name of the table. This argument is valid only if src_tab is not NULL.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REPORT_COL_USAGE" ElementId="#BABCDEBI">
          <Description>Reports the recorded column (group) usage information</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Owner name. If NULL it reports column usage information for tables in all schemas in the database.</Parameter>
            <Parameter Name="TABNAME">Table name. If NULL it reports column usage information for all tables of ownname.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REPORT_GATHER_AUTO_STATS" ElementId="#BABDABJG">
          <Description>Runs the auto statistics gathering job in reporting mode</Description>
          <Parameters>
            <Parameter Name="DETAIL_LEVEL">Detail level for the content of the reportBASIC: The report includes- operation ID- operation name- operation target object- start time- end time- completion status (such as: succeeded, failed)TYPICAL: In addition to the information provided at level BASIC, the report includes individual target objects for which statistics are gathered in this operation. Specifically, with regard to operation related details:- total number of target objects- total number of successfully completed objects- total number of failed objects- total number of timed-out objects (applies to only auto statistics gathering)With regard to target objects:- owner and name of each target object- target object type (such as: table, index)- start time- end time- completion statusALL: In addition to the information provided at level TYPICAL, the report includes further information on each target object. Specifically, with regard to operation-related details:- job name- session ID- parameter values- error message if the operation failedWith regard to target objects:- job name- batching details- estimated cost- rank in the target list- columns for which histograms were collected- list of collected extended statistics (if any)- reason for including the object in the target list- additional error details if the task has failed.Note that several fields (such as job name, estimated task cost) in the report are populated only when an operation is executed concurrently (CONCURRENT preference is turned on).</Parameter>
            <Parameter Name="FORMAT">Report format:XMLHTMLTEXT (Default)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REPORT_GATHER_DATABASE_STATS" ElementId="#BABBEHEC">
          <Description>Runs the GATHER_DATABASE_STATS Procedures in reporting mode.</Description>
          <Parameters>
            <Parameter Name="ESTIMATE_PERCENT">Percentage of rows to estimate (NULL means compute): The valid range is [0.000001,100]. Use the constant DBMS_STATS.AUTO_SAMPLE_SIZE to have Oracle determine the appropriate sample size for good statistics. This is the default.The default value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="BLOCK_SAMPLE">Whether or not to use random block sampling instead of random row sampling. Random block sampling is more efficient, but if the data is not randomly distributed on disk, then the sample values may be somewhat correlated. Only pertinent when doing an estimate statistics.</Parameter>
            <Parameter Name="METHOD_OPT">Accepts:FOR ALL [INDEXED | HIDDEN] COLUMNS [size_clause]size_clause is defined as size_clause := SIZE {integer | REPEAT | AUTO | SKEWONLY}The default is FOR ALL COLUMNS SIZE AUTO.The value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="DEGREE">Degree of parallelism. The default for degree is NULL. The default value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure. NULL means use the table default value specified by the DEGREE clause in the CREATE TABLE or ALTER TABLE statement. Use the constant DBMS_STATS.DEFAULT_DEGREE to specify the default value based on the initialization parameters. The AUTO_DEGREE value determines the degree of parallelism automatically. This is between 1 (serial execution) and DEFAULT_DEGREE (the system default value based on number of CPUs and initialization parameters) according to the size of the object. When using DEGREE=&gt;NULL, DEGREE=&gt;n, or DEGREE=&gt;DBMS_STATS.DEFAULT_DEGREE, the current implementation of DBMS_STATS may use serial execution if the size of the object does not warrant parallel execution.</Parameter>
            <Parameter Name="GRANULARITY">Granularity of statistics to collect (only pertinent if the table is partitioned).'ALL' - Gathers all (subpartition, partition, and global) statistics'AUTO'- Determines the granularity based on the partitioning type. This is the default value.'DEFAULT' - Gathers global and partition-level statistics. This option is obsolete, and while currently supported, it is included in the documentation for legacy reasons only. You should use the 'GLOBAL AND PARTITION' for this functionality. Note that the default value is now 'AUTO'.'GLOBAL' - Gathers global statistics'GLOBAL AND PARTITION' - Gathers the global and partition level statistics. No subpartition level statistics are gathered even if it is a composite partitioned object.'PARTITION '- Gathers partition-level statistics'SUBPARTITION' - Gathers subpartition-level statistics</Parameter>
            <Parameter Name="CASCADE">Gather statistics on the indexes as well. Using this option is equivalent to running the GATHER_INDEX_STATS Procedure on each of the indexes in the database in addition to gathering table and column statistics. Use the constant DBMS_STATS.AUTO_CASCADE to have Oracle determine whether index statistics to be collected or not. This is the default. The default value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="STATTAB">User statistics table identifier describing where to save the current statistics.The statistics table is assumed to reside in the same schema as the object being analyzed, so there must be one such table in each schema to use this option.</Parameter>
            <Parameter Name="STATID">Identifier (optional) to associate with these statistics within stattab.</Parameter>
            <Parameter Name="OPTIONS">Further specification of which objects to gather statistics for:GATHER: Gathers statistics on all objects in the schema.GATHER AUTO: Gathers all necessary statistics automatically. Oracle implicitly determines which objects need new statistics, and determines how to gather those statistics. When GATHER AUTO is specified, the only additional valid parameters are stattab, statid, objlist and statown; all other parameter settings are ignored. Returns a list of processed objects.GATHER STALE: Gathers statistics on stale objects as determined by looking at the *_tab_modifications views. Also, return a list of objects found to be stale.GATHER EMPTY: Gathers statistics on objects which currently have no statistics. Return a list of objects found to have no statistics.LIST AUTO: Returns a list of objects to be processed with GATHER AUTOLIST STALE: Returns a list of stale objects as determined by looking at the *_tab_modifications viewsLIST EMPTY: Returns a list of objects which currently have no statistics</Parameter>
            <Parameter Name="OBJLIST">List of objects found to be stale or empty</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different from current schema)</Parameter>
            <Parameter Name="GATHER_SYS">Gathers statistics on the objects owned by the 'SYS' user</Parameter>
            <Parameter Name="NO_INVALIDATE">Does not invalidate the dependent cursors if set to TRUE. The procedure invalidates the dependent cursors immediately if set to FALSE. Use DBMS_STATS.AUTO_INVALIDATE. to have Oracle decide when to invalidate dependent cursors. This is the default. The default can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="OBJ_FILTER_LIST">A list of object filters. When provided, GATHER_DATABASE_STATS will gather statistics only on objects which satisfy at least one object filter in the list as needed. In a single object filter, we can specify the constraints on the object attributes. The attribute values specified in the object filter are case- insensitive unless double-quoted. Wildcard is allowed in the attribute values. Suppose non-NULL values s1, s2, ... are specified for attributes a1, a2, ... in one object filter. An object o is said to satisfy this object filter if (o.a1 like s1) and (o.a2 like s2) and ... is true. See Applying an Object Filter List.</Parameter>
            <Parameter Name="DETAIL_LEVEL">Detail level for the content of the reportBASIC: The report includes- operation ID- operation name- operation target object- start time- end time- completion status (such as: succeeded, failed)TYPICAL: In addition to the information provided at level BASIC, the report includes individual target objects for which statistics are gathered in this operation. Specifically, with regard to operation related details:- total number of target objects- total number of successfully completed objects- total number of failed objects- total number of timed-out objects (applies to only auto statistics gathering)With regard to target objects:- owner and name of each target object- target object type (such as: table, index)- start time- end time- completion statusALL: In addition to the information provided at level TYPICAL, the report includes further information on each target object. Specifically, with regard to operation-related details:- job name- session ID- parameter values- error message if the operation failedWith regard to target objects:- job name- batching details- estimated cost- rank in the target list- columns for which histograms were collected- list of collected extended statistics (if any)- additional error details if the task has failed.Note that several fields (such as job name, estimated task cost) in the report are populated only when an operation is executed concurrently (CONCURRENT preference is turned on).</Parameter>
            <Parameter Name="FORMAT">Report format:XMLHTMLTEXT (Default)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REPORT_GATHER_DICTIONARY_STATS" ElementId="#BABEDECI">
          <Description>Runs the GATHER_DICTIONARY_STATS Procedure in reporting mode</Description>
          <Parameters>
            <Parameter Name="COMP_ID">Component id of the schema to analyze (NULL will result in analyzing schemas of all RDBMS components).Please refer to comp_id column of DBA_REGISTRY view. The procedure always gather statistics on 'SYS' and 'SYSTEM' schemas regardless of this argument.</Parameter>
            <Parameter Name="ESTIMATE_PERCENT">Percentage of rows to estimate (NULL means compute). The valid range is [0.000001,100]. Use the constant DBMS_STATS.AUTO_SAMPLE_SIZE to have Oracle determine the appropriate sample size for good statistics. This is the default.The default value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="BLOCK_SAMPLE">Determines whether or not to use random block sampling instead of random row sampling. Random block sampling is more efficient, but if the data is not randomly distributed on disk then the sample values may be somewhat correlated. Only pertinent when performing estimate statistics.</Parameter>
            <Parameter Name="METHOD_OPT">Accepts:FOR ALL [INDEXED | HIDDEN] COLUMNS [size_clause]size_clause is defined as size_clause := SIZE {integer | REPEAT | AUTO | SKEWONLY}The default is FOR ALL COLUMNS SIZE AUTO.The default value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="DEGREE">Degree of parallelism. The default for degree is NULL. The default value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure. NULL means use the table default value specified by the DEGREE clause in the CREATE TABLE or ALTER TABLE statement. Use the constant DBMS_STATS.DEFAULT_DEGREE to specify the default value based on the initialization parameters. The AUTO_DEGREE value determines the degree of parallelism automatically. This is between 1 (serial execution) and DEFAULT_DEGREE (the system default value based on number of CPUs and initialization parameters) according to the size of the object. When using DEGREE=&gt;NULL, DEGREE=&gt;n, or DEGREE=&gt;DBMS_STATS.DEFAULT_DEGREE, the current implementation of DBMS_STATS may use serial execution if the size of the object does not warrant parallel execution.</Parameter>
            <Parameter Name="GRANULARITY">Granularity of statistics to collect (only pertinent if the table is partitioned).'ALL' - Gathers all (subpartition, partition, and global) statistics'AUTO'- Determines the granularity based on the partitioning type. This is the default value.'DEFAULT' - Gathers global and partition-level statistics. This option is obsolete, and while currently supported, it is included in the documentation for legacy reasons only. You should use the 'GLOBAL AND PARTITION' for this functionality. Note that the default value is now 'AUTO'.'GLOBAL' - Gathers global statistics'GLOBAL AND PARTITION' - Gathers the global and partition level statistics. No subpartition level statistics are gathered even if it is a composite partitioned object.'PARTITION '- Gathers partition-level statistics'SUBPARTITION' - gathers subpartition-level statistics</Parameter>
            <Parameter Name="CASCADE">Gathers statistics on indexes also.Index statistics gathering will not be parallelized. Using this option is equivalent to running the GATHER_INDEX_STATS Procedure on each of the indexes in the schema in addition to gathering table and column statistics. Use the constant DBMS_STATS.AUTO_CASCADE to have Oracle determine whether index statistics to be collected or not. This is the default.The default value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="STATTAB">User statistics table identifier describing where to save the current statistics</Parameter>
            <Parameter Name="STATID">The (optional) identifier to associate with these statistics within stattab</Parameter>
            <Parameter Name="OPTIONS">Further specification of objects for which to gather statistics:'GATHER' - Gathers statistics on all objects in the schema'GATHER AUTO' - Gathers all necessary statistics automatically. Oracle implicitly determines which objects need new statistics and determines how to gather those statistics. When 'GATHER AUTO' is specified, the only additional valid parameters are comp_id, stattab, statid and statown; all other parameter settings will be ignored. Also, returns a list of objects processed.'GATHER STALE' - Gathers statistics on stale objects as determined by looking at the *_tab_modifications views. Also, returns a list of objects found to be stale.'GATHER EMPTY' - Gathers statistics on objects which currently have no statistics. Also, returns a list of objects found to have no statistics.'LIST AUTO' - Returns list of objects to be processed with 'GATHER AUTO''LIST STALE' - Returns list of stale objects as determined by looking at the *_tab_modifications views'LIST EMPTY' - Returns list of objects which currently have no statistics</Parameter>
            <Parameter Name="OBJLIST">The list of objects found to be stale or empty</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different from current schema)</Parameter>
            <Parameter Name="NO_INVALIDATE">Does not invalidate the dependent cursors if set to TRUE. The procedure invalidates the dependent cursors immediately if set to FALSE. Use DBMS_STATS.AUTO_INVALIDATE. to have Oracle decide when to invalidate dependent cursors. This is the default. The default can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="OBJ_FILTER_LIST">A list of object filters. When provided, this will gather statistics only on objects which satisfy at least one object filter in the list as needed. In a single object filter, we can specify the constraints on the object attributes. The attribute values specified in the object filter are case- insensitive unless double-quoted. Wildcard is allowed in the attribute values. Suppose non-NULL values s1, s2, ... are specified for attributes a1, a2, ... in one object filter. An object o is said to satisfy this object filter if (o.a1 like s1) and (o.a2 like s2) and ... is true.</Parameter>
            <Parameter Name="DETAIL_LEVEL">Detail level for the content of the reportBASIC: The report includes- operation ID- operation name- operation target object- start time- end time- completion status (such as: succeeded, failed)TYPICAL: In addition to the information provided at level BASIC, the report includes individual target objects for which statistics are gathered in this operation. Specifically, with regard to operation related details:- total number of target objects- total number of successfully completed objects- total number of failed objects- total number of timed-out objects (applies to only auto statistics gathering)With regard to target objects:- owner and name of each target object- target object type (such as: table, index)- start time- end time- completion statusALL: In addition to the information provided at level TYPICAL, the report includes further information on each target object. Specifically, with regard to operation-related details:- job name- session ID- parameter values- error message if the operation failedWith regard to target objects:- job name- batching details- estimated cost- rank in the target list- columns for which histograms were collected- list of collected extended statistics (if any)- additional error details if the task has failed.Note that several fields (such as job name, estimated task cost) in the report are populated only when an operation is executed concurrently (CONCURRENT preference is turned on).</Parameter>
            <Parameter Name="FORMAT">Report format:XMLHTMLTEXT (Default)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REPORT_GATHER_FIXED_OBJ_STATS" ElementId="#BABCAJGD">
          <Description>Runs the GATHER_FIXED_OBJECTS_STATS Procedure in reporting mode</Description>
          <Parameters>
            <Parameter Name="STATTAB">User statistics table identifier describing where to save the current statistics</Parameter>
            <Parameter Name="STATID">Identifier to associate with these statistics within stattab (optional)</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different from current schema)</Parameter>
            <Parameter Name="NO_INVALIDATE">Does not invalidate the dependent cursors if set to TRUE. The procedure invalidates the dependent cursors immediately if set to FALSE. Use DBMS_STATS.AUTO_INVALIDATE. to have Oracle decide when to invalidate dependent cursors. This is the default. The default can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="DETAIL_LEVEL">Detail level for the content of the reportBASIC: The report includes- operation ID- operation name- operation target object- start time- end time- completion status (such as: succeeded, failed)TYPICAL: In addition to the information provided at level BASIC, the report includes individual target objects for which statistics are gathered in this operation. Specifically, with regard to operation related details:- total number of target objects- total number of successfully completed objects- total number of failed objects- total number of timed-out objects (applies to only auto statistics gathering)With regard to target objects:- owner and name of each target object- target object type (such as: table, index)- start time- end time- completion statusALL: In addition to the information provided at level TYPICAL, the report includes further information on each target object. Specifically, with regard to operation-related details:- job name- session ID- parameter values- error message if the operation failedWith regard to target objects:- job name- batching details- estimated cost- rank in the target list- columns for which histograms were collected- list of collected extended statistics (if any)- additional error details if the task has failed.Note that several fields (such as job name, estimated task cost) in the report are populated only when an operation is executed concurrently (CONCURRENT preference is turned on).</Parameter>
            <Parameter Name="FORMAT">Report format:XMLHTMLTEXT (Default)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REPORT_GATHER_SCHEMA_STATS" ElementId="#BABFCCIG">
          <Description>Runs the GATHER_SCHEMA_STATS Procedures in reporting mode</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Schema to analyze (NULL means current schema)</Parameter>
            <Parameter Name="ESTIMATE_PERCENT">Percentage of rows to estimate (NULL means compute): The valid range is [0.000001,100]. Use the constant DBMS_STATS.AUTO_SAMPLE_SIZE to have Oracle determine the appropriate sample size for good statistics. This is the default.The default value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="BLOCK_SAMPLE">Whether or not to use random block sampling instead of random row sampling. Random block sampling is more efficient, but if the data is not randomly distributed on disk, then the sample values may be somewhat correlated. Only pertinent when doing an estimate statistics.</Parameter>
            <Parameter Name="METHOD_OPT">Accepts:FOR ALL [INDEXED | HIDDEN] COLUMNS [size_clause]size_clause is defined as size_clause := SIZE {integer | REPEAT | AUTO | SKEWONLY}The default is FOR ALL COLUMNS SIZE AUTO.The default value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="DEGREE">Degree of parallelism. The default for degree is NULL. The default value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure. NULL means use the table default value specified by the DEGREE clause in the CREATE TABLE or ALTER TABLE statement. Use the constant DBMS_STATS.DEFAULT_DEGREE to specify the default value based on the initialization parameters. The AUTO_DEGREE value determines the degree of parallelism automatically. This is between 1 (serial execution) and DEFAULT_DEGREE (the system default value based on number of CPUs and initialization parameters) according to the size of the object. When using DEGREE=&gt;NULL, DEGREE=&gt;n, or DEGREE=&gt;DBMS_STATS.DEFAULT_DEGREE, the current implementation of DBMS_STATS may use serial execution if the size of the object does not warrant parallel execution.</Parameter>
            <Parameter Name="GRANULARITY">Granularity of statistics to collect (only pertinent if the table is partitioned).'ALL' - Gathers all (subpartition, partition, and global) statistics'AUTO'- Determines the granularity based on the partitioning type. This is the default value.'DEFAULT' - Gathers global and partition-level statistics. This option is obsolete, and while currently supported, it is included in the documentation for legacy reasons only. You should use the 'GLOBAL AND PARTITION' for this functionality. Note that the default value is now 'AUTO'.'GLOBAL' - Gathers global statistics'GLOBAL AND PARTITION' - Gathers the global and partition level statistics. No subpartition level statistics are gathered even if it is a composite partitioned object.'PARTITION '- Gathers partition-level statistics'SUBPARTITION' - Gathers subpartition-level statistics.</Parameter>
            <Parameter Name="CASCADE">Gather statistics on the indexes as well. Using this option is equivalent to running the GATHER_INDEX_STATS Procedure on each of the indexes in the schema in addition to gathering table and column statistics. Use the constant DBMS_STATS.AUTO_CASCADE to have Oracle determine whether index statistics to be collected or not. This is the default. The default value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="STATTAB">User statistics table identifier describing where to save the current statistics</Parameter>
            <Parameter Name="STATID">Identifier (optional) to associate with these statistics within stattab</Parameter>
            <Parameter Name="OPTIONS">Further specification of which objects to gather statistics for:GATHER: Gathers statistics on all objects in the schema.GATHER AUTO: Gathers all necessary statistics automatically. Oracle implicitly determines which objects need new statistics, and determines how to gather those statistics. When GATHER AUTO is specified, the only additional valid parameters are ownname, stattab, statid, objlist and statown; all other parameter settings are ignored. Returns a list of processed objects.GATHER STALE: Gathers statistics on stale objects as determined by looking at the *_tab_modifications views. Also, return a list of objects found to be stale.GATHER EMPTY: Gathers statistics on objects which currently have no statistics. also, return a list of objects found to have no statistics.LIST AUTO: Returns a list of objects to be processed with GATHER AUTO.LIST STALE: Returns list of stale objects as determined by looking at the *_tab_modifications views.LIST EMPTY: Returns list of objects which currently have no statistics.</Parameter>
            <Parameter Name="OBJLIST">List of objects found to be stale or empty</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different than ownname)</Parameter>
            <Parameter Name="NO_INVALIDATE">Does not invalidate the dependent cursors if set to TRUE. The procedure invalidates the dependent cursors immediately if set to FALSE. Use DBMS_STATS.AUTO_INVALIDATE. to have Oracle decide when to invalidate dependent cursors. This is the default. The default can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="FORCE">Gather statistics on objects even if they are locked</Parameter>
            <Parameter Name="OBJ_FILTER_LIST">A list of object filters. When provided, GATHER_SCHEMA_STATS will gather statistics only on objects which satisfy at least one object filter in the list as needed. In a single object filter, we can specify the constraints on the object attributes. The attribute values specified in the object filter are case- insensitive unless double-quoted. Wildcard is allowed in the attribute values. Suppose non-NULL values s1, s2, ... are specified for attributes a1, a2, ... in one object filter. An object o is said to satisfy this object filter if (o.a1 like s1) and (o.a2 like s2) and ... is true. See Applying an Object Filter List.</Parameter>
            <Parameter Name="DETAIL_LEVEL">Detail level for the content of the reportBASIC: The report includes- operation ID- operation name- operation target object- start time- end time- completion status (such as: succeeded, failed)TYPICAL: In addition to the information provided at level BASIC, the report includes individual target objects for which statistics are gathered in this operation. Specifically, with regard to operation related details:- total number of target objects- total number of successfully completed objects- total number of failed objects- total number of timed-out objects (applies to only auto statistics gathering)With regard to target objects:- owner and name of each target object- target object type (such as: table, index)- start time- end time- completion statusALL: In addition to the information provided at level TYPICAL, the report includes further information on each target object. Specifically, with regard to operation-related details:- job name- session ID- parameter values- error message if the operation failedWith regard to target objects:- job name- batching details- estimated cost- rank in the target list- columns for which histograms were collected- list of collected extended statistics (if any)- additional error details if the task has failed.Note that several fields (such as job name, estimated task cost) in the report are populated only when an operation is executed concurrently (CONCURRENT preference is turned on).</Parameter>
            <Parameter Name="FORMAT">Report format:XMLHTMLTEXT (Default)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REPORT_GATHER_TABLE_STATS" ElementId="#BABFHCEC">
          <Description>Runs the GATHER_TABLE_STATS Procedure in reporting mode</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Schema of table to analyze</Parameter>
            <Parameter Name="TABNAME">Name of table</Parameter>
            <Parameter Name="PARTNAME">Name of partition</Parameter>
            <Parameter Name="ESTIMATE_PERCENT">Percentage of rows to estimate (NULL means compute) The valid range is [0.000001,100]. Use the constant DBMS_STATS.AUTO_SAMPLE_SIZE to have Oracle determine the appropriate sample size for good statistics. This is the default.The default value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="BLOCK_SAMPLE">Whether or not to use random block sampling instead of random row sampling. Random block sampling is more efficient, but if the data is not randomly distributed on disk, then the sample values may be somewhat correlated. Only pertinent when doing an estimate statistics.</Parameter>
            <Parameter Name="METHOD_OPT">Accepts either of the following options, or both in combination:FOR ALL [INDEXED | HIDDEN] COLUMNS [size_clause]FOR COLUMNS [column_clause] [size_clause]size_clause is defined as size_clause := SIZE {integer | REPEAT | AUTO | SKEWONLY}column_clause is defined as column_clause := column_name | extension name | extensionThe default is FOR ALL COLUMNS SIZE AUTO. The default value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="DEGREE">Degree of parallelism. The default for degree is NULL. The default value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure. NULL means use the table default value specified by the DEGREE clause in the CREATE TABLE or ALTER TABLE statement. Use the constant DBMS_STATS.DEFAULT_DEGREE to specify the default value based on the initialization parameters. The AUTO_DEGREE value determines the degree of parallelism automatically. This is between 1 (serial execution) and DEFAULT_DEGREE (the system default value based on number of CPUs and initialization parameters) according to the size of the object. When using DEGREE=&gt;NULL, DEGREE=&gt;n, or DEGREE=&gt;DBMS_STATS.DEFAULT_DEGREE, the current implementation of DBMS_STATS may use serial execution if the size of the object does not warrant parallel execution.</Parameter>
            <Parameter Name="GRANULARITY">Granularity of statistics to collect (only pertinent if the table is partitioned).'ALL' - Gathers all (subpartition, partition, and global) statistics'APPROX_GLOBAL AND PARTITION' - similar to 'GLOBAL AND PARTITION' but in this case the global statistics are aggregated from partition level statistics. This option will aggregate all statistics except the number of distinct values for columns and number of distinct keys of indexes. The existing histograms of the columns at the table level are also aggregated.The aggregation will use only partitions with statistics, so to get accurate global statistics, users should make sure to have statistics for all partitions. Global statistics are gathered if partname is NULL or if the aggregation cannot be performed (for example, if statistics for one of the partitions is missing).'AUTO'- Determines the granularity based on the partitioning type. This is the default value.'DEFAULT' - Gathers global and partition-level statistics. This option is obsolete, and while currently supported, it is included in the documentation for legacy reasons only. You should use the 'GLOBAL AND PARTITION' for this functionality. Note that the default value is now 'AUTO'.'GLOBAL' - Gathers global statistics'GLOBAL AND PARTITION' - Gathers the global and partition level statistics. No subpartition level statistics are gathered even if it is a composite partitioned object.'PARTITION '- Gathers partition-level statistics'SUBPARTITION' - Gathers subpartition-level statistics.</Parameter>
            <Parameter Name="CASCADE">Gathers statistics on the indexes for this table. Using this option is equivalent to running the GATHER_INDEX_STATS Procedure on each of the table's indexes. Use the constant DBMS_STATS.AUTO_CASCADE to have Oracle determine whether index statistics are to be collected or not. This is the default. The default value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="STATTAB">User statistics table identifier describing where to save the current statistics</Parameter>
            <Parameter Name="STATID">Identifier (optional) to associate with these statistics within stattab</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different than ownname)</Parameter>
            <Parameter Name="NO_INVALIDATE">Does not invalidate the dependent cursors if set to TRUE. The procedure invalidates the dependent cursors immediately if set to FALSE. Use DBMS_STATS.AUTO_INVALIDATE. to have Oracle decide when to invalidate dependent cursors. This is the default. The default can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="STATTYPE">Statistics type. The only value allowed is DATA.</Parameter>
            <Parameter Name="FORCE">Gather statistics of table even if it is locked</Parameter>
            <Parameter Name="DETAIL_LEVEL">Detail level for the content of the reportBASIC: The report includes- operation ID- operation name- operation target object- start time- end time- completion status (such as: succeeded, failed)TYPICAL: In addition to the information provided at level BASIC, the report includes individual target objects for which statistics are gathered in this operation. Specifically, with regard to operation related details:- total number of target objects- total number of successfully completed objects- total number of failed objects- total number of timed-out objects (applies to only auto statistics gathering)With regard to target objects:- owner and name of each target object- target object type (such as: table, index)- start time- end time- completion statusALL: In addition to the information provided at level TYPICAL, the report includes further information on each target object. Specifically, with regard to operation-related details:- job name- session ID- parameter values- error message if the operation failedWith regard to target objects:- job name- batching details- estimated cost- rank in the target list- columns for which histograms were collected- list of collected extended statistics (if any)- additional error details if the task has failed.Note that several fields (such as job name, estimated task cost) in the report are populated only when an operation is executed concurrently (CONCURRENT preference is turned on).</Parameter>
            <Parameter Name="FORMAT">Report format:XMLHTMLTEXT (Default)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REPORT_SINGLE_STATS_OPERATION" ElementId="#BABJDEBB">
          <Description>Generates a report for the provided operation optionally in a particular pluggable database (PDB) in a multitenant environment</Description>
          <Parameters>
            <Parameter Name="OPID">Operation ID</Parameter>
            <Parameter Name="DETAIL_LEVEL">Detail level for the content of the reportBASIC: The report includes- operation ID- operation name- operation target object- start time- end time- completion status (such as: succeeded, failed)TYPICAL: In addition to the information provided at level BASIC, the report includes individual target objects for which statistics are gathered in this operation. Specifically, with regard to operation related details:- total number of target objects- total number of successfully completed objects- total number of failed objects- total number of timed-out objects (applies to only auto statistics gathering)With regard to target objects:- owner and name of each target object- target object type (such as: table, index)- start time- end time- completion statusALL: In addition to the information provided at level TYPICAL, the report includes further information on each target object. Specifically, with regard to operation-related details:- job name- session ID- parameter values- error message if the operation failedWith regard to target objects:- job name- batching details- estimated cost- rank in the target list- columns for which histograms were collected- list of collected extended statistics (if any)- reason for including the object in the target list (applies to only automatic statistics gathering operation tasks)- additional error details if the task has failed.Note that several fields (such as job name, estimated task cost) in the report are populated only when an operation is executed concurrently (CONCURRENT preference is turned on).</Parameter>
            <Parameter Name="FORMAT">Report format:XMLHTMLTEXT (Default)</Parameter>
            <Parameter Name="CONTAINER_ID">ID of the pluggable database (PDB) on which this operation was performed. Note that in a multitenant environment, operation ID does not uniquely identify an operation. That is, different operations from distinct PDBs may have the same operation ID. Hence, in a multitenant environment, if a PDB ID is not provided, then the report may contain multiple operations. In a typical (non-CDB) database environment, operation ID is unique to each operation.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REPORT_STATS_OPERATIONS" ElementId="#BABFABBC">
          <Description>Generates a report of all statistics operations that take place between two timestamps which may or may not have been provided</Description>
          <Parameters>
            <Parameter Name="DETAIL_LEVEL">Detail level for the content of the reportBASIC: The report includes- operation ID- operation name- operation target object- start time- end time- completion status (such as: succeeded, failed)TYPICAL: In addition to the information provided at level BASIC, the report includes individual target objects for which statistics are gathered in this operation. Specifically, with regard to operation related details:- total number of target objects- total number of successfully completed objects- total number of failed objects- total number of timed -out objects (applies to only auto statistics gathering)ALL: In addition to the information provided at level TYPICAL, the report includes further information on each target object. Specifically, with regard to operation-related details:- job name (if the operation was run in a job)- session ID- parameter values- additional error details if the operation has failed</Parameter>
            <Parameter Name="FORMAT">Report format:XMLHTMLTEXT (Default)</Parameter>
            <Parameter Name="LATESTN">Restricts the report to contain only the latest N operations that took place between the provided time points (since and until). The default value is NULL, meaning that all qualifying operations will be reported.</Parameter>
            <Parameter Name="SINCE">The report will include only statistics operations that started after this timestamp.</Parameter>
            <Parameter Name="UNTIL">The report will include only statistics operations that before after this timestamp.</Parameter>
            <Parameter Name="AUTO_ONLY">When TRUE, the report will contain only auto statistics gathering job runs.</Parameter>
            <Parameter Name="CONTAINER_IDS">A multitenant environment contains one or more pluggable databases (PDBs). container_ids represents a set of PDB IDs so that only statistics operations from the specified PDBs are reported (applies to only multitenant environments).</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RESET_GLOBAL_PREF_DEFAULTS" ElementId="#i1047505">
          <Description>Resets the default values of all parameters to Oracle recommended values</Description>
        </SubProgram>
        <SubProgram Name="RESET_PARAM_DEFAULTS" ElementId="#BABGHFFF">
          <Description>Resets global preferences to default values [see Deprecated Subprograms ]</Description>
        </SubProgram>
        <SubProgram Name="RESTORE_DICTIONARY_STATS" ElementId="#i1047724">
          <Description>Restores statistics of all dictionary tables (tables of 'SYS', 'SYSTEM' and RDBMS component schemas) as of a specified timestamp</Description>
          <Parameters>
            <Parameter Name="AS_OF_TIMESTAMP">Timestamp to which to restore statistics</Parameter>
            <Parameter Name="FORCE">Restores statistics even if their statistics are locked</Parameter>
            <Parameter Name="NO_INVALIDATE">Does not invalidate the dependent cursors if set to TRUE. The procedure invalidates the dependent cursors immediately if set to FALSE. Use DBMS_STATS.AUTO_INVALIDATE. to have Oracle decide when to invalidate dependent cursors. This is the default. The default can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RESTORE_FIXED_OBJECTS_STATS" ElementId="#i1047603">
          <Description>Restores statistics of all fixed tables as of a specified timestamp</Description>
          <Parameters>
            <Parameter Name="AS_OF_TIMESTAMP">The timestamp to which to restore statistics</Parameter>
            <Parameter Name="FORCE">Restores statistics even if their statistics are locked</Parameter>
            <Parameter Name="NO_INVALIDATE">Does not invalidate the dependent cursors if set to TRUE. The procedure invalidates the dependent cursors immediately if set to FALSE. Use DBMS_STATS.AUTO_INVALIDATE. to have Oracle decide when to invalidate dependent cursors. This is the default. The default can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RESTORE_SCHEMA_STATS" ElementId="#i1047376">
          <Description>Restores statistics of all tables of a schema as of a specified timestamp</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Schema of the tables for which the statistics are to be restored</Parameter>
            <Parameter Name="AS_OF_TIMESTAMP">The timestamp to which to restore statistics</Parameter>
            <Parameter Name="FORCE">Restores statistics even if their statistics are locked</Parameter>
            <Parameter Name="NO_INVALIDATE">Does not invalidate the dependent cursors if set to TRUE. The procedure invalidates the dependent cursors immediately if set to FALSE. Use DBMS_STATS.AUTO_INVALIDATE. to have Oracle decide when to invalidate dependent cursors. This is the default. The default can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RESTORE_SYSTEM_STATS" ElementId="#i1049804">
          <Description>Restores statistics of all tables of a schema as of a specified timestamp</Description>
          <Parameters>
            <Parameter Name="AS_OF_TIMESTAMP">The timestamp to which to restore statistics</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RESTORE_TABLE_STATS" ElementId="#i1046561">
          <Description>Restores statistics of a table as of a specified timestamp (as_of_timestamp), as well as statistics of associated indexes and columns</Description>
          <Parameters>
            <Parameter Name="OWNNAME">The schema of the table for which the statistics are to be restored</Parameter>
            <Parameter Name="TABNAME">The table name</Parameter>
            <Parameter Name="AS_OF_TIMESTAMP">The timestamp to which to restore statistics</Parameter>
            <Parameter Name="RESTORE_CLUSTER_INDEX">If the table is part of a cluster, restore statistics of the cluster index if set to TRUE</Parameter>
            <Parameter Name="FORCE">Restores statistics even if the table statistics are locked. If the table statistics were not locked at the specified timestamp, it unlocks the statistics.</Parameter>
            <Parameter Name="NO_INVALIDATE">Does not invalidate the dependent cursors if set to TRUE. The procedure invalidates the dependent cursors immediately if set to FALSE. Use DBMS_STATS.AUTO_INVALIDATE. to have Oracle decide when to invalidate dependent cursors. This is the default. The default can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SEED_COL_USAGE" ElementId="#i997460">
          <Description>Iterates over the SQL statements in the specified SQL tuning set, compiles them and seeds column usage information for the columns that appear in these statements</Description>
          <Parameters>
            <Parameter Name="SQLSET_NAME">Name of the SQL tuning set</Parameter>
            <Parameter Name="OWNER_NAME">Owner of the SQL tuning set</Parameter>
            <Parameter Name="TIME_LIMIT">Time limit (in seconds)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_COLUMN_STATS" ElementId="#CHDHGCED">
          <Description>Sets column-related information</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Name of the schema.</Parameter>
            <Parameter Name="TABNAME">Name of the table to which this column belongs.</Parameter>
            <Parameter Name="COLNAME">Name of the column or extension</Parameter>
            <Parameter Name="PARTNAME">Name of the table partition in which to store the statistics. If the table is partitioned and partname is NULL, then the statistics are stored at the global table level.</Parameter>
            <Parameter Name="STATTAB">User statistics table identifier describing where to store the statistics. If stattab is NULL, then the statistics are stored directly in the dictionary.</Parameter>
            <Parameter Name="STATID">Identifier (optional) to associate with these statistics within stattab (Only pertinent if stattab is not NULL)</Parameter>
            <Parameter Name="EXT_STATS">User-defined statistics</Parameter>
            <Parameter Name="STATTYPOWN">Schema of the statistics type</Parameter>
            <Parameter Name="STATTYPNAME">Name of the statistics type</Parameter>
            <Parameter Name="DISTCNT">Number of distinct values</Parameter>
            <Parameter Name="DENSITY">Column density. If this value is NULL and if distcnt is not NULL, then density is derived from distcnt.</Parameter>
            <Parameter Name="NULLCNT">Number of NULLs</Parameter>
            <Parameter Name="SREC">StatRec structure filled in by a call to PREPARE_COLUMN_VALUES or GET_COLUMN_STATS</Parameter>
            <Parameter Name="AVGCLEN">Average length for the column (in bytes)</Parameter>
            <Parameter Name="FLAGS">For internal Oracle use (should be left as NULL)</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different than ownname)</Parameter>
            <Parameter Name="NO_INVALIDATE">Does not invalidate the dependent cursors if set to TRUE. The procedure invalidates the dependent cursors immediately if set to FALSE. Use DBMS_STATS.AUTO_INVALIDATE. to have Oracle decide when to invalidate dependent cursors. This is the default. The default can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="FORCE">Sets the values even if statistics of the column are locked</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_DATABASE_PREFS" ElementId="#BEIICAFD">
          <Description>Sets the statistics preferences of all the tables</Description>
          <Parameters>
            <Parameter Name="PNAME">Preference name. The existing value for following preferences can be deleted and default preference values will be used:CASCADEDEGREEESTIMATE_PERCENTMETHOD_OPTNO_INVALIDATEGRANULARITYPUBLISHINCREMENTALINCREMENTAL_STALENESSINCREMENTAL_LEVELSTALE_PERCENTGLOBAL_TEMP_TABLE_STATSTABLE_CACHED_BLOCKSOPTIONS</Parameter>
            <Parameter Name="METHOD_OPT">When setting preference on global, schema, database or dictionary level, only'FOR ALL' syntax is allowed.:FOR ALL [INDEXED | HIDDEN] COLUMNS [size_clause]size_clause is defined as size_clause := SIZE {integer | REPEAT | AUTO | SKEWONLY}The default is FOR ALL COLUMNS SIZE AUTO.The value can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="PVALUE">Preference value. If NULL is specified, it will set the Oracle default value.s</Parameter>
            <Parameter Name="ADD_SYS">Value TRUE will include the Oracle-owned tables</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_GLOBAL_PREFS" ElementId="#BEIEAFDF">
          <Description>Sets the global statistics preferences</Description>
          <Parameters>
            <Parameter Name="PNAME">Preference name. The default value for the following preferences can be set:AUTOSTATS_TARGETCASCADECONCURRENTDEGREEESTIMATE_PERCENTGLOBAL_TEMP_TABLE_STATSGRANULARITYINCREMENTALINCREMENTAL_LEVELINCREMENTAL_STALENESSMETHOD_OPTNO_INVALIDATEPUBLISHSTALE_PERCENTTABLE_CACHED_BLOCKSOPTIONS</Parameter>
            <Parameter Name="PVALUE">Preference value. If NULL is specified, it will set the Oracle default value.s</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_INDEX_STATS" ElementId="#i997579">
          <Description>Sets index-related information</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Name of the schema</Parameter>
            <Parameter Name="INDNAME">Name of the index</Parameter>
            <Parameter Name="PARTNAME">Name of the index partition in which to store the statistics. If the index is partitioned and if partname is NULL, then the statistics are stored at the global index level.</Parameter>
            <Parameter Name="STATTAB">User statistics table identifier describing where to store the statistics. If stattab is NULL, then the statistics are stored directly in the dictionary.</Parameter>
            <Parameter Name="STATID">Identifier (optional) to associate with these statistics within stattab (Only pertinent if stattab is not NULL)</Parameter>
            <Parameter Name="EXT_STATS">User-defined statistics</Parameter>
            <Parameter Name="STATTYPOWN">Schema of the statistics type</Parameter>
            <Parameter Name="STATTYPNAME">Name of the statistics type</Parameter>
            <Parameter Name="NUMROWS">Number of rows in the index (partition)</Parameter>
            <Parameter Name="NUMLBLKS">Number of leaf blocks in the index (partition)</Parameter>
            <Parameter Name="NUMDIST">Number of distinct keys in the index (partition)</Parameter>
            <Parameter Name="AVGLBLK">Average integral number of leaf blocks in which each distinct key appears for this index (partition). If not provided, then this value is derived from numlblks and numdist.</Parameter>
            <Parameter Name="AVGDBLK">Average integral number of data blocks in the table pointed to by a distinct key for this index (partition). If not provided, then this value is derived from clstfct and numdist.</Parameter>
            <Parameter Name="CLSTFCT">See clustering_factor column of the all_indexes view for a description</Parameter>
            <Parameter Name="INDLEVEL">Height of the index (partition)</Parameter>
            <Parameter Name="FLAGS">For internal Oracle use (should be left as NULL)</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different than ownname)</Parameter>
            <Parameter Name="NO_INVALIDATE">Does not invalidate the dependent cursors if set to TRUE. The procedure invalidates the dependent cursors immediately if set to FALSE. Use DBMS_STATS.AUTO_INVALIDATE. to have Oracle decide when to invalidate dependent cursors. This is the default. The default can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="GUESSQ">Guess quality. See the pct_direct_access column of the all_indexes view for a description.</Parameter>
            <Parameter Name="CACHEDBLK">The average number of blocks in the buffer cache for the segment (index/table/index partition/table partition)</Parameter>
            <Parameter Name="CACHEHIT">The average cache hit ratio for the segment (index/table/index partition/table partition)</Parameter>
            <Parameter Name="FORCE">Sets the values even if statistics of the index are locked</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_PARAM" ElementId="#i1048566">
          <Description>Sets default values for parameters of DBMS_STATS procedures [see Deprecated Subprograms ]</Description>
          <Parameters>
            <Parameter Name="PNAME">The parameter name The default value for following parameters can be set.CASCADE - The default value for CASCADE set by SET_PARAM is not used by export/import procedures.It is used only by gather procedures.DEGREEESTIMATE_PERCENTMETHOD_OPTNO_INVALIDATEGRANULARITYAUTOSTATS_TARGET - This parameter is applicable only for auto statistics collection. The value of this parameter controls the objects considered for statistics collection (see pval)</Parameter>
            <Parameter Name="PVAL">The parameter value. If NULL is specified, it will set the default value determined by Oracle. When pname is AUTOSTATS_TARGET, the following are valid values:'ALL' - Statistics are collected for all objects in the system'ORACLE' - Statistics are collected for all Oracle owned objects'AUTO' - Oracle decides for which objects to collect statistics</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_PROCESSING_RATE" ElementId="#BABHFFDA">
          <Description>Sets the value of rate of processing for a given operation</Description>
          <Parameters>
            <Parameter Name="OPNAME">Name of the operation</Parameter>
            <Parameter Name="PROCRATE">Processing rate. Valid values are as follows: ALL, CPU, CPU_ACCESS, CPU_AGGR, CPU_BYTES_PER_SEC, CPU_FILTER, CPU_GBY, CPU_HASH_JOIN, CPU_JOIN, CPU_NL_JOIN, CPU_RANDOM_ACCESS, CPU_SEQUENTIAL_ACCESS, CPU_SM_JOIN, CPU_SORT, IO, IO_ACCESS, IO_BYTES_PER_SEC, IO_RANDOM_ACCESS, IO_SEQUENTIAL_ACCESS, HASH, AGGR, MEMCMP, MEMCPY</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_SCHEMA_PREFS" ElementId="#BEIDJHAH">
          <Description>Sets the statistics preferences of all the tables owned by the specified owner name</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Owner name</Parameter>
            <Parameter Name="PNAME">Preference name. The default value for the following preferences can be set:CASCADEDEGREEESTIMATE_PERCENTGLOBAL_TEMP_TABLE_STATSGRANULARITYINCREMENTALINCREMENTAL_LEVELINCREMENTAL_STALENESSMETHOD_OPTNO_INVALIDATEPUBLISHSTALE_PERCENTTABLE_CACHED_BLOCKSOPTIONS</Parameter>
            <Parameter Name="PVALUE">Preference value. If NULL is specified, it will set the Oracle default value.s</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_SYSTEM_STATS" ElementId="#i997707">
          <Description>Sets system statistics</Description>
          <Parameters>
            <Parameter Name="PNAME">The parameter name to get, which can have one of the following values:iotfrspeed—I/O transfer speed in bytes for each millisecondioseektim - Seek time + latency time + operating system overhead time, in millisecondssreadtim - Average time to read single block (random read), in millisecondsmreadtim - Average time to read an mbrc block at once (sequential read), in millisecondscpuspeed - Average number of CPU cycles for each second, in millions, captured for the workload (statistics collected using 'INTERVAL' or 'START' and 'STOP' options)cpuspeednw - Average number of CPU cycles for each second, in millions, captured for the no-workload (statistics collected using 'NOWORKLOAD' option.mbrc - Average multiblock read count for sequential read, in blocksmaxthr - Maximum I/O system throughput, in bytes/secondslavethr - Average slave I/O throughput, in bytes/second</Parameter>
            <Parameter Name="PVALUE">Parameter value to get</Parameter>
            <Parameter Name="STATTAB">Identifier of the user statistics table where the statistics will be obtained. If stattab is null, the statistics will be obtained from the dictionary.</Parameter>
            <Parameter Name="STATID">Optional identifier associated with the statistics saved in the stattab</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different from current schema)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_TABLE_PREFS" ElementId="#BEIBJJHC">
          <Description>Sets the statistics preferences of the specified table in the specified schema</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Owner name</Parameter>
            <Parameter Name="TABNAME">Table name</Parameter>
            <Parameter Name="PNAME">Preference name. The default value for following preferences can be set:CASCADEDEGREEESTIMATE_PERCENTGRANULARITYINCREMENTALINCREMENTAL_LEVELINCREMENTAL_STALENESSMETHOD_OPTNO_INVALIDATEPUBLISHSTALE_PERCENTTABLE_CACHED_BLOCKSOPTIONS</Parameter>
            <Parameter Name="PVALUE">Preference value. If NULL is specified, it will set the Oracle default value.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_TABLE_STATS" ElementId="#i997763">
          <Description>Sets table-related information</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Name of the schema</Parameter>
            <Parameter Name="TABNAME">Name of the table</Parameter>
            <Parameter Name="PARTNAME">Name of the table partition in which to store the statistics. If the table is partitioned and partname is NULL, then the statistics are stored at the global table level.</Parameter>
            <Parameter Name="STATTAB">User statistics table identifier describing where to store the statistics. If stattab is NULL, then the statistics are stored directly in the dictionary.</Parameter>
            <Parameter Name="STATID">Identifier (optional) to associate with these statistics within stattab (Only pertinent if stattab is not NULL)</Parameter>
            <Parameter Name="NUMROWS">Number of rows in the table (partition)</Parameter>
            <Parameter Name="NUMBLKS">Number of blocks the table (partition) occupies</Parameter>
            <Parameter Name="AVGRLEN">Average row length for the table (partition)</Parameter>
            <Parameter Name="FLAGS">For internal Oracle use (should be left as NULL)</Parameter>
            <Parameter Name="STATOWN">Schema containing stattab (if different than ownname)</Parameter>
            <Parameter Name="NO_INVALIDATE">Does not invalidate the dependent cursors if set to TRUE. The procedure invalidates the dependent cursors immediately if set to FALSE. Use DBMS_STATS.AUTO_INVALIDATE. to have Oracle decide when to invalidate dependent cursors. This is the default. The default can be changed using the SET_DATABASE_PREFS Procedure, SET_GLOBAL_PREFS Procedure, SET_SCHEMA_PREFS Procedure and SET_TABLE_PREFS Procedure.</Parameter>
            <Parameter Name="CACHEDBLK">The average number of blocks in the buffer cache for the segment (index/table/index partition/table partition)</Parameter>
            <Parameter Name="CACHEHIT">The average cache hit ratio for the segment (index/table/index partition/table partition)</Parameter>
            <Parameter Name="FORCE">Sets the values even if statistics of the table are locked</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SHOW_EXTENDED_STATS_NAME" ElementId="#BABCIFCJ">
          <Description>Returns the name of the virtual column that is created for the user-specified extension</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Owner name of a table</Parameter>
            <Parameter Name="TABNAME">Name of the table</Parameter>
            <Parameter Name="EXTENSION">Can be either a column group or an expression. Suppose the specified table has two column c1, c2. An example column group can be "(c1, c2)" and an example expression can be "(c1 + c2)".</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="TRANSFER_STATS" ElementId="#BABJIHBH">
          <Description>Transfers statistics for specified table(s) from a remote database specified by dblink to the local database</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Owner name of a table. If NULL all schemas in the database. If NULL, the procedure will transfer global preferences as well.</Parameter>
            <Parameter Name="TABNAME">Name of the table. If NULL, all tables in OWNNAME.</Parameter>
            <Parameter Name="DBLINK">Database link name</Parameter>
            <Parameter Name="OPTIONS">By default the procedure does not transfer the global preferences. Specifying ADD_GLOBAL_PREFS copies global preferences.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UNLOCK_PARTITION_STATS" ElementId="#BABDDHJI">
          <Description>Unlocks the statistics for a partition</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Name of the schema to unlock</Parameter>
            <Parameter Name="TABNAME">Name of the table</Parameter>
            <Parameter Name="PARTNAME">[Sub]Partition name</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UNLOCK_SCHEMA_STATS" ElementId="#i1043314">
          <Description>Unlocks the statistics on all the tables in schema</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Name of the schema</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UNLOCK_TABLE_STATS" ElementId="#i1040393">
          <Description>Unlocks the statistics on the table</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Name of the schema</Parameter>
            <Parameter Name="TABNAME">Name of the table</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UPGRADE_STAT_TABLE" ElementId="#i1039960">
          <Description>Upgrades user statistics on an older table</Description>
          <Parameters>
            <Parameter Name="OWNNAME">Name of the schema</Parameter>
            <Parameter Name="STATTAB">Name of the table</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_STORAGE_MAP" Url="http://docs.oracle.com/database/121/ARPLS/d_stmap.htm">
      <Description>With the DBMS_STORAGE_MAP package, you can communicate with the Oracle background process FMON to invoke mapping operations that populate mapping views. FMON communicates with operating and storage system vendor-supplied mapping libraries.</Description>
      <SubPrograms>
        <SubProgram Name="DROP_ALL" ElementId="#i1000132">
          <Description>Drops all mapping information in the shared memory of the instance</Description>
          <Parameters>
            <Parameter Name="DICTIONARY_UPDATE">If TRUE, mapping information in the data dictionary is updated to reflect the changes. The default value is TRUE; dictionary_update is an overloaded argument.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_ELEMENT" ElementId="#i1000160">
          <Description>Drops the mapping information for the element defined by elemname</Description>
          <Parameters>
            <Parameter Name="ELEMNAME">The element for which mapping information is dropped.</Parameter>
            <Parameter Name="CASCADE">If TRUE, then DROP_ELEMENT is invoked recursively on all elements of the DAG defined by elemname, if possible.</Parameter>
            <Parameter Name="DICTIONARY_UPDATE">If TRUE, mapping information in the data dictionary is updated to reflect the changes. The default value is TRUE; dictionary_update is an overloaded argument.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_FILE" ElementId="#i1000190">
          <Description>Drops the file mapping information defined by filename</Description>
          <Parameters>
            <Parameter Name="FILENAME">The file for which file mapping information is dropped.</Parameter>
            <Parameter Name="CASCADE">If TRUE, then the mapping DAGs for the elements where the file resides are also dropped, if possible.</Parameter>
            <Parameter Name="DICTIONARY_UPDATE">If TRUE, mapping information in the data dictionary is updated to reflect the changes. The default value is TRUE; dictionary_update is an overloaded argument.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LOCK_MAP" ElementId="#i1000268">
          <Description>Locks the mapping information in the shared memory of the instance</Description>
        </SubProgram>
        <SubProgram Name="MAP_ALL" ElementId="#i1000295">
          <Description>Builds the entire mapping information for all types of Oracle files (except archive logs), including all directed acyclic graph (DAG) elements</Description>
          <Parameters>
            <Parameter Name="MAX_NUM_FILEEXT">Defines the maximum number of file extents to be mapped. This limits the amount of memory used when mapping file extents. The default value is 100; max_num_fileextent is an overloaded argument.</Parameter>
            <Parameter Name="DICTIONARY_UPDATE">If TRUE, mapping information in the data dictionary is updated to reflect the changes. The default value is TRUE; dictionary_update is an overloaded argument.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MAP_ELEMENT" ElementId="#i1000343">
          <Description>Builds mapping information for the element identified by elemname</Description>
          <Parameters>
            <Parameter Name="ELEMNAME">The element for which mapping information is built.</Parameter>
            <Parameter Name="CASCADE">If TRUE, all elements within the elemname I/O stack DAG are mapped.</Parameter>
            <Parameter Name="DICTIONARY_UPDATE">If TRUE, mapping information in the data dictionary is updated to reflect the changes. The default value is TRUE; dictionary_update is an overloaded argument.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MAP_FILE" ElementId="#CEGJFABB">
          <Description>Builds mapping information for the file identified by filename</Description>
          <Parameters>
            <Parameter Name="FILENAME">The file for which mapping information is built.</Parameter>
            <Parameter Name="FILETYPE">Defines the type of the file to be mapped. It can be "DATAFILE", "SPFILE", "TEMPFILE", "CONTROLFILE", "LOGFILE", or "ARCHIVEFILE".</Parameter>
            <Parameter Name="CASCADE">Should be TRUE only if a storage reconfiguration occurred. For all other instances, such as file resizing (either through an ALTER SYSTEM command or DML operations on extended files), cascade can be set to FALSE because the mapping changes are limited to the file extents only.If TRUE, mapping DAGs are also built for the elements where the file resides.</Parameter>
            <Parameter Name="MAX_NUM_FILEEXTENT">Defines the maximum number of file extents to be mapped. This limits the amount of memory used when mapping file extents. The default value is 100; max_num_fileextent is an overloaded argument.</Parameter>
            <Parameter Name="DICTIONARY_UPDATE">If TRUE, mapping information in the data dictionary is updated to reflect the changes. The default value is TRUE; dictionary_update is an overloaded argument.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MAP_OBJECT" ElementId="#i996974">
          <Description>Builds the mapping information for the Oracle object identified by the object name, owner, and type</Description>
          <Parameters>
            <Parameter Name="OBJNAME">The name of the object.</Parameter>
            <Parameter Name="OWNER">The owner of the object.</Parameter>
            <Parameter Name="OBJTYPE">The type of the object.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RESTORE" ElementId="#i1000367">
          <Description>Loads the entire mapping information from the data dictionary into the shared memory of the instance</Description>
        </SubProgram>
        <SubProgram Name="SAVE" ElementId="#i1000377">
          <Description>Saves information needed to regenerate the entire mapping into the data dictionary</Description>
        </SubProgram>
        <SubProgram Name="UNLOCK_MAP" ElementId="#i997102">
          <Description>Unlocks the mapping information in the shared memory of the instance.</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_STREAMS" Url="http://docs.oracle.com/database/121/ARPLS/d_streams.htm">
      <Description>The DBMS_STREAMS package, one of a set of Oracle Streams packages, provides subprograms to convert ANYDATA objects into logical change record (LCR) objects, to return information about Oracle Streams attributes and Oracle Streams clients, and to annotate redo entries generated by a session with a binary tag. This tag affects the behavior of a capture process, a propagation, or an apply process whose rules include specifications for these binary tags in redo entries or LCRs.</Description>
      <SubPrograms>
        <SubProgram Name="COMPATIBLE_12_1" ElementId="#CJAJFEFE">
          <Description>Returns the DBMS_STREAMS.COMPATIBLE_12_1 constant</Description>
        </SubProgram>
        <SubProgram Name="COMPATIBLE_11_2" ElementId="#CIHBFJHC">
          <Description>Returns the DBMS_STREAMS.COMPATIBLE_11_2 constant</Description>
        </SubProgram>
        <SubProgram Name="COMPATIBLE_11_1" ElementId="#CHDJIHJG">
          <Description>Returns the DBMS_STREAMS.COMPATIBLE_11_1 constant</Description>
        </SubProgram>
        <SubProgram Name="COMPATIBLE_10_2" ElementId="#CHDIFGHI">
          <Description>Returns the DBMS_STREAMS.COMPATIBLE_10_2 constant</Description>
        </SubProgram>
        <SubProgram Name="COMPATIBLE_10_1" ElementId="#i1000589">
          <Description>Returns the DBMS_STREAMS.COMPATIBLE_10_1 constant</Description>
        </SubProgram>
        <SubProgram Name="COMPATIBLE_9_2" ElementId="#i1000323">
          <Description>Returns the DBMS_STREAMS.COMPATIBLE_9_2 constant</Description>
        </SubProgram>
        <SubProgram Name="CONVERT_ANYDATA_TO_LCR_DDL" ElementId="#CHDIGCHG">
          <Description>Converts a ANYDATA object to a SYS.LCR$_DDL_RECORD object</Description>
          <Parameters>
            <Parameter Name="SOURCE">The ANYDATA object to be converted. If this object is not a DDL logical change record (DDL LCR), then the function raises an exception.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CONVERT_ANYDATA_TO_LCR_ROW" ElementId="#i996872">
          <Description>Converts a ANYDATA object to a SYS.LCR$_ROW_RECORD object</Description>
          <Parameters>
            <Parameter Name="SOURCE">The ANYDATA object to be converted. If this object is not a row logical change record (row LCR), then the function raises an exception.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CONVERT_LCR_TO_XML" ElementId="#CHDJFCGE">
          <Description>Converts a logical change record (LCR) encapsulated in a ANYDATA object into an XML object that conforms to the XML schema for LCRs</Description>
          <Parameters>
            <Parameter Name="ANYLCR">The ANYDATA encapsulated LCR to be converted. If this object is not a ANYDATA encapsulated LCR, then the function raises an exception.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CONVERT_XML_TO_LCR" ElementId="#CHDGBJJA">
          <Description>Converts an XML object that conforms to the XML schema for LCRs into a logical change record (LCR) encapsulated in a ANYDATA object</Description>
          <Parameters>
            <Parameter Name="XMLDAT">The XML LCR object to be converted. If this object does not conform to XML schema for LCRs, then the function raises an exception.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_INFORMATION" ElementId="#i996907">
          <Description>Returns information about various Oracle Streams attributes</Description>
          <Parameters>
            <Parameter Name="NAME">The type of information you want to retrieve. Currently, the following names are available:SENDER: Returns the name of the sender for the current logical change record (LCR) from its AQ message properties. This function is called inside a procedure DML handler, a DDL handler, an error handler, or a message handler. Returns NULL if called outside of an apply handler. The return value is to be interpreted as a VARCHAR2.CONSTRAINT_NAME: Returns the name of the constraint that was violated for an LCR that raised an error. This function is called inside a procedure DML handler or error handler for an apply process. Returns NULL if called outside of a procedure DML handler or error handler. The return value is to be interpreted as a VARCHAR2.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_STREAMS_NAME" ElementId="#CHDGBIJF">
          <Description>Returns the name of the invoker</Description>
        </SubProgram>
        <SubProgram Name="GET_STREAMS_TYPE" ElementId="#CHDDCAIC">
          <Description>Returns the type of the invoker</Description>
        </SubProgram>
        <SubProgram Name="GET_TAG" ElementId="#i996975">
          <Description>Gets the binary tag for all redo entries generated by the current session</Description>
        </SubProgram>
        <SubProgram Name="MAX_COMPATIBLE" ElementId="#CIHJHJHJ">
          <Description>Returns an integer that is greater than the highest possible compatibility constant for the current release of Oracle Database</Description>
        </SubProgram>
        <SubProgram Name="SET_TAG" ElementId="#i997007">
          <Description>Sets the binary tag for all redo entries subsequently generated by the current session</Description>
          <Parameters>
            <Parameter Name="TAG">The binary tag for all subsequent redo entries generated by the current session. A raw value is a sequence of bytes, and a byte is a sequence of bits.By default, the tag for a session is NULL.The size limit for a tag value is 2000 bytes.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_STREAMS_ADM" Url="http://docs.oracle.com/database/121/ARPLS/d_streams_adm.htm">
      <Description>The DBMS_STREAMS_ADM package, one of a set of Oracle Streams packages, provides subprograms for configuring Oracle Streams environments. This package also includes subprograms for adding and removing simple rules for capture, propagation, apply, and dequeue at the table, schema, and database level. This package also includes subprograms for configuring and managing XStream outbound servers and inbound servers.</Description>
      <SubPrograms>
        <SubProgram Name="ADD_COLUMN" ElementId="#CDEBGJIC">
          <Description>Either adds or removes a declarative rule-based transformation which adds a column to a row logical change record (row LCR) that satisfies the specified rule</Description>
          <Parameters>
            <Parameter Name="RULE_NAME">The name of the rule, specified as [schema_name.]rule_name. If NULL, then the procedure raises an error.For example, to specify a rule in the hr schema named employees12, enter hr.employees12. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="TABLE_NAME">The name of the table to which the column is added in the row LCR, specified as [schema_name.]object_name. For example, hr.employees. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="COLUMN_NAME">The name of the column added to each row LCR that satisfies the rule.</Parameter>
            <Parameter Name="COLUMN_VALUE">The value of the added column. Specify the appropriate ANYDATA function for the column datatype and the column value. For example, if the datatype of the column being added is NUMBER and the value is NULL, then specify the ANYDATA.ConvertNumber(NULL) function.This parameter cannot be specified if the column_function parameter is specified.</Parameter>
            <Parameter Name="COLUMN_FUNCTION">Either the 'SYSDATE' or the 'SYSTIMESTAMP' SQL function.The 'SYSDATE' SQL function places the current date and time set for the operating system on which the database resides. The datatype of the returned value is DATE, and the format returned depends on the value of the NLS_DATE_FORMAT initialization parameter.The 'SYSTIMESTAMP' SQL function returns the system date, including fractional seconds and time zone, of the system on which the database resides. The return type is TIMESTAMP WITH TIME ZONE.The function executes when the rule evaluates to TRUE.This parameter cannot be specified if the column_value parameter is specified.</Parameter>
            <Parameter Name="VALUE_TYPE">Specify 'NEW' to add the column to the new values in the row LCR.Specify 'OLD' to add the column to the old values in the row LCR.</Parameter>
            <Parameter Name="STEP_NUMBER">The order of execution of the transformation.See Also: Oracle Streams Concepts and Administration for more information about transformation ordering</Parameter>
            <Parameter Name="OPERATION">Specify 'ADD' to add the transformation to the rule.Specify 'REMOVE' to remove the transformation from the rule.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADD_GLOBAL_PROPAGATION_RULES" ElementId="#CDEDIEDE">
          <Description>Either adds global rules to the positive rule set for a propagation, or adds global rules to the negative rule set for a propagation, and creates the specified propagation if it does not exist</Description>
          <Parameters>
            <Parameter Name="STREAMS_NAME">The name of the propagation. Do not specify an owner.If the specified propagation does not exist, then the procedure creates it automatically.If NULL and a propagation exists for the same source queue and destination queue (including database link), then the procedure uses this propagation.If NULL and no propagation exists for the same source queue and destination queue (including database link), then the procedure creates a propagation automatically with a system-generated name.</Parameter>
            <Parameter Name="SOURCE_QUEUE_NAME">The name of the source queue, specified as [schema_name.]queue_name. The current database must contain the source queue, and the queue must be ANYDATA type.For example, to specify a source queue named streams_queue in the strmadmin schema, enter strmadmin.streams_queue for this parameter.If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="DESTINATION_QUEUE_NAME">The name of the destination queue, including a database link, specified as [schema_name.]queue_name[@dblink_name], if the destination queue is in a remote database. The queue must be ANYDATA type.For example, to specify a destination queue named streams_queue in the strmadmin schema and use a database link named dbs2.net, enter strmadmin.streams_queue@dbs2.net for this parameter.If the schema is not specified, then the current user is the default.If the database link is omitted, then the procedure uses the global name of the current database, and the source queue and destination queue must be in the same database.Note: Connection qualifiers are not allowed.</Parameter>
            <Parameter Name="INCLUDE_DML">If TRUE, then the procedure creates a rule for DML changes. If FALSE, then the procedure does not create a DML rule. NULL is not permitted.</Parameter>
            <Parameter Name="INCLUDE_DDL">If TRUE, then the procedure creates a rule for DDL changes. If FALSE, then the procedure does not create a DDL rule. NULL is not permitted.</Parameter>
            <Parameter Name="INCLUDE_TAGGED_LCR">If TRUE, then the procedure does not add a condition regarding Oracle Streams tags to the generated rules. Therefore, these rules can evaluate to TRUE regardless of whether a logical change record (LCR) has a non-NULL tag. If the rules are added to the positive rule set for the propagation, then an LCR is always considered for propagation, regardless of whether it has a non-NULL tag. If the rules are added to a positive rule set, then setting this parameter to TRUE is appropriate for a full (for example, standby) copy of a database. If the rules are added to the negative rule set for the propagation, then whether an LCR is discarded does not depend on the tag for the LCR.If FALSE, then the procedure adds a condition to each generated rule that causes the rule to evaluate to TRUE only if an LCR has a NULL Oracle Streams tag. If the rules are added to the positive rule set for the propagation, then an LCR is considered for propagation only when the LCR contains a NULL tag. If the rules are added to a positive rule set, then setting this parameter to FALSE might be appropriate in update-anywhere configurations to avoid sending a change back to its source database. If the rules are added to the negative rule set for the propagation, then an LCR can be discarded only if it has a NULL tag.Usually, specify TRUE for this parameter if the inclusion_rule parameter is set to FALSE.See Also: Oracle Streams Replication Administrator's Guide for more information about tags</Parameter>
            <Parameter Name="SOURCE_DATABASE">The global name of the source database. The source database is where the changes originated. If NULL, then the procedure does not add a condition regarding the source database to the generated rules.If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify DBS1 and the domain is .NET, then the procedure specifies DBS1.NET automatically.Oracle recommends that you specify a source database for propagation rules.</Parameter>
            <Parameter Name="DML_RULE_NAME">If include_dml is TRUE, then this parameter contains the DML rule name.If include_dml is FALSE, then this parameter contains a NULL.</Parameter>
            <Parameter Name="DDL_RULE_NAME">If include_ddl is TRUE, then this parameter contains the DDL rule name.If include_ddl is FALSE, then this parameter contains a NULL.</Parameter>
            <Parameter Name="INCLUSION_RULE">If inclusion_rule is TRUE, then the procedure adds the rules to the positive rule set for the propagation.If inclusion_rule is FALSE, then the procedure adds the rules to the negative rule set for the propagation.In either case, the system creates the rule set if it does not exist.</Parameter>
            <Parameter Name="AND_CONDITION">If non-NULL, appends the specified condition to the system-generated rule condition using an AND clause in the following way:The variable in the specified condition must be :lcr. For example, to specify that the global rules generated by the procedure evaluate to TRUE only if the Oracle Streams tag is the hexadecimal equivalent of '02', specify the following condition:The :lcr in the specified condition is converted to :dml or :ddl, depending on the rule that is being generated. If you are specifying an LCR member subprogram that is dependent on the LCR type (row or DDL), then make sure the procedure only generates the appropriate rule.Specifically, if you specify an LCR member subprogram that is valid only for row LCRs, then specify TRUE for the include_dml parameter and FALSE for the include_ddl parameter. If you specify an LCR member subprogram that is valid only for DDL LCRs, then specify FALSE for the include_dml parameter and TRUE for the include_ddl parameter.See Also: Chapter 275, "Logical Change Record TYPEs"</Parameter>
            <Parameter Name="QUEUE_TO_QUEUE">If TRUE or NULL, then a new propagation created by this procedure is a queue to queue propagation. A queue-to-queue propagation always has its own propagation job and uses a service for automatic failover when the destination queue is a buffered queue in an Oracle Real Application Clusters (Oracle RAC) database.If FALSE, then a new propagation created by this procedure is a queue-to-dblink propagation. A queue-to-dblink propagation can share a propagation job with other propagations that use the same database link and does not support automatic failover in an Oracle RAC environment.The procedure cannot change the queue to queue property of an exiting propagation. If the specified propagation exists, then the procedure behaves in the following way for each setting:If TRUE and the specified propagation is not a queue to queue propagation, then the procedure raises an error.If FALSE and the specified propagation is a queue to queue propagation, then the procedure raises an error.If NULL, then the procedure does not change the queue to queue property of the propagation.See Also: Oracle Streams Concepts and Administration for more information about queue-to-queue propagations</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADD_GLOBAL_RULES" ElementId="#i1028131">
          <Description>Adds global rules to either the positive or negative rule set of a capture process, apply process, or messaging client, and creates the specified capture process, apply process, or messaging client if it does not exist</Description>
          <Parameters>
            <Parameter Name="STREAMS_TYPE">The type of Oracle Streams client:Specify capture for a capture process.Specify apply for an apply process.Specify dequeue for a messaging client.</Parameter>
            <Parameter Name="STREAMS_NAME">The name of the capture process, apply process, or messaging client. Do not specify an owner.If NULL, if streams_type is capture or dequeue, and if one relevant capture process or messaging client for the queue exists, then the relevant Oracle Streams client is used. If no relevant Oracle Streams client exists for the queue, then an Oracle Streams client is created automatically with a system-generated name. If NULL and multiple Oracle Streams clients of the specified streams_type for the queue exist, then the procedure raises an error.If NULL, if streams_type is apply, and if one relevant apply process exists, then the procedure uses the relevant apply process. The relevant apply process is identified in one of the following ways:If one existing apply process has the source database specified in source_database and uses the queue specified in queue_name, then the procedure uses this apply process.If source_database is NULL and one existing apply process is using the queue specified in queue_name, then the procedure uses this apply process.If NULL and no relevant apply process exists, then the procedure creates an apply process automatically with a system-generated name.If NULL and multiple relevant apply processes exist, then the procedure raises an error.Each apply process and messaging client must have a unique name.</Parameter>
            <Parameter Name="QUEUE_NAME">The name of the local queue, specified as [schema_name.]queue_name. The current database must contain the queue, and the queue must be ANYDATA type.For example, to specify a queue named streams_queue in the strmadmin schema, enter strmadmin.streams_queue for this parameter. If the schema is not specified, then the current user is the default.For capture process rules, this is the queue into which a capture process enqueues LCRs. For apply process rules, this is the queue from which an apply process dequeues messages. For messaging client rules, this is the queue from which a messaging client dequeues messages.</Parameter>
            <Parameter Name="INCLUDE_DML">If TRUE, then the procedure creates a rule for DML changes. If FALSE, then the procedure does not create a DML rule. NULL is not permitted.</Parameter>
            <Parameter Name="INCLUDE_DDL">If TRUE, then the procedure creates a rule for DDL changes. If FALSE, then the procedure does not create a DDL rule. NULL is not permitted.</Parameter>
            <Parameter Name="INCLUDE_TAGGED_LCR">If TRUE, then the procedure does not add a condition regarding Oracle Streams tags to the generated rules. Therefore, these rules can evaluate to TRUE regardless of whether a redo entry or LCR has a non-NULL tag. If the rules are added to the positive rule set for the process, then a redo entry is always considered for capture, and an LCR is always considered for apply, regardless of whether the redo entry or LCR has a non-NULL tag. If the rules are added to a positive rule set, then setting this parameter to TRUE is appropriate for a full (for example, standby) copy of a database. If the rules are added to the negative rule set for the process, then whether a redo entry or LCR is discarded does not depend on the tag.If FALSE, then the procedure adds a condition to each generated rule that causes the rule to evaluate to TRUE only if a redo entry or LCR has a NULL Oracle Streams tag. If the rules are added to the positive rule set for the process, then a redo entry is considered for capture, and an LCR is considered for apply, only when the redo entry or LCR contains a NULL tag. If the rules are added to a positive rule set, then setting this parameter to FALSE might be appropriate in update-anywhere configurations to avoid sending a change back to its source database. If the rules are added to the negative rule set for the process, then a redo entry or LCR can be discarded only if it has a NULL tag.Usually, specify TRUE for this parameter if the inclusion_rule parameter is set to FALSE.See Also: Oracle Streams Replication Administrator's Guide for more information about tags</Parameter>
            <Parameter Name="SOURCE_DATABASE">The global name of the source database. If NULL, then the procedure does not add a condition regarding the source database to the generated rules.For capture process rules, specify NULL or the global name of the local database if you are creating a capture process locally at the source database. If you are adding rules to a downstream capture process rule set at a downstream database, then specify the source database of the changes that will be captured.For apply process rules, specify the source database of the changes that will be applied by the apply process. The source database is the database where the changes originated. If an apply process applies captured messages, then the apply process can apply messages from only one capture process at one source database.For messaging client rules, specify NULL if you do not want the rules created by this procedure to have a condition for the source database. Specify a source database if you want the rules created by this procedure to have a condition for the source database. The source database is part of the information in an LCR, and user-constructed LCRs might or might not have this information.If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify DBS1 and the domain is .NET, then the procedure specifies DBS1.NET automatically.</Parameter>
            <Parameter Name="DML_RULE_NAME">If include_dml is TRUE, then this parameter contains the DML rule name.If include_dml is FALSE, then this parameter contains a NULL.</Parameter>
            <Parameter Name="DDL_RULE_NAME">If include_ddl is TRUE, then this parameter contains the DDL rule name.If include_ddl is FALSE, then this parameter contains a NULL.</Parameter>
            <Parameter Name="INCLUSION_RULE">If inclusion_rule is TRUE, then the procedure adds the rules to the positive rule set for the Oracle Streams client.If inclusion_rule is FALSE, then the procedure adds the rules to the negative rule set for the Oracle Streams client.In either case, the system creates the rule set if it does not exist.</Parameter>
            <Parameter Name="AND_CONDITION">If non-NULL, appends the specified condition to the system-generated rule condition using an AND clause in the following way:The variable in the specified condition must be :lcr. For example, to specify that the global rules generated by the procedure evaluate to TRUE only if the Oracle Streams tag is the hexadecimal equivalent of '02', specify the following condition:The :lcr in the specified condition is converted to :dml or :ddl, depending on the rule that is being generated. If you are specifying an LCR member subprogram that is dependent on the LCR type (row or DDL), then make sure this procedure only generates the appropriate rule.Specifically, if you specify an LCR member subprogram that is valid only for row LCRs, then specify TRUE for the include_dml parameter and FALSE for the include_ddl parameter. If you specify an LCR member subprogram that is valid only for DDL LCRs, then specify FALSE for the include_dml parameter and TRUE for the include_ddl parameter.See Also: Chapter 275, "Logical Change Record TYPEs"</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADD_MESSAGE_PROPAGATION_RULE" ElementId="#i1012741">
          <Description>Either adds a message rule to the positive rule set for a propagation, or adds a message rule to the negative rule set for a propagation, and creates the specified propagation if it does not exist</Description>
          <Parameters>
            <Parameter Name="MESSAGE_TYPE">The type of the message. The type can be an Oracle built-in type, such as VARCHAR2 or NUMBER, or it can be a user-defined type.If the type is not an Oracle built-in type, then it is specified as [schema_name.]type_name. If the schema is not specified, then the current user is the default.For example, to specify VARCHAR2, enter VARCHAR2(n), where n is the size specification. To specify a type named usr_msg in the strmadmin schema, enter strmadmin.usr_msg for this parameter.The following data types require a size specification: VARCHAR2, NVARCHAR2, and RAW.See Also: Oracle Database SQL Language Reference for more information about data types</Parameter>
            <Parameter Name="RULE_CONDITION">The rule condition for this message type. The rule variable name specified in the rule condition must be the following:See Also: "Examples"</Parameter>
            <Parameter Name="STREAMS_NAME">The name of the propagation. Do not specify an owner.If the specified propagation does not exist, then the procedure creates it automatically.If NULL and a propagation exists for the same source queue and destination queue (including database link), then the procedure uses this propagation.If NULL and no propagation exists for the same source queue and destination queue (including database link), then the procedure creates a propagation automatically with a system-generated name.</Parameter>
            <Parameter Name="SOURCE_QUEUE_NAME">The name of the source queue, specified as [schema_name.]queue_name. The current database must contain the source queue, and the queue must be ANYDATA type.For example, to specify a source queue named streams_queue in the strmadmin schema, enter strmadmin.streams_queue for this parameter.If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="DESTINATION_QUEUE_NAME">The name of the destination queue, including a database link, specified as [schema_name.]queue_name[@dblink_name], if the destination queue is in a remote database. The queue must be ANYDATA type.For example, to specify a destination queue named streams_queue in the strmadmin schema and use a database link named dbs2.net, enter strmadmin.streams_queue@dbs2.net for this parameter.If the schema is not specified, then the current user is the default.If the database link is omitted, then the procedure uses the global name of the current database, and the source queue and destination queue must be in the same database.Note: Connection qualifiers are not allowed.</Parameter>
            <Parameter Name="INCLUSION_RULE">If inclusion_rule is TRUE, then the procedure adds the rule to the positive rule set for the propagation.If inclusion_rule is FALSE, then the procedure adds the rule to the negative rule set for the propagation.In either case, the system creates the rule set if it does not exist.</Parameter>
            <Parameter Name="RULE_NAME">Contains the rule name</Parameter>
            <Parameter Name="QUEUE_TO_QUEUE">If TRUE or NULL, then a new propagation created by this procedure is a queue to queue propagation. A queue-to-queue propagation always has its own propagation job and uses a service for automatic failover when the destination queue is a buffered queue in an Oracle Real Application Clusters (Oracle RAC) database.If FALSE, then a new propagation created by this procedure is a queue-to-dblink propagation. A queue-to-dblink propagation can share a propagation job with other propagations that use the same database link and does not support automatic failover in an Oracle RAC environment.This procedure cannot change the queue to queue property of an exiting propagation. If the specified propagation exists, then the procedure behaves in the following way for each setting:If TRUE and the specified propagation is not a queue to queue propagation, then the procedure raises an error.If FALSE and the specified propagation is a queue to queue propagation, then the procedure raises an error.If NULL, then the procedure does not change the queue to queue property of the propagation.See Also: Oracle Streams Concepts and Administration for more information about queue-to-queue propagations</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADD_MESSAGE_RULE" ElementId="#i1012752">
          <Description>Adds a message rule to either the positive or negative rule set of an apply process or messaging client, and creates the specified apply process or messaging client if it does not exist</Description>
          <Parameters>
            <Parameter Name="MESSAGE_TYPE">The type of the message. The type can be an Oracle built-in type, such as VARCHAR2 or NUMBER, or it can be a user-defined type.If the type is not an Oracle built-in type, then it is specified as [schema_name.]type_name. If the schema is not specified, then the current user is the default.For example, to specify VARCHAR2, enter VARCHAR2(n), where n is the size specification. To specify a type named usr_msg in the strmadmin schema, enter strmadmin.usr_msg for this parameter.The following data types require a size specification: VARCHAR2, NVARCHAR2, and RAW.See Also: Oracle Database SQL Language Reference for more information about data types</Parameter>
            <Parameter Name="RULE_CONDITION">The rule condition for this message type. The rule variable name specified in the rule condition must be the following:See Also: "Examples"</Parameter>
            <Parameter Name="STREAMS_TYPE">The type of message consumer, either apply for apply process or dequeue for messaging client</Parameter>
            <Parameter Name="STREAMS_NAME">The name of the Oracle Streams apply process or messaging client.If the specified streams_type is apply, then specify the name of the apply process. Do not specify an owner. If the specified apply process does not exist, then the procedure creates it automatically with a system-generated name.If the specified streams_type is dequeue, then specify the messaging client. For example, if the user strmadmin is the messaging client, then specify strmadmin.If NULL and a relevant apply process or messaging client for the queue exists, then the procedure uses the relevant apply process or messaging client. If NULL and multiple relevant apply processes or messaging clients for the queue exist, then the procedure raises an error.If NULL and no Oracle Streams client of the specified streams_type exists for the queue, then the procedure creates an apply process or messaging client automatically with a system-generated name.An apply process and a messaging client cannot have the same name.</Parameter>
            <Parameter Name="QUEUE_NAME">The name of the local queue from which messages will be dequeued, specified as [schema_name.]queue_name. The current database must contain the queue, and the queue must be ANYDATA type.For example, to specify a queue named streams_queue in the strmadmin schema, enter strmadmin.streams_queue for this parameter. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="INCLUSION_RULE">If inclusion_rule is TRUE, then the procedure adds the rule to the positive rule set for the apply process or messaging client.If inclusion_rule is FALSE, then the procedure adds the rule to the negative rule set for the apply process or messaging client.In either case, the system creates the rule set if it does not exist.</Parameter>
            <Parameter Name="RULE_NAME">Contains the rule name</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADD_SCHEMA_PROPAGATION_RULES" ElementId="#i1010842">
          <Description>Either adds schema rules to the positive rule set for a propagation, or adds schema rules to the negative rule set for a propagation, and creates the specified propagation if it does not exist</Description>
          <Parameters>
            <Parameter Name="SCHEMA_NAME">The name of the schema. For example, hr.</Parameter>
            <Parameter Name="STREAMS_NAME">The name of the propagation. Do not specify an owner.If the specified propagation does not exist, then the procedure creates it automatically.If NULL and a propagation exists for the same source queue and destination queue (including database link), then the procedure uses this propagation.If NULL and no propagation exists for the same source queue and destination queue (including database link), then the procedure creates a propagation automatically with a system-generated name.</Parameter>
            <Parameter Name="SOURCE_QUEUE_NAME">The name of the source queue, specified as [schema_name.]queue_name. The current database must contain the source queue, and the queue must be ANYDATA type.For example, to specify a source queue named streams_queue in the strmadmin schema, enter strmadmin.streams_queue for this parameter.If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="DESTINATION_QUEUE_NAME">The name of the destination queue, including a database link, specified as [schema_name.]queue_name[@dblink_name], if the destination queue is in a remote database. The queue must be ANYDATA type.For example, to specify a destination queue named streams_queue in the strmadmin schema and use a database link named dbs2.net, enter strmadmin.streams_queue@dbs2.net for this parameter.If the schema is not specified, then the current user is the default.If the database link is omitted, then the procedure uses the global name of the current database, and the source queue and destination queue must be in the same database.Note: Connection qualifiers are not allowed.</Parameter>
            <Parameter Name="INCLUDE_DML">If TRUE, then the procedure creates a rule for DML changes. If FALSE, then the procedure does not create a DML rule. NULL is not permitted.</Parameter>
            <Parameter Name="INCLUDE_DDL">If TRUE, then the procedure creates a rule for DDL changes. If FALSE, then the procedure does not create a DDL rule. NULL is not permitted.</Parameter>
            <Parameter Name="INCLUDE_TAGGED_LCR">If TRUE, then the procedure does not add a condition regarding Oracle Streams tags to the generated rules. Therefore, these rules can evaluate to TRUE regardless of whether a logical change record (LCR) has a non-NULL tag. If the rules are added to the positive rule set for the propagation, then an LCR is always considered for propagation, regardless of whether it has a non-NULL tag. If the rules are added to a positive rule set, then setting this parameter to TRUE is appropriate for a full (for example, standby) copy of a database. If the rules are added to the negative rule set for the propagation, then whether an LCR is discarded does not depend on the tag for the LCR.If FALSE, then the procedure adds a condition to each generated rule that causes the rule to evaluate to TRUE only if an LCR has a NULL Oracle Streams tag. If the rules are added to the positive rule set for the propagation, then an LCR is considered for propagation only when the LCR contains a NULL tag. If the rules are added to a positive rule set, then setting this parameter to FALSE might be appropriate in update-anywhere configurations to avoid sending a change back to its source database. If the rules are added to the negative rule set for the propagation, then an LCR can be discarded only if it has a NULL tag.Usually, specify TRUE for this parameter if the inclusion_rule parameter is set to FALSE.See Also: Oracle Streams Replication Administrator's Guide for more information about tags</Parameter>
            <Parameter Name="SOURCE_DATABASE">The global name of the source database. The source database is where the change originated. If NULL, then the procedure does not add a condition regarding the source database to the generated rules.If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify DBS1 and the domain is .NET, then the procedure specifies DBS1.NET automatically.Oracle recommends that you specify a source database for propagation rules.</Parameter>
            <Parameter Name="DML_RULE_NAME">If include_dml is TRUE, then this parameter contains the DML rule name.If include_dml is FALSE, then this parameter contains a NULL.</Parameter>
            <Parameter Name="DDL_RULE_NAME">If include_ddl is TRUE, then this parameter contains the DDL rule name.If include_ddl is FALSE, then this parameter contains a NULL.</Parameter>
            <Parameter Name="INCLUSION_RULE">If inclusion_rule is TRUE, then the procedure adds the rules to the positive rule set for the propagation.If inclusion_rule is FALSE, then the procedure adds the rules to the negative rule set for the propagation.In either case, the system creates the rule set if it does not exist.</Parameter>
            <Parameter Name="AND_CONDITION">If non-NULL, appends the specified condition to the system-generated rule condition using an AND clause in the following way:The variable in the specified condition must be :lcr. For example, to specify that the schema rules generated by the procedure evaluate to TRUE only if the Oracle Streams tag is the hexadecimal equivalent of '02', specify the following condition:The :lcr in the specified condition is converted to :dml or :ddl, depending on the rule that is being generated. If you are specifying an LCR member subprogram that is dependent on the LCR type (row or DDL), then make sure this procedure only generates the appropriate rule.Specifically, if you specify an LCR member subprogram that is valid only for row LCRs, then specify TRUE for the include_dml parameter and FALSE for the include_ddl parameter. If you specify an LCR member subprogram that is valid only for DDL LCRs, then specify FALSE for the include_dml parameter and TRUE for the include_ddl parameter.See Also: Chapter 275, "Logical Change Record TYPEs"</Parameter>
            <Parameter Name="QUEUE_TO_QUEUE">If TRUE or NULL, then a new propagation created by this procedure is a queue to queue propagation. A queue-to-queue propagation always has its own propagation job and uses a service for automatic failover when the destination queue is a buffered queue in an Oracle Real Application Clusters (Oracle RAC) database.If FALSE, then a new propagation created by this procedure is a queue-to-dblink propagation. A queue-to-dblink propagation can share a propagation job with other propagations that use the same database link and does not support automatic failover in an Oracle RAC environment.This procedure cannot change the queue to queue property of an exiting propagation. If the specified propagation exists, then the procedure behaves in the following way for each setting:If TRUE and the specified propagation is not a queue to queue propagation, then the procedure raises an error.If FALSE and the specified propagation is a queue to queue propagation, then the procedure raises an error.If NULL, then the procedure does not change the queue to queue property of the propagation.See Also: Oracle Streams Concepts and Administration for more information about queue-to-queue propagations</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADD_SCHEMA_RULES" ElementId="#i997270">
          <Description>Adds schema rules to either the positive or negative rule set of a capture process, apply process, or messaging client, and creates the specified capture process, apply process, or messaging client if it does not exist</Description>
          <Parameters>
            <Parameter Name="SCHEMA_NAME">The name of the schema. For example, hr.You can specify a schema that does not yet exist, because Oracle Streams does not validate the existence of the schema.</Parameter>
            <Parameter Name="STREAMS_TYPE">The type of Oracle Streams client:Specify capture for a capture process.Specify apply for an apply process.Specify dequeue for a messaging client.</Parameter>
            <Parameter Name="STREAMS_NAME">The name of the capture process, apply process, or messaging client. Do not specify an owner.If NULL, if streams_type is capture or dequeue, and if one relevant capture process or messaging client for the queue exists, then the relevant Oracle Streams client is used. If no relevant Oracle Streams client exists for the queue, then an Oracle Streams client is created automatically with a system-generated name. If NULL and multiple Oracle Streams clients of the specified streams_type for the queue exist, then the procedure raises an error.If NULL, if streams_type is apply, and if one relevant apply process exists, then the procedure uses the relevant apply process. The relevant apply process is identified in one of the following ways:If one existing apply process has the source database specified in source_database and uses the queue specified in queue_name, then the procedure uses this apply process.If source_database is NULL and one existing apply process is using the queue specified in queue_name, then the procedure uses this apply process.If NULL and no relevant apply process exists, then the procedure creates an apply process automatically with a system-generated name.If NULL and multiple relevant apply processes exist, then the procedure raises an error.Each apply process and messaging client must have a unique name.</Parameter>
            <Parameter Name="QUEUE_NAME">The name of the local queue, specified as [schema_name.]queue_name. The current database must contain the queue, and the queue must be ANYDATA type.For example, to specify a queue named streams_queue in the strmadmin schema, enter strmadmin.streams_queue for this parameter. If the schema is not specified, then the current user is the default.For capture process rules, this is the queue into which a capture process enqueues LCRs. For apply process rules, this is the queue from which an apply process dequeues messages. For messaging client rules, this is the queue from which a messaging client dequeues messages.</Parameter>
            <Parameter Name="INCLUDE_DML">If TRUE, then the procedure creates a rule for DML changes. If FALSE, then the procedure does not create a DML rule. NULL is not permitted.</Parameter>
            <Parameter Name="INCLUDE_DDL">If TRUE, then the procedure creates a rule for DDL changes. If FALSE, then the procedure does not create a DDL rule. NULL is not permitted.</Parameter>
            <Parameter Name="INCLUDE_TAGGED_LCR">If TRUE, then the procedure does not add a condition regarding Oracle Streams tags to the generated rules. Therefore, these rules can evaluate to TRUE regardless of whether a redo entry or LCR has a non-NULL tag. If the rules are added to the positive rule set for the process, then a redo entry is always considered for capture, and an LCR is always considered for apply, regardless of whether the redo entry or LCR has a non-NULL tag. If the rules are added to a positive rule set, then setting this parameter to TRUE is appropriate for a full (for example, standby) copy of a database. If the rules are added to the negative rule set for the process, then whether a redo entry or LCR is discarded does not depend on the tag.If FALSE, then the procedure adds a condition to each generated rule that causes the rule to evaluate to TRUE only if a redo entry or LCR has a NULL Oracle Streams tag. If the rules are added to the positive rule set for the process, then a redo entry is considered for capture, and an LCR is considered for apply, only when the redo entry or LCR contains a NULL tag. If the rules are added to a positive rule set, then setting this parameter to FALSE might be appropriate in update-anywhere configurations to avoid sending a change back to its source database. If the rules are added to the negative rule set for the process, then a redo entry or LCR can be discarded only if it has a NULL tag.Usually, specify TRUE for this parameter if the inclusion_rule parameter is set to FALSE.See Also: Oracle Streams Replication Administrator's Guide for more information about tags</Parameter>
            <Parameter Name="SOURCE_DATABASE">The global name of the source database. If NULL, then the procedure does not add a condition regarding the source database to the generated rules.For capture process rules, specify NULL or the global name of the local database if you are creating a capture process locally at the source database. If you are adding rules to a downstream capture process rule set at a downstream database, then specify the source database of the changes that will be captured.For apply process rules, specify the source database of the changes that will be applied by the apply process. The source database is the database where the changes originated. If an apply process applies captured messages, then the apply process can apply messages from only one capture process at one source database.For messaging client rules, specify NULL if you do not want the rules created by this procedure to have a condition for the source database. Specify a source database if you want the rules created by this procedure to have a condition for the source database. The source database is part of the information in an LCR, and user-constructed LCRs might or might not have this information.If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify DBS1 and the domain is .NET, then the procedure specifies DBS1.NET automatically.</Parameter>
            <Parameter Name="DML_RULE_NAME">If include_dml is TRUE, then this parameter contains the DML rule name.If include_dml is FALSE, then this parameter contains a NULL.</Parameter>
            <Parameter Name="DDL_RULE_NAME">If include_ddl is TRUE, then this parameter contains the DDL rule name.If include_ddl is FALSE, then this parameter contains a NULL.</Parameter>
            <Parameter Name="INCLUSION_RULE">If inclusion_rule is TRUE, then the procedure adds the rules to the positive rule set for the Oracle Streams client.If inclusion_rule is FALSE, then the procedure adds the rules to the negative rule set for the Oracle Streams client.In either case, the system creates the rule set if it does not exist.</Parameter>
            <Parameter Name="AND_CONDITION">If non-NULL, appends the specified condition to the system-generated rule condition using an AND clause in the following way:The variable in the specified condition must be :lcr. For example, to specify that the schema rules generated by the procedure evaluate to TRUE only if the Oracle Streams tag is the hexadecimal equivalent of '02', specify the following condition:The :lcr in the specified condition is converted to :dml or :ddl, depending on the rule that is being generated. If you are specifying an LCR member subprogram that is dependent on the LCR type (row or DDL), then make sure this procedure only generates the appropriate rule.Specifically, if you specify an LCR member subprogram that is valid only for row LCRs, then specify TRUE for the include_dml parameter and FALSE for the include_ddl parameter. If you specify an LCR member subprogram that is valid only for DDL LCRs, then specify FALSE for the include_dml parameter and TRUE for the include_ddl parameter.See Also: Chapter 275, "Logical Change Record TYPEs"</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADD_SUBSET_PROPAGATION_RULES" ElementId="#i1007301">
          <Description>Adds subset rules to the positive rule set for a propagation, and creates the specified propagation if it does not exist</Description>
          <Parameters>
            <Parameter Name="TABLE_NAME">The name of the table specified as [schema_name.]object_name. For example, hr.employees. If the schema is not specified, then the current user is the default.The specified table must exist in the same database as the propagation. Also, the specified table cannot have any LOB, LONG, LONG RAW, or XMLType columns currently or in the future.</Parameter>
            <Parameter Name="DML_CONDITION">The subset condition. Specify this condition similar to the way you specify conditions in a WHERE clause in SQL.For example, to specify rows in the hr.employees table where the salary is greater than 4000 and the job_id is SA_MAN, enter the following as the condition:' salary &gt; 4000 and job_id = ''SA_MAN'' 'Note: The quotation marks in the preceding example are all single quotation marks.</Parameter>
            <Parameter Name="STREAMS_NAME">The name of the propagation. Do not specify an owner.If the specified propagation does not exist, then the procedure creates it automatically.If NULL and a propagation exists for the same source queue and destination queue (including database link), then the procedure uses this propagation.If NULL and no propagation exists for the same source queue and destination queue (including database link), then the procedure creates a propagation automatically with a system-generated name.</Parameter>
            <Parameter Name="SOURCE_QUEUE_NAME">The name of the source queue, specified as [schema_name.]queue_name. The current database must contain the source queue, and the queue must be ANYDATA type.For example, to specify a source queue named streams_queue in the strmadmin schema, enter strmadmin.streams_queue for this parameter.If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="DESTINATION_QUEUE_NAME">The name of the destination queue, including a database link, specified as [schema_name.]queue_name[@dblink_name], if the destination queue is in a remote database. The queue must be ANYDATA type.For example, to specify a destination queue named streams_queue in the strmadmin schema and use a database link named dbs2.net, enter strmadmin.streams_queue@dbs2.net for this parameter.If the schema is not specified, then the current user is the default.If the database link is omitted, then the procedure uses the global name of the current database, and the source queue and destination queue must be in the same database.Note: Connection qualifiers are not allowed.</Parameter>
            <Parameter Name="INCLUDE_TAGGED_LCR">If TRUE, then an LCR is always considered for propagation, regardless of whether it has a non-NULL tag. This setting is appropriate for a full (for example, standby) copy of a database.If FALSE, then an LCR is considered for propagation only when the LCR contains a NULL tag. A setting of FALSE is often specified in update-anywhere configurations to avoid sending a change back to its source database.See Also: Oracle Streams Replication Administrator's Guide for more information about tags</Parameter>
            <Parameter Name="SOURCE_DATABASE">The global name of the source database. The source database is where the change originated. If NULL, then the procedure does not add a condition regarding the source database to the generated rules.If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify DBS1 and the domain is .NET, then the procedure specifies DBS1.NET automatically.Oracle recommends that you specify a source database for propagation rules.</Parameter>
            <Parameter Name="INSERT_RULE_NAME">Contains the system-generated INSERT rule name. This rule handles inserts and updates that must be converted into inserts.</Parameter>
            <Parameter Name="UPDATE_RULE_NAME">Contains the system-generated UPDATE rule name. This rule handles updates that remain updates.</Parameter>
            <Parameter Name="DELETE_RULE_NAME">Contains the system-generated DELETE rule name. This rule handles deletes and updates that must be converted into deletes</Parameter>
            <Parameter Name="QUEUE_TO_QUEUE">If TRUE or NULL, then a new propagation created by this procedure is a queue to queue propagation. A queue-to-queue propagation always has its own propagation job and uses a service for automatic failover when the destination queue is a buffered queue in an Oracle Real Application Clusters (Oracle RAC) database.If FALSE, then a new propagation created by this procedure is a queue-to-dblink propagation. A queue-to-dblink propagation can share a propagation job with other propagations that use the same database link and does not support automatic failover in an Oracle RAC environment.This procedure cannot change the queue to queue property of an exiting propagation. If the specified propagation exists, then the procedure behaves in the following way for each setting:If TRUE and the specified propagation is not a queue to queue propagation, then the procedure raises an error.If FALSE and the specified propagation is a queue to queue propagation, then the procedure raises an error.If NULL, then the procedure does not change the queue to queue property of the propagation.See Also: Oracle Streams Concepts and Administration for more information about queue-to-queue propagations</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADD_SUBSET_RULES" ElementId="#i1027849">
          <Description>Adds subset rules to the positive rule set of a capture process, synchronous capture, apply process, or messaging client, and creates the specified capture process, synchronous capture, apply process, or messaging client if it does not exist</Description>
          <Parameters>
            <Parameter Name="TABLE_NAME">The name of the table specified as [schema_name.]object_name. For example, hr.employees. If the schema is not specified, then the current user is the default.The specified table must exist in the same database as the capture process, synchronous capture, apply process, or messaging client. Also, the specified table cannot have any LOB, LONG, LONG RAW, or XMLType columns currently or in the future.</Parameter>
            <Parameter Name="DML_CONDITION">The subset condition. Specify this condition similar to the way you specify conditions in a WHERE clause in SQL.For example, to specify rows in the hr.employees table where the salary is greater than 4000 and the job_id is SA_MAN, enter the following as the condition:' salary &gt; 4000 and job_id = ''SA_MAN'' 'Note: The quotation marks in the preceding example are all single quotation marks.</Parameter>
            <Parameter Name="STREAMS_TYPE">The type of Oracle Streams client:Specify capture for a capture process.Specify sync_capture for a synchronous capture.Specify apply for an apply process.Specify dequeue for a messaging client.</Parameter>
            <Parameter Name="STREAMS_NAME">The name of the capture process, synchronous capture, apply process, or messaging client. Do not specify an owner.If NULL, if streams_type is capture, sync_capture, or dequeue, and if one relevant capture process, synchronous capture, or messaging client for the queue exists, then the procedure uses the relevant Oracle Streams client. If no relevant Oracle Streams client exists for the queue, then the procedure creates an Oracle Streams client automatically with a system-generated name. If NULL and multiple Oracle Streams clients of the specified streams_type for the queue exist, then the procedure raises an error.If NULL, if streams_type is apply, and if one relevant apply process exists, then the procedure uses the relevant apply process. The relevant apply process is identified in one of the following ways:If one existing apply process has the source database specified in source_database and uses the queue specified in queue_name, then the procedure uses this apply process.If source_database is NULL and one existing apply process is using the queue specified in queue_name, then the procedure uses this apply process.If NULL and no relevant apply process exists, then the procedure creates an apply process automatically with a system-generated name.If NULL and multiple relevant apply processes exist, then the procedure raises an error.Each apply process and messaging client must have a unique name.</Parameter>
            <Parameter Name="QUEUE_NAME">The name of the local queue, specified as [schema_name.]queue_name. The current database must contain the queue, and the queue must be ANYDATA type.For example, to specify a queue named streams_queue in the strmadmin schema, enter strmadmin.streams_queue for this parameter. If the schema is not specified, then the current user is the default.For capture process or synchronous capture rules, this is the queue into which a capture process or synchronous capture enqueues LCRs. For apply process rules, this is the queue from which an apply process dequeues messages. For messaging client rules, this is the queue from which a messaging client dequeues messages.</Parameter>
            <Parameter Name="INCLUDE_TAGGED_LCR">If TRUE, then the Oracle Streams client performs its action regardless of the tag:A redo entry is always considered for capture by a capture process, regardless of whether the redo entry has a non-NULL tag.A change is always considered for capture by a synchronous capture, regardless of whether the session that makes the change has a non-NULL tag.An LCR is always considered for apply by an apply process or dequeue by a messaging client, regardless of whether redo entry or LCR has a non-NULL tag.If FALSE, then an Oracle Streams client performs its action only when the tag is NULL:A redo entry is considered for capture by a capture process only when the redo entry contains a NULL tag.A change is considered for capture by a synchronous capture only when the session that makes the change has a NULL tag.An LCR is considered for apply by an apply process or dequeue by a messaging client only if the LCR contains a NULL tag.A setting of FALSE is often specified in update-anywhere configurations to avoid sending a change back to its source database.See Also: Oracle Streams Replication Administrator's Guide for more information about tags</Parameter>
            <Parameter Name="SOURCE_DATABASE">The global name of the source database. If NULL, then the procedure does not add a condition regarding the source database to the generated rules.For capture process rules, specify NULL or the global name of the local database if you are creating a capture process locally at the source database. If you are adding rules to a downstream capture process rule set at a downstream database, then specify the source database of the changes that will be captured.For synchronous capture rules, specify the name of the local database.For apply process rules, specify the source database of the changes that will be applied by the apply process. The source database is the database where the changes originated. If an apply process applies captured messages, then the apply process can apply messages from only one capture process at one source database.For messaging client rules, specify NULL if you do not want the rules created by this procedure to have a condition for the source database. Specify a source database if you want the rules created by this procedure to have a condition for the source database. The source database is part of the information in an LCR, and user-constructed LCRs might or might not have this information.If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify DBS1 and the domain is .NET, then the procedure specifies DBS1.NET automatically.</Parameter>
            <Parameter Name="INSERT_RULE_NAME">Contains the system-generated INSERT rule name. This rule handles inserts and updates that must be converted into inserts.</Parameter>
            <Parameter Name="UPDATE_RULE_NAME">Contains the system-generated UPDATE rule name. This rule handles updates that remain updates.</Parameter>
            <Parameter Name="DELETE_RULE_NAME">Contains the system-generated DELETE rule name. This rule handles deletes and updates that must be converted into deletes</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADD_TABLE_PROPAGATION_RULES" ElementId="#i997544">
          <Description>Either adds table rules to the positive rule set for a propagation, or adds table rules to the negative rule set for a propagation, and creates the specified propagation if it does not exist</Description>
          <Parameters>
            <Parameter Name="TABLE_NAME">The name of the table specified as [schema_name.]table_name. For example, hr.employees. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="STREAMS_NAME">The name of the propagation. Do not specify an owner.If the specified propagation does not exist, then the procedure creates it automatically.If NULL and a propagation exists for the same source queue and destination queue (including database link), then the procedure uses this propagation.If NULL and no propagation exists for the same source queue and destination queue (including database link), then the procedure creates a propagation automatically with a system-generated name.</Parameter>
            <Parameter Name="SOURCE_QUEUE_NAME">The name of the source queue, specified as [schema_name.]queue_name. The current database must contain the source queue, and the queue must be ANYDATA type.For example, to specify a source queue named streams_queue in the strmadmin schema, enter strmadmin.streams_queue for this parameter.If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="DESTINATION_QUEUE_NAME">The name of the destination queue, including a database link, specified as [schema_name.]queue_name[@dblink_name], if the destination queue is in a remote database. The queue must be ANYDATA type.For example, to specify a destination queue named streams_queue in the strmadmin schema and use a database link named dbs2.net, enter strmadmin.streams_queue@dbs2.net for this parameter.If the schema is not specified, then the current user is the default.If the database link is omitted, then the procedure uses the global name of the current database, and the source queue and destination queue must be in the same database.Note: Connection qualifiers are not allowed.</Parameter>
            <Parameter Name="INCLUDE_DML">If TRUE, then the procedure creates a rule for DML changes. If FALSE, then the procedure does not create a DML rule. NULL is not permitted.</Parameter>
            <Parameter Name="INCLUDE_DDL">If TRUE, then the procedure creates a rule for DDL changes. If FALSE, then the procedure does not create a DDL rule. NULL is not permitted.The generated rule evaluates to TRUE for any DDL change that operates on the table or on an object that is part of the table, such as an index or trigger on the table. The rule evaluates to FALSE for any DDL change that either does not refer to the table or refers to the table in a subordinate way. For example, the rule evaluates to FALSE for changes that create synonyms or views based on the table. The rule also evaluates to FALSE for a change to a PL/SQL subprogram that refers to the table.</Parameter>
            <Parameter Name="INCLUDE_TAGGED_LCR">If TRUE, then the procedure does not add a condition regarding Oracle Streams tags to the generated rules. Therefore, these rules can evaluate to TRUE regardless of whether a logical change record (LCR) has a non-NULL tag. If the rules are added to the positive rule set for the propagation, then an LCR is always considered for propagation, regardless of whether it has a non-NULL tag. If the rules are added to a positive rule set, then setting this parameter to TRUE is appropriate for a full (for example, standby) copy of a database. If the rules are added to the negative rule set for the propagation, then whether an LCR is discarded does not depend on the tag for the LCR.If FALSE, then the procedure adds a condition to each generated rule that causes the rule to evaluate to TRUE only if an LCR has a NULL Oracle Streams tag. If the rules are added to the positive rule set for the propagation, then an LCR is considered for propagation only when the LCR contains a NULL tag. If the rules are added to a positive rule set, then setting this parameter to FALSE might be appropriate in update-anywhere configurations to avoid sending a change back to its source database. If the rules are added to the negative rule set for the propagation, then an LCR can be discarded only if it has a NULL tag.Usually, specify TRUE for this parameter if the inclusion_rule parameter is set to FALSE.See Also: Oracle Streams Replication Administrator's Guide for more information about tags</Parameter>
            <Parameter Name="SOURCE_DATABASE">The global name of the source database. The source database is where the change originated. If NULL, then the procedure does not add a condition regarding the source database to the generated rules.If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify DBS1 and the domain is .NET, then the procedure specifies DBS1.NET automatically.Oracle recommends that you specify a source database for propagation rules.</Parameter>
            <Parameter Name="DML_RULE_NAME">If include_dml is TRUE, then this parameter contains the DML rule name.If include_dml is FALSE, then this parameter contains a NULL.</Parameter>
            <Parameter Name="DDL_RULE_NAME">If include_ddl is TRUE, then this parameter contains the DDL rule name.If include_ddl is FALSE, then this parameter contains a NULL.</Parameter>
            <Parameter Name="INCLUSION_RULE">If inclusion_rule is TRUE, then the procedure adds the rules to the positive rule set for the propagation.If inclusion_rule is FALSE, then the procedure adds the rules to the negative rule set for the propagation.In either case, the system creates the rule set if it does not exist.</Parameter>
            <Parameter Name="AND_CONDITION">If non-NULL, appends the specified condition to the system-generated rule condition using an AND clause in the following way:The variable in the specified condition must be :lcr. For example, to specify that the table rules generated by the procedure evaluate to TRUE only if the Oracle Streams tag is the hexadecimal equivalent of '02', specify the following condition:The :lcr in the specified condition is converted to :dml or :ddl, depending on the rule that is being generated. If you are specifying an LCR member subprogram that is dependent on the LCR type (row or DDL), then make sure this procedure only generates the appropriate rule.Specifically, if you specify an LCR member subprogram that is valid only for row LCRs, then specify TRUE for the include_dml parameter and FALSE for the include_ddl parameter. If you specify an LCR member subprogram that is valid only for DDL LCRs, then specify FALSE for the include_dml parameter and TRUE for the include_ddl parameter.See Also: Chapter 275, "Logical Change Record TYPEs"</Parameter>
            <Parameter Name="QUEUE_TO_QUEUE">If TRUE or NULL, then a new propagation created by this procedure is a queue to queue propagation. A queue-to-queue propagation always has its own propagation job and uses a service for automatic failover when the destination queue is a buffered queue in an Oracle Real Application Clusters (Oracle RAC) database.If FALSE, then a new propagation created by this procedure is a queue-to-dblink propagation. A queue-to-dblink propagation can share a propagation job with other propagations that use the same database link and does not support automatic failover in an Oracle RAC environment.This procedure cannot change the queue to queue property of an exiting propagation. If the specified propagation exists, then the procedure behaves in the following way for each setting:If TRUE and the specified propagation is not a queue to queue propagation, then the procedure raises an error.If FALSE and the specified propagation is a queue to queue propagation, then the procedure raises an error.If NULL, then the procedure does not change the queue to queue property of the propagation.See Also: Oracle Streams Concepts and Administration for more information about queue-to-queue propagations</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADD_TABLE_RULES" ElementId="#i997673">
          <Description>Adds table rules to the rule set of a capture process, synchronous capture, apply process, or messaging client, and creates the specified capture process, synchronous capture, apply process, or messaging client if it does not exist</Description>
          <Parameters>
            <Parameter Name="TABLE_NAME">The name of the table specified as [schema_name.]object_name. For example, hr.employees. If the schema is not specified, then the current user is the default.You can specify a table that does not yet exist, because Oracle Streams does not validate the existence of the table.</Parameter>
            <Parameter Name="STREAMS_TYPE">The type of Oracle Streams client:Specify capture for a capture process.Specify sync_capture for a synchronous capture.Specify apply for an apply process.Specify dequeue for a messaging client.</Parameter>
            <Parameter Name="STREAMS_NAME">The name of the capture process, synchronous capture, apply process, or messaging client. Do not specify an owner.If NULL, if streams_type is capture, sync_capture, or dequeue, and if one relevant capture process, synchronous capture, or messaging client for the queue exists, then the procedure uses the relevant Oracle Streams client. If no relevant Oracle Streams client exists for the queue, then the procedure creates an Oracle Streams client automatically with a system-generated name. If NULL and multiple Oracle Streams clients of the specified streams_type for the queue exist, then the procedure raises an error.If NULL, if streams_type is apply, and if one relevant apply process exists, then the procedure uses the relevant apply process. The relevant apply process is identified in one of the following ways:If one existing apply process has the source database specified in source_database and uses the queue specified in queue_name, then the procedure uses this apply process.If source_database is NULL and one existing apply process is using the queue specified in queue_name, then the procedure uses this apply process.If NULL and no relevant apply process exists, then the procedure creates an apply process automatically with a system-generated name.If NULL and multiple relevant apply processes exist, then the procedure raises an error.Each apply process and messaging client must have a unique name.</Parameter>
            <Parameter Name="QUEUE_NAME">The name of the local queue, specified as [schema_name.]queue_name. The current database must contain the queue, and the queue must be ANYDATA type.For example, to specify a queue named streams_queue in the strmadmin schema, enter strmadmin.streams_queue for this parameter. If the schema is not specified, then the current user is the default.For capture process or synchronous capture rules, this is the queue into which a capture process or synchronous capture enqueues LCRs. For apply process rules, this is the queue from which an apply process dequeues messages. For messaging client rules, this is the queue from which a messaging client dequeues messages.</Parameter>
            <Parameter Name="INCLUDE_DML">If TRUE, then the procedure creates a DML rule for DML changes. If FALSE, then the procedure does not create a DML rule. NULL is not permitted.</Parameter>
            <Parameter Name="INCLUDE_DDL">If TRUE, then the procedure creates a DDL rule for DDL changes. If FALSE, then the procedure does not create a DDL rule. NULL is not permitted.The generated rule evaluates to TRUE for any DDL change that operates on the table or on an object that is part of the table, such as an index or trigger on the table. The rule evaluates to FALSE for any DDL change that either does not refer to the table or refers to the table in a subordinate way. For example, the rule evaluates to FALSE for changes that create synonyms or views based on the table. The rule also evaluates to FALSE for a change to a PL/SQL subprogram that refers to the table.</Parameter>
            <Parameter Name="INCLUDE_TAGGED_LCR">If TRUE, then the procedure does not add a condition regarding Oracle Streams tags to the generated rules. Therefore, these rules can evaluate to TRUE regardless of whether a redo entry, session, or LCR has a non-NULL tag. If the rules are added to the positive rule set for the Oracle Streams client, then the Oracle Streams client performs its action regardless of the tag:A redo entry is always considered for capture by a capture process, regardless of whether the redo entry has a non-NULL tag.A change is always considered for capture by a synchronous capture, regardless of whether the session that makes the change has a non-NULL tag.An LCR is always considered for apply by an apply process or dequeue by a messaging client, regardless of whether redo entry or LCR has a non-NULL tag.If the rules are added to a positive rule set, then setting this parameter to TRUE is appropriate for a full (for example, standby) copy of a database. If the rules are added to the negative rule set for the Oracle Streams client, then whether a database change is discarded does not depend on the tag.If FALSE, then the procedure adds a condition to each generated rule that causes the rule to evaluate to TRUE only if a redo entry, session, or LCR has a NULL Oracle Streams tag. If the rules are added to the positive rule set for an Oracle Streams client, then the Oracle Streams client performs its action only when the tag is NULL:A redo entry is considered for capture by a capture process only when the redo entry contains a NULL tag.A change is considered for capture by a synchronous capture only when the session that makes the change has a NULL tag.An LCR is considered for apply by an apply process or dequeue by a messaging client only if the LCR contains a NULL tag.If the rules are added to a positive rule set, then setting this parameter to FALSE might be appropriate in update-anywhere configurations to avoid sending a change back to its source database. If the rules are added to the negative rule set for the Oracle Streams client, then a database change can be discarded only if it has a NULL tag.A setting of FALSE is often specified in update-anywhere configurations to avoid sending a change back to its source database.Usually, specify TRUE for this parameter if the inclusion_rule parameter is set to FALSE.See Also: Oracle Streams Replication Administrator's Guide for more information about tags</Parameter>
            <Parameter Name="SOURCE_DATABASE">The global name of the source database. If NULL, then the procedure does not add a condition regarding the source database to the generated rules.For capture process rules, specify NULL or the global name of the local database if you are creating a capture process locally at the source database. If you are adding rules to a downstream capture process rule set at a downstream database, then specify the source database of the changes that will be captured.For synchronous capture rules, specify the name of the local database.For apply process rules, specify the source database of the changes that will be applied by the apply process. The source database is the database where the changes originated. If an apply process applies captured messages, then the apply process can apply messages from only one capture process at one source database.For messaging client rules, specify NULL if you do not want the rules created by this procedure to have a condition for the source database. Specify a source database if you want the rules created by this procedure to have a condition for the source database. The source database is part of the information in an LCR, and user-constructed LCRs might or might not have this information.If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify DBS1 and the domain is .NET, then the procedure specifies DBS1.NET automatically.</Parameter>
            <Parameter Name="DML_RULE_NAME">If include_dml is TRUE, then this parameter contains the DML rule name.If include_dml is FALSE, then this parameter contains a NULL.</Parameter>
            <Parameter Name="DDL_RULE_NAME">If include_ddl is TRUE, then this parameter contains the DDL rule name.If include_ddl is FALSE, then this parameter contains a NULL.</Parameter>
            <Parameter Name="INCLUSION_RULE">If inclusion_rule is TRUE, then the procedure adds the rules to the positive rule set for the Oracle Streams client.If inclusion_rule is FALSE, then the procedure adds the rules to the negative rule set for the Oracle Streams client. A synchronous capture cannot have a negative rule set. Specifying FALSE for a synchronous capture raises an error.In either case, the system creates the rule set if it does not exist.</Parameter>
            <Parameter Name="AND_CONDITION">If non-NULL, appends the specified condition to the system-generated rule condition using an AND clause in the following way:The variable in the specified condition must be :lcr. For example, to specify that the table rules generated by the procedure evaluate to TRUE only if the Oracle Streams tag is the hexadecimal equivalent of '02', specify the following condition:The :lcr in the specified condition is converted to :dml or :ddl, depending on the rule that is being generated. If you are specifying an LCR member subprogram that is dependent on the LCR type (row or DDL), then make sure this procedure only generates the appropriate rule.Specifically, if you specify an LCR member subprogram that is valid only for row LCRs, then specify TRUE for the include_dml parameter and FALSE for the include_ddl parameter. If you specify an LCR member subprogram that is valid only for DDL LCRs, then specify FALSE for the include_dml parameter and TRUE for the include_ddl parameter.See Also: Chapter 275, "Logical Change Record TYPEs"</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CLEANUP_INSTANTIATION_SETUP" ElementId="#CDEIHIIC">
          <Description>Removes an Oracle Streams replication configuration that was set up by the PRE_INSTANTIATION_SETUP and POST_INSTANTIATION_SETUP procedures in this package</Description>
          <Parameters>
            <Parameter Name="MAINTAIN_MODE">Specify one of the following:GLOBAL to clean up the Oracle Streams configuration that maintained the entire database in both the source and destination databasesTRANSPORTABLE TABLESPACES to cleanup the Oracle Streams configuration that maintained a set of tablespaces at both the source and destination database</Parameter>
            <Parameter Name="TABLESPACE_NAMES">If maintain_mode is set to TRANSPORTABLE TABLESPACES, then specify the local tablespace set to be cloned at the destination database and maintained by Oracle Streams.The tablespaces in the tablespace set must exist at the source database, but these tablespaces must not exist at the destination database.A directory object must exist for each directory that contains the datafiles for the tablespace set. The user who invokes this procedure must have READ privilege on these directory objects.If maintain_mode is set to GLOBAL, then specify an empty tablespace set.Regardless of the maintain_mode setting, an error is raised if the tablespace_names parameter is not set or is set to NULL.See Also: TABLESPACE_SET Table Type</Parameter>
            <Parameter Name="SOURCE_DATABASE">The global name of the source database.If NULL, then the procedure uses the global name of the local database.</Parameter>
            <Parameter Name="DESTINATION_DATABASE">The global name of the destination database. A database link from the local database to the destination database with the same name as the global name of the destination database must exist and must be accessible to the user who runs the procedure.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="PERFORM_ACTIONS">If TRUE, then this procedure performs the necessary actions to clean up the Oracle Streams configuration directly.If FALSE, then the procedure does not perform the necessary actions to clean up the Oracle Streams configuration directly.Specify FALSE when this procedure is generating a script that you can edit and then run. The procedure raises an error if you specify FALSE and either of the following parameters is NULL:script_namescript_directory_object</Parameter>
            <Parameter Name="SCRIPT_NAME">If non-NULL and the perform_actions parameter is FALSE, then specify the name of the script generated by this procedure. The script contains all of the statements used to clean up the Oracle Streams configuration. If a file with the specified script name exists in the specified directory for the script_directory_object parameter, then the statements are appended to the existing file.If non-NULL and the perform_actions parameter is TRUE, then this procedure generates the specified script and performs the actions to clean up the Oracle Streams configuration directly.If NULL and the perform_actions parameter is TRUE, then this procedure directly performs the actions to clean up the Oracle Streams configuration without generating a script.If NULL and the perform_actions parameter is FALSE, then the procedure raises an error.</Parameter>
            <Parameter Name="SCRIPT_DIRECTORY_OBJECT">The directory object for the directory on the local computer system into which the generated script is placed.If the script_name parameter is NULL, then this parameter is ignored, and this procedure does not generate a script.If NULL and the script_name parameter is non-NULL, then the procedure raises an error.Note: The specified directory object cannot point to an Oracle Automatic Storage Management (ASM) disk group.</Parameter>
            <Parameter Name="CAPTURE_NAME">The name of the capture processes configured to capture changes in the Oracle Streams configuration. Do not specify an owner.If NULL, then the procedure automatically identifies the capture processes with system-generated names created by the PRE_INSTANTIATION_SETUP and POST_INSTANTIATION_SETUP procedures.</Parameter>
            <Parameter Name="CAPTURE_QUEUE_TABLE">The name of the queue table for each queue used by a capture process, specified as [schema_name.]queue_table_name. For example, strmadmin.streams_queue_table. If the schema is not specified, then the current user is the default.If NULL, then the procedure automatically identifies the capture queue tables with system-generated names created by the PRE_INSTANTIATION_SETUP and POST_INSTANTIATION_SETUP procedures.</Parameter>
            <Parameter Name="CAPTURE_QUEUE_NAME">The name of each queue used by a capture process, specified as [schema_name.]queue_name. For example, strmadmin.streams_queue.If the schema is not specified, then the queue table owner is the default. The queue owner automatically has privileges to perform all queue operations on the queue.If NULL, then the procedure automatically identifies the capture queues with system-generated names created by the PRE_INSTANTIATION_SETUP and POST_INSTANTIATION_SETUP procedures.</Parameter>
            <Parameter Name="CAPTURE_QUEUE_USER">The name of the user who has ENQUEUE and DEQUEUE privileges for the queue at the source database. This user is a secure queue user of the queue.</Parameter>
            <Parameter Name="PROPAGATION_NAME">The name of the propagations configured to propagate changes in the Oracle Streams configuration. Do not specify an owner.If NULL, then the procedure automatically identifies the propagations with system-generated names created by the PRE_INSTANTIATION_SETUP and POST_INSTANTIATION_SETUP procedures.</Parameter>
            <Parameter Name="APPLY_NAME">The name of the apply processes configured to apply changes in the Oracle Streams configuration. Do not specify an owner.If NULL, then the procedure automatically identifies the apply processes with system-generated names created by the PRE_INSTANTIATION_SETUP and POST_INSTANTIATION_SETUP procedures.</Parameter>
            <Parameter Name="APPLY_QUEUE_TABLE">The name of the queue table for each queue used by an apply process, specified as [schema_name.]queue_table_name. For example, strmadmin.streams_queue_table. If the schema is not specified, then the current user is the default.If NULL, then the procedure automatically identifies the apply queue tables with system-generated names created by the PRE_INSTANTIATION_SETUP and POST_INSTANTIATION_SETUP procedures.</Parameter>
            <Parameter Name="APPLY_QUEUE_NAME">The name of each queue used by an apply process, specified as [schema_name.]queue_name. For example, strmadmin.streams_queue.If the schema is not specified, then the queue table owner is the default. The queue owner automatically has privileges to perform all queue operations on the queue.If NULL, then the procedure automatically identifies the apply queues with system-generated names created by the PRE_INSTANTIATION_SETUP and POST_INSTANTIATION_SETUP procedures.</Parameter>
            <Parameter Name="APPLY_QUEUE_USER">The name of the user who has ENQUEUE and DEQUEUE privileges for the queue at the destination database. This user is a secure queue user of the queue.</Parameter>
            <Parameter Name="BI_DIRECTIONAL">Specify TRUE if the Oracle Streams replication configuration is bi-directional between the database specified in source_database and the database specified in destination_database.Specify FALSE if the Oracle Streams replication configuration is one way replication from the current database to the database specified in destination_database.</Parameter>
            <Parameter Name="CHANGE_GLOBAL_NAME">If TRUE, then the procedure changes the global name of the database specified in destination_database to match the global name of the current database.If FALSE, then the procedure does not change the global name of the database specified in destination_database.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_COLUMN" ElementId="#CDEDIEGB">
          <Description>Either adds or removes a declarative rule-based transformation which deletes a column from a row LCR that satisfies the specified rule</Description>
          <Parameters>
            <Parameter Name="RULE_NAME">The name of the rule, specified as [schema_name.]rule_name. If NULL, then the procedure raises an error.For example, to specify a rule in the hr schema named employees12, enter hr.employees12. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="TABLE_NAME">The name of the table from which the column is deleted in the row LCR, specified as [schema_name.]object_name. For example, hr.employees. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="COLUMN_NAME">The name of the column deleted from each row LCR that satisfies the rule.</Parameter>
            <Parameter Name="VALUE_TYPE">Specify 'NEW' to delete the column from the new values in the row LCR.Specify 'OLD' to delete the column from the old values in the row LCR.Specify '*' to delete the column from both the old and new values in the row LCR.</Parameter>
            <Parameter Name="STEP_NUMBER">The order of execution of the transformation.See Also: Oracle Streams Concepts and Administration for more information about transformation ordering</Parameter>
            <Parameter Name="OPERATION">Specify 'ADD' to add the transformation to the rule.Specify 'REMOVE' to remove the transformation from the rule.See "Usage Notes" for more information about this parameter.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_MESSAGE_TRACKING" ElementId="#CDEFEDGF">
          <Description>Returns the tracking label for the current session</Description>
        </SubProgram>
        <SubProgram Name="GET_SCN_MAPPING" ElementId="#i1018767">
          <Description>Gets information about the system change number (SCN) values to use for Oracle Streams capture and apply processes in an Oracle Streams replication environment</Description>
          <Parameters>
            <Parameter Name="APPLY_NAME">Name of the apply process which applies logical change records (LCRs) from the source database. The procedure raises an error if the specified apply process does not exist.</Parameter>
            <Parameter Name="SRC_PIT_SCN">The SCN at the source database.For point-in-time recovery, specify the point-in-time recovery SCN at the source database.If the specified SCN is greater than the source commit SCN of the last applied transaction, then NULL is returned for both dest_start_scn and dest_instantiation_scn. In this case, no values can be returned for these parameters because the corresponding transaction has not been applied at the destination database yet.</Parameter>
            <Parameter Name="DEST_INSTANTIATION_SCN">The SCN at the destination database that corresponds to the specified src_pit_scn at the source database.For point-in-time recovery, use this value for the instantiation SCNs at the source database during recovery.</Parameter>
            <Parameter Name="DEST_START_SCN">For point in time recovery, the SCN to use for the start_scn parameter for the recovery capture process.</Parameter>
            <Parameter Name="DEST_SKIP_TXN_IDS">Transaction IDs of transactions that were skipped at the dest_instantiation_scn because the apply process was applying nondependent transactions out of order.For point in time recovery, these transaction IDs should be ignored by the recovery apply process.This parameter is relevant only if the commit_serialization for the apply process that applied these transactions was set to DEPENDENT_TRANSACTIONS, and the transactions were applied out of order.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_TAG" ElementId="#CACGBIJI">
          <Description>Gets the binary tag for all redo entries generated by the current session</Description>
        </SubProgram>
        <SubProgram Name="KEEP_COLUMNS" ElementId="#CACFIFCG">
          <Description>Either adds or removes a declarative rule-based transformation which keeps a list of columns in a row LCR that satisfies the specified rule</Description>
          <Parameters>
            <Parameter Name="RULE_NAME">The name of the rule, specified as [schema_name.]rule_name. If NULL, then the procedure raises an error.For example, to specify a rule in the hr schema named employees12, enter hr.employees12. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="TABLE_NAME">The name of the table for which the columns are kept in the row LCR, specified as [schema_name.]object_name. For example, hr.employees. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="COLUMN_LIST">The names of the columns kept for each row LCR that satisfies the rule. Specify a comma-delimited list of type VARCHAR2. The transformation removes columns that are not in the list from the row LCR.If this parameter is set to NULL, and the column_table parameter is also set to NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="COLUMN_TABLE">The names of the columns kept for each row LCR that satisfies the rule. Specify a PL/SQL associative array of type DBMS_UTILITY.LNAME_ARRAY, where each element is the name of a column. The first schema should be in position 1. The last position must be NULL.The transformation removes columns that are not in the table from the row LCR.If this parameter is set to NULL, and the column_list parameter is also set to NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="VALUE_TYPE">Specify 'NEW' to keep the columns in the new values in the row LCR.Specify 'OLD' to keep the columns in the old values in the row LCR.Specify '*' to keep the columns in both the old and new values in the row LCR.</Parameter>
            <Parameter Name="STEP_NUMBER">The order of execution of the transformation.See Also: Oracle Streams Concepts and Administration for more information about transformation ordering</Parameter>
            <Parameter Name="OPERATION">Specify 'ADD' to add the transformation to the rule.Specify 'REMOVE' to remove the transformation from the rule.See "Usage Notes" for more information about this parameter.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MAINTAIN_CHANGE_TABLE" ElementId="#CACBEIJI">
          <Description>Configures an Oracle Streams environment that records in a change table the data manipulation language (DML) changes made to a source table. Optionally, this procedure can also configure one-way replication of the table from the source database to the destination database</Description>
          <Parameters>
            <Parameter Name="CHANGE_TABLE_NAME">The table that records changes to the source table. This table is maintained by Oracle Streams after configuration.Specify the table as [schema_name.]table_name. For example, hr.jobs_change_table. If the schema is not specified, then the current user is the default.If NULL, then the procedure raises an error.If the specified table exists at the database specified in the destination_database parameter, then the procedure raises an error.</Parameter>
            <Parameter Name="SOURCE_TABLE_NAME">The table at the source database for which changes are recorded.Specify the table as [schema_name.]table_name. For example, hr.jobs. If the schema is not specified, then the current user is the default.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="COLUMN_TYPE_LIST">A list of the columns in the source table for which changes are recorded. Specify a comma-delimited list of each column and its datatype.For example, specify the following for the hr.jobs table:The procedure automatically places columns with names that match the source database columns into an unconditional supplemental log group.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="EXTRA_COLUMN_LIST">A comma-delimited list of metadata attributes to include in the change table. The column name for a metadata attribute is in the format of attribute name followed by a $ symbol. For example, the source_database_name attribute is stored in the source_database_name$ column in the change table.The following metadata attributes can be included:value_typesource_database_namecommand_typeobject_ownerobject_nametagtransaction_idscncommit_scncompatibleinstance_numbermessage_numberrow_textrow_idserial#session#source_timethread#tx_nameusernameAll of these metadata attributes, except for value_type and message_number, are row LCR attributes that can be stored in row LCRs. For information about LCR attributes, see Oracle Streams Concepts and Administration.The value_type$ column in the change table contains either OLD or NEW, depending on whether the column value is the original column value or the new column value, respectively.The message_number$ column in the change table contains the identification number of each row LCR within a transaction. The message number increases incrementally for each row LCR within a transaction and shows the order of the row LCRs within a transaction.The procedure automatically configures the source database to place information about extra attributes, such as serial#, into the redo log so that the information can be captured and recorded.</Parameter>
            <Parameter Name="CAPTURE_VALUES">Specify which values to capture when update operations are performed on the source table:old - To capture the original values for an updated column in the source tablenew - To capture the new values for an updated column in the source table* - To capture both the original and the new values for an updated column in the source tableIf NULL, then the procedure raises an error.Note: For insert operations, only new column values can be captured. For delete operations, only old column values can be captured.</Parameter>
            <Parameter Name="OPTIONS_STRING">String of options passed to the CREATE TABLE statement that creates the change table. The string is appended to the generated CREATE TABLE statement after the closing parenthesis that defines the columns of the table. The string must be syntactically correct.</Parameter>
            <Parameter Name="SCRIPT_NAME">If non-NULL and the perform_actions parameter is FALSE, then specify the name of the script generated by this procedure. The script contains all of the statements used to configure the environment. If a file with the specified script name exists in the specified directory for the script_directory_object parameter, then the procedure appends the statements to the existing file.If non-NULL and the perform_actions parameter is TRUE, then the procedure generates the specified script and performs the actions to configure the replication environment directly.If NULL and the perform_actions parameter is TRUE, then the procedure performs the actions to configure the replication environment directly and does not generate a script.If NULL and the perform_actions parameter is FALSE, then the procedure raises an error.</Parameter>
            <Parameter Name="SCRIPT_DIRECTORY_OBJECT">The directory object for the directory on the local computer system into which the generated script is placed.If the script_name parameter is NULL, then the procedure ignores this parameter and does not generate a script.If NULL and the script_name parameter is non-NULL, then the procedure raises an error.Note: The specified directory object cannot point to an Oracle Automatic Storage Management (ASM) disk group.</Parameter>
            <Parameter Name="PERFORM_ACTIONS">If TRUE, then the procedure performs the necessary actions to configure the environment directly.If FALSE, then the procedure does not perform the necessary actions to configure the environment directly.Specify FALSE when this procedure is generating a script that you can edit and then run. The procedure raises an error if you specify FALSE and either of the following parameters is NULL:script_namescript_directory_object</Parameter>
            <Parameter Name="CAPTURE_NAME">The name of each capture process configured to capture changes. Do not specify an owner.If the specified name matches the name of an existing capture process, then the procedure uses the existing capture process and adds the rules for capturing changes to the database to the positive capture process rule set.If NULL, then the system generates a name for each capture process it creates.Note: The capture process name cannot be altered after the capture process is created.</Parameter>
            <Parameter Name="PROPAGATION_NAME">The name of the propagation configured to propagate changes from the source database to the destination database. Do not specify an owner.If the specified name matches the name of an existing propagation, then the procedure uses the existing propagation and adds the rules for propagating changes to the positive propagation rule set.If NULL, then the system generates a name for the propagation.If non-NULL and the source_database and destination_database are set to the same value, then this procedure raises an error. When the capture process and apply process are in the same database, they can use the same queue, and a propagation is not needed.Note: The propagation name cannot be altered after the propagation is created.</Parameter>
            <Parameter Name="APPLY_NAME">The name of each apply process configured to apply changes. Do not specify an owner.If the specified name matches the name of an existing apply process, then the procedure uses the existing apply process and adds the rules for applying changes to the positive apply process rule set.The specified name must not match the name of an existing messaging client at the destination database.If NULL, then the system generates a name for the apply process. When set to NULL, no apply process that applies changes from the source database can exist on the destination database. If an apply process that applies changes from the source database exists at the destination database, then specify a non-NULL value for this parameter.Note: The apply process name cannot be altered after the apply process is created.</Parameter>
            <Parameter Name="SOURCE_DATABASE">The global name of the source database.If the specified global name is the same as the global name of the local database, then the procedure configures a local capture process for the source database.If the specified global name is different from the global name of the local database, then the procedure configures a downstream capture process at the local database. In this case, a database link from the local database to the source database with the same name as the global name of the source database must exist and must be accessible to the user who runs the procedure.If NULL, then the procedure uses the global name of the local database.</Parameter>
            <Parameter Name="DESTINATION_DATABASE">The global name of the destination database.If the local database is not the destination database, then a database link from the local database to the destination database with the same name as the global name of the destination database must exist and must be accessible to the user who runs the procedure.If NULL, then the procedure uses the global name of the local database.</Parameter>
            <Parameter Name="KEEP_CHANGE_COLUMNS_ONLY">If TRUE, then this procedure adds a declarative rule-based transformation which keeps the list of columns specified in the column_type_list parameter. The columns that are not specified in the column_type_list parameter are removed from each row LCR captured by the capture process.If FALSE, then this procedure does not create a declarative rule-based transformation, and all of the columns in the row LCRs are kept.Specify FALSE when information about columns that are not included in the column_type_list parameter is needed at the destination database. For example, if the execute_lcr parameter is set to TRUE and the configuration will replicate all of the columns in a source table, but the column_type_list parameter includes a subset of these columns, then the keep_change_columns_only parameter should be set to FALSE.Note: When this parameter is set to TRUE, a declarative rule-based transformation is always created, even if the column_type_list includes all of the columns in the source table.</Parameter>
            <Parameter Name="EXECUTE_LCR">If TRUE, then this procedure creates a change handler that executes each row LCR at the destination database.If FALSE, then the row LCRs are not executed at the destination database.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MAINTAIN_GLOBAL" ElementId="#CDEGDDEG">
          <Description>Configures an Oracle Streams environment that replicates changes at the database level between two databases</Description>
          <Parameters>
            <Parameter Name="SOURCE_DIRECTORY_OBJECT">The directory object for the directory on the computer system running the source database into which the generated Data Pump export dump file is placed. This file remains in this directory after the procedure completes.This parameter is ignored if instantiation is set to DBMS_STREAMS_ADM.INSTANTIATION_FULL_NETWORK or DBMS_STREAMS_ADM.INSTANTIATION_NONE. In this case, specify NULL for the source_directory_object parameter.If NULL and instantiation is set to DBMS_STREAMS_ADM.INSTANTIATION_FULL, then the procedure raises an error.Note: The specified directory object cannot point to an Oracle Automatic Storage Management (ASM) disk group.</Parameter>
            <Parameter Name="DESTINATION_DIRECTORY_OBJECT">The directory object for the directory on the computer system running the destination database into which the generated Data Pump export dump file is transferred.If the source database and destination database run on the same computer system, then the source and destination directories must be different.This parameter is ignored if instantiation is set to DBMS_STREAMS_ADM.INSTANTIATION_FULL_NETWORK or DBMS_STREAMS_ADM.INSTANTIATION_NONE. In these cases, specify NULL for the destination_directory_object parameter.If NULL and instantiation is set to DBMS_STREAMS_ADM.INSTANTIATION_FULL, then the procedure raises an error.Note: The specified directory object cannot point to an Oracle ASM disk group.</Parameter>
            <Parameter Name="SOURCE_DATABASE">The global name of the source database.If the specified global name is the same as the global name of the local database, then the procedure configures a local capture process for the source database.If the specified global name is different from the global name of the local database, then the procedure configures a downstream capture process at the local database. In this case, a database link from the local database to the source database with the same name as the global name of the source database must exist and must be accessible to the user who runs the procedure.If NULL, then the procedure uses the global name of the local database.</Parameter>
            <Parameter Name="DESTINATION_DATABASE">The global name of the destination database.If the local database is not the destination database, then a database link from the local database to the destination database with the same name as the global name of the destination database must exist and must be accessible to the user who runs the procedure.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="DUMP_FILE_NAME">The name of the Data Pump export dump file. If a file with the specified file name exists in the specified directory for the source_directory_object or destination_directory_object parameter, then the procedure raises an error.This parameter is ignored if instantiation is set to DBMS_STREAMS_ADM.INSTANTIATION_FULL_NETWORK or DBMS_STREAMS_ADM.INSTANTIATION_NONE.If NULL and instantiation is set to DBMS_STREAMS_ADM.INSTANTIATION_FULL, then the export dump file name is generated by the system. In this case, the export dump file name is expatnn.dmp, where nn is a sequence number. The sequence number is increased to produce an export dump file with a unique name in the source directory.</Parameter>
            <Parameter Name="LOG_FILE">The name of the Data Pump export log file. This log file is placed in the same directory as the Data Pump export dump file.This parameter is ignored if instantiation is set to DBMS_STREAMS_ADM.INSTANTIATION_FULL_NETWORK or DBMS_STREAMS_ADM.INSTANTIATION_NONE.If NULL and instantiation is set to DBMS_STREAMS_ADM.INSTANTIATION_FULL, then the log file name is the same name as the export dump file name with an extension of .clg.</Parameter>
            <Parameter Name="INSTANTIATION">Specify whether to perform instantiation and, if instantiation is performed, the type of instantiation:DBMS_STREAMS_ADM.INSTANTIATION_FULL performs a full Data Pump export at the source database and a Data Pump import of the export dump file at the destination database. The instantiation SCN is set for the shared database objects during import. If the instantiation parameter is set to this value, then the user who runs this procedure must have EXECUTE privilege on the DBMS_FILE_TRANSFER package.DBMS_STREAMS_ADM.INSTANTIATION_FULL_NETWORK performs a full network Data Pump import. A network import means that Data Pump performs the import without using an export dump file. The instantiation SCN is set for the shared database objects during import. If the instantiation parameter is set to this value, then a database link from the destination database to the source database with the same name as the global name of the source database must exist and must be accessible to the user who runs the procedure.DBMS_STREAMS_ADM.INSTANTIATION_NONE does not perform an instantiation. This setting is valid only if the perform_actions parameter is set to FALSE, and the procedure generates a configuration script. In this case, the configuration script does not perform an instantiation and does not set the instantiation SCN for each shared database object. Instead, you must perform the instantiation and ensure that instantiation SCN values are set properly. If you use the RMAN DUPLICATE or CONVERT DATABASE command for database instantiation, then the destination database cannot be the capture database.If this parameter is set to DBMS_STREAMS_ADM.INSTANTIATION_FULL or DBMS_STREAMS_ADM.INSTANTIATION_FULL_NETWORK, then the database objects being instantiated must exist at the source database.If an instantiated database object does not exist at the destination database, then it is imported at the destination database, including its supplemental logging specifications from the source database and its supporting database objects, such as indexes and triggers. However, if the database object exists at the destination database before instantiation, then it is not imported at the destination database. Therefore, the supplemental logging specifications from the source database are not specified for the database object at the destination database, and the supporting database objects are not imported.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MAINTAIN_SCHEMAS" ElementId="#CDEDAJEB">
          <Description>Configures an Oracle Streams environment that replicates changes to specified schemas between two databases</Description>
          <Parameters>
            <Parameter Name="SCHEMA_NAMES">The schemas to be configured for replication and maintained by Oracle Streams after configuration. The schemas can be specified in the following ways:Comma-delimited list of type VARCHAR2A PL/SQL associative array of type DBMS_UTILITY.UNCL_ARRAY, where each element is the name of a schema. The first schema should be in position 1. The last position must be NULL.This procedure raises an error in any of the following cases:When a specified schema does not exist at the source databaseWhen the schema_names parameter is set to NULL</Parameter>
            <Parameter Name="SOURCE_DIRECTORY_OBJECT">The directory object for the directory on the computer system running the source database into which the generated Data Pump export dump file is placed. This file remains in this directory after the procedure completes.This parameter is ignored if instantiation is set to DBMS_STREAMS_ADM.INSTANTIATION_SCHEMA_NETWORK or DBMS_STREAMS_ADM.INSTANTIATION_NONE. In this case, specify NULL for the source_directory_object parameter.If NULL and instantiation is set to DBMS_STREAMS_ADM.INSTANTIATION_SCHEMA, then the procedure raises an error.Note: The specified directory object cannot point to an Oracle Automatic Storage Management (ASM) disk group.</Parameter>
            <Parameter Name="DESTINATION_DIRECTORY_OBJECT">The directory object for the directory on the computer system running the destination database into which the generated Data Pump export dump file is transferred.If the source database and destination database run on the same computer system, then the source and destination directories must be different.This parameter is ignored if instantiation is set to DBMS_STREAMS_ADM.INSTANTIATION_SCHEMA_NETWORK or DBMS_STREAMS_ADM.INSTANTIATION_NONE. In this case, specify NULL for the destination_directory_object parameter.If NULL and instantiation is set to DBMS_STREAMS_ADM.INSTANTIATION_SCHEMA, then the procedure raises an error.Note: The specified directory object cannot point to an Oracle ASM disk group.</Parameter>
            <Parameter Name="SOURCE_DATABASE">The global name of the source database.If the specified global name is the same as the global name of the local database, then the procedure configures a local capture process for the source database.If the specified global name is different from the global name of the local database, then the procedure configures a downstream capture process at the local database. In this case, a database link from the local database to the source database with the same name as the global name of the source database must exist and must be accessible to the user who runs the procedure.If NULL, then the procedure uses the global name of the local database.</Parameter>
            <Parameter Name="DESTINATION_DATABASE">The global name of the destination database.If the local database is not the destination database, then a database link from the local database to the destination database with the same name as the global name of the destination database must exist and must be accessible to the user who runs the procedure.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="DUMP_FILE_NAME">The name of the Data Pump export dump file. If a file with the specified file name exists in the specified directory for the source_directory_object or destination_directory_object parameter, then the procedure raises an error.This parameter is ignored if instantiation is set to DBMS_STREAMS_ADM.INSTANTIATION_SCHEMA_NETWORK or DBMS_STREAMS_ADM.INSTANTIATION_NONE.If NULL and instantiation is set to DBMS_STREAMS_ADM.INSTANTIATION_SCHEMA, then the export dump file name is generated by the system. In this case, the export dump file name is expatnn.dmp, where nn is a sequence number. The sequence number is increased to produce an export dump file with a unique name in the source directory.</Parameter>
            <Parameter Name="CAPTURE_QUEUE_USER">The name of the user who requires ENQUEUE and DEQUEUE privileges for the queue at the source database. This user also is configured as a secure queue user of the queue. The queue user cannot grant these privileges to other users because they are not granted with the GRANT option.If NULL, then the procedure does not grant any privileges. You can also grant queue privileges to the appropriate users using the DBMS_AQADM package.</Parameter>
            <Parameter Name="LOG_FILE">The name of the Data Pump export log file. This log file is placed in the same directory as the Data Pump export dump file.This parameter is ignored if instantiation is set to DBMS_STREAMS_ADM.INSTANTIATION_SCHEMA_NETWORK or DBMS_STREAMS_ADM.INSTANTIATION_NONE.If NULL and instantiation is set to DBMS_STREAMS_ADM.INSTANTIATION_SCHEMA, then the log file name is the same name as the export dump file name with an extension of .clg.</Parameter>
            <Parameter Name="INSTANTIATION">Specify whether to perform instantiation and, if instantiation is performed, the type of instantiation:DBMS_STREAMS_ADM.INSTANTIATION_SCHEMA performs a full Data Pump export at the source database and a Data Pump import of the export dump file at the destination database. The instantiation SCN is set for the shared database objects during import. If the instantiation parameter is set to this value, then the user who runs this procedure must have EXECUTE privilege on the DBMS_FILE_TRANSFER package.DBMS_STREAMS_ADM.INSTANTIATION_SCHEMA_NETWORK performs a full network Data Pump import. A network import means that Data Pump performs the import without using an export dump file. The instantiation SCN is set for the shared database objects during import. If the instantiation parameter is set to this value, then a database link from the destination database to the source database with the same name as the global name of the source database must exist and must be accessible to the user who runs the procedure.DBMS_STREAMS_ADM.INSTANTIATION_NONE does not perform an instantiation. This setting is valid only if the perform_actions parameter is set to FALSE, and the procedure generates a configuration script. In this case, the configuration script does not perform an instantiation and does not set the instantiation SCN for each shared database object. Instead, you must perform the instantiation and ensure that instantiation SCN values are set properly.If this parameter is set to DBMS_STREAMS_ADM.INSTANTIATION_SCHEMA or DBMS_STREAMS_ADM.INSTANTIATION_SCHEMA_NETWORK, then the database objects being instantiated must exist at the source database, and the tablespaces that contain the schemas must exist at the destination database.If an instantiated database object does not exist at the destination database, then it is imported at the destination database, including its supplemental logging specifications from the source database and its supporting database objects, such as indexes and triggers. However, if the database object exists at the destination database before instantiation, then it is not imported at the destination database. Therefore, the supplemental logging specifications from the source database are not specified for the database object at the destination database, and the supporting database objects are not imported.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MAINTAIN_SIMPLE_TABLESPACE" ElementId="#i1029845">
          <Description>Clones a simple tablespace from a source database at a destination database and uses Oracle Streams to maintain this tablespace at both databases. This procedure is deprecated.</Description>
          <Parameters>
            <Parameter Name="TABLESPACE_NAME">The local simple tablespace to be cloned at the destination database and maintained by Oracle Streams.The tablespace must exist at the source database, but it must not exist at the destination database.A directory object must exist for the directory that contains the datafile for the tablespace. The user who invokes this procedure must have READ privilege on this directory object. The directory object cannot point to an Oracle Automatic Storage Management (ASM) disk group.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="SOURCE_DIRECTORY_OBJECT">The directory object for the directory on the computer system running the source database into which the generated Data Pump export dump file and the datafile for the cloned tablespace are placed. These files remain in this directory after the procedure completes.If NULL, then the procedure raises an error.Note: The specified directory object cannot point to an Oracle ASM disk group.</Parameter>
            <Parameter Name="DESTINATION_DIRECTORY_OBJECT">The directory object for the directory on the computer system running the destination database into which the generated Data Pump export dump file and the datafile for the cloned tablespace are transferred.If the source database and destination database run on the same computer system, then the source and destination directories must be different.If NULL, then the procedure raises an error.Note: The specified directory object cannot point to an Oracle ASM disk group.</Parameter>
            <Parameter Name="DESTINATION_DATABASE">The global name of the destination database. A database link from the source database to the destination database with the same name as the global name of the destination database must exist.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="SETUP_STREAMS">If TRUE, then the procedure performs the necessary actions to maintain the tablespace directly.If FALSE, then the procedure does not perform the necessary actions to maintain the tablespace directly.Specify FALSE when this procedure is generating a script that you can edit and then run. The procedure raises an error if you specify FALSE and either of the following parameters is NULL:script_namescript_directory_object</Parameter>
            <Parameter Name="SCRIPT_NAME">If non-NULL and the setup_streams parameter is FALSE, then specify the name of the script generated by this procedure. The script contains all of the statements used to maintain the specified tablespace. If a file with the specified script name exists in the specified directory for the script_directory_object parameter, then the procedure appends the statements to the existing file.If non-NULL and the setup_streams parameter is TRUE, then this procedure generates the specified script and performs the actions to maintain the specified tablespace directly.If NULL and the setup_streams parameter is TRUE, then this procedure does not generate a script and performs the actions to maintain the specified tablespace directly.If NULL and the setup_streams parameter is FALSE, then the procedure raises an error.</Parameter>
            <Parameter Name="SCRIPT_DIRECTORY_OBJECT">The directory object for the directory on the local computer system into which the generated script is placed.If the script_name parameter is NULL, then the procedure ignores this parameter and does not generate a script.If NULL and the script_name parameter is non-NULL, then the procedure raises an error.Note: The specified directory object cannot point to an Oracle ASM disk group.</Parameter>
            <Parameter Name="BI_DIRECTIONAL">Specify TRUE to configure bi-directional replication between the current database and the database specified in destination_database. Both databases are configured as source and destination databases, a capture and apply process is configured at both databases, and propagations are configured between the databases to propagate messages.Specify FALSE to configure one way replication from the current database to the database specified in destination_database. A capture process is configured at the current database, a propagation is configured to propagate messages from the current database to the destination database, and an apply process is configured at the destination database.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MAINTAIN_SIMPLE_TTS" ElementId="#CDEIFFHH">
          <Description>Clones a simple tablespace from a source database at a destination database and uses Oracle Streams to maintain this tablespace at both databases</Description>
          <Parameters>
            <Parameter Name="TABLESPACE_NAME">The local simple tablespace to be cloned at the destination database and maintained by Oracle Streams.The tablespace must exist at the source database, but it must not exist at the destination database.A directory object must exist for the directory that contains the datafile for the tablespace. The user who invokes this procedure must have READ privilege on this directory object. The directory object cannot point to an Oracle Automatic Storage Management (ASM) disk group.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="SOURCE_DIRECTORY_OBJECT">The directory object for the directory on the computer system running the source database into which the generated Data Pump export dump file and the datafile for the cloned tablespace are placed. These files remain in this directory after the procedure completes.If NULL, then the procedure raises an error.Note: The specified directory object cannot point to an Oracle ASM disk group.</Parameter>
            <Parameter Name="DESTINATION_DIRECTORY_OBJECT">The directory object for the directory on the computer system running the destination database into which the generated Data Pump export dump file and the datafile for the cloned tablespace are transferred.If the source database and destination database run on the same computer system, then the source and destination directories must be different.If NULL, then the procedure raises an error.Note: The specified directory object cannot point to an Oracle ASM disk group.</Parameter>
            <Parameter Name="SOURCE_DATABASE">The global name of the source database.If the specified global name is the same as the global name of the local database, then the procedure configures a local capture process for the source database.If the specified global name is different from the global name of the local database, then the procedure configures a downstream capture process at the local database. In this case, a database link from the local database to the source database with the same name as the global name of the source database must exist and must be accessible to the user who runs the procedure.If NULL, then the procedure uses the global name of the local database.</Parameter>
            <Parameter Name="DESTINATION_DATABASE">The global name of the destination database.If the local database is not the destination database, then a database link from the local database to the destination database with the same name as the global name of the destination database must exist and must be accessible to the user who runs the procedure.If NULL, then the procedure raises an error.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MAINTAIN_TABLES" ElementId="#CDEDADAI">
          <Description>Configures an Oracle Streams environment that replicates changes to specified tables between two databases</Description>
          <Parameters>
            <Parameter Name="TABLE_NAMES">The tables to be configured for replication and maintained by Oracle Streams after configuration. The tables can be specified in the following ways:Comma-delimited list of type VARCHAR2A PL/SQL associative array of type DBMS_UTILITY.UNCL_ARRAY, where each element is the name of a table. The first table should be in position 1. The last position must be NULL.Each table should be specified as [schema_name.]table_name. For example, hr.employees. If the schema is not specified, then the current user is the default.This procedure raises an error in any of the following cases:When a specified table does not exist at the source databaseWhen the table_names parameter is set to NULL</Parameter>
            <Parameter Name="SOURCE_DIRECTORY_OBJECT">The directory object for the directory on the computer system running the source database into which the generated Data Pump export dump file is placed. This file remain in this directory after the procedure completes.This parameter is ignored if instantiation is set to DBMS_STREAMS_ADM.INSTANTIATION_TABLE_NETWORK or DBMS_STREAMS_ADM.INSTANTIATION_NONE. In this case, specify NULL for the source_directory_object parameter.If NULL and instantiation is set to DBMS_STREAMS_ADM.INSTANTIATION_TABLE, then the procedure raises an error.Note: The specified directory object cannot point to an Oracle Automatic Storage Management (ASM) disk group.</Parameter>
            <Parameter Name="DESTINATION_DIRECTORY_OBJECT">The directory object for the directory on the computer system running the destination database into which the generated Data Pump export dump file is transferred.If the source database and destination database run on the same computer system, then the source and destination directories must be different.This parameter is ignored if instantiation is set to DBMS_STREAMS_ADM.INSTANTIATION_TABLE_NETWORK or DBMS_STREAMS_ADM.INSTANTIATION_NONE. In this case, specify NULL for the destination_directory_object parameter.If NULL and instantiation is set to DBMS_STREAMS_ADM.INSTANTIATION_TABLE, then the procedure raises an error.Note: The specified directory object cannot point to an Oracle ASM disk group.</Parameter>
            <Parameter Name="SOURCE_DATABASE">The global name of the source database.If the specified global name is the same as the global name of the local database, then the procedure configures a local capture process for the source database.If the specified global name is different from the global name of the local database, then the procedure configures a downstream capture process at the local database. In this case, a database link from the local database to the source database with the same name as the global name of the source database must exist and must be accessible to the user who runs the procedure.If NULL, then the procedure uses the global name of the local database.</Parameter>
            <Parameter Name="DESTINATION_DATABASE">The global name of the destination database.If the local database is not the destination database, then a database link from the local database to the destination database with the same name as the global name of the destination database must exist and must be accessible to the user who runs the procedure.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="DUMP_FILE_NAME">The name of the Data Pump export dump file. If a file with the specified file name exists in the specified directory for the source_directory_object or destination_directory_object parameter, then the procedure raises an error.This parameter is ignored if instantiation is set to DBMS_STREAMS_ADM.INSTANTIATION_TABLE_NETWORK or DBMS_STREAMS_ADM.INSTANTIATION_NONE.If NULL and instantiation is set to DBMS_STREAMS_ADM.INSTANTIATION_TABLE, then the export dump file name is generated by the system. In this case, the export dump file name is expatnn.dmp, where nn is a sequence number. The sequence number is increased to produce an export dump file with a unique name in the source directory.</Parameter>
            <Parameter Name="CAPTURE_QUEUE_USER">The name of the user who requires ENQUEUE and DEQUEUE privileges for the queue at the source database. This user also is configured as a secure queue user of the queue. The queue user cannot grant these privileges to other users because they are not granted with the GRANT option.If NULL, then the procedure does not grant any privileges. You can also grant queue privileges to the appropriate users using the DBMS_AQADM package.</Parameter>
            <Parameter Name="LOG_FILE">The name of the Data Pump export log file. This log file is placed in the same directory as the Data Pump export dump file.This parameter is ignored if instantiation is set to DBMS_STREAMS_ADM.INSTANTIATION_TABLE_NETWORK or DBMS_STREAMS_ADM.INSTANTIATION_NONE.If NULL and instantiation is set to DBMS_STREAMS_ADM.INSTANTIATION_TABLE, then the log file name is the same name as the export dump file name with an extension of .clg.</Parameter>
            <Parameter Name="INSTANTIATION">Specify whether to perform instantiation and, if instantiation is performed, the type of instantiation:DBMS_STREAMS_ADM.INSTANTIATION_TABLE performs a full Data Pump export at the source database and a Data Pump import of the export dump file at the destination database. If the instantiation parameter is set to this value, then the user who runs this procedure must have EXECUTE privilege on the DBMS_FILE_TRANSFER package.DBMS_STREAMS_ADM.INSTANTIATION_TABLE_NETWORK performs a full network Data Pump import. A network import means that Data Pump performs the import without using an export dump file. If the instantiation parameter is set to this value, then a database link from the destination database to the source database with the same name as the global name of the source database must exist and must be accessible to the user who runs the procedure.DBMS_STREAMS_ADM.INSTANTIATION_NONE does not perform an instantiation. This setting is valid only if the perform_actions parameter is set to FALSE, and the procedure generates a configuration script. In this case, the configuration script does not perform an instantiation and does not set the instantiation SCN for each shared database object. Instead, you must perform the instantiation and ensure that instantiation SCN values are set properly.If this parameter is set to DBMS_STREAMS_ADM.INSTANTIATION_TABLE or DBMS_STREAMS_ADM.INSTANTIATION_TABLE_NETWORK, then the tables being instantiated must exist at the source database, and the tablespaces that contain the tables must exist at the destination database.If an instantiated database object does not exist at the destination database, then it is imported at the destination database, including its supplemental logging specifications from the source database and its supporting database objects, such as indexes and triggers. However, if the database object exists at the destination database before instantiation, then it is not imported at the destination database. Therefore, the supplemental logging specifications from the source database are not specified for the database object at the destination database, and the supporting database objects are not imported.Also, if an instantiated table does not exist at the destination database, then this procedure sets the instantiation SCN for the table. However, if an instantiated table exist at the destination database before instantiation, then this procedure does not set the instantiation SCN for the table. In this case, you must set the instantiation SCN for the table manually after the procedure completes.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MAINTAIN_TABLESPACES" ElementId="#i1016534">
          <Description>Clones a set of tablespaces from a source database at a destination database and uses Oracle Streams to maintain these tablespaces at both databases. This procedure is deprecated.</Description>
          <Parameters>
            <Parameter Name="TABLESPACE_NAMES">The local tablespace set to be cloned at the destination database and maintained by Oracle Streams.The tablespaces in the tablespace set must exist at the source database, but these tablespaces must not exist at the destination database.A directory object must exist for each directory that contains the datafiles for the tablespace set. The user who invokes this procedure must have READ privilege on these directory objects. The directory object cannot point to an Oracle Automatic Storage Management (ASM) disk group.If NULL, then the procedure raises an error.See Also: TABLESPACE_SET Table Type</Parameter>
            <Parameter Name="SOURCE_DIRECTORY_OBJECT">The directory object for the directory on the computer system running the source database into which the generated Data Pump export dump file and the datafiles that comprise the cloned tablespace set are placed. These files remain in this directory after the procedure completes.If NULL, then the procedure raises an error.Note: The specified directory object cannot point to an Oracle ASM disk group.</Parameter>
            <Parameter Name="DESTINATION_DIRECTORY_OBJECT">The directory object for the directory on the computer system running the destination database into which the generated Data Pump export dump file and the datafiles that comprise the cloned tablespace set are transferred.If the source database and destination database run on the same computer system, then the source and destination directories must be different.If NULL, then the procedure raises an error.Note: The specified directory object cannot point to an Oracle ASM disk group.</Parameter>
            <Parameter Name="DESTINATION_DATABASE">The global name of the destination database. A database link from the source database to the destination database with the same name as the global name of the destination database must exist and must be accessible to the user who runs the procedure.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="SETUP_STREAMS">If TRUE, then the procedure performs the necessary actions to maintain the tablespaces directly.If FALSE, then the procedure does not perform the necessary actions to maintain the tablespaces directly.Specify FALSE when this procedure is generating a script that you can edit and then run. The procedure raises an error if you specify FALSE and either of the following parameters is NULL:script_namescript_directory_object</Parameter>
            <Parameter Name="SCRIPT_NAME">If non-NULL and the setup_streams parameter is FALSE, then specify the name of the script generated by this procedure. The script contains all of the statements used to maintain the specified tablespace set. If a file with the specified script name exists in the specified directory for the script_directory_object parameter, then the procedure appends the statements to the existing file.If non-NULL and the setup_streams parameter is TRUE, then this procedure generates the specified script and performs the actions to maintain the specified tablespace directly.If NULL and the setup_streams parameter is TRUE, then this procedure does not generate a script and performs the actions to maintain the specified tablespace set directly.If NULL and the setup_streams parameter is FALSE, then the procedure raises an error.</Parameter>
            <Parameter Name="SCRIPT_DIRECTORY_OBJECT">The directory object for the directory on the local computer system into which the generated script is placed.If the script_name parameter is NULL, then the procedure ignores this parameter and does not generate a script.If NULL and the script_name parameter is non-NULL, then the procedure raises an error.Note: The specified directory object cannot point to an Oracle ASM disk group.</Parameter>
            <Parameter Name="DUMP_FILE_NAME">The name of the Data Pump export dump file that contains the specified tablespace set. If a file with the specified file name exists in the specified directory for the source_directory_object or destination_directory_object parameter, then the procedure raises an error.If NULL, then the export dump file name is generated by the system. In this case, the export dump file name is expatnn.dmp, where nn is a sequence number. The sequence number is increased to produce an export dump file with a unique name in the source directory.</Parameter>
            <Parameter Name="SOURCE_QUEUE_TABLE">The name of the queue table for the queue at the source database, specified as [schema_name.]queue_table_name. For example, strmadmin.streams_queue_table. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="SOURCE_QUEUE_NAME">The name of the queue at the source database that will function as the ANYDATA queue, specified as [schema_name.]queue_name. For example, strmadmin.streams_queue.If the schema is not specified, then the queue table owner is the default. The queue owner automatically has privileges to perform all queue operations on the queue.</Parameter>
            <Parameter Name="SOURCE_QUEUE_USER">The name of the user who requires ENQUEUE and DEQUEUE privileges for the queue at the source database. This user also is configured as a secure queue user of the queue. The queue user cannot grant these privileges to other users because they are not granted with the GRANT option.If NULL, then the procedure does not grant any privileges. You can also grant queue privileges to the appropriate users using the DBMS_AQADM package.</Parameter>
            <Parameter Name="DESTINATION_QUEUE_TABLE">The name of the queue table for the queue at the destination database, specified as [schema_name.]queue_table_name. For example, strmadmin.streams_queue_table. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="DESTINATION_QUEUE_NAME">The name of the queue at the destination database that will function as the ANYDATA queue, specified as [schema_name.]queue_name. For example, strmadmin.streams_queue.If the schema is not specified, then the queue table owner is the default. The queue owner automatically has privileges to perform all queue operations on the queue.</Parameter>
            <Parameter Name="DESTINATION_QUEUE_USER">The name of the user who requires ENQUEUE and DEQUEUE privileges for the queue at the destination database. This user also is configured as a secure queue user of the queue. The queue user cannot grant these privileges to other users because they are not granted with the GRANT option.If NULL, then the procedure does not grant any privileges. You can also grant queue privileges to the appropriate users using the DBMS_AQADM package.</Parameter>
            <Parameter Name="CAPTURE_NAME">The name of each capture process configured to capture changes to the database objects in the tablespace set. Do not specify an owner.If the specified name matches the name of an existing capture process, then the procedure uses the existing capture process and adds the rules for capturing changes to the database objects in the tablespace set to the positive capture process rule set.Note: The capture process name cannot be altered after the capture process is created.</Parameter>
            <Parameter Name="PROPAGATION_NAME">The name of each propagation configured to propagate changes to the database objects in the tablespace set. Do not specify an owner.If the specified name matches the name of an existing propagation, then the procedure uses the existing propagation and adds the rules for propagating changes to the database objects in the tablespace set to the positive propagation rule set.If NULL, then the system generates a name for each propagation it creates.Note: The propagation name cannot be altered after the propagation is created.</Parameter>
            <Parameter Name="APPLY_NAME">The name of each apply process configured to apply changes to the database objects in the tablespace set. Do not specify an owner.If the specified name matches the name of an existing apply process, then the procedure uses the existing apply process and adds the rules for applying changes to the database objects in the tablespace set to the positive apply process rule set.The specified name must not match the name of an existing messaging client at the destination database.If NULL, then the system generates a name for each apply process it creates.Note: The apply process name cannot be altered after the apply process is created.</Parameter>
            <Parameter Name="LOG_FILE">The name of the Data Pump export log file. This log file is placed in the same directory as the Data Pump export dump file.If NULL, then the log file name is the same name as the export dump file name with an extension of .clg.</Parameter>
            <Parameter Name="BI_DIRECTIONAL">Specify TRUE to configure bi-directional replication between the current database and the database specified in destination_database. Both databases are configured as source and destination databases, a capture and apply process is configured at both databases, and propagations are configured between the databases to propagate messages.Specify FALSE to configure one way replication from the current database to the database specified in destination_database. A capture process is configured at the current database, a propagation is configured to propagate messages from the current database to the destination database, and an apply process is configured at the destination database.</Parameter>
            <Parameter Name="INCLUDE_DDL">Specify TRUE to configure an Oracle Streams replication environment that maintains both DML and DDL changes.Specify FALSE to configure an Oracle Streams replication environment that maintains DML changes only. When this parameter is set to FALSE, DDL changes, such as ALTER TABLE, will not be replicated.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MAINTAIN_TTS" ElementId="#CDEFBAEH">
          <Description>Clones a set of tablespaces from a source database at a destination database and uses Oracle Streams to maintain these tablespaces at both databases</Description>
          <Parameters>
            <Parameter Name="TABLESPACE_NAMES">The local tablespace set to be cloned at the destination database and maintained by Oracle Streams.The tablespaces in the tablespace set must exist at the source database, but these tablespaces must not exist at the destination database.A directory object must exist for each directory that contains the datafiles for the tablespace set. The user who invokes this procedure must have READ privilege on these directory objects. The directory object cannot point to an Oracle Automatic Storage Management (ASM) disk group.If NULL, then the procedure raises an error.See Also: TABLESPACE_SET Table Type</Parameter>
            <Parameter Name="SOURCE_DIRECTORY_OBJECT">The directory object for the directory on the computer system running the source database into which the generated Data Pump export dump file and the datafiles that comprise the cloned tablespace set are placed. These files remain in this directory after the procedure completes.If NULL, then the procedure raises an error.Note: The specified directory object cannot point to an Oracle ASM disk group.</Parameter>
            <Parameter Name="DESTINATION_DIRECTORY_OBJECT">The directory object for the directory on the computer system running the destination database into which the generated Data Pump export dump file and the datafiles that comprise the cloned tablespace set are transferred.If the source database and destination database run on the same computer system, then the source and destination directories must be different.If NULL, then the procedure raises an error.Note: The specified directory object cannot point to an Oracle ASM disk group.</Parameter>
            <Parameter Name="SOURCE_DATABASE">The global name of the source database.If the specified global name is the same as the global name of the local database, then the procedure configures a local capture process for the source database.If the specified global name is different from the global name of the local database, then the procedure configures a downstream capture process at the local database. In this case, a database link from the local database to the source database with the same name as the global name of the source database must exist and must be accessible to the user who runs the procedure.If NULL, then the procedure uses the global name of the local database.</Parameter>
            <Parameter Name="DESTINATION_DATABASE">The global name of the destination database.If the local database is not the destination database, then a database link from the local database to the destination database with the same name as the global name of the destination database must exist and must be accessible to the user who runs the procedure.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="DUMP_FILE_NAME">The name of the Data Pump export dump file that contains the specified tablespace set. If a file with the specified file name exists in the specified directory for the source_directory_object or destination_directory_object parameter, then the procedure raises an error.If NULL, then the export dump file name is generated by the system. In this case, the export dump file name is expatnn.dmp, where nn is a sequence number. The sequence number is increased to produce an export dump file with a unique name in the source directory.</Parameter>
            <Parameter Name="LOG_FILE">The name of the Data Pump export log file. This log file is placed in the same directory as the Data Pump export dump file.If NULL, then the log file name is the same name as the export dump file name with an extension of .clg.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MERGE_STREAMS" ElementId="#CDECACGG">
          <Description>Merges a stream flowing from one capture process with a stream flowing from another capture process</Description>
          <Parameters>
            <Parameter Name="CLONED_PROPAGATION_NAME">The name of the cloned propagation used by the stream that was split off from the original stream using the SPLIT_STREAMS procedure. The name of the cloned propagation also identifies the cloned queue and capture process used by the cloned propagation.You must specify an existing propagation name. Do not specify an owner.</Parameter>
            <Parameter Name="PROPAGATION_NAME">The name of the propagation that is merged back to the original stream.If NULL, then the name of the original propagation in the original stream is used. Specify NULL only if the streams were split using the SPLIT_STREAMS procedure.Specify a non-NULL value to use a name that is different from the original propagation name or if you are merging two streams that were not split by the SPLIT_STREAMS procedure. See "Usage Notes" for more information.If a non-NULL value is specified, then an error is raised under either of the following conditions:The queue specified in the queue_name parameter does not exist.The queue specified in the queue_name parameter exists but is not used by a capture process.</Parameter>
            <Parameter Name="QUEUE_NAME">The name of the queue that is the source queue for the propagation that is merged back.If NULL, then the existing, original queue is the source queue for the propagation that is merged back. Specify NULL only if the streams were split using the SPLIT_STREAMS procedure.Specify a non-NULL value if you are merging two streams that were not split by the SPLIT_STREAMS procedure. Specify the name of the existing queue used by the capture process that will capture changes in the merged stream. See "Usage Notes" for more information.</Parameter>
            <Parameter Name="PERFORM_ACTIONS">If TRUE, then the procedure performs the necessary actions to merge the streams directly.If FALSE, then the procedure does not perform the necessary actions to merge the streams directly.Specify FALSE when this procedure is generating a script that you can edit and then run. The procedure raises an error if you specify FALSE and either of the following parameters is NULL:script_namescript_directory_object</Parameter>
            <Parameter Name="SCRIPT_NAME">If non-NULL and the perform_actions parameter is FALSE, then specify the name of the script generated by this procedure. The script contains all of the statements used to merge the streams. If a file with the specified script name exists in the specified directory for the script_directory_object parameter, then the procedure appends the statements to the existing file.If non-NULL and the perform_actions parameter is TRUE, then the procedure generates the specified script and performs the actions to split the stream directly.If NULL and the perform_actions parameter is TRUE, then the procedure performs the actions to merge the streams directly and does not generate a script.If NULL and the perform_actions parameter is FALSE, then the procedure raises an error.</Parameter>
            <Parameter Name="SCRIPT_DIRECTORY_OBJECT">The directory object for the directory on the local computer system into which the generated script is placed.If the script_name parameter is NULL, then the procedure ignores this parameter and does not generate a script.If NULL and the script_name parameter is non-NULL, then the procedure raises an error.Note: The specified directory object cannot point to an Oracle Automatic Storage Management (ASM) disk group.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MERGE_STREAMS_JOB" ElementId="#BABBBGGH">
          <Description>Determines whether the original capture process and the cloned capture are within the specified merge threshold and, if they are, runs the MERGE_STREAMS procedure to merge the two streams</Description>
          <Parameters>
            <Parameter Name="CLONED_PROPAGATION_NAME">The name of the cloned propagation used by the stream that was split off from the original stream using the SPLIT_STREAMS procedure. The name of the cloned propagation also identifies the cloned queue and capture process used by the cloned propagation.You must specify an existing propagation name. Do not specify an owner.</Parameter>
            <Parameter Name="PROPAGATION_NAME">The name of the propagation that is merged back to the original stream.If NULL, then the name of the original propagation in the original stream is used. Specify NULL only if the streams were split using the SPLIT_STREAMS procedure.Specify a non-NULL value to use a name that is different from the original propagation name or if you are merging two streams that were not split by the SPLIT_STREAMS procedure. See "Usage Notes" for more information.If a non-NULL value is specified, then an error is raised under either of the following conditions:The queue specified in the queue_name parameter does not exist.The queue specified in the queue_name parameter exists but is not used by a capture process.</Parameter>
            <Parameter Name="QUEUE_NAME">The name of the queue that is the source queue for the propagation that is merged back.If NULL, then the existing, original queue is the source queue for the propagation that is merged back. Specify NULL only if the streams were split using the SPLIT_STREAMS procedure.Specify a non-NULL value if you are merging two streams that were not split by the SPLIT_STREAMS procedure. Specify the name of the existing queue used by the capture process that will capture changes in the merged stream. See "Usage Notes" for more information.</Parameter>
            <Parameter Name="MERGE_THRESHOLD">The merge threshold in seconds.The value of the CAPTURE_MESSAGE_CREATE_TIME column for each capture process in the GV$STREAMS_CAPTURE dynamic performance view determines whether the streams are merged.Specifically, if the difference, in seconds, between the CAPTURE_MESSAGE_CREATE_TIME of the cloned capture process and the original capture process is less than or equal to the value specified for this parameter, then this procedure runs the MERGE_STREAMS procedure to merge the streams. If the difference is greater than the value specified by this parameter, then this procedure does nothing.</Parameter>
            <Parameter Name="SCHEDULE_NAME">The name of the schedule for the merge job.If NULL, then no schedule name is specified. Typically, you set this parameter to NULL when the auto_merge_threshold parameter was set to NULL or 0 (zero) in the SPLIT_STREAMS procedure that split the streams.Specify NULL if you run this procedure manually.</Parameter>
            <Parameter Name="MERGE_JOB_NAME">The name of the job that merges the streams.If NULL, then no merge job name is specified. Typically, you set this parameter to NULL when the auto_merge_threshold parameter was set to NULL or 0 (zero) in the SPLIT_STREAMS procedure that split the streams.Specify NULL if you run this procedure manually.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="POST_INSTANTIATION_SETUP" ElementId="#CDEBEJFE">
          <Description>Performs the actions required after instantiation to configure an Oracle Streams replication environment</Description>
          <Parameters>
            <Parameter Name="MAINTAIN_MODE">Specify one of the following:GLOBAL to maintain the entire database by configuring replication between the local database and the database specified in the destination_database parameterTRANSPORTABLE TABLESPACES to maintain a set of tablespaces by configuring replication between the local database and the database specified in the destination_database parameter</Parameter>
            <Parameter Name="TABLESPACE_NAMES">If maintain_mode is set to TRANSPORTABLE TABLESPACES, then specify the local tablespace set to be cloned at the destination database and maintained by Oracle Streams.The tablespaces in the tablespace set must exist at the source database, but these tablespaces must not exist at the destination database.Also, a directory object must exist for each directory that contains the datafiles for the tablespace set. The user who invokes this procedure must have READ privilege on these directory objects.If maintain_mode is set to GLOBAL, then specify an empty tablespace set.Regardless of the maintain_mode setting, an error is raised if the tablespace_names parameter is not set or is set to NULL.See Also: TABLESPACE_SET Table Type</Parameter>
            <Parameter Name="SOURCE_DATABASE">The global name of the source database.If the specified global name is the same as the global name of the local database, then the procedure configures a local capture process for the source database.If the specified global name is different from the global name of the local database, then the procedure configures a downstream capture process at the local database. In this case, a database link from the local database to the source database with the same name as the global name of the source database must exist and must be accessible to the user who runs the procedure.If NULL, then the procedure uses the global name of the local database.</Parameter>
            <Parameter Name="DESTINATION_DATABASE">The global name of the destination database.If the local database is not the destination database, then a database link from the local database to the destination database with the same name as the global name of the destination database must exist and must be accessible to the user who runs the procedure.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="START_PROCESSES">If TRUE, then the procedure starts each capture process and apply process. Any disabled capture or apply process created by the PRE_INSTANTITAION_SETUP procedure also is started.If FALSE, then the procedure does not start any capture processes or apply processes.</Parameter>
            <Parameter Name="INSTANTIATION_SCN">Specify the instantiation SCN for the database objects at the destination database if the instantiation SCN was not set during instantiation. The instantiation SCN is not set automatically during RMAN instantiations, but the correct instantiation SCN value should be determined during an RMAN instantiation. See the Oracle Streams Replication Administrator's Guide for more information.Specify NULL if the instantiation SCN was set for the database objects at the destination database during instantiation. The instantiation SCN can be set during export/import instantiations.</Parameter>
            <Parameter Name="EXCLUDE_SCHEMAS">A comma-delimited list of schemas to exclude from the Oracle Streams configuration. Schema rules are added to the negative rule sets of each capture process to exclude these schemas.Specify an asterisk (*) to exclude all of the schemas in the database.If NULL, then the procedure does not exclude any schemas in the database.This parameter is valid only if the MAINTAIN_MODE parameter is set to GLOBAL. If the MAINTAIN_MODE parameter is set to TRANSPORTABLE TABLESPACES, then the procedure ignores this parameter.</Parameter>
            <Parameter Name="EXCLUDE_FLAGS">Specify what is excluded from the replication configuration in the schemas specified by the exclude_schemas parameter. This parameter works the same way in the PRE_INSTANTIATION_SETUP and POST_INSTANTIATION_SETUP procedures. See "Usage Notes" for the PRE_INSTANTIATION_SETUP procedure for more information.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PRE_INSTANTIATION_SETUP" ElementId="#CDEGDHBC">
          <Description>Performs the actions required before instantiation to configure an Oracle Streams replication environment</Description>
          <Parameters>
            <Parameter Name="MAINTAIN_MODE">Specify one of the following:GLOBAL to maintain the entire database by configuring replication between the local database and the database specified in the destination_database parameterTRANSPORTABLE TABLESPACES to maintain a set of tablespaces by configuring replication between the local database and the database specified in the destination_database parameter</Parameter>
            <Parameter Name="TABLESPACE_NAMES">If maintain_mode is set to TRANSPORTABLE TABLESPACES, then specify the local tablespace set to be cloned at the destination database and maintained by Oracle Streams.The tablespaces in the tablespace set must exist at the source database, but these tablespaces must not exist at the destination database.Also, a directory object must exist for each directory that contains the datafiles for the tablespace set. The user who invokes this procedure must have READ privilege on these directory objects.If maintain_mode is set to GLOBAL, then specify an empty tablespace set.Regardless of the maintain_mode setting, an error is raised if the tablespace_names parameter is not set or is set to NULL.See Also: TABLESPACE_SET Table Type</Parameter>
            <Parameter Name="SOURCE_DATABASE">The global name of the source database.If the specified global name is the same as the global name of the local database, then the procedure configures a local capture process for the source database.If the specified global name is different from the global name of the local database, then the procedure configures a downstream capture process at the local database. In this case, a database link from the local database to the source database with the same name as the global name of the source database must exist and must be accessible to the user who runs the procedure.If NULL, then the procedure uses the global name of the local database.</Parameter>
            <Parameter Name="DESTINATION_DATABASE">The global name of the destination database.If the local database is not the destination database, then a database link from the local database to the destination database with the same name as the global name of the destination database must exist and must be accessible to the user who runs the procedure.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="CAPTURE_QUEUE_TABLE">The name of the queue table for each queue used by a capture process, specified as [schema_name.]queue_table_name. For example, strmadmin.streams_queue_table. If the schema is not specified, then the current user is the default.If NULL, then the system generates a name for the queue table of each queue used by a capture process, and the current user is the owner of each queue table.</Parameter>
            <Parameter Name="START_PROCESSES">If TRUE, then the procedure starts each capture process and apply process.If FALSE, then the procedure does not start any capture processes or apply processes.</Parameter>
            <Parameter Name="EXCLUDE_SCHEMAS">A comma-delimited list of schemas to exclude from the Oracle Streams configuration. Schema rules are added to the negative rule sets of each capture process to exclude these schemas.Specify an asterisk (*) to exclude all of the schemas in the database.If NULL, then the procedure does not exclude any schemas in the database.This parameter is valid only if the MAINTAIN_MODE parameter is set to GLOBAL. If the MAINTAIN_MODE parameter is set to TRANSPORTABLE TABLESPACES, then the procedure ignores this parameter.</Parameter>
            <Parameter Name="EXCLUDE_FLAGS">Specify what to exclude from the replication configuration in the schemas specified by the exclude_schemas parameter. See "Usage Notes" for more information.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PURGE_SOURCE_CATALOG" ElementId="#i997810">
          <Description>Removes all Oracle Streams data dictionary information at the local database for the specified object</Description>
          <Parameters>
            <Parameter Name="SOURCE_DATABASE">The global name of the source database containing the object.If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify DBS1 and the domain is .NET, then the procedure specifies DBS1.NET automatically.</Parameter>
            <Parameter Name="SOURCE_OBJECT_NAME">The name of the object specified as [schema_name.]object_name. For example, hr.employees. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="SOURCE_OBJECT_TYPE">Type of the object. Currently, TABLE is the only possible object type.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RECOVER_OPERATION" ElementId="#CDEIFBGC">
          <Description>Provides options for an Oracle Streams replication configuration operation that stopped because it encountered an error. This procedure either rolls forward the operation, rolls back the operation, or purges all of the metadata about the operation.</Description>
          <Parameters>
            <Parameter Name="SCRIPT_ID">The operation id of the operation that is being rolled forward, rolled back, or purged. Query the SCRIPT_ID column of the DBA_RECOVERABLE_SCRIPT data dictionary view to determine the operation id.</Parameter>
            <Parameter Name="OPERATION_MODE">If FORWARD, then the procedure rolls forward the operation. Specify FORWARD to try to complete the operation.If ROLLBACK, then the procedure rolls back all of the actions performed in the operation. If the rollback is successful, then this option also moves the metadata about the operation from the DBA_RECOVERABLE_SCRIPT view to the DBA_RECOVERABLE_SCRIPT_HIST view. The other views retain information about the operation for 30 days.If PURGE, then the procedure moves the metadata about the operation from the DBA_RECOVERABLE_SCRIPT view to the DBA_RECOVERABLE_SCRIPT_HIST view without rolling the operation back. The other views retain information about the operation for 30 days.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVE_QUEUE" ElementId="#i1008918">
          <Description>Removes the specified ANYDATA queue</Description>
          <Parameters>
            <Parameter Name="QUEUE_NAME">The name of the queue to remove, specified as [schema_name.]queue_name. For example, strmadmin.streams_queue. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="CASCADE">If TRUE, then the procedure drops any Oracle Streams clients that use the queue.If FALSE, then the procedure raises an error if there are any Oracle Streams clients that use the queue. Before you run this procedure with the cascade parameter set to FALSE, make sure no Oracle Streams clients are using the queue currently.</Parameter>
            <Parameter Name="DROP_UNUSED_QUEUE_TABLE">If TRUE and the queue table for the queue is empty, then the procedure drops the queue table. The queue table is not dropped if it contains any messages or if it is used by another queue.If FALSE, then the procedure does not drop the queue table.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVE_RULE" ElementId="#CDEFCADF">
          <Description>Removes the specified rule or all rules from the rule set associated with the specified capture process, synchronous capture, propagation, apply process, or messaging client.</Description>
          <Parameters>
            <Parameter Name="RULE_NAME">The name of the rule to remove, specified as [schema_name.]rule_name. If NULL, then the procedure removes all rules from the specified capture process, synchronous capture, apply process, propagation, or messaging client rule set.For example, to specify a rule in the hr schema named prop_rule1, enter hr.prop_rule1. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="STREAMS_TYPE">The type of Oracle Streams client:Specify capture for a capture process.Specify sync_capture for a synchronous capture.Specify propagation for a propagation.Specify apply for an apply process.Specify dequeue for a messaging client.</Parameter>
            <Parameter Name="STREAMS_NAME">The name of the Oracle Streams client, which can be a capture process, synchronous capture, propagation, apply process, or messaging client. Do not specify an owner.If the specified Oracle Streams client does not exist, but there is metadata in the data dictionary that associates the rule with this client, then the procedure removes the metadata.If the specified Oracle Streams client does not exist, and there is no metadata in the data dictionary that associates the rule with this client, then the procedure raises an error.</Parameter>
            <Parameter Name="DROP_UNUSED_RULE">If TRUE and the rule is not in any rule set, then the procedure drops the rule from the database.If TRUE and the rule exists in any rule set, then the procedure does not drop the rule from the database.If FALSE, then the procedure does not drop the rule from the database.</Parameter>
            <Parameter Name="INCLUSION_RULE">If inclusion_rule is TRUE, then the procedure removes the rule from the positive rule set for the Oracle Streams client.If inclusion_rule is FALSE, then the procedure removes the rule from the negative rule set for the Oracle Streams client.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVE_STREAMS_CONFIGURATION" ElementId="#i1008310">
          <Description>Removes the Oracle Streams configuration at the local database</Description>
        </SubProgram>
        <SubProgram Name="RENAME_COLUMN" ElementId="#CDECJDCG">
          <Description>Either adds or removes a declarative rule-based transformation which renames a column in a row LCR that satisfies the specified rule</Description>
          <Parameters>
            <Parameter Name="RULE_NAME">The name of the rule, specified as [schema_name.]rule_name. If NULL, then the procedure raises an error.For example, to specify a rule in the hr schema named employees12, enter hr.employees12. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="TABLE_NAME">The name of the table in which the column is renamed in the row LCR, specified as [schema_name.]object_name. For example, hr.employees. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="FROM_COLUMN_NAME">The name of the column to be renamed in each row LCR that satisfies the rule.</Parameter>
            <Parameter Name="TO_COLUMN_NAME">The new name of the column in each row LCR that satisfies the rule.</Parameter>
            <Parameter Name="VALUE_TYPE">Specify 'NEW' to rename the column in the new values in the row LCR.Specify 'OLD' to rename the column in the old values in the row LCR.Specify '*' to rename the column in both the old and new values in the row LCR.</Parameter>
            <Parameter Name="STEP_NUMBER">The order of execution of the transformation.See Also: Oracle Streams Concepts and Administration for more information about transformation ordering</Parameter>
            <Parameter Name="OPERATION">Specify 'ADD' to add the transformation to the rule.Specify 'REMOVE' to remove the transformation from the rule.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RENAME_SCHEMA" ElementId="#CDEDCHCG">
          <Description>Either adds or removes a declarative rule-based transformation which renames a schema in a row LCR that satisfies the specified rule</Description>
          <Parameters>
            <Parameter Name="RULE_NAME">The name of the rule, specified as [schema_name.]rule_name. If NULL, then the procedure raises an error.For example, to specify a rule in the hr schema named employees12, enter hr.employees12. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="FROM_SCHEMA_NAME">The name of the schema to be renamed in each row LCR that satisfies the rule.</Parameter>
            <Parameter Name="TO_SCHEMA_NAME">The new name of the schema in each row LCR that satisfies the rule.</Parameter>
            <Parameter Name="STEP_NUMBER">The order of execution of the transformation.See Also: Oracle Streams Concepts and Administration for more information about transformation ordering</Parameter>
            <Parameter Name="OPERATION">Specify 'ADD' to add the transformation to the rule.Specify 'REMOVE' to remove the transformation from the rule.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RENAME_TABLE" ElementId="#CDEFFCJI">
          <Description>Either adds or removes a declarative rule-based transformation which renames a table in a row LCR that satisfies the specified rule</Description>
          <Parameters>
            <Parameter Name="RULE_NAME">The name of the rule, specified as [schema_name.]rule_name. If NULL, then the procedure raises an error.For example, to specify a rule in the hr schema named employees12, enter hr.employees12. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="FROM_TABLE_NAME">The name of the table to be renamed in each row LCR that satisfies the rule, specified as [schema_name.]object_name. For example, hr.employees. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="TO_TABLE_NAME">The new name of the table in each row LCR that satisfies the rule, specified as [schema_name.]object_name. For example, humres.staff.The transformation can rename the table only, the schema only, or the table and the schema. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="STEP_NUMBER">The order of execution of the transformation.See Also: Oracle Streams Concepts and Administration for more information about transformation ordering</Parameter>
            <Parameter Name="OPERATION">Specify 'ADD' to add the transformation to the rule.Specify 'REMOVE' to remove the transformation from the rule.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_MESSAGE_NOTIFICATION" ElementId="#i1012479">
          <Description>Sets a notification for messages that can be dequeued by a specified Oracle Streams messaging client from a specified queue</Description>
          <Parameters>
            <Parameter Name="STREAMS_NAME">The name of the Oracle Streams messaging client. Do not specify an owner.For example, if the user strmadmin is the messaging client, then specify strmadmin.</Parameter>
            <Parameter Name="NOTIFICATION_ACTION">The action to be performed on message notification. Specify one of the following:For URL notifications, specify a URL without the prefix http://.For example, to specify the URL http://www.company.com:8080, enter the following:For email notifications, specify an email address.For example, to specify an the email address xyz@company.com, enter the following:For PL/SQL procedure notifications, specify an existing user-defined PL/SQL procedure in the form [schema_name.]procedure_name. If the schema_name is not specified, then the user who invokes the SET_MESSAGE_NOTIFICATION procedure is the default. The procedure must be a PLSQLCALLBACK data structure.For example, to specify a procedure named notify_orders in the oe schema, enter the following:See Also: Examples for more information about message notification procedures</Parameter>
            <Parameter Name="NOTIFICATION_TYPE">The type of notification. Specify one of the following:HTTP if you specified a URL for notification_actionMAIL if you specified an email address for notification_actionPROCEDURE if you specified a user-defined procedure for notification_actionThe type must match the specification for the notification_action parameter.</Parameter>
            <Parameter Name="NOTIFICATION_CONTEXT">The context of the notification. The context must be specified using RAW datatype information. For example, to specify the hexidecimal equivalent of 'FF', enter the following:The notification context is passed the PL/SQL procedure in procedure notifications and is not relevant for mail or HTTP notifications.</Parameter>
            <Parameter Name="INCLUDE_NOTIFICATION">If TRUE, then the procedure adds this notification for the specified streams_name and queue_name. That is, specifying TRUE turns on the notification for the streams_name and queue_name.If FALSE, then the procedure removes this notification for the specified streams_name and queue_name. That is, specifying FALSE turns off the notification for the streams_name and queue_name. If you specify FALSE, then this procedure ignores any specified values for the notification_action or notification_context parameters.</Parameter>
            <Parameter Name="QUEUE_NAME">The name of a local ANYDATA queue, specified as [schema_name.]queue_name. The current database must contain the queue. The specified queue must be a ANYDATA queue.For example, to specify a queue named streams_queue in the strmadmin schema, enter strmadmin.streams_queue for this parameter. If the schema is not specified, then the current user is the default.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_MESSAGE_TRACKING" ElementId="#CDEGEEFA">
          <Description>Sets the tracking label for logical change records (LCRs) produced by the current session</Description>
          <Parameters>
            <Parameter Name="TRACKING_LABEL">The label used to track the LCRs produced by the session.Set this parameter to NULL to stop message tracking in the current session.The size limit for a label is 4,000 bytes.</Parameter>
            <Parameter Name="ACTIONS">When DBMS_STREAMS_ADM.ACTION_MEMORY is specified, the LCRs are tracked in memory, and the V$STREAMS_MESSAGE_TRACKING dynamic performance view is populated with information about the LCRs.Currently, DBMS_STREAMS_ADM.ACTION_MEMORY is the only valid setting for this parameter.The value specified for this parameter is an enumerated constant. Enumerated constants must be prefixed with the package name.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_RULE_TRANSFORM_FUNCTION" ElementId="#CDEECBGG">
          <Description>Sets or removes the transformation function name for a rule-based transformation</Description>
          <Parameters>
            <Parameter Name="RULE_NAME">The name of the rule whose rule-based transformation function you are setting or removing, specified as [schema_name.]rule_name.For example, to specify a rule in the hr schema named prop_rule1, enter hr.prop_rule1. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="TRANSFORM_FUNCTION">Either the name of the transformation function to be used in the rule-based transformation for the rule or NULL.If you specify a transformation function name, then specify an existing function in one of the following forms:[schema_name.]function_name[schema_name.]package_name.function_nameIf the function is in a package, then you must specify the package_name. For example, to specify a function in the transform_pkg package in the hr schema named executive_to_management, enter hr.transform_pkg.executive_to_management. An error is returned if the specified procedure does not exist.If the schema_name is not specified, then the user who invokes the rule-based transformation function is the default.If you specify NULL, then the SET_RULE_TRANSFORM_FUNCTION procedure removes the current custom rule-based transformation from the rule.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_TAG" ElementId="#CACIIBAE">
          <Description>Sets the binary tag for all redo entries subsequently generated by the current session</Description>
          <Parameters>
            <Parameter Name="TAG">The binary tag for all subsequent redo entries generated by the current session. A raw value is a sequence of bytes, and a byte is a sequence of bits.By default, the tag for a session is NULL.The size limit for a tag value is 2000 bytes.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_UP_QUEUE" ElementId="#i997937">
          <Description>Creates a queue table and a queue for use with the capture, propagate, and apply functionality of Oracle Streams</Description>
          <Parameters>
            <Parameter Name="QUEUE_TABLE">The name of the queue table specified as [schema_name.]queue_table_name. For example, strmadmin.streams_queue_table. If the schema is not specified, then the current user is the default.If the queue table owner is not specified, then the procedure specifies the user who runs this procedure automatically as the queue table owner.Queue table names can be a maximum of 24 bytes.</Parameter>
            <Parameter Name="STORAGE_CLAUSE">The storage clause for queue tableThe storage parameter is included in the CREATE TABLE statement when the queue table is created. You can specify any valid table storage clause.If a tablespace is not specified here, then the procedure creates the queue table and all its related objects in the default user tablespace of the user who runs this procedure. If a tablespace is specified here, then the procedure creates the queue table and all its related objects in the tablespace specified in the storage clause.If NULL, then the procedure uses the storage characteristics of the tablespace in which the queue table is created.See Also: Oracle Database SQL Language Reference for more information about storage clauses</Parameter>
            <Parameter Name="QUEUE_NAME">The name of the queue that will function as the ANYDATA queue, specified as [schema_name.]queue_name. For example, strmadmin.streams_queue.If the schema is not specified, then the procedure uses the queue table owner. The owner of the queue table must also be the owner of the queue. The queue owner automatically has privileges to perform all queue operations on the queue.If the schema is not specified for this parameter, and the queue table owner is not specified in queue_table, then the current user is the default.Queue names can be a maximum of 24 bytes.</Parameter>
            <Parameter Name="QUEUE_USER">The name of the user who requires ENQUEUE and DEQUEUE privileges for the queue. This user also is configured as a secure queue user of the queue. The queue user cannot grant these privileges to other users because they are not granted with the GRANT option.If NULL, then the procedure does not grant any privileges. You can also grant queue privileges to the appropriate users using the DBMS_AQADM package.</Parameter>
            <Parameter Name="COMMENT">The comment for the queue</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SPLIT_STREAMS" ElementId="#CDEJBFIE">
          <Description>Splits one stream flowing from a capture process off from all of the other streams flowing from the capture process</Description>
          <Parameters>
            <Parameter Name="PROPAGATION_NAME">The name of the propagation that cannot send messages to its destination queue. The specified propagation is the propagation for the stream that is being split off from the other streams. You must specify an existing propagation name. Do not specify an owner.</Parameter>
            <Parameter Name="CLONED_PROPAGATION_NAME">The name of the new propagation created by this procedure for the stream that is split off. If NULL, then the system generates a propagation name.</Parameter>
            <Parameter Name="CLONED_QUEUE_NAME">The name of the new queue created by this procedure for the stream that is split off. If NULL, then the system generates a queue name.</Parameter>
            <Parameter Name="CLONED_CAPTURE_NAME">The name of the new capture process created by this procedure for the stream that is split off. If NULL, then the system generates a capture process name.</Parameter>
            <Parameter Name="PERFORM_ACTIONS">If TRUE, then the procedure performs the necessary actions to split the stream directly.If FALSE, then the procedure does not perform the necessary actions to split the stream directly.Specify FALSE when this procedure is generating a script that you can edit and then run. The procedure raises an error if you specify FALSE and either of the following parameters is NULL:script_namescript_directory_object</Parameter>
            <Parameter Name="SCRIPT_NAME">If non-NULL and the perform_actions parameter is FALSE, then specify the name of the script generated by this procedure. The script contains all of the statements used to split the stream. If a file with the specified script name exists in the specified directory for the script_directory_object parameter, then the procedure appends the statements to the existing file.If non-NULL and the perform_actions parameter is TRUE, then the procedure generates the specified script and performs the actions to split the stream directly.If NULL and the perform_actions parameter is TRUE, then the procedure performs the actions to split the stream directly and does not generate a script.If NULL and the perform_actions parameter is FALSE, then the procedure raises an error.</Parameter>
            <Parameter Name="SCRIPT_DIRECTORY_OBJECT">The directory object for the directory on the local computer system into which the generated script is placed.If the script_name parameter is NULL, then the procedure ignores this parameter and does not generate a script.If NULL and the script_name parameter is non-NULL, then the procedure raises an error.Note: The specified directory object cannot point to an Oracle Automatic Storage Management (ASM) disk group.</Parameter>
            <Parameter Name="AUTO_MERGE_THRESHOLD">If a positive number is specified, then the stream that was split off is automatically merged back into all of the other streams flowing from the capture process by an Oracle Scheduler job. The job runs the MERGE_STREAMS_JOB procedure at set intervals according to its schedule. The value of the CAPTURE_MESSAGE_CREATE_TIME column for each capture process in the GV$STREAMS_CAPTURE dynamic performance view determines when the streams are merged. Specifically, if the difference, in seconds, between CAPTURE_MESSAGE_CREATE_TIME of the cloned capture process and the original capture process is less than or equal to the value specified for the auto_merge_threshold parameter, then the two streams are merged automatically. The cloned capture process must be started before the split stream can be merged back with the original stream.If NULL or 0 (zero) is specified, then the split stream is not merged back with the original stream automatically. To merge the split stream with the original stream, run the MERGE_STREAM procedure manually when the CAPTURE_MESSAGE_CREATE_TIME of the cloned capture process catches up to, or nearly catches up to, the CAPTURE_MESSAGE_CREATE_TIME of the original capture process.The CAPTURE_MESSAGE_CREATE_TIME records the time when a captured change was recorded in the redo log.</Parameter>
            <Parameter Name="SCHEDULE_NAME">The Oracle Scheduler schedule name, specified as [schema_name.]schedule_name. For example, strmadmin.merge_schedule. If the schema is not specified, then the current user is the default.If auto_merge_threshold is a non-NULL positive number, then the schedule is used by the job that will automatically merge the streams at the appropriate time. You can specify a schedule name to adhere to naming conventions or to track the schedule more easily.If NULL and auto_merge_threshold is a non-NULL positive number, then the system generates a schedule name.If auto_merge_threshold is NULL or 0 (zero), then this parameter must be NULL.If this procedure creates a schedule, the schedule starts when the procedure completes. You can modify the schedule to control how often the merge job is run.If an existing schedule name is specified, an error is raised.</Parameter>
            <Parameter Name="MERGE_JOB_NAME">The Oracle Scheduler job name, specified as [schema_name.]merge_job_name. For example, strmadmin.merge_job. If the schema is not specified, then the current user is the default.If auto_merge_threshold is a non-NULL positive number, then the job will automatically merge the streams at the appropriate time. Specify a merge job name to adhere to naming conventions or to track the job more easily.If NULL and auto_merge_threshold is a non-NULL positive number, then the system generates a job name.If auto_merge_threshold is NULL or 0 (zero), then this parameter must be NULL.If an existing job name is specified, an error is raised.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_STREAMS_ADVISOR_ADM" Url="http://docs.oracle.com/database/121/ARPLS/d_streams_adv.htm">
      <Description>The DBMS_STREAMS_ADVISOR_ADM package, one of a set of Oracle Streams packages, provides an interface to gather information about an Oracle Streams environment and advise database administrators based on the information gathered. This package is part of the Oracle Streams Performance Advisor.</Description>
      <SubPrograms>
        <SubProgram Name="ANALYZE_CURRENT_PERFORMANCE" ElementId="#BABJFFAJ">
          <Description>Gathers information about the Oracle Streams components at one or more databases in your environment and analyzes Oracle Streams performance based on the information gathered</Description>
          <Parameters>
            <Parameter Name="COMPONENT_NAME">The name of the Oracle Streams component to analyze. For example, to analyze a capture process named capture01, then specify capture01.If NULL, then all of the Oracle Streams components are analyzed, and the other two parameters must also be NULL.</Parameter>
            <Parameter Name="COMPONENT_DB">The global name of the database that contains the component specified in the component_name parameter. For example, if the db.net database contains the component, then specify db.net.If NULL, then all of the Oracle Streams components are analyzed, and the other two parameters must also be NULL.</Parameter>
            <Parameter Name="COMPONENT_TYPE">The type of the component specified in the component_name parameter. If the component_name parameter is non-NULL, then specify one of the following:DBMS_STREAMS_ADVISOR_ADM.CAPTURE_TYPEDBMS_STREAMS_ADVISOR_ADM.PROPAGATION_SENDER_TYPEDBMS_STREAMS_ADVISOR_ADM.PROPAGATION_RECEIVER_TYPEDBMS_STREAMS_ADVISOR_ADM.APPLY_TYPEDBMS_STREAMS_ADVISOR_ADM.QUEUE_TYPESee "Constants" for information about these constants.If NULL, then all of the Oracle Streams components are analyzed, and the other two parameters must also be NULL.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_STREAMS_AUTH" Url="http://docs.oracle.com/database/121/ARPLS/d_streams_aut.htm">
      <Description>The DBMS_STREAMS_AUTH package, one of a set of Oracle Streams packages, provides subprograms for granting privileges to Oracle Streams administrators and revoking privileges from Oracle Streams administrators.</Description>
      <SubPrograms>
        <SubProgram Name="GRANT_ADMIN_PRIVILEGE" ElementId="#i1000214">
          <Description>Either grants the privileges needed by a user to be an Oracle Streams administrator directly, or generates a script that you can use to grant these privileges</Description>
          <Parameters>
            <Parameter Name="GRANTEE">The user to whom privileges are granted</Parameter>
            <Parameter Name="GRANT_PRIVILEGES">If TRUE, then the procedure grants the privileges to the specified grantee directly, and adds the grantee to the DBA_STREAMS_ADMINISTRATOR data dictionary view with YES for both the LOCAL_PRIVILEGES column and the ACCESS_FROM_REMOTE column. If the user has an entry in this data dictionary view, then the procedure does not make another entry, and no error is raised. If TRUE and any of the grant statements fail, then the procedure raises an error.If FALSE, then the procedure does not grant the privileges to the specified grantee directly, and does not add the grantee to the DBA_STREAMS_ADMINISTRATOR data dictionary view.You specify FALSE when the procedure is generating a file that you will edit and then run. If you specify FALSE and either the file_name or directory_name parameter is NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="FILE_NAME">The name of the file generated by the procedure. The file contains all of the statements that grant the privileges. If a file with the specified file name exists in the specified directory name, then the grant statements are appended to the existing file.If NULL, then the procedure does not generate a file.</Parameter>
            <Parameter Name="DIRECTORY_NAME">The directory into which the generated file is placed. The specified directory must be a directory object created using the SQL statement CREATE DIRECTORY. If you specify a directory, then the user who invokes the procedure must have WRITE privilege on the directory object.If the file_name parameter is NULL, then this parameter is ignored, and the procedure does not generate a file.If NULL and the file_name parameter is non-NULL, then the procedure raises an error.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GRANT_REMOTE_ADMIN_ACCESS" ElementId="#i1001358">
          <Description>Enables a remote Oracle Streams administrator to perform administrative actions at the local database by connecting to the grantee using a database link</Description>
        </SubProgram>
        <SubProgram Name="REVOKE_ADMIN_PRIVILEGE" ElementId="#i1000238">
          <Description>Either revokes Oracle Streams administrator privileges from a user directly, or generates a script that you can use to revoke these privileges</Description>
          <Parameters>
            <Parameter Name="GRANTEE">The user from whom privileges are revoked</Parameter>
            <Parameter Name="REVOKE_PRIVILEGES">If TRUE, then the procedure revokes the privileges from the specified user directly, and removes the user from the DBA_STREAMS_ADMINISTRATOR data dictionary view. If the user does not have a record in this data dictionary view, then the procedure does not remove a record from the view, and no error is raised. If TRUE and any of the revoke statements fail, then the procedure raises an error. A revoke statement will fail if the user is not granted the privilege that is being revoked.If FALSE, then the procedure does not revoke the privileges to the specified user directly, and does not remove the user from the DBA_STREAMS_ADMINISTRATOR data dictionary view.You specify FALSE when the procedure is generating a file that you will edit and then run. If you specify FALSE and either the file_name or directory_name parameter is NULL, then the procedure does not raise an error.</Parameter>
            <Parameter Name="FILE_NAME">The name of the file generated by this procedure. The file contains all of the statements that revoke the privileges. If a file with the specified file name exists in the specified directory name, then the revoke statements are appended to the existing file.If NULL, then the procedure does not generate a file.</Parameter>
            <Parameter Name="DIRECTORY_NAME">The directory into which the generated file is placed. The specified directory must be a directory object created using the SQL statement CREATE DIRECTORY. If you specify a directory, then the user who invokes the procedure must have WRITE privilege on the directory object.If the file_name parameter is NULL, then this parameter is ignored, and the procedure does not generate a file.If NULL and the file_name parameter is non-NULL, then the procedure raises an error.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REVOKE_REMOTE_ADMIN_ACCESS" ElementId="#i1001389">
          <Description>Disables a remote Oracle Streams administrator from performing administrative actions by connecting to the grantee using a database link</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_STREAMS_HANDLER_ADM" Url="http://docs.oracle.com/database/121/ARPLS/d_streams_hand.htm">
      <Description>The DBMS_STREAMS_HANDLER_ADM package, one of a set of Oracle Streams packages, provides interfaces to manage statement DML handlers.</Description>
      <SubPrograms>
        <SubProgram Name="ADD_STMT_TO_HANDLER" ElementId="#CIHFCBBH">
          <Description>Adds a statement to a statement DML handler</Description>
          <Parameters>
            <Parameter Name="HANDLER_NAME">The name of the statement DML handler.</Parameter>
            <Parameter Name="STATEMENT">The text of the SQL statement to add to the statement DML handler.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="EXECUTION_SEQUENCE">The position of the statement in the statement DML handler at which a SQL statement is to be set to execute. Statements are executed in order from the lowest execution sequence number to the highest execution sequence number.You can specify a positive or negative integer or decimal, or you can specify 0 (zero).If you specify an execution sequence number that is used by an existing statement in the statement DML handler, then the statement in the statement parameter replaces the existing statement.If NULL, then the statement is added to the statement DML handler with an execution sequence number that is larger than the execution sequence number for any statement in the statement DML handler.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_STMT_HANDLER" ElementId="#CIHEEBEF">
          <Description>Creates a statement DML handler</Description>
          <Parameters>
            <Parameter Name="HANDLER_NAME">The name of the statement DML handler.</Parameter>
            <Parameter Name="COMMENT">A comment for the statement DML handler.If NULL, then no comment is recorded for the statement DML handler.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_STMT_HANDLER" ElementId="#CIHFEIJH">
          <Description>Drops a statement DML handler</Description>
          <Parameters>
            <Parameter Name="HANDLER_NAME">The name of the statement DML handler.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVE_STMT_FROM_HANDLER" ElementId="#CIHFEHAE">
          <Description>Removes a statement from a statement DML handler</Description>
          <Parameters>
            <Parameter Name="HANDLER_NAME">The name of the statement DML handler.</Parameter>
            <Parameter Name="EXECUTION_SEQUENCE">The position of the statement to remove.You can specify a positive or negative integer or decimal, or you can specify 0 (zero).If NULL, the procedure removes the last statement in the statement DML handler.If the specified execution sequence number does not exist for the statement DML handler, then the procedure raises an error.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_STREAMS_MESSAGING" Url="http://docs.oracle.com/database/121/ARPLS/d_streams_msg.htm">
      <Description>The DBMS_STREAMS_MESSAGING package, one of a set of Oracle Streams packages, provides interfaces to enqueue messages into and dequeue messages from a ANYDATA queue.</Description>
      <SubPrograms>
        <SubProgram Name="DEQUEUE" ElementId="#i1000272">
          <Description>Uses the specified Oracle Streams messaging client to dequeue a message from the specified queue</Description>
          <Parameters>
            <Parameter Name="QUEUE_NAME">The name of the local queue from which messages will be dequeued, specified as [schema_name.]queue_name. The current database must contain the queue, and the queue must be a secure queue of ANYDATA type.For example, to specify a queue named streams_queue in the strmadmin schema, enter strmadmin.streams_queue for this parameter. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="STREAMS_NAME">The name of the Oracle Streams messaging client. For example, if the user strmadmin is the messaging client, then specify strmadmin.If NULL and a relevant messaging client for the queue exists, then the procedure uses the relevant messaging client. If NULL and multiple relevant messaging clients for the queue exist, then the procedure raises an error.</Parameter>
            <Parameter Name="PAYLOAD">The payload that is dequeued</Parameter>
            <Parameter Name="DEQUEUE_MODE">Specify one of the following settings:REMOVE: Read the message and delete it. This setting is the default. The message can be retained in the queue table based on the retention properties.LOCKED: Read and obtain a write lock on the message. The lock lasts for the duration of the transaction. This setting is equivalent to a select for update statement.BROWSE: Read the message without acquiring any lock on the message. This specification is equivalent to a select statement.</Parameter>
            <Parameter Name="NAVIGATION">The position of the message that will be retrieved. First, the position is determined. Second, the search criterion is applied. Finally, the message is retrieved.Specify one of the following settings:NEXT MESSAGE: Retrieve the next message that is available and matches the search criteria. If the previous message belongs to a message group, then retrieve the next available message that matches the search criteria and belongs to the message group. This setting is the default.NEXT TRANSACTION: Skip the remainder of the current message group (if any) and retrieve the first message of the next message group. This setting can only be used if message grouping is enabled for the current queue.FIRST MESSAGE: Retrieves the first message which is available and matches the search criteria. This setting resets the position to the beginning of the queue.Note: Each message group contains the messages in a single transaction.See Also: Oracle Database Advanced Queuing User's Guide for more information about dequeue options</Parameter>
            <Parameter Name="WAIT">Either FOREVER or NO_WAITIf FOREVER, then the dequeue call is blocked without a time out until a message is available in the queue.If NO_WAIT, then a wait time of zero seconds is used. In this case, the dequeue will return immediately even if there are no messages in the queue.</Parameter>
            <Parameter Name="MSGID">The message identifier of the message that is dequeued</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ENQUEUE" ElementId="#i1000609">
          <Description>The current user enqueues a message into the specified queue</Description>
          <Parameters>
            <Parameter Name="QUEUE_NAME">The name of the local queue into which messages will be enqueued, specified as [schema_name.]queue_name. The current database must contain the queue, and the queue must be a secure queue of ANYDATA type.For example, to specify a queue named streams_queue in the strmadmin schema, enter strmadmin.streams_queue for this parameter. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="PAYLOAD">The payload that is enqueued</Parameter>
            <Parameter Name="MSGID">The message identifier of the message that is enqueued</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_STREAMS_TABLESPACE_ADM" Url="http://docs.oracle.com/database/121/ARPLS/d_streams_tbl.htm">
      <Description>The DBMS_STREAMS_TABLESPACE_ADM package, one of a set of Oracle Streams packages, provides administrative interfaces for copying tablespaces between databases and moving tablespaces from one database to another. This package uses transportable tablespaces, Data Pump, the DBMS_FILE_TRANSFER package, and the DBMS_FILE_GROUP package.</Description>
      <SubPrograms>
        <SubProgram Name="ATTACH_SIMPLE_TABLESPACE" ElementId="#i1000780">
          <Description>Uses Data Pump to import a simple tablespace previously exported using the DBMS_STREAMS_TABLESPACE_ADM package or Data Pump export</Description>
          <Parameters>
            <Parameter Name="DIRECTORY_OBJECT">The directory that contains the Data Pump dump file and the datafile for the tablespace. You must specify the name of a directory object created using the SQL statement CREATE DIRECTORY.The name of the Data Pump export dump file must be the same as the data file name for the tablespace, except with a .dmp extension. If the converted_file_name is non-NULL, specify the dump file produced by the export database, not the file name after conversion.The Data Pump import log file is written to this directory. The name of the log file is the same as the data file name for the tablespace, except with an .alg extension. If a file exists with the same name as the log file in the directory, then the procedure overwrites the file.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="TABLESPACE_FILE_NAME">The name of the datafile for the tablespace being imported.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="CONVERTED_FILE_NAME">If the datafile_platform parameter is non-NULL and is different from the platform of the local import database, then specify a file name for the converted datafile. The datafile is converted to the platform of the local import database and copied to the new file name. The existing datafile is not modified nor deleted.If non-NULL and the datafile_platform parameter is NULL, then the procedure ignores this parameter.If non-NULL and the datafile_platform parameter specifies the same platform as the local import database, then the procedure ignores this parameter.If NULL and the datafile_platform parameter is non-NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="DATAFILE_PLATFORM">Specify NULL if the platform is the same for the export database and the current import database.Specify the platform for the export database if the platform is different for the export database and the import database.You can determine the platform of a database by querying the PLATFORM_NAME column in the V$DATABASE dynamic performance view. The V$TRANSPORTABLE_PLATFORM dynamic performance view lists all platforms that support cross-platform transportable tablespaces.</Parameter>
            <Parameter Name="TABLESPACE_NAME">Contains the name of the attached tablespace. The attached tablespace is read-only. Use an ALTER TABLESPACE statement to make the tablespace read/write if necessary.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ATTACH_TABLESPACES" ElementId="#i1000995">
          <Description>Uses Data Pump to import a self-contained tablespace set previously exported using the DBMS_STREAMS_TABLESPACE_ADM package, Data Pump export, or the Recovery Manager (RMAN) TRANSPORT TABLESPACE command</Description>
          <Parameters>
            <Parameter Name="DATA_PUMP_JOB_NAME">The Data Pump job name. Specify a Data Pump job name to adhere to naming conventions or to track the job more easily.If NULL, then the system generates a Data Pump job name.</Parameter>
            <Parameter Name="DUMP_FILE">The file name of the Data Pump dump file to import.If NULL or if a file attribute is NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="TABLESPACE_FILES">The file set that contains the datafiles for the tablespace set being imported.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="CONVERTED_FILES">If the datafiles_platform parameter is non-NULL and is different from the platform for the local import database, then specify a file set with the names of the converted datafiles. The datafiles are converted to the platform of the local import database and copied to the new file names. In this case, the number of files in the specified file set must match the number of files in the file set specified for the tablespace_files parameter. The existing datafiles are not modified nor deleted.If non-NULL and the datafiles_platform parameter is NULL, then the procedure ignores this parameter.If non-NULL and the datafiles_platform parameter specifies the same platform as the local import database, then the procedure ignores this parameter.If NULL and the datafiles_platform parameter is non-NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="DATAFILES_PLATFORM">Specify NULL if the platform is the same for the export database and the current import database.Specify the platform for the export database if the platform is different for the export database and the import database.You can determine the platform of a database by querying the PLATFORM_NAME column in the V$DATABASE dynamic performance view. The V$TRANSPORTABLE_PLATFORM dynamic performance view lists all platforms that support cross-platform transportable tablespaces.</Parameter>
            <Parameter Name="LOG_FILE">Specify the log file name for the Data Pump import.If NULL or if at least one file parameter is NULL, then the system generates a log file name with the extension .alg and places it in the Data Pump export dump file directory.If a file exists with the same name as the log file in the directory, then the procedure overwrites the file.</Parameter>
            <Parameter Name="FILE_GROUP_NAME">The name of the file group, specified as [schema_name.]file_group_name. For example, if the schema is hq_dba and the file group name is sales, then specify hq_dba.sales. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="VERSION_NAME">The name of the file group version to attach.If NULL, then the procedure uses the version with the latest creation time for the file group.</Parameter>
            <Parameter Name="DATAFILES_DIRECTORY_OBJECT">The directory object into which the datafiles and Data Pump export dump file are copied. The files are copied from the tablespace repository directories to this directory.If non-NULL, the attached tablespaces use the files in specified directory. However, the file group version specified in the version_name parameter consists of the files in the original directory, not in the directory specified by this datafiles_directory_object parameter.If NULL, then the procedure does not copy the datafiles and dump file.</Parameter>
            <Parameter Name="LOGFILE_DIRECTORY_OBJECT">The directory object into which the Data Pump import log file is placed. The system generates a log file name with the extension .alg.If NULL, then the procedure places the import log file in the same directory as the dump file.</Parameter>
            <Parameter Name="REPOSITORY_DB_LINK">If the file group is in a different database, then specify the name of the database link to the database that contains the file group. The database link must be accessible to the user who runs the procedure.If this parameter is non-NULL, then meet the following requirements:Each directory object that contains files in the version being attached must exist on both databases.The corresponding directory objects must have the same names on both databases.If NULL, then the procedure does not use a database link, and the procedure uses the file group in the local database.</Parameter>
            <Parameter Name="TABLESPACE_NAMES">Contains the names of the attached tablespaces. The attached tablespaces are read-only. Use ALTER TABLESPACE statements to make the tablespaces read/write if necessary.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CLONE_SIMPLE_TABLESPACE" ElementId="#i1000996">
          <Description>Clones a simple tablespace. The tablespace can later be attached to a database.</Description>
          <Parameters>
            <Parameter Name="TABLESPACE_NAME">The tablespace to be cloned.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="DIRECTORY_OBJECT">The directory where the Data Pump export dump file, the Data Pump export log file, and the datafile for the tablespace are placed. You must specify the name of a directory object created using the SQL statement CREATE DIRECTORY.The name of the Data Pump export dump file is the same as the data file name for the tablespace, except with a .dmp extension. If a file exists with the same name as the dump file in the directory, then the procedure raises an error.The name of the log file is the same as the data file name for the tablespace, except with a .clg extension. If a file exists with the same name as the log file in the directory, then the procedure overwrites the file.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="DESTINATION_PLATFORM">Specify NULL if the platform is the same for the current export database and the intended import database.Specify the platform for the intended import database if the platform is different for the export database and the import database.You can determine the platform of a database by querying the PLATFORM_NAME column in the V$DATABASE dynamic performance view. The V$TRANSPORTABLE_PLATFORM dynamic performance view lists all platforms that support cross-platform transportable tablespaces.</Parameter>
            <Parameter Name="TABLESPACE_FILE_NAME">Contains the name of the cloned tablespace datafile. This datafile is placed in the directory specified by the parameter directory_object.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CLONE_TABLESPACES" ElementId="#i1000997">
          <Description>Clones a set of self-contained tablespaces. The tablespaces can later be attached to a database.</Description>
          <Parameters>
            <Parameter Name="DATA_PUMP_JOB_NAME">The Data Pump job name. Specify a Data Pump job name to adhere to naming conventions or to track the job more easily.If NULL, then the system generates a Data Pump job name.</Parameter>
            <Parameter Name="TABLESPACE_NAMES">The tablespace set to be cloned.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="DUMP_FILE">The file name of the Data Pump dump file that is exported.If NULL or if a file attribute is NULL, then the procedure raises an error.If the specified file exists, then the procedure raises an error.</Parameter>
            <Parameter Name="TABLESPACE_DIRECTORY_OBJECTS">The set of directory objects into which the datafiles for the tablespaces are copied. If multiple directory objects are in the set, then the procedure copies a datafile to each directory object in the set in sequence. In this case, if the end of the directory object set is reached, then datafile copying starts again with the first directory object in the set.If NULL, then the procedure copies datafiles for the tablespace set to the dump file directory.</Parameter>
            <Parameter Name="DESTINATION_PLATFORM">Specify NULL if the platform is the same for the current export database and the intended import database.Specify the platform for the intended import database if the platform is different for the export database and the import database.You can determine the platform of a database by querying the PLATFORM_NAME column in the V$DATABASE dynamic performance view. The V$TRANSPORTABLE_PLATFORM dynamic performance view lists all platforms that support cross-platform transportable tablespaces.</Parameter>
            <Parameter Name="LOG_FILE">Specify the log file name for the Data Pump export.If NULL or if at least one file parameter is NULL, then the system generates a log file name with the extension .clg and places it in the dump file directory.If a file exists with the same name as the log file in the directory, then the procedure overwrites the file.</Parameter>
            <Parameter Name="TABLESPACE_DIRECTORY_OBJECT">The directory object into which the data files are copied and Data Pump export dump file is placed. The system generates a dump file name with the extension .dmp.If NULL, then the procedure copies the datafiles to and places the dump file in the default directory object for the version. If the version does not have a default directory object, then the procedure uses the default directory object for the file group.If NULL and no default directory object exists for the version or file group, then the procedure raises an error.</Parameter>
            <Parameter Name="LOG_FILE_DIRECTORY_OBJECT">The directory object into which the Data Pump export log file is placed. The system generates a log file name with the extension .clg.If NULL, then the procedure uses the directory object specified in tablespace_directory_object.</Parameter>
            <Parameter Name="FILE_GROUP_NAME">The name of the file group, specified as [schema_name.]file_group_name. For example, if the schema is hq_dba and the file group name is sales, then specify hq_dba.sales. If the schema is not specified, then the current user is the default.If the specified file group does not exist, then the procedure creates it.</Parameter>
            <Parameter Name="VERSION_NAME">The name of the version into which the cloned tablespace set is placed. The specified version name cannot be a positive integer.If the specified version does not exist, then the procedure creates it.If the specified version exists, then the procedure adds the tablespace set to the version. Only one Data Pump export dump file can exist in a version.If NULL, then the procedure creates a new version, and the version number can be used to manage the version.</Parameter>
            <Parameter Name="REPOSITORY_DB_LINK">If the file group is in a remote database, then specify the name of the database link to the database that contains the file group. The database link must be accessible to the user who runs the procedure.If this parameter is non-NULL, then the directory object specified in tablespace_directory_object must exist on the local database and on the remote database. If tablespace_directory_object is NULL, then the default directory object must exist on both databases. The directory object must have the same name on each database and must correspond to the same directory on a shared file system.If NULL, then the procedure does not use a database link, and the procedure uses the file group in the local database.</Parameter>
            <Parameter Name="TABLESPACE_FILES">Contains the datafiles for the cloned tablespace set. These datafiles are placed in the directories specified by the directory objects in the parameter tablespace_directory_objects.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DETACH_SIMPLE_TABLESPACE" ElementId="#i1000998">
          <Description>Detaches a simple tablespace. The tablespace can later be attached to a database.</Description>
          <Parameters>
            <Parameter Name="DATA_PUMP_JOB_NAME">The Data Pump job name. Specify a Data Pump job name to adhere to naming conventions or to track the job more easily.If NULL, then the system generates a Data Pump job name.</Parameter>
            <Parameter Name="DIRECTORY_OBJECT">Contains the directory where the Data Pump export dump file and the Data Pump export log file are placed. The procedure uses the directory of the datafile for the tablespace. Therefore, make sure a directory object created using the SQL statement CREATE DIRECTORY exists for this directory.The name of the Data Pump export dump file is the same as the data file name for the tablespace, except with a .dmp extension. If a file exists with the same name as the dump file in the directory, then the procedure raises an error.The name of the log file is the same as the data file name for the tablespace, except with a .dlg extension. If a file exists with the same name as the log file in the directory, then the procedure overwrites the file.</Parameter>
            <Parameter Name="TABLESPACE_FILE_NAME">Contains the name of the detached tablespace datafile.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DETACH_TABLESPACES" ElementId="#i1007519">
          <Description>Detaches a set of self-contained tablespaces. The tablespaces can later be attached to a database.</Description>
          <Parameters>
            <Parameter Name="DATA_PUMP_JOB_NAME">The Data Pump job name. Specify a Data Pump job name to adhere to naming conventions or to track the job more easily.If NULL, then the system generates a Data Pump job name.</Parameter>
            <Parameter Name="TABLESPACE_NAMES">The tablespace set to be detached.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="DUMP_FILE">The file name of the Data Pump dump file that is exported.If NULL or if a file attribute is NULL, then the procedure raises an error.If the specified file exists, then the procedure raises an error.</Parameter>
            <Parameter Name="LOG_FILE">Specify the log file name for the Data Pump export.If NULL or if at least one file parameter is NULL, then the system generates a log file name with the extension .dlg and places it in the dump file directory.If a file exists with the same name as the log file in the directory, then the procedure overwrites the file.</Parameter>
            <Parameter Name="TABLESPACE_FILES">Contains the names of the datafiles for the detached tablespace set.</Parameter>
            <Parameter Name="EXPORT_DIRECTORY_OBJECT">The directory object into which the Data Pump export dump file is placed. The system generates a dump file name with the extension .dmp.If NULL, then procedure places the dump file in the default directory object for the version. If the version does not have a default directory object, then the procedure uses the default directory object for the file group.If NULL and no default directory object exists for the version or file group, then the procedure raises an error.</Parameter>
            <Parameter Name="LOG_FILE_DIRECTORY_OBJECT">The directory object into which the Data Pump export log file is placed. The system generates a log file name with the extension .dlg.If NULL, then the procedure places the export log file in the same directory as the export dump file.</Parameter>
            <Parameter Name="FILE_GROUP_NAME">The name of the file group, specified as [schema_name.]file_group_name. For example, if the schema is hq_dba and the file group name is sales, then specify hq_dba.sales. If the schema is not specified, then the current user is the default.If the specified file group does not exist, then the procedure creates it.</Parameter>
            <Parameter Name="VERSION_NAME">The name of the version into which the detached tablespace set is placed. The specified version name cannot be a positive integer.If the specified version does not exist, then the procedure creates it.If the specified version exists, then procedure adds the tablespace set to the version. Only one Data Pump export dump file can exist in a version.If NULL, then the procedure creates a new version, and the version number can be used to manage the version.</Parameter>
            <Parameter Name="REPOSITORY_DB_LINK">If the file group is in a remote database, then specify the name of the database link to the database that contains the file group. The database link must be accessible to the user who runs the procedure.If this parameter is non-NULL, then the directory object specified in export_directory_object must exist on the local database and on the remote database. If export_directory_object is NULL, then the default directory object must exist on both databases. The directory object must have the same name on each database and must correspond to the same directory on a shared file system.If NULL, then the procedure does not use a database link, and the procedure uses the file group in the local database.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PULL_SIMPLE_TABLESPACE" ElementId="#i1001000">
          <Description>Copies a simple tablespace from a remote database and attaches it to the current database</Description>
          <Parameters>
            <Parameter Name="TABLESPACE_NAME">The tablespace to be pulled.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="DATABASE_LINK">The name of the database link to the database that contains the tablespace to pull. The database link must be accessible to the user who runs the procedure.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="DIRECTORY_OBJECT">The directory object to which the datafile for the tablespace is copied on the local database. You must specify the name of a directory object created using the SQL statement CREATE DIRECTORY.The Data Pump import log file is written to this directory. The name of the log file is the same as the data file name for the tablespace, except with a .plg extension. If a file exists with the same name as the log file in the directory, then the procedure overwrites the file.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="CONVERSION_EXTENSION">Specify NULL if the platform is the same for the remote export database and the current import database.If the platform is different for the export database and the import database, then specify an extension for the tablespace datafile that is different than the extension for the tablespace datafile at the remote database. In this case, the procedure transfers the datafile to the import database and converts it to be compatible with the current import database platform automatically. After conversion is complete, the original datafile is deleted at the import database.</Parameter>
            <Parameter Name="CONVERT_DIRECTORY_OBJECT">Specify NULL if the platform is the same for the remote export database and the current import database.If the platform is different for the export database and the import database, then specify a directory object in the local export database. The procedure uses the directory object for platform conversion before it transfers the files to the remote database. You must specify the name of a directory object created using the SQL statement CREATE DIRECTORY.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PULL_TABLESPACES" ElementId="#i1003360">
          <Description>Copies a set of self-contained tablespaces from a remote database and attaches the tablespaces to the current database</Description>
          <Parameters>
            <Parameter Name="DATA_PUMP_JOB_NAME">The Data Pump job name. Specify a Data Pump job name to adhere to naming conventions or to track the job more easily.If NULL, then the system generates a Data Pump job name.</Parameter>
            <Parameter Name="DATABASE_LINK">The name of the database link to the database that contains the tablespace set to pull. The database link must be accessible to the user who runs the procedure.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="TABLESPACE_NAMES">The tablespace set to be pulled.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="TABLESPACE_DIRECTORY_OBJECTS">The set of directory objects to which the datafiles for the tablespaces are copied. If multiple directory objects are in the set, then the procedure copies a datafile to each directory object in the set in sequence. In this case, if the end of the directory object set is reached, then datafile copying starts again with the first directory object in the set.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="LOG_FILE">Specify the log file name for the Data Pump export.If NULL or if at least one file parameter is NULL, then the system generates a log file name with the extension .plg and places it in one of the data file directories.If a file exists with the same name as the log file in the directory, then the procedure overwrites the file.</Parameter>
            <Parameter Name="CONVERSION_EXTENSION">Specify NULL if the platform is the same for the remote export database and the current import database.If the platform is different for the export database and the import database, then specify an extension for the tablespace datafiles that is different than the extension for the tablespace datafiles at the remote database. In this case, the procedure transfers the datafiles to the import database and converts them to be compatible with the current import database platform automatically. After conversion is complete, the original datafiles are deleted at the import database.</Parameter>
            <Parameter Name="CONVERT_DIRECTORY_OBJECT">Specify NULL if the platform is the same for the remote export database and the current import database.If the platform is different for the export database and the import database, then specify a directory object in the local export database. The procedure uses the directory object for platform conversion before it transfers the files to the remote database. You must specify the name of a directory object created using the SQL statement CREATE DIRECTORY.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_SYNC_REFRESH" Url="http://docs.oracle.com/database/121/ARPLS/d_sync_refresh.htm">
      <Description>The DBMS_SYNC_REFRESH package provides an interface to perform a synchronous refresh of materialized views.</Description>
      <SubPrograms>
        <SubProgram Name="ABORT_REFRESH" ElementId="#CEGGFBJJ">
          <Description>Aborts a refresh.</Description>
          <Parameters>
            <Parameter Name="GROUP_ID">The group ID of a sync refresh group.</Parameter>
            <Parameter Name="GROUP_ID_LIST">An array of group IDs of the sync refresh groups to be aborted for sync refresh.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ALTER_REFRESH_STATS_RETENTION" ElementId="#CEGHHFCD">
          <Description>Alters the refresh history retention value, specified in days.</Description>
          <Parameters>
            <Parameter Name="RETENTION">The retention time in days. The refresh history will be retained for at least these many number of days. The valid range is 1 to 365,000.You can use the following values for special purposes:-1 - Refresh history is never purged by PREPARE_REFRESH.0 - Old refresh history is never saved. PREPARE_REFRESH will delete all refresh history.NULL - Change refresh history retention to default value.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CAN_SYNCREF_TABLE" ElementId="#CEGIICHJ">
          <Description>Advises on whether a table and its dependent materialized views are eligible for synchronous refresh.</Description>
          <Parameters>
            <Parameter Name="SCHEMA_NAME">The name of the schema of the base table.</Parameter>
            <Parameter Name="TABLE_NAME">The name of the base table.</Parameter>
            <Parameter Name="STATEMENT_ID">A string (VARCHAR2(30)) to identify the rows pertaining to an invocation of CAN_SYNCREF_TABLE when the output is directed to a table named SYNCREF_TABLE in the user's schema.</Parameter>
            <Parameter Name="OUTPUT_ARRAY">The output array into which CAN_SYNCREF_TABLE records the information on the eligibility of the base table and its dependent materialized views for synchronous refresh.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXECUTE_REFRESH" ElementId="#CEGIFEAI">
          <Description>Executes synchronous refresh on the synchronous refresh groups.</Description>
          <Parameters>
            <Parameter Name="GROUP_ID">The group ID of a sync refresh group.</Parameter>
            <Parameter Name="GROUP_ID_LIST">An array of group IDs of the sync refresh groups to be executed for sync refresh.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_ALL_GROUP_IDS" ElementId="#CEGBFFJJ">
          <Description>Returns the group IDs of all the synchronous refresh groups in the database.</Description>
        </SubProgram>
        <SubProgram Name="GET_GROUP_ID" ElementId="#CEGCHJFH">
          <Description>Returns the group ID of a table or materialized view.</Description>
        </SubProgram>
        <SubProgram Name="GET_GROUP_ID_LIST" ElementId="#CEGJGDED">
          <Description>Returns the group IDs of the tables in a given list of objects (tables or materialized views).</Description>
        </SubProgram>
        <SubProgram Name="PREPARE_REFRESH" ElementId="#CEGIAICG">
          <Description>Prepares the sync refresh groups for refresh.</Description>
          <Parameters>
            <Parameter Name="GROUP_ID">The group ID of the sync refresh group to be prepared for sync refresh.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PREPARE_STAGING_LOG" ElementId="#CEGDIFBF">
          <Description>Validates and collects statistics on the data in the staging log.</Description>
          <Parameters>
            <Parameter Name="SCHEMA_NAME">The name of the schema of the base table.</Parameter>
            <Parameter Name="BASE_TABLE_NAME">The name of the base table.</Parameter>
            <Parameter Name="PSL_MODE">The mode in which staging log preparation should be done. The possible values are:DBMS_SYNC_REFRESH.ENFORCED (the default)DBMS_SYNC_REFRESH.INSERT_TRUSTEDDBMS_SYNC_REFRESH.DELETE_TRUSTEDDBMS_SYNC_REFRESH.UPDATE_TRUSTEDDBMS_SYNC_REFRESH.TRUSTED</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PURGE_REFRESH_STATS" ElementId="#CEGCDFJD">
          <Description>Purges the refresh history of sync refreshes that took place within a time specified by a timestamp parameter.</Description>
        </SubProgram>
        <SubProgram Name="REGISTER_MVIEWS" ElementId="#CEGEBACE">
          <Description>Registers materialized views for synchronous refresh.</Description>
        </SubProgram>
        <SubProgram Name="REGISTER_PARTITION_OPERATION" ElementId="#CEGDCBAA">
          <Description>Registers a partition maintenance operation on a partition of a base table.</Description>
          <Parameters>
            <Parameter Name="PARTITION_OP">The name of the partition operation (DROP, EXCHANGE, or TRUNCATE).</Parameter>
            <Parameter Name="SCHEMA_NAME">The name of the schema of the base table.</Parameter>
            <Parameter Name="BASE_TABLE_NAME">The name of the base table.</Parameter>
            <Parameter Name="PARTITION_NAME">The name of the partition to be changed; either exchanged with the outside partition table or dropped or truncated.</Parameter>
            <Parameter Name="OUTSIDE_PARTN_TABLE_SCHEMA">The name of the schema of the outside partition table (required for EXCHANGE only).</Parameter>
            <Parameter Name="OUTSIDE_PARTN_TABLE_NAME">The name of the outside partition table (required for EXCHANGE only).</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UNREGISTER_MVIEWS" ElementId="#CEGBFFCD">
          <Description>Unregisters materialized views from synchronous refresh.</Description>
        </SubProgram>
        <SubProgram Name="UNREGISTER_PARTITION_OPERATION" ElementId="#CEGIGCFF">
          <Description>Unregisters a partition maintenance operation on a partition of a base table.</Description>
          <Parameters>
            <Parameter Name="PARTITION_OP">The name of the partition operation (DROP, EXCHANGE, or TRUNCATE).</Parameter>
            <Parameter Name="SCHEMA_NAME">The name of the schema of the base table.</Parameter>
            <Parameter Name="BASE_TABLE_NAME">The name of the base table.</Parameter>
            <Parameter Name="PARTITION_NAME">The name of the partition to be changed; either exchanged with the outside partition table or dropped or truncated.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_TDB" Url="http://docs.oracle.com/database/121/ARPLS/d_tdb.htm">
      <Description>The DBMS_TDB package reports whether a database can be transported between platforms using the RMAN CONVERT DATABASE command. The package verifies that databases on the current host platform are of the same endian format as the destination platform, and that the state of the current database does not prevent transport of the database.</Description>
      <SubPrograms>
        <SubProgram Name="CHECK_DB" ElementId="#BDCJHJIC">
          <Description>Checks whether a database can be transported to a target platform</Description>
          <Parameters>
            <Parameter Name="TARGET_PLATFORM_NAME">The name of the destination platform, as it appears in V$DB_TRANSPORTABLE_PLATFORM.</Parameter>
            <Parameter Name="SKIP_OPTION">Specifies which, if any, parts of the database to skip when checking whether the database can be transported. Supported values are listed in Table 166-1, "DBMS_TDB Constants".</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CHECK_EXTERNAL" ElementId="#BDCCBGDD">
          <Description>Checks whether a database has external tables, directory or BFILEs</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_TRACE" Url="http://docs.oracle.com/database/121/ARPLS/d_trace.htm">
      <Description>The DBMS_TRACE package contains the interface to trace PL/SQL functions, procedures, and exceptions.</Description>
      <SubPrograms>
        <SubProgram Name="CLEAR_PLSQL_TRACE" ElementId="#i1002348">
          <Description>Stops trace data dumping in session</Description>
        </SubProgram>
        <SubProgram Name="GET_PLSQL_TRACE_LEVEL" ElementId="#CIAIFBJF">
          <Description>Gets the trace level</Description>
        </SubProgram>
        <SubProgram Name="PLSQL_TRACE_VERSION" ElementId="#i1002395">
          <Description>Gets the version number of the trace package</Description>
          <Parameters>
            <Parameter Name="MAJOR">Major version number of DBMS_TRACE.</Parameter>
            <Parameter Name="MINOR">Minor version number of DBMS_TRACE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_PLSQL_TRACE" ElementId="#i1000112">
          <Description>Starts tracing in the current session</Description>
          <Parameters>
            <Parameter Name="TRACE_LEVEL">You must supply one or more of the constants as listed in Table 167-1, "DBMS_TRACE Event Constants". By summing the constants, you can enable tracing of multiple PL/SQL language features simultaneously. The control constants "TRACE_PAUSE", "TRACE_RESUME" and "TRACE_STOP" should not be used in combination with other constants.Also see "Collecting Trace Data"  for more information.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_TRANSACTION" Url="http://docs.oracle.com/database/121/ARPLS/d_transa.htm">
      <Description>The DBMS_TRANSACTION package provides access to SQL transaction statements from stored procedures.</Description>
      <SubPrograms>
        <SubProgram Name="ADVISE_COMMIT" ElementId="#i1000260">
          <Description>Equivalent to the SQL statement:
ALTER SESSION ADVISE COMMIT</Description>
        </SubProgram>
        <SubProgram Name="ADVISE_NOTHING" ElementId="#i1000264">
          <Description>Equivalent to the SQL statement:
ALTER SESSION ADVISE NOTHING</Description>
        </SubProgram>
        <SubProgram Name="ADVISE_ROLLBACK" ElementId="#i1000298">
          <Description>Equivalent to the SQL statement:
ALTER SESSION ADVISE ROLLBACK</Description>
        </SubProgram>
        <SubProgram Name="COMMIT" ElementId="#i1000373">
          <Description>Equivalent to the SQL statement:
COMMIT</Description>
        </SubProgram>
        <SubProgram Name="COMMIT_COMMENT" ElementId="#i1000443">
          <Description>Equivalent to the SQL statement:
COMMIT COMMENT &lt;text&gt;</Description>
          <Parameters>
            <Parameter Name="CMNT">Comment to associate with this commit.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="COMMIT_FORCE" ElementId="#i1000448">
          <Description>Equivalent to the SQL statement:
COMMIT FORCE &lt;text&gt;, &lt;number&gt;"</Description>
          <Parameters>
            <Parameter Name="XID">Local or global transaction ID.</Parameter>
            <Parameter Name="SCN">System change number.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LOCAL_TRANSACTION_ID" ElementId="#i1000530">
          <Description>Returns the local (to instance) unique identifier for the current transaction</Description>
          <Parameters>
            <Parameter Name="CREATE_TRANSACTION">If true, then start a transaction if one is not currently active.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PURGE_LOST_DB_ENTRY" ElementId="#i1000592">
          <Description>Enables removal of incomplete transactions from the local site when the remote database is destroyed or re-created before recovery completes</Description>
          <Parameters>
            <Parameter Name="XID">Must be set to the value of the LOCAL_TRAN_ID column in the DBA_2PC_PENDING table.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PURGE_MIXED" ElementId="#i1000748">
          <Description>Deletes information about a given mixed outcome transaction</Description>
          <Parameters>
            <Parameter Name="XID">Must be set to the value of the LOCAL_TRAN_ID column in the DBA_2PC_PENDING table.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="READ_ONLY" ElementId="#i1000791">
          <Description>Equivalent to the SQL statement:
SET TRANSACTION READ ONLY</Description>
        </SubProgram>
        <SubProgram Name="READ_WRITE" ElementId="#CIAEGFIB">
          <Description>equivalent to the SQL statement:
SET TRANSACTION READ WRITE</Description>
        </SubProgram>
        <SubProgram Name="ROLLBACK" ElementId="#i1000835">
          <Description>Equivalent to the SQL statement:
ROLLBACK</Description>
        </SubProgram>
        <SubProgram Name="ROLLBACK_FORCE" ElementId="#i1000863">
          <Description>Equivalent to the SQL statement:
ROLLBACK FORCE &lt;text&gt;</Description>
          <Parameters>
            <Parameter Name="XID">Local or global transaction ID.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ROLLBACK_SAVEPOINT" ElementId="#i1000909">
          <Description>Equivalent to the SQL statement:
ROLLBACK TO SAVEPOINT &lt;savepoint_name&gt;</Description>
          <Parameters>
            <Parameter Name="SAVEPT">Savepoint identifier.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SAVEPOINT" ElementId="#i997017">
          <Description>Equivalent to the SQL statement:
SAVEPOINT &lt;savepoint_name&gt;</Description>
          <Parameters>
            <Parameter Name="SAVEPT">Savepoint identifier.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="STEP_ID" ElementId="#i1000520">
          <Description>Returns local (to local transaction) unique positive integer that orders the DML operations of a transaction</Description>
        </SubProgram>
        <SubProgram Name="USE_ROLLBACK_SEGMENT" ElementId="#i1000982">
          <Description>Equivalent to the SQL statement:
SET TRANSACTION USE ROLLBACK SEGMENT &lt;rb_seg_name&gt;</Description>
          <Parameters>
            <Parameter Name="RB_NAME">Name of rollback segment to use.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_TRANSFORM" Url="http://docs.oracle.com/database/121/ARPLS/d_transf.htm">
      <Description>The DBMS_TRANSFORM package provides an interface to the message format transformation features of Oracle Advanced Queuing.</Description>
      <SubPrograms>
        <SubProgram Name="CREATE_TRANSFORMATION" ElementId="#i996793">
          <Description>Creates a transformation that maps an object of the source type to an object of the destination type</Description>
          <Parameters>
            <Parameter Name="SCHEMA">Specifies the schema of the transformation.</Parameter>
            <Parameter Name="NAME">Specifies the name of the transformation.</Parameter>
            <Parameter Name="FROM_SCHEMA">Specifies the schema of the source type.</Parameter>
            <Parameter Name="FROM_TYPE">Specifies the source type.</Parameter>
            <Parameter Name="TO_SCHEMA">Specifies the target type schema.</Parameter>
            <Parameter Name="TO_TYPE">Specifies the target type.</Parameter>
            <Parameter Name="TRANSFORMATION">Specifies the transformation expression, returning an object of the target type. The expression must be a function returning an object of the target type or a constructor expression for the target type. You can choose not to specify a transformation expression and instead specify transformations for attributes of the target type using MODIFY_TRANSFORMATION.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_TRANSFORMATION" ElementId="#i998188">
          <Description>Drops the given transformation</Description>
          <Parameters>
            <Parameter Name="SCHEMA">Specifies the schema of the transformation.</Parameter>
            <Parameter Name="NAME">Specifies the name of the transformation.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MODIFY_TRANSFORMATION" ElementId="#i997956">
          <Description>Modifies an existing transformation</Description>
          <Parameters>
            <Parameter Name="SCHEMA">Specifies the schema of the transformation.</Parameter>
            <Parameter Name="NAME">Specifies the name of the transformation.</Parameter>
            <Parameter Name="ATTRIBUTE_NUMBER">The attribute of the target type for which the new transformation expression is being specified. When specifying the new transformation as a single expression of the target type, specify a value of 0.</Parameter>
            <Parameter Name="TRANSFORMATION">The transformation expression must be a SQL expression or a PL/SQL function returning the type of the specified attribute of the target type. If the attribute_number is 0, then the expression must be a PL/SQL function returning an object of the target type or a constructor expression for the target type.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_TSDP_MANAGE" Url="http://docs.oracle.com/database/121/ARPLS/d_tsdp_manage.htm">
      <Description>The DBMS_TSDP_MANAGE package provides an interface to import and manage sensitive columns and sensitive column types in the database, and is used in conjunction with the DBMS_TSDP_PROTECT package with regard to transparent sensitive data protection (TSDP) policies. DBMS_TSDP_MANAGE is available with the Enterprise Edition only.</Description>
      <SubPrograms>
        <SubProgram Name="ADD_SENSITIVE_COLUMN" ElementId="#CACHHGEJ">
          <Description>Adds a column to the sensitive column list</Description>
          <Parameters>
            <Parameter Name="SCHEMA_NAME">Schema to which the column belongs</Parameter>
            <Parameter Name="TABLE_NAME">Table containing the column</Parameter>
            <Parameter Name="COLUMN_NAME">Sensitive column name</Parameter>
            <Parameter Name="SENSITIVE_TYPE">Identifier of the sensitive column type </Parameter>
            <Parameter Name="USER_COMMENT">User comment regarding the sensitive column</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADD_SENSITIVE_TYPE" ElementId="#CACJIECA">
          <Description>Creates and adds a sensitive column type to the list of sensitive column types in the database</Description>
          <Parameters>
            <Parameter Name="SENSITIVE_TYPE">Name of the sensitive column type </Parameter>
            <Parameter Name="USER_COMMENT">User comment regarding the sensitive column</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ALTER_SENSITIVE_COLUMN" ElementId="#CACFECBC">
          <Description>Alters the sensitive type and/or the comment of a column in the sensitive column list.</Description>
          <Parameters>
            <Parameter Name="SCHEMA_NAME">Schema to which the column belongs</Parameter>
            <Parameter Name="TABLE_NAME">Table containing the column</Parameter>
            <Parameter Name="COLUMN_NAME">Sensitive column name</Parameter>
            <Parameter Name="SENSITIVE_TYPE">Identifier of the sensitive column type </Parameter>
            <Parameter Name="USER_COMMENT">User comment regarding the sensitive column</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_SENSITIVE_COLUMN" ElementId="#CACFGEJH">
          <Description>Removes columns from the sensitive column list</Description>
          <Parameters>
            <Parameter Name="SCHEMA_NAME">Schema to which the column belongs</Parameter>
            <Parameter Name="TABLE_NAME">Table containing the column</Parameter>
            <Parameter Name="COLUMN_NAME">Sensitive column name</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_SENSITIVE_TYPE" ElementId="#CACHCHCG">
          <Description>Drops a sensitive column type from the list sensitive column types in the database</Description>
          <Parameters>
            <Parameter Name="SENSITIVE_TYPE">Name of the sensitive column type to be dropped</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_SENSITIVE_TYPE_SOURCE" ElementId="#CACFCACC">
          <Description>Drops sensitive column types corresponding to a source from the list sensitive column types in the database</Description>
          <Parameters>
            <Parameter Name="SOURCE">Name of the source</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IMPORT_DISCOVERY_RESULT" ElementId="#CACDIAIA">
          <Description>Imports sensitive columns from an external source. This can be an Application Data Model (ADM) from an Oracle Enterprise Manager Cloud Control instance</Description>
          <Parameters>
            <Parameter Name="DISCOVERY_RESULT">List of sensitive columns, along with the optional list of (the definitions of) the sensitive column types in XML format (possibly as a CLOB).</Parameter>
            <Parameter Name="DISCOVERY_SOURCE">Source of the import. The discovery_sourcename identifies the list of imported sensitive columns. In case of ADM, this should be the ADM name. </Parameter>
            <Parameter Name="FORCE">Specifies if the discovery result should be imported or not when the discovery result contains columns sensitive columns that are already identified as sensitive by another source.FALSE (default) - the discovery result will not be imported in case of conflicting columns. None of the columns and the sensitive types are imported.TRUE - the discovery result is imported and the attributes of the conflicting columns is set based on the incoming discovery result</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IMPORT_SENSITIVE_TYPES" ElementId="#CACDBFBA">
          <Description>Imports a list of sensitive column types from a source</Description>
          <Parameters>
            <Parameter Name="SENSITIVE_TYPES">List of sensitive column types in XML Format (possibly as a CLOB)</Parameter>
            <Parameter Name="SOURCE">Source of the import. The source identifies the list of imported sensitive column types. In case of Application Data Model (ADM) from an Oracle Enterprise Manager Cloud Control instance, this should be the ADM name.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVE_DISCOVERY_RESULT" ElementId="#CACBIGEC">
          <Description>Removes sensitive columns corresponding to an Application Data Model (ADM) from an Oracle Enterprise Manager Cloud Control instance.</Description>
          <Parameters>
            <Parameter Name="DISCOVERY_SOURCE">Source of the import. In case of ADM, this should be the ADM name, the results of which is to be removed. </Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_TSDP_PROTECT" Url="http://docs.oracle.com/database/121/ARPLS/d_tsdp_protect.htm">
      <Description>The DBMS_TSDP_PROTECT package provides an interface to configure transparent sensitive data protection (TSDP) policies in conjunction with the DBMS_TSDP_MANAGE package. DBMS_TSDP_PROTECT is available with the Enterprise Edition only.</Description>
      <SubPrograms>
        <SubProgram Name="ADD_POLICY" ElementId="#BHADBCBH">
          <Description>Creates a TSDP policy</Description>
          <Parameters>
            <Parameter Name="POLICY_NAME">Name of the policy being created. The maximum length for this identifier is M_IDEN. This follows the Oracle naming convention.</Parameter>
            <Parameter Name="SECURITY_FEATURE">Oracle security feature with which the policy is associated. Allowed values:DBMS_TSDP_PROTECT.REDACT</Parameter>
            <Parameter Name="POLICY_ENABLE_OPTIONS">Initialized with the parameter-value pairs corresponding to the security feature</Parameter>
            <Parameter Name="POLICY_APPLY_CONDITION">Initialized with the property-value pairs that must be satisfied in order to apply the corresponding policy_enable_options. This is an associative array with Property as the key (PLS_INTEGER).Example: example_policy_condition(Property)= property_value. Permissible values for Property:DBMS_TSDP_PROPERTY.DATATYPEDBMS_TSDP_PROPERTY.LENGTHDBMS_TSDP_PROPERTY.PARENT_SCHEMADBMS_TSDP_PROPERTY.PARENT_TABLE</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ALTER_POLICY" ElementId="#BHABIEGB">
          <Description>Alters a TDSP policy</Description>
          <Parameters>
            <Parameter Name="POLICY_NAME">Name of the policy to alter</Parameter>
            <Parameter Name="POLICY_ENABLE_OPTIONS">Initialized with the parameter-value pairs corresponding to the security feature</Parameter>
            <Parameter Name="POLICY_APPLY_CONDITION">Initialized with the property-value pairs that must be satisfied in order to apply the corresponding policy_enable_options. This is an associative array with Property as the key (PLS_INTEGER).Example: example_policy_condition(Property)= property_value. Permissible values for Property:DBMS_TSDP_PROPERTY.DATATYPEDBMS_TSDP_PROPERTY.LENGTHDBMS_TSDP_PROPERTY.PARENT_SCHEMADBMS_TSDP_PROPERTY.PARENT_TABLE</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ASSOCIATE_POLICY" ElementId="#BHAJDJIC">
          <Description>Associates or disassociates a TSDP policy with a sensitive column type</Description>
          <Parameters>
            <Parameter Name="POLICY_NAME">Name of the TDSP policy</Parameter>
            <Parameter Name="SENSITIVE_TYPE">Name of the sensitive column type:</Parameter>
            <Parameter Name="ASSOCIATE">Associate or Disassociate. TRUE implies Associate</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DISABLE_PROTECTION_COLUMN" ElementId="#BHACJCGA">
          <Description>Disables protection for columns</Description>
          <Parameters>
            <Parameter Name="SCHEMA_NAME">Name of the schema containing the column</Parameter>
            <Parameter Name="TABLE_NAME">Table containing the column</Parameter>
            <Parameter Name="COLUMN_NAME">Column name</Parameter>
            <Parameter Name="POLICY_NAME">Optional policy name. If given, only this policy is disabled.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DISABLE_PROTECTION_SOURCE" ElementId="#BHABFDJC">
          <Description>Disables protection based on the source of truth for the sensitive columns</Description>
          <Parameters>
            <Parameter Name="DISCOVERY_SOURCENAME">Name of the discovery source. This could be the Application Data Model (ADM) name or the database user.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DISABLE_PROTECTION_TYPE" ElementId="#BHACEJJA">
          <Description>Disables protection for a sensitive column type</Description>
          <Parameters>
            <Parameter Name="SENSITIVE_TYPE">Name of the sensitive column type</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_POLICY" ElementId="#BHAJHGIH">
          <Description>Removes a TDSP policy</Description>
          <Parameters>
            <Parameter Name="POLICY_NAME">Name of the policy to drop</Parameter>
            <Parameter Name="POLICY_APPLY_CONDITION">To be initialized with the relevant condition</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ENABLE_PROTECTION_COLUMN" ElementId="#BHACDGII">
          <Description>Enables protection for columns</Description>
          <Parameters>
            <Parameter Name="SCHEMA_NAME">Name of the schema containing the column</Parameter>
            <Parameter Name="TABLE_NAME">Table containing the column</Parameter>
            <Parameter Name="COLUMN_NAME">Column name</Parameter>
            <Parameter Name="POLICY_NAME">Optional policy name. If given, only this policy is enabled.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ENABLE_PROTECTION_SOURCE" ElementId="#BHADGCBA">
          <Description>Enables protection based on the source of truth for the sensitive columns</Description>
          <Parameters>
            <Parameter Name="DISCOVERY_SOURCENAME">Name of the discovery source. This could be the Application Data Model (ADM) name or the database user.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ENABLE_PROTECTION_TYPE" ElementId="#BHAIIGGA">
          <Description>Enables protection for a sensitive column type</Description>
          <Parameters>
            <Parameter Name="SENSITIVE_TYPE">Name of the sensitive column type</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_TTS" Url="http://docs.oracle.com/database/121/ARPLS/d_tts.htm">
      <Description>The DBMS_TTS package checks if the transportable set is self-contained. All violations are inserted into a temporary table that can be selected from the view TRANSPORT_SET_VIOLATIONS.</Description>
      <SubPrograms>
        <SubProgram Name="DOWNGRADE" ElementId="#BEIHHEBB">
          <Description>Downgrades transportable tablespace-related data</Description>
        </SubProgram>
        <SubProgram Name="TRANSPORT_SET_CHECK" ElementId="#BEIBHJBJ">
          <Description>Checks if a set of tablespaces (to be transported) is self-contained</Description>
          <Parameters>
            <Parameter Name="TS_LIST">List of one or more tablespaces, separated by comma.</Parameter>
            <Parameter Name="INCL_CONSTRAINTS">TRUE if you want to count in referential integrity constraints when examining if the set of tablespaces is self-contained. (The incl_constraints parameter is a default so that TRANSPORT_SET_CHECK will work if it is called with only the ts_list argument.)</Parameter>
            <Parameter Name="FULL_CHECK">Indicates whether a full or partial dependency check is required. If TRUE, treats all IN and OUT pointers (dependencies) and captures them as violations if they are not self-contained in the transportable set. The parameter should be set to TRUE for TSPITR or if a strict version of transportable is desired. By default the parameter is set to FALSE. It will only consider OUT pointers as violations.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_TYPES" Url="http://docs.oracle.com/database/121/ARPLS/d_types.htm">
      <Description>The DBMS_TYPES package consists of constants, which represent the built-in and user-defined types.</Description>
    </Package>
    <Package Name="DBMS_UTILITY" Url="http://docs.oracle.com/database/121/ARPLS/d_util.htm">
      <Description>The DBMS_UTILITY package provides various utility subprograms.</Description>
      <SubPrograms>
        <SubProgram Name="ACTIVE_INSTANCES" ElementId="#CIHGBJBF">
          <Description>Returns the active instance</Description>
          <Parameters>
            <Parameter Name="INSTANCE_TABLE">Contains a list of the active instance numbers and names. When no instance is up, the list is empty.</Parameter>
            <Parameter Name="INSTANCE_COUNT">Number of active instances</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ANALYZE_DATABASE" ElementId="#BABDDBFI">
          <Description>Analyzes all the tables, clusters and indexes in a database</Description>
          <Parameters>
            <Parameter Name="METHOD">One of ESTIMATE, COMPUTE or DELETE. If ESTIMATE then either estimate_rows or estimate_percent must be nonzero.</Parameter>
            <Parameter Name="ESTIMATE_ROWS">Number of rows to estimate</Parameter>
            <Parameter Name="ESTIMATE_PERCENT">Percentage of rows to estimate. If estimate_rows is specified ignore this parameter.</Parameter>
            <Parameter Name="METHOD_OPT">Method options of the following format:[ FOR TABLE ][ FOR ALL [INDEXED] COLUMNS] [SIZE n][ FOR ALL INDEXES ]</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ANALYZE_PART_OBJECT" ElementId="#i1002400">
          <Description>Analyzes the given tables and indexes</Description>
          <Parameters>
            <Parameter Name="SCHEMA">Schema of the object_name</Parameter>
            <Parameter Name="OBJECT_NAME">Name of object to be analyzed, must be partitioned</Parameter>
            <Parameter Name="OBJECT_TYPE">Type of object, must be T (table) or I (index)</Parameter>
            <Parameter Name="COMMAND_TYPE">Must be V (validate structure)</Parameter>
            <Parameter Name="COMMAND_OPT">Other options for the command type.For C, E it can be FOR table, FOR all LOCAL indexes, FOR all columns or combination of some of the 'for' options of analyze statistics (table). For V, it can be CASCADE when object_type is T.</Parameter>
            <Parameter Name="SAMPLE_CLAUSE">Sample clause to use when command_type is 'E'</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ANALYZE_SCHEMA" ElementId="#BABGDEAI">
          <Description>Analyzes all the tables, clusters and indexes in a schema</Description>
          <Parameters>
            <Parameter Name="SCHEMA">Name of the schema</Parameter>
            <Parameter Name="METHOD">One of ESTIMATE, COMPUTE or DELETE. If ESTIMATE then either estimate_rows or estimate_percent must be nonzero.</Parameter>
            <Parameter Name="ESTIMATE_ROWS">Number of rows to estimate</Parameter>
            <Parameter Name="ESTIMATE_PERCENT">Percentage of rows to estimate. If estimate_rows is specified ignore this parameter.</Parameter>
            <Parameter Name="METHOD_OPT">Method options of the following format:[ FOR TABLE ][ FOR ALL [INDEXED] COLUMNS] [SIZE n][ FOR ALL INDEXES ]</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CANONICALIZE" ElementId="#i1004667">
          <Description>Canonicalizes a given string</Description>
          <Parameters>
            <Parameter Name="NAME">String to be canonicalized</Parameter>
            <Parameter Name="CANON_NAME">Canonicalized string</Parameter>
            <Parameter Name="CANON_LEN">Length of the string (in bytes) to canonicalize</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="COMMA_TO_TABLE" ElementId="#i1002468">
          <Description>Converts a comma-delimited list of names into a PL/SQL table of names</Description>
          <Parameters>
            <Parameter Name="LIST">Comma separated list of list of 'names', where a name should have the following format for the first overloading: a [. b [. c ]][ @ d ]and the following format for the second overloading: a [. b]*where a, b, c, d are simple identifiers (quoted or unquoted).</Parameter>
            <Parameter Name="TABLEN">Number of tables in the PL/SQL table</Parameter>
            <Parameter Name="TAB">PL/SQL table which contains list of names</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="COMPILE_SCHEMA" ElementId="#i1002332">
          <Description>Compiles all procedures, functions, packages, views and triggers in the specified schema</Description>
          <Parameters>
            <Parameter Name="SCHEMA">Name of the schema</Parameter>
            <Parameter Name="COMPILE_ALL">If TRUE, will compile everything within the schema regardless of whether it is VALIDIf FALSE, will compile only INVALID objects</Parameter>
            <Parameter Name="REUSE_SETTINGS">Indicates whether the session settings in the objects should be reused, or whether the current session settings should be adopted instead</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_ALTER_TYPE_ERROR_TABLE" ElementId="#i1004185">
          <Description>Creates an error table to be used in the EXCEPTION clause of the ALTER TYPE statement</Description>
          <Parameters>
            <Parameter Name="SCHEMA_NAME">Name of the schema</Parameter>
            <Parameter Name="TABLE_NAME">Name of the table created</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CURRENT_INSTANCE" ElementId="#i1002512">
          <Description>Returns the current connected instance number</Description>
        </SubProgram>
        <SubProgram Name="DATA_BLOCK_ADDRESS_BLOCK" ElementId="#i1002531">
          <Description>Gets the block number part of a data block address</Description>
          <Parameters>
            <Parameter Name="DBA">Data block address</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DATA_BLOCK_ADDRESS_FILE" ElementId="#i1002627">
          <Description>Gets the file number part of a data block address</Description>
          <Parameters>
            <Parameter Name="DBA">Data block address</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DB_VERSION" ElementId="#i1002631">
          <Description>Returns version information for the database</Description>
          <Parameters>
            <Parameter Name="VERSION">A string which represents the internal software version of the database (for example, 7.1.0.0.0).The length of this string is variable and is determined by the database version.</Parameter>
            <Parameter Name="COMPATIBILITY">The compatibility setting of the database determined by the "compatible" init.ora parameter.If the parameter is not specified in the init.ora file, then NULL is returned.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXEC_DDL_STATEMENT" ElementId="#i1002666">
          <Description>Executes the DDL statement in parse_string</Description>
          <Parameters>
            <Parameter Name="PARSE_STRING">DDL statement to be executed</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXPAND_SQL_TEXT" ElementId="#BJEIAEBB">
          <Description>Recursively replaces any view references in the input SQL query with the corresponding view subquery</Description>
          <Parameters>
            <Parameter Name="INPUT_SQL_TEXT">Input SQL query text</Parameter>
            <Parameter Name="OUTPUT_SQL_TEXT">View-expanded query text</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="FORMAT_CALL_STACK" ElementId="#i997163">
          <Description>Formats the current call stack</Description>
        </SubProgram>
        <SubProgram Name="FORMAT_ERROR_BACKTRACE" ElementId="#i1003874">
          <Description>Formats the backtrace from the point of the current error to the exception handler where the error has been caught</Description>
        </SubProgram>
        <SubProgram Name="FORMAT_ERROR_STACK" ElementId="#i1002463">
          <Description>Formats the current error stack</Description>
        </SubProgram>
        <SubProgram Name="GET_CPU_TIME" ElementId="#i1003768">
          <Description>Returns the current CPU time in 100th's of a second</Description>
        </SubProgram>
        <SubProgram Name="GET_DEPENDENCY" ElementId="#i1004023">
          <Description>Shows the dependencies on the object passed in.</Description>
          <Parameters>
            <Parameter Name="TYPE">Type of the object, for example if the object is a table give the type as 'TABLE'</Parameter>
            <Parameter Name="SCHEMA">Schema name of the object</Parameter>
            <Parameter Name="NAME">Name of the object</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_ENDIANNESS" ElementId="#BABHABJA">
          <Description>Gets the endianness of the database platform</Description>
        </SubProgram>
        <SubProgram Name="GET_HASH_VALUE" ElementId="#i1003646">
          <Description>Computes a hash value for the given string</Description>
          <Parameters>
            <Parameter Name="NAME">String to be hashed.</Parameter>
            <Parameter Name="BASE">Base value for the returned hash value at which to start</Parameter>
            <Parameter Name="HASH_SIZE">Desired size of the hash table</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_PARAMETER_VALUE" ElementId="#i997189">
          <Description>Gets the value of specified init.ora parameter</Description>
          <Parameters>
            <Parameter Name="PARNAM">Parameter name</Parameter>
            <Parameter Name="INTVAL">Value of an integer parameter or the value length of a string parameter</Parameter>
            <Parameter Name="STRVAL">Value of a string parameter</Parameter>
            <Parameter Name="LISTNO">List item number. If retrieving parameter values for a parameter that can be specified multiple times to accumulate values, use this parameter to get each individual parameter.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_SQL_HASH" ElementId="#BABDBIHF">
          <Description>Computes a hash value for the given string using MD5 algorithm</Description>
          <Parameters>
            <Parameter Name="NAME">String to be hashed</Parameter>
            <Parameter Name="HASH">Optional field to store all 16 bytes of returned hash value</Parameter>
            <Parameter Name="PRE10IHASH">Optional field to store the pre 10i database version hash value</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_TIME" ElementId="#i1002765">
          <Description>Returns the current time in 100th's of a second</Description>
        </SubProgram>
        <SubProgram Name="GET_TZ_TRANSITIONS" ElementId="#BJEFCEEF">
          <Description>Returns timezeone transitions by regionid from the timezone.dat file</Description>
          <Parameters>
            <Parameter Name="REGIONID">Number corresponding to the region</Parameter>
            <Parameter Name="TRANSITIONS">Raw bytes from the timezone.dat file</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="INVALIDATE" ElementId="#BABFDACJ">
          <Description>Invalidates a database object and (optionally) modifies its PL/SQL compiler parameter settings</Description>
          <Parameters>
            <Parameter Name="P_OBJECT_ID">ID number of object to be invalidated. This is the same as the value of the OBJECT_ID column from ALL_OBJECTS. If the object_id argument is NULL or invalid then the exception inv_not_exist_or_no_priv is raised. The caller of this procedure must have create privileges on the object being invalidated else the inv_not_exist_or_no_priv exception is raised.</Parameter>
            <Parameter Name="P_PLSQL_OBJECT_SETTINGS">Optional parameter that ignored if the object specified by p_object_id is not a PL/SQL object. If no value is specified for this parameter then the PL/SQL compiler settings are left unchanged, that is, equivalent to REUSE SETTINGS. If a value is provided, it must specify the values of the PL/SQL compiler settings separated by one or more spaces. Each setting can be specified only once else inv_malformed_settings exception will be raised. The setting values are changed only for the object specified by p_object_id and do not affect dependent objects that may be invalidated. The setting names and values are case insensitive. If a setting is omitted and REUSE SETTINGS is specified, then if a value was specified for the compiler setting in an earlier compilation of this library unit, Oracle Database uses that earlier value. If a setting is omitted and REUSE SETTINGS was not specified or no value has been specified for the parameter in an earlier compilation, then the database will obtain the value for that setting from the session environment.</Parameter>
            <Parameter Name="P_OPTION_FLAGS">Optional parameter defaults to zero (no flags). Option flags supported by invalidate.inv_error_on_restrictions (see Constants ): The subprogram imposes various restrictions on the objects that can be invalidated. For example, the object specified by p_object_id cannot be a table. By default, invalidate quietly returns on these conditions (and does not raise an exception). If the caller sets this flag, the exception inv_restricted_object is raised.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IS_BIT_SET" ElementId="#BJEDEHEI">
          <Description>Checks the bit setting for the given bit in the given RAW value</Description>
        </SubProgram>
        <SubProgram Name="IS_CLUSTER_DATABASE" ElementId="#i1002749">
          <Description>Determines if the database is running in cluster database mode</Description>
        </SubProgram>
        <SubProgram Name="MAKE_DATA_BLOCK_ADDRESS" ElementId="#i1002839">
          <Description>Creates a data block address given a file number and a block number</Description>
          <Parameters>
            <Parameter Name="FILE">File that contains the block</Parameter>
            <Parameter Name="BLOCK">Offset of the block within the file in terms of block increments</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="NAME_RESOLVE" ElementId="#i997271">
          <Description>Resolves the given name</Description>
          <Parameters>
            <Parameter Name="NAME">Name of the object.This can be of the form [[a.]b.]c[@d], where a, b, c are SQL identifier and d is a dblink. No syntax checking is performed on the dblink. If a dblink is specified, or if the name resolves to something with a dblink, then object is not resolved, but the schema, part1, part2 and dblink OUT parameters are filled in.a, b and c may be delimited identifiers, and may contain Globalization Support (NLS) characters (single and multibyte).</Parameter>
            <Parameter Name="CONTEXT">Must be an integer between 0 and 9.0 - table1 - PL/SQL (for 2 part names)2 - sequences3 - trigger4 - Java Source5 - Java resource6 - Java class7 - type8 - Java shared data9 - index</Parameter>
            <Parameter Name="SCHEMA">Schema of the object: c. If no schema is specified in name, then the schema is determined by resolving the name.</Parameter>
            <Parameter Name="PART1">First part of the name. The type of this name is specified part1_type (synonym or package).</Parameter>
            <Parameter Name="PART2">If this is non-NULL, then this is a subprogram name. If part1 is non-NULL, then the subprogram is within the package indicated by part1. If part1 is NULL, then the subprogram is a top-level subprogram.</Parameter>
            <Parameter Name="DBLINK">If this is non-NULL, then a database link was either specified as part of name or name was a synonym which resolved to something with a database link. In this case, if further name translation is desired, then you must call the DBMS_UTILITY.NAME_RESOLVE procedure on this remote node.</Parameter>
            <Parameter Name="PART1_TYPE">Type of part1 is:5 - synonym7 - procedure (top level)8 - function (top level)9 - package</Parameter>
            <Parameter Name="OBJECT_NUMBER">Object identifier</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="NAME_TOKENIZE" ElementId="#BJEFIFBJ">
          <Description>Calls the parser to parse the given name</Description>
        </SubProgram>
        <SubProgram Name="OLD_CURRENT_SCHEMA" ElementId="#BABICAFJ">
          <Description>Returns the session value from SYS_CONTEXT ('USERENV', 'CURRENT_SCHEMA')</Description>
        </SubProgram>
        <SubProgram Name="OLD_CURRENT_USER" ElementId="#BABFFEIB">
          <Description>Returns the session value from SYS_CONTEXT ('USERENV', 'CURRENT_USER')</Description>
        </SubProgram>
        <SubProgram Name="PORT_STRING" ElementId="#i997419">
          <Description>Returns a string that uniquely identifies the version of Oracle and the operating system</Description>
        </SubProgram>
        <SubProgram Name="SQLID_TO_SQLHASH" ElementId="#BABEBJAI">
          <Description>Converts a SQL ID into a hash value</Description>
          <Parameters>
            <Parameter Name="SQL_ID">SQL ID of a SQL statement. Must be VARCHAR2(13).</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="TABLE_TO_COMMA" ElementId="#i1002844">
          <Description>Converts a PL/SQL table of names into a comma-delimited list of names</Description>
          <Parameters>
            <Parameter Name="TAB">PL/SQL table which contains list of table names</Parameter>
            <Parameter Name="TABLEN">Number of tables in the PL/SQL table</Parameter>
            <Parameter Name="LIST">Comma separated list of tables</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="VALIDATE" ElementId="#i1005273">
          <Description>Makes invalid database objects valid</Description>
          <Parameters>
            <Parameter Name="OWNER">Name of the user who owns the object. Same as the OWNER field in ALL_OBJECTS.</Parameter>
            <Parameter Name="OBJNAME">Name of the object to be validated. Same as the OBJECT_NAME field in ALL_OBJECTS.</Parameter>
            <Parameter Name="NAMESPACE">Namespace of the object. Same as the namespace field in obj$. Equivalent numeric values are as follows:1 = TABLE/PROCEDURE/TYPE2 = BODY3 = TRIGGER4 = INDEX5 = CLUSTER8 = LOB9 = DIRECTORY10 = QUEUE11 = REPLICATION OBJECT GROUP12 = REPLICATION PROPAGATOR13 = JAVA SOURCE14 = JAVA RESOURCE58 = (Data Mining) MODEL</Parameter>
            <Parameter Name="EDITION_NAME">[Note: Currently not operable. Reserved for future use]</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="WAIT_ON_PENDING_DML" ElementId="#BABCAEFB">
          <Description>Waits until all transactions (other than the caller's own) that have locks on the listed tables and began prior to the specified SCN have either committed or been rolled back</Description>
          <Parameters>
            <Parameter Name="TABLES">Comma-separated list of one or more table names. The list must be valid for COMMA_TO_TABLE Procedures, and each item valid to the NAME_RESOLVE Procedure. Neither column specifiers nor DBLINK (database link) specifiers are allowed in the names, and each name must resolve to an existing table in the local database.</Parameter>
            <Parameter Name="TIMEOUT">Maximum number of seconds to wait, totalled across all tables/transactions. A NULL or negative value will cause a very long wait.</Parameter>
            <Parameter Name="SCN">SCN prior to which transactions must have begun to be considered relevant to this request. If the value is NULL or not recognized as a meaningful scn on input, the most current SCN across all instances will be used and will be set into the passed argument as an output. If a meaningful value is passed in, its value will be preserved in the output.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_WARNING" Url="http://docs.oracle.com/database/121/ARPLS/d_warn.htm">
      <Description>The DBMS_WARNING package provides a way to manipulate the behavior of PL/SQL warning messages, in particular by reading and changing the setting of the PLSQL_WARNINGS initialization parameter to control what kinds of warnings are suppressed, displayed, or treated as errors. This package provides the interface to query, modify and delete current system or session settings.</Description>
      <SubPrograms>
        <SubProgram Name="ADD_WARNING_SETTING_CAT" ElementId="#i1000066">
          <Description>Modifies the current session or system warning settings of the warning_category previously supplied</Description>
          <Parameters>
            <Parameter Name="WARNING_CATEGORY">Name of the category. Allowed values are ALL, INFORMATIONAL, SEVERE and PERFORMANCE.</Parameter>
            <Parameter Name="WARNING_VALUE">Value for the category. Allowed values are ENABLE, DISABLE, and ERROR.</Parameter>
            <Parameter Name="SCOPE">Specifies if the changes are being performed in the session context or the system context. Allowed values are SESSION or SYSTEM.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADD_WARNING_SETTING_NUM" ElementId="#i1001011">
          <Description>Modifies the current session or system warning settings of the or warning_number previously supplied</Description>
          <Parameters>
            <Parameter Name="WARNING_NUMBER">The warning number. Allowed values are all valid warning numbers.</Parameter>
            <Parameter Name="WARNING_VALUE">Value for the category. Allowed values are ENABLE, DISABLE, and ERROR.</Parameter>
            <Parameter Name="SCOPE">Specifies if the changes are being performed in the session context or the system context. Allowed values are SESSION or SYSTEM.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_CATEGORY" ElementId="#i1001621">
          <Description>Returns the category name, given the message number</Description>
          <Parameters>
            <Parameter Name="WARNING_NUMBER">The warning message number.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_WARNING_SETTING_CAT" ElementId="#i1000570">
          <Description>Returns the specific warning category in the session</Description>
          <Parameters>
            <Parameter Name="WARNING_CATEGORY">Name of the category. Allowed values are all valid category names (ALL, INFORMATIONAL, SEVERE and PERFORMANCE).</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_WARNING_SETTING_NUM" ElementId="#i1000778">
          <Description>Returns the specific warning number in the session</Description>
          <Parameters>
            <Parameter Name="WARNING_NUMBER">Warning number. Allowed values are all valid warning numbers.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_WARNING_SETTING_STRING" ElementId="#i1001622">
          <Description>Returns the entire warning string for the current session</Description>
        </SubProgram>
        <SubProgram Name="SET_WARNING_SETTING_STRING" ElementId="#i1001623">
          <Description>Replaces previous settings with the new value</Description>
          <Parameters>
            <Parameter Name="WARNING_VALUE">The new string that will constitute the new value.</Parameter>
            <Parameter Name="SCOPE">This will specify if the changes are being done in the session context, or system context. Allowed values are SESSION or SYSTEM.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_WM" Url="http://docs.oracle.com/database/121/ARPLS/d_wm.htm">
      <Description>The DBMS_WM package provides an interface to Oracle Database Workspace Manager (often referred to as Workspace Manager).</Description>
    </Package>
    <Package Name="DBMS_WORKLOAD_CAPTURE" Url="http://docs.oracle.com/database/121/ARPLS/d_workload_capture.htm">
      <Description>The DBMS_WORKLOAD_CAPTURE package configures the Workload Capture system and produce the workload capture data. Replay of this capture is implemented by way of the DBMS_WORKLOAD_REPLAY package.</Description>
      <SubPrograms>
        <SubProgram Name="ADD_FILTER" ElementId="#CFHFAAFB">
          <Description>Adds a specified filter</Description>
          <Parameters>
            <Parameter Name="FNAME">Name for the filter to be added. Can be used to delete the filter later if it is not required. (Mandatory)</Parameter>
            <Parameter Name="FATTRIBUTE">Specifies the attribute on which the filter needs to be applied (Mandatory). The possible values are:INSTANCE_NUMBER - type NUMBERUSER - type STRINGMODULE - type STRINGACTION - type STRINGPROGRAM - type STRINGSERVICE - type STRINGPDB_NAME - type STRING</Parameter>
            <Parameter Name="FVALUE">Specifies the value to which the given attribute should be equal to for the filter to be considered active. Wildcards like '%' are acceptable for all attributes that are of type STRING. This means that the filter for a NUMBER attribute is parsed as "attribute = value", with the filter for a STRING attribute parsed as "attribute like value" (Mandatory).</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_CAPTURE_INFO" ElementId="#CFHJFFJH">
          <Description>Deletes the rows in the DBA_WORKLOAD_CAPTURES and DBA_WORKLOAD_FILTERS views that corresponds to the given workload capture ID</Description>
          <Parameters>
            <Parameter Name="CAPTURE_ID">ID of the workload capture that needs to be deleted. Corresponds to DBA_WORKLOAD_CAPTURES.ID. (Mandatory)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_FILTER" ElementId="#CHDEJDGC">
          <Description>Deletes a specified filter</Description>
          <Parameters>
            <Parameter Name="FILTER_NAME">Filter to be deleted</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXPORT_AWR" ElementId="#CFHBICJI">
          <Description>Exports the AWR snapshots associated with a given capture ID</Description>
          <Parameters>
            <Parameter Name="CAPTURE_ID">ID of the capture whose AWR snapshots are to be exported. (Mandatory)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="FINISH_CAPTURE" ElementId="#CHDBCGBA">
          <Description>Finalizes the workload capture by signaling all connected sessions to stop capture, and stops future requests to the database from being captured</Description>
          <Parameters>
            <Parameter Name="TIMEOUT">Specifies in seconds for how long the procedure should wait before it times out. Pass 0 if you want to cancel the current workload capture and not wait for any sessions to flush it's capture buffers. Default value: 30 seconds</Parameter>
            <Parameter Name="REASON">Specifies a reason for calling the procedure. The reason appears in the column ERROR_MESSAGE of the view DBA_WORKLOAD_CAPTURES.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_CAPTURE_INFO" ElementId="#CFHEGGDF">
          <Description>Retrieves all the information regarding a workload capture present in the stipulated directory, imports the information into the DBA_WORKLOAD_CAPTURES and DBA_WORKLOAD_FILTERS views, and returns the appropriate DBA_WORKLOAD_CAPTURES.ID</Description>
          <Parameters>
            <Parameter Name="DIR">Name of the DIRECTORY object (case sensitive) where all the workload capture files are located (Mandatory)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IMPORT_AWR" ElementId="#CFHGHFHG">
          <Description>Imports the AWR snapshots associated with a given capture ID</Description>
          <Parameters>
            <Parameter Name="CAPTURE_ID">ID of the capture whose AWR snapshots should be imported. (Mandatory)</Parameter>
            <Parameter Name="STAGING_SCHEMA">Name of a valid schema in the current database which can be used as a staging area while importing the AWR snapshots from the capture directory to the SYS AWR schema.The SYS schema is not a valid input. (Mandatory, Case sensitive).</Parameter>
            <Parameter Name="FORCE_CLEANUP">Values:TRUE - any AWR data present in the given staging_schema are removed before the actual import operation. All tables with names that match any of the tables in AWR are dropped before the actual import. This typically is equivalent to dropping all tables returned by the following SQL:Use this option only if you are sure that there are no important data in any such tables in the staging_schema.FALSE - (default) no tables dropped from the staging_schema prior to the import operation</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REPORT" ElementId="#CHDIIDCC">
          <Description>Returns a report on the workload capture under consideration using one or more different sources</Description>
          <Parameters>
            <Parameter Name="CAPTURE_ID">ID of the workload capture whose capture report is required. (Mandatory)This relates to the directory that contains the workload capture on which the Report needs to be generated. Should be a valid DIRECTORY object that points to a valid directory in the host system that contains a workload capture.</Parameter>
            <Parameter Name="FORMAT">Specifies the report format. Valid values are DBMS_WORKLOAD_CAPTURE.TYPE_TEXT and DBMS_WORKLOAD_CAPTURE.TYPE_HTML.(Mandatory)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="START_CAPTURE" ElementId="#CHDJIJIE">
          <Description>Initiates workload capture on all instances</Description>
          <Parameters>
            <Parameter Name="NAME">Name of the workload capture. Allows the workload capture to be given a label, such as "Thanksgiving weekend" or "Christmas peak workload" for future reference. The workload capture's name is preserved along with the captured workload actions. (Mandatory)</Parameter>
            <Parameter Name="DIR">Name of the DIRECTORY object (case sensitive) where all the workload capture files are stored. Should contain enough space to hold all the workload capture files. (Mandatory)</Parameter>
            <Parameter Name="DURATION">Optional input to specify the duration (in seconds) for which the workload needs to be captured. DEFAULT is NULL which means that workload capture continues until the user executes DBMS_WORKLOAD_CAPTURE.FINISH_CAPTURE.</Parameter>
            <Parameter Name="DEFAULT_ACTION">Can be either INCLUDE or EXCLUDE. Determines whether, by default, every user request should be captured or not. Also determines whether the workload filters specified should be considered as INCLUSION filters or EXCLUSION filters.If INCLUDE, by default all user requests to the database are captured, except for the part of the workload defined by the filters. In this case, all the filters specified using the ADD_FILTER Procedures are treated as EXCLUSION filters, determining the workload that is not captured. (DEFAULT, and so all the filters specified are assumed to be EXCLUSION filters.)If EXCLUDE, by default no user request to the database is captured, except for the part of the workload defined by the filters. In this case, all the filters specified using the ADD_FILTER Procedures are treated as INCLUSION filters, determining the workload that is captured.</Parameter>
            <Parameter Name="AUTO_UNRESTRICT">Can be either TRUE or FALSE.If TRUE, all instances started up in RESTRICTED mode using STARTUP RESTRICT are automatically unrestricted upon a successful START_CAPTURE. (DEFAULT)If FALSE, no database instance is automatically unrestricted.</Parameter>
            <Parameter Name="CAPTURE_STS">If this parameter is TRUE, a SQL tuning set capture is also started in parallel with workload capture. The resulting SQL tuning set can be exported using the EXPORT_AWR Procedure along with the AWR data. Currently, parallel STS capture is not supported in an Oracle RAC environment, so this parameter has no effect if used in that context. Capture filters defined using the DBMS_WORKLOAD_REPLAY interface do not apply to the SQL tuning set capture. The calling user must have the appropriate privileges ('ADMINISTER SQL TUNING SET').If starting SQL set capture fails, workload capture is stopped. The reason is stored in DBA_WORKLOAD_CAPTURES.ERROR_MESSAGE. The default value is FALSE.</Parameter>
            <Parameter Name="STS_CAP_INTERVAL">Specifies the capture interval of the SQL set capture from the cursor cache in seconds. The default value is 300.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_WORKLOAD_REPLAY" Url="http://docs.oracle.com/database/121/ARPLS/d_workload_replay.htm">
      <Description>The DBMS_WORKLOAD_REPLAY package provides an interface to replay a workload capture.</Description>
      <SubPrograms>
        <SubProgram Name="ADD_CAPTURE" ElementId="#BGBCAACH">
          <Description>Adds the given capture to the current schedule</Description>
          <Parameters>
            <Parameter Name="CAPTURE_DIR_NAME">Name of the OS directory containing the capture under the replay top-level directory</Parameter>
            <Parameter Name="START_DELAY_SECONDS">Delay time in seconds before the replay of this capture starts</Parameter>
            <Parameter Name="STOP_REPLAY">Stop the replay after it finishes</Parameter>
            <Parameter Name="TAKE_BEGIN_SNAPSHOT">Take an AWR snapshot when the replay of this capture starts</Parameter>
            <Parameter Name="TAKE_END_SNAPSHOT">Take an AWR snapshot when the replay of this capture finishes</Parameter>
            <Parameter Name="QUERY_ONLY">Replay only the read-only queries of this workload capture</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADD_FILTER" ElementId="#BGBHIBIE">
          <Description>Adds a filter to replay only a subset of the captured workload</Description>
          <Parameters>
            <Parameter Name="FNAME">(Mandatory) Name of the filter. Can be used to delete the filter later if it is not required.</Parameter>
            <Parameter Name="FATTRIBUTE">(Mandatory) Specifies the attribute on which the filter is defined as one of the following values of type STRING :USERMODULEACTIONPROGRAMSERVICECONNECTION_STRING</Parameter>
            <Parameter Name="FVALUE">(Mandatory) Specifies the value to which the given 'attribute' must be equal to for the filter to be considered active. Wildcards such as '%' are acceptable for all attributes that are of type STRING. Currently all the listed values of fattribute are of type STRING. INSTANCE_NUMBER is a NUMBER attribute. It is currently only supported for capture.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADD_SCHEDULE_ORDERING" ElementId="#BGBEDGHC">
          <Description>Adds a schedule order between two captures</Description>
          <Parameters>
            <Parameter Name="SCHEDULE_CAPTURE_ID">Points to a capture that has been added to the current replay schedule. According to the new schedule ordering added by this subprogram, its replay will not start until the replay of another capture specified by waitfor_capture_id runs to completion.</Parameter>
            <Parameter Name="WAITFOR_CAPTURE_ID">Points to a capture that has been added to the current replay schedule. According to the new schedule ordering added by this subprogram, the replay of capture specified by schedule_capture_id will not start until the replay of this capture runs to completion.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BEGIN_REPLAY_SCHEDULE" ElementId="#BGBDHBJH">
          <Description>Initiates the creation of a reusable replay schedule</Description>
          <Parameters>
            <Parameter Name="REPLAY_DIR_OBJ">Directory object that points to the replay directory that contains all the capture directories involved in the schedule</Parameter>
            <Parameter Name="SCHEDULE_NAME">Name of the schedule to be replayed</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CALIBRATE" ElementId="#CHDFBCDI">
          <Description>Operates on a processed workload capture directory to estimate the number of hosts and workload replay clients needed to faithfully replay the given workload</Description>
          <Parameters>
            <Parameter Name="CAPTURE_DIR">Name of the directory object that points to the (case sensitive) OS directory that contains processed capture data</Parameter>
            <Parameter Name="PROCESS_PER_CPU">Maximum number of processes allowed for each CPU (default is 4)</Parameter>
            <Parameter Name="THREADS_PER_PROCESS">Maximum number of threads allowed for each process (default is 50)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CANCEL_REPLAY" ElementId="#CBADBCDC">
          <Description>Cancels the workload replay in progress</Description>
          <Parameters>
            <Parameter Name="ERROR_MSG">An optional reason for cancelling the replay can be passed which is recorded into DBA_WORKLOAD_REPLAYS.ERROR_MESSAGE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="COMPARE_PERIOD_REPORT" ElementId="#BGBGFDBG">
          <Description>Generates a report comparing a replay to its capture or to another replay of the same capture</Description>
          <Parameters>
            <Parameter Name="REPLAY_ID1">First ID of the workload replay whose report is requested</Parameter>
            <Parameter Name="REPLAY_ID2">Second ID of the workload replay whose report is requested. If this is NULL, then the comparison is done with the capture.</Parameter>
            <Parameter Name="FORMAT">Specifies the report format. Valid values are DBMS_WORKLOAD_CAPTURE.TYPE_HTML and DBMS_WORKLOAD_CAPTURE.TYPE_XML.</Parameter>
            <Parameter Name="RESULT">Output of the report (CLOB)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="COMPARE_SQLSET_REPORT" ElementId="#CBAFDIIC">
          <Description>Generates a report comparing a sqlset captured during replay to one captured during workload capture or to one captured during another replay of the same capture</Description>
          <Parameters>
            <Parameter Name="REPLAY_ID1">First ID of the workload replay after a change</Parameter>
            <Parameter Name="REPLAY_ID2">Second ID of the workload replay before a change. If this is NULL, then the comparison is done with the capture.</Parameter>
            <Parameter Name="FORMAT">Specifies the report format. Valid values are DBMS_WORKLOAD_CAPTURE.TYPE_HTML, DBMS_WORKLOAD_CAPTURE.TYPE_XML and DBMS_WORKLOAD_CAPTURE.TYPE_TEXT.</Parameter>
            <Parameter Name="R_LEVEL">See level parameter in the REPORT_ANALYSIS_TASK Function in the DBMS_SQLPA package</Parameter>
            <Parameter Name="R_SECTIONS">See section parameter in the REPORT_ANALYSIS_TASK Function in the DBMS_SQLPA package</Parameter>
            <Parameter Name="RESULT">Output of the report (CLOB)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_FILTER_SET" ElementId="#BGBFEFFF">
          <Description>Uses the replay filters added to create a set of filters to use against the replay in replay_dir</Description>
          <Parameters>
            <Parameter Name="REPLAY_DIR">Object directory of the replay to be filtered</Parameter>
            <Parameter Name="FILTER_SET">Name of the filter set to create (to use in USE_FILTER_SET Procedure)</Parameter>
            <Parameter Name="DEFAULT_ACTION">Can be either INCLUDE or EXCLUDE. Determines whether, by default, every captured call must be replayed or not. Also determines whether the workload filters specified must be considered as INCLUSION filters or EXCLUSION filters.)If it is INCLUDE, then by default all captured calls are replayed, except for the part of the workload defined by the filters. In this case, all the filters that were specified using the ADD_SCHEDULE_ORDERING Function are treated as EXCLUSION filters, and will determine the workload that will not be replayed.If it is EXCLUDE, then by default no captured call to the database is replayed, except for the part of the workload defined by the filters. In this case, all the filters that were specified using he ADD_SCHEDULE_ORDERING Function are treated as INCLUSION filters, and will determine the workload that is replayed.Default: INCLUDE and all the filters specified are assumed to be EXCLUSION filters</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_FILTER" ElementId="#BGBJACAG">
          <Description>Deletes the named filter</Description>
          <Parameters>
            <Parameter Name="FNAME">(Mandatory) Name of the filter that must be deleted</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_REPLAY_INFO" ElementId="#BGBEGEAE">
          <Description>Deletes the rows in DBA_WORKLOAD_REPLAYS that corresponds to the given workload replay ID</Description>
          <Parameters>
            <Parameter Name="REPLAY_ID">(Mandatory) ID of the workload replay that must be deleted. Corresponds to DBA_WORKLOAD_REPLAYS.ID</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="END_REPLAY_SCHEDULE" ElementId="#BGBCFCAI">
          <Description>Wraps up the creation of the current schedule</Description>
        </SubProgram>
        <SubProgram Name="EXPORT_AWR" ElementId="#BGBHGCEA">
          <Description>Exports the Automatic Workload Repository (AWR) snapshots associated with a given replay ID</Description>
          <Parameters>
            <Parameter Name="REPLAY_ID">(Mandatory) ID of the replay whose AWR snapshots are to be exported</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GENERATE_CAPTURE_SUBSET" ElementId="#BGBJBDJH">
          <Description>Creates a new capture from an existing workload capture</Description>
          <Parameters>
            <Parameter Name="INPUT_CAPTURE_DIR">(Mandatory) Name of the directory object that points to an existing workload capture</Parameter>
            <Parameter Name="OUTPUT_CAPTURE_DIR">(Mandatory) Name of the directory object that points to the new capture</Parameter>
            <Parameter Name="NEW_CAPTURE_NAME">(Mandatory) Name of new capture</Parameter>
            <Parameter Name="BEGIN_TIME">Start of the time range - time offset in seconds from the start of a workload capture</Parameter>
            <Parameter Name="BEGIN_INCLUDE_INCOMPLETE">Column to include incomplete calls caused by begin_time</Parameter>
            <Parameter Name="END_TIME">End of the time range - time offset in seconds from the start of a workload capture. If end_time is zero or end_time is less or equal than begin_time, the time range is invalid. The new capture will use the whole duration of the input capture.</Parameter>
            <Parameter Name="END_INCLUDE_INCOMPLETE">Column to include incomplete calls caused by end_time</Parameter>
            <Parameter Name="PARALLEL_LEVEL">Number of Oracle processes used to process the input captures in a parallel fashion. The NULL default value will auto-compute the parallelism level based on number of CPUs, whereas a value of 1 will enforce serial execution.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_DIVERGING_STATEMENT" ElementId="#BGBIHGFG">
          <Description>Exports the Automatic Workload Repository (AWR) snapshots associated with a given replay ID</Description>
          <Parameters>
            <Parameter Name="REPLAY_ID">ID of the replay in which that call diverged</Parameter>
            <Parameter Name="STREAM_ID">Stream ID of the diverging call</Parameter>
            <Parameter Name="CALL_COUNTER">Call counter of the diverging call</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_REPLAY_DIRECTORY" ElementId="#BGBIFEGD">
          <Description>Returns the current replay directory set by the SET_REPLAY_DIRECTORY Procedure.</Description>
        </SubProgram>
        <SubProgram Name="GET_REPLAY_INFO" ElementId="#BGBJDDHC">
          <Description>Retrieves information about the workload capture and the history of all the workload replay attempts from the related directory</Description>
          <Parameters>
            <Parameter Name="DIR">(Mandatory) Name of the workload replay directory object (case sensitive).</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_REPLAY_TIMEOUT" ElementId="#CBAHDDAA">
          <Description>Retrieves the replay timeout setting</Description>
          <Parameters>
            <Parameter Name="ENABLED">TRUE if the timeout action is enabled, FALSE otherwise.</Parameter>
            <Parameter Name="MIN_DELAY">Lower bound of call delay in minutes. The replay action is activated only when the delay is equal to or more than min_delay.</Parameter>
            <Parameter Name="MAX_DELAY">Upper bound of call delay in minutes. The timeout action throws ORA-15569 when the delay is more than max_delay.</Parameter>
            <Parameter Name="DELAY_FACTOR">Factor for the call delay that is between min_delay and max_delay. The timeout action throws ORA-15569 when the current replay elapsed time is more than the product of capture elapsed time and delay_factor.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IMPORT_AWR" ElementId="#BGBFJABI">
          <Description>Imports the Automatic Workload Repository (AWR) snapshots associated with a given replay ID</Description>
          <Parameters>
            <Parameter Name="REPLAY_ID">(Mandatory) ID of the replay whose AWR snapshots must be imported</Parameter>
            <Parameter Name="STAGING_SCHEMA">(Mandatory) Name of a valid schema in the current database which can be used as a staging area while importing the AWR snapshots from the replay directory to the SYS AWR schema. The SYS schema is not a valid input.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="INITIALIZE_CONSOLIDATED_REPLAY" ElementId="#BGBIEAIJ">
          <Description>Puts the database state in INIT for a multiple-capture replay</Description>
          <Parameters>
            <Parameter Name="REPLAY_NAME">(Mandatory) Name of the workload replay. Every replay of a processed workload capture can be given a name.</Parameter>
            <Parameter Name="SCHEDULE_NAME">Name of the schedule to be replayed. It must have been created through the BEGIN_REPLAY_SCHEDULE Procedure for the replay directory replay_dir.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="INITIALIZE_REPLAY" ElementId="#CHDDDJBH">
          <Description>Initializes replay, and loads specific data produced during processing into the database</Description>
          <Parameters>
            <Parameter Name="REPLAY_NAME">(Mandatory) Name of the workload replay. Every replay of a processed workload capture can be given a name.</Parameter>
            <Parameter Name="REPLAY_DIR">Name of the directory object that points to the OS directory (case sensitive) that contains processed capture data</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IS_REPLAY_PAUSED" ElementId="#BGBBJDIA">
          <Description>Reports whether the replay is currently paused</Description>
        </SubProgram>
        <SubProgram Name="PAUSE_REPLAY" ElementId="#CHDHCADH">
          <Description>Pauses the in-progress workload replay</Description>
        </SubProgram>
        <SubProgram Name="POPULATE_DIVERGENCE" ElementId="#BGBCIGFB">
          <Description>Precomputes the divergence information for the given call, stream, or the whole replay so that the GET_DIVERGING_STATEMENT Function returns as quickly as possible for the precomputed calls</Description>
          <Parameters>
            <Parameter Name="REPLAY_ID">ID of the replay</Parameter>
            <Parameter Name="STREAM_ID">Stream ID of the diverging call. If NULL is provided, then divergence information is precomputed for all diverging calls in the given replay.</Parameter>
            <Parameter Name="CALL_COUNTER">Call counter of the diverging call. If NULL is provided, then divergence information is precomputed for all diverging calls in the given stream.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PREPARE_REPLAY" ElementId="#CBAFFDFE">
          <Description>Puts the database in a special "Prepare" mode</Description>
          <Parameters>
            <Parameter Name="SYNCHRONIZATION">Turns synchronization ON or OFF during workload replay.OFF - Workload replay runs asynchronously.SCN - The COMMIT order observed during the original workload capture is preserved during replay. Every action that is replayed is executed only after all of its dependent COMMITs (all COMMITs that were issued before the given action in the original workload capture) have finished execution.OBJECT_ID - This is the default, and uses a more advanced synchronization scheme. Every action that is replayed is executed only after the relevant COMMITs have finished executing. The relevant COMMITs are the ones that were issued before the given action in the original workload capture and that had modified at least one of the database objects the given action is referencing (either implicitly or explicitly). This OBJECT_ID scheme has the same logical property of making sure that any action will see the same data it saw during capture, but will allow more concurrency during replays for the actions that do not touch the same objects/tables.For legacy reasons, there is a boolean version of this procedure:TRUE means 'OBJECT_ID'FALSE means 'OFF'</Parameter>
            <Parameter Name="CONNECT_TIME_SCALE">Scales the time elapsed between the instant the workload capture was started and the session connects with the given value. The input is interpreted as a % value. Can potentially be used to increase or decrease the number of concurrent users during the workload replay. DEFAULT VALUE is 100. See "Application of the connect_time_scale Parameter".</Parameter>
            <Parameter Name="THINK_TIME_SCALE">Scales the time elapsed between two successive user calls from the same session. The input is interpreted as a % value. Can potentially be used to increase or decrease the number of concurrent users during the workload replay. DEFAULT VALUE is 100. See "Application of the think_time_scale Parameter".</Parameter>
            <Parameter Name="THINK_TIME_AUTO_CORRECT">Auto corrects the think time between calls appropriately when a user call takes longer to complete during replay than during the original capture. DEFAULT is TRUE which is to reduce think time if replay goes slower than capture. See "Application of the think_time_auto_correct Parameter"</Parameter>
            <Parameter Name="SCALE_UP_MULTIPLIER">Defines the number of times the query workload is scaled up during replay. Each captured session is replayed concurrently as many times as the value of the scale_up_multiplier. However, only one of the sessions in each set of identical replay sessions executes both queries and updates. The remaining sessions only execute queries.</Parameter>
            <Parameter Name="CAPTURE_STS">If this parameter is TRUE, then a SQL tuning set capture is also started in parallel with workload replay. The resulting SQL tuning set can be exported using the EXPORT_AWR Procedure along with the AWR data. Currently, parallel SQL tuning set (STS) capture is not supported in an Oracle RAC environment. So, this parameter has no effect in that context. The calling user must have the appropriate privileges ('ADMINISTER SQL TUNING SET'). The default value is FALSE.</Parameter>
            <Parameter Name="STS_CAP_INTERVAL">Specifies the capture interval of the SQL set capture from the cursor cache in seconds. The default value is 300.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PREPARE_CONSOLIDATED_REPLAY" ElementId="#BGBEGDAB">
          <Description>Puts the database in a special "Prepare" mode for a multiple-capture replay</Description>
          <Parameters>
            <Parameter Name="SYNCHRONIZATION">Turns synchronization ON or OFF during workload replay. When synchronization is ON, the COMMIT order observed during the original workload capture is preserved during replay. Every action that is replayed is executed ONLY AFTER all of its dependent COMMITs (all COMMITs that were issued before the given action in the original workload capture) have finished execution. DEFAULT is TRUE which preserves commit order.When synchronization is OBJECT_ID, a more advanced synchronization scheme is used. Every action that is replayed is executed only after the relevant COMMITs have finished executing. The relevant COMMITs are the ones that were issued before the given action in the original workload capture and that had modified at least one of the database objects the given action is referencing (either implicitly or explicitly). This OBJECT_ID scheme has the same logical property of making sure that any action will see the same data it saw during capture, but will allow more concurrency during replays for the actions that do not touch the same objects/tables. DEFAULT VALUE: SCN, preserve commit order. For legacy reasons, there is a boolean version of this procedure:TRUE means 'SCN'FALSE means 'OFF'</Parameter>
            <Parameter Name="CONNECT_TIME_SCALE">Scales the time elapsed between the instant the workload capture was started and the session connects with the given value. The input is interpreted as a % value. Can potentially be used to increase or decrease the number of concurrent users during the workload replay. DEFAULT VALUE is 100. See "Application of the connect_time_scale Parameter".</Parameter>
            <Parameter Name="THINK_TIME_SCALE">Scales the time elapsed between two successive user calls from the same session. The input is interpreted as a % value. Can potentially be used to increase or decrease the number of concurrent users during the workload replay. DEFAULT VALUE is 100. See "Application of the think_time_auto_correct Parameter"</Parameter>
            <Parameter Name="THINK_TIME_AUTO_CORRECT">Auto corrects the think time between calls appropriately when user calls takes longer to complete during replay than during the original capture. DEFAULT is TRUE which is to reduce think time if replay goes slower than capture. See "Application of the think_time_auto_correct Parameter"</Parameter>
            <Parameter Name="CAPTURE_STS">If this parameter is TRUE, then a SQL tuning set capture is also started in parallel with workload replay. The resulting SQL tuning set can be exported using the EXPORT_AWR Procedure along with the Automatic Workload Repository (AWR) data. Currently, parallel SQL tuning set (STS) capture is not supported in an Oracle RAC environment. So, this parameter has no effect in that context. The calling user must have the appropriate privileges ('ADMINISTER SQL TUNING SET'). The default value is FALSE.</Parameter>
            <Parameter Name="STS_CAP_INTERVAL">Specifies the capture interval of the SQL set capture from the cursor cache in seconds. The default value is 300.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PROCESS_CAPTURE" ElementId="#CHDHJIIH">
          <Description>Processes the workload capture found in capture_dir in place</Description>
          <Parameters>
            <Parameter Name="CATPURE_DIR">(Mandatory) Name of the workload capture directory object (case sensitive). The directory object must point to a valid OS directory that has the appropriate permissions. New files are added to this directory.</Parameter>
            <Parameter Name="PARALLEL_LEVEL">Number of Oracle processes used to process the capture in parallel. The NULL default value will auto-compute the parallelism level, whereas a value of 1 will enforce serial execution.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMAP_CONNECTION" ElementId="#BGBHJAED">
          <Description>Remaps the captured connection to a new one so that the user sessions can connect to the database in a desired way during workload replay</Description>
          <Parameters>
            <Parameter Name="CAPTURE_NUMBER">Pointing to a capture of the current replay schedule</Parameter>
            <Parameter Name="CONNECTION_ID">ID of the connection to be remapped. Corresponds to DBA_WORKLOAD_CONNECTION_MAP.CONN_ID.</Parameter>
            <Parameter Name="REPLAY_CONNECTION">New connection string to be used during replay</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVE_CAPTURE" ElementId="#BGBDHBDI">
          <Description>Removes the given capture from the current schedule</Description>
          <Parameters>
            <Parameter Name="SCHEDULE_CAPTURE_NUMBER">Unique ID that identifies this capture within this schedule</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVE_SCHEDULE_ORDERING" ElementId="#BGBHAHJI">
          <Description>Removes an existing schedule order from the current replay schedule</Description>
          <Parameters>
            <Parameter Name="SCHEDULE_CAPTURE_ID">Points to a capture that has been added to the current replay schedule (see procedure description).</Parameter>
            <Parameter Name="WAITFOR_CAPTURE_ID">Points to a capture that has been added to the current replay schedule.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REPORT" ElementId="#CHDHJFDB">
          <Description>Generates a report on the given workload replay</Description>
          <Parameters>
            <Parameter Name="REPLAY_ID">(Mandatory) Specifies the ID of the workload replay whose report is requested.</Parameter>
            <Parameter Name="FORMAT">(Mandatory) Specifies the report format. Valid values:HTML - Generates the HTML version of the reportXML - Generates the XML version of the reportTEXT - Generates the text version of the report</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RESUME_REPLAY" ElementId="#CBADIDCD">
          <Description>Resumes a paused workload replay</Description>
        </SubProgram>
        <SubProgram Name="REUSE_REPLAY_FILTER_SET" ElementId="#BGBEEBAE">
          <Description>Reuses filters in the specified filter set as if each were added using the ADD_SCHEDULE_ORDERING Function</Description>
          <Parameters>
            <Parameter Name="REPLAY_DIR">Capture ID of the existing filter set with which it is associated</Parameter>
            <Parameter Name="FILTER_SET">Name of the filter set to be reused</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_ADVANCED_PARAMETER" ElementId="#BGBHIACF">
          <Description>Sets an advanced parameter for replay besides the ones used with the PREPARE_REPLAY Procedure</Description>
          <Parameters>
            <Parameter Name="PNAME">Name of the parameter (case insensitive)</Parameter>
            <Parameter Name="PVALUE">Value of the parameter</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_REPLAY_DIRECTORY" ElementId="#CBABDBAG">
          <Description>Sets a directory that contains multiple workload captures as the current replay directory</Description>
          <Parameters>
            <Parameter Name="REPLAY_DIR">Name of the OS directory containing the captures for a workload consolidation</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_REPLAY_TIMEOUT" ElementId="#BGBGGIIC">
          <Description>Sets the replay timeout setting</Description>
          <Parameters>
            <Parameter Name="ENABLED">TRUE to enable the timeout action, and FALSE to disable.</Parameter>
            <Parameter Name="MIN_DELAY">Lower bound of call delay in minutes. The replay action is activated only when the delay is equal to or more than min_delay. Default = 10.</Parameter>
            <Parameter Name="MAX_DELAY">Upper bound of call delay in minutes. The timeout action throws ORA-15569 when the delay is more than max_delay. Default = 120.</Parameter>
            <Parameter Name="DELAY_FACTOR">Factor for the call delay that is between min_delay and max_delay. The timeout action throws ORA-15569 when the current replay elapsed time is more than the product of capture elapsed time and delay_factor. Default = 8.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_USER_MAPPING" ElementId="#BGBGFDFI">
          <Description>Sets a new schema or user name to be used during replay instead of the captured user</Description>
          <Parameters>
            <Parameter Name="SCHEDULE_CAP_ID">ID of the a capture in the schedule</Parameter>
            <Parameter Name="CAPTURE_USER">User name during the time of the workload capture</Parameter>
            <Parameter Name="REPLAY_USER">User name to which captured user is remapped during replay.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="START_CONSOLIDATED_REPLAY" ElementId="#BGBFJGIH">
          <Description>Starts the replay of a multiple-capture capture</Description>
        </SubProgram>
        <SubProgram Name="START_REPLAY" ElementId="#CHDDEHHI">
          <Description>Starts the workload replay</Description>
        </SubProgram>
        <SubProgram Name="USE_FILTER_SET" ElementId="#BGBCECGI">
          <Description>Uses the given filter set that has been created by calling the CREATE_FILTER_SET Procedure to filter the current replay</Description>
          <Parameters>
            <Parameter Name="CAPTURE_NUMBER">Pointing to a capture of the current replay schedule</Parameter>
            <Parameter Name="FILTER_SET">Name of the filter set</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_WORKLOAD_REPOSITORY" Url="http://docs.oracle.com/database/121/ARPLS/d_workload_repos.htm">
      <Description>The DBMS_WORKLOAD_REPOSITORY package lets you manage the Workload Repository, performing operations such as managing snapshots and baselines.</Description>
      <SubPrograms>
        <SubProgram Name="ADD_COLORED_SQL" ElementId="#CHDGFJAD">
          <Description>Adds a colored SQL ID</Description>
          <Parameters>
            <Parameter Name="SQL_ID">13-character external SQL ID</Parameter>
            <Parameter Name="DBID">Optional DBID, defaults to Local DBID</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ASH_GLOBAL_REPORT_HTML" ElementId="#CIHDBCGJ">
          <Description>Displays a global or Oracle Real Application Clusters (Oracle RAC) ASH Spot report in HTML format.</Description>
        </SubProgram>
        <SubProgram Name="ASH_GLOBAL_REPORT_TEXT" ElementId="#CHDEFFAD">
          <Description>Displays a global or Oracle Real Application Clusters (Oracle RAC) ASH Spot report in Text format.</Description>
        </SubProgram>
        <SubProgram Name="ASH_REPORT_HTML" ElementId="#CHDIEGBD">
          <Description>Displays the ASH report in HTML</Description>
        </SubProgram>
        <SubProgram Name="ASH_REPORT_TEXT" ElementId="#CIHBAFCB">
          <Description>Displays the ASH report in text</Description>
        </SubProgram>
        <SubProgram Name="AWR_DIFF_REPORT_HTML" ElementId="#CIHGFGBG">
          <Description>Displays the AWR Diff-Diff report in HTML</Description>
        </SubProgram>
        <SubProgram Name="AWR_DIFF_REPORT_TEXT" ElementId="#CIHHBHCJ">
          <Description>Displays the AWR Diff-Diff report in text</Description>
        </SubProgram>
        <SubProgram Name="AWR_GLOBAL_DIFF_REPORT_HTML" ElementId="#CHDIEIEA">
          <Description>Displays the Global AWR Compare Periods Report in HTML</Description>
          <Parameters>
            <Parameter Name="DBID">1st database identifier</Parameter>
            <Parameter Name="INST_NUM">1st list of instance numbers. If set to NULL, all instances for which begin and end snapshots are available, and which have not been restarted between snapshots, will be included in the report.</Parameter>
            <Parameter Name="EID">1st End Snapshot ID</Parameter>
            <Parameter Name="DBID">2nd database identifier</Parameter>
            <Parameter Name="INST_NUM">2nd list of instance numbers to be included in report. If set to NULL, all instances for which begin and end snapshots are available, and which have not been restarted between snapshots, will be included in the report.</Parameter>
            <Parameter Name="EID">2nd End Snapshot ID</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="AWR_GLOBAL_DIFF_REPORT_TEXT" ElementId="#CHDJAJGE">
          <Description>Displays the Global AWR Compare Periods Report in text</Description>
        </SubProgram>
        <SubProgram Name="AWR_GLOBAL_REPORT_HTML" ElementId="#CHDGGHBG">
          <Description>Displays the Global AWR report in HTML</Description>
          <Parameters>
            <Parameter Name="L_DBID">Database identifier</Parameter>
            <Parameter Name="L_INST_NUM">List of instance numbers to be included in report. If set to NULL, all instances for which begin and end snapshots are available, and which have not been restarted between snapshots, will be included in the report.</Parameter>
            <Parameter Name="L_BID">Begin Snap ID</Parameter>
            <Parameter Name="L_EID">End Snapshot ID</Parameter>
            <Parameter Name="L_OPTIONS">Report level (currently not used)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="AWR_GLOBAL_REPORT_TEXT" ElementId="#CHDGEAEG">
          <Description>Displays the Global AWR report in text</Description>
          <Parameters>
            <Parameter Name="L_DBID">Database identifier</Parameter>
            <Parameter Name="L_INST_NUM">List of instance numbers to be included in report. If set to NULL, all instances for which begin and end snapshots are available, and which have not been restarted between snapshots, will be included in the report.</Parameter>
            <Parameter Name="L_BID">Begin Snap ID</Parameter>
            <Parameter Name="L_EID">End Snapshot ID</Parameter>
            <Parameter Name="L_OPTIONS">A flag to specify to control the output of the report. Currently, not used.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="AWR_REPORT_HTML" ElementId="#i1004015">
          <Description>Displays the AWR report in HTML</Description>
        </SubProgram>
        <SubProgram Name="AWR_REPORT_TEXT" ElementId="#i1004016">
          <Description>Displays the AWR report in text</Description>
        </SubProgram>
        <SubProgram Name="AWR_SET_REPORT_THRESHOLDS" ElementId="#CHDIDBCC">
          <Description>Configures specified report thresholds, including the number of rows in the report</Description>
          <Parameters>
            <Parameter Name="TOP_N_EVENTS">Number of most significant wait events to be included</Parameter>
            <Parameter Name="TOP_N_FILES">Number of most active files to be included</Parameter>
            <Parameter Name="TOP_N_SEGMENTS">Number of most active segments to be included</Parameter>
            <Parameter Name="TOP_N_SERVICES">Number of most active services to be included</Parameter>
            <Parameter Name="TOP_N_SQL">Number of most significant SQL statements to be included</Parameter>
            <Parameter Name="TOP_N_SQL_MAX">Number of SQL statements to be included if their activity is greater than that specified by top_sql_pct</Parameter>
            <Parameter Name="TOP_SQL_PCT">Significance threshold for SQL statements between top_n_sql and top_n_sql_max</Parameter>
            <Parameter Name="SHMEM_THRESHOLD">Shared memory low threshold</Parameter>
            <Parameter Name="VERSIONS_THRESHOLD">Plan version count low threshold</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="AWR_SQL_REPORT_HTML" ElementId="#CIHHJCEI">
          <Description>Displays the AWR SQL Report in HTML format</Description>
        </SubProgram>
        <SubProgram Name="AWR_SQL_REPORT_TEXT" ElementId="#CIHBACEJ">
          <Description>Displays the AWR SQL Report in text format</Description>
        </SubProgram>
        <SubProgram Name="CREATE_BASELINE" ElementId="#i1003628">
          <Description>Creates a single baseline</Description>
        </SubProgram>
        <SubProgram Name="CREATE_BASELINE_TEMPLATE" ElementId="#BABFHHJJ">
          <Description>Creates a baseline template</Description>
          <Parameters>
            <Parameter Name="START_TIME">Start Time for the baseline to be created'</Parameter>
            <Parameter Name="END_TIME">End Time for the baseline to be created</Parameter>
            <Parameter Name="BASELINE_NAME">Name of baseline to be created</Parameter>
            <Parameter Name="TEMPLATE_NAME">Name for the template</Parameter>
            <Parameter Name="EXPIRATION">Expiration in number of days for the baseline. If NULL, then expiration is infinite, meaning do not drop baseline ever. Defaults to NULL</Parameter>
            <Parameter Name="DBID">Database Identifier for baseline. If NULL, this takes the database identifier for the local database. Defaults to NULL.</Parameter>
            <Parameter Name="DAY_OF_WEEK">Day of week that the baseline should repeat on. Specify one of the following values: SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY.</Parameter>
            <Parameter Name="HOUR_IN_DAY">Value of 0-23 to specify the Hour in the Day the baseline should start</Parameter>
            <Parameter Name="DURATION">Duration (in number of hours) after hour in the day that the baseline should last</Parameter>
            <Parameter Name="BASELINE_NAME_PREFIX">Name for baseline prefix. When creating the baseline, the name of the baseline will be the prefix appended with the date information.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_SNAPSHOT" ElementId="#BACHIHFC">
          <Description>Creates a manual snapshot immediately</Description>
        </SubProgram>
        <SubProgram Name="DROP_BASELINE" ElementId="#i1003190">
          <Description>Drops a previously-defined baseline</Description>
        </SubProgram>
        <SubProgram Name="DROP_BASELINE_TEMPLATE" ElementId="#BABBIJBE">
          <Description>Removes a baseline template that is no longer needed</Description>
          <Parameters>
            <Parameter Name="TEMPLATE_NAME">Name of the template to remove</Parameter>
            <Parameter Name="DBID">Database Identifier for baseline. If NULL, this takes the database identifier for the local database. Defaults to NULL.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_SNAPSHOT_RANGE" ElementId="#BACCDGDB">
          <Description>Drops a range of snapshots</Description>
          <Parameters>
            <Parameter Name="LOW_SNAP_ID">Low snapshot id of snapshots to drop.</Parameter>
            <Parameter Name="HIGH_SNAP_ID">High snapshot id of snapshots to drop.</Parameter>
            <Parameter Name="DBID">Database id (default to local DBID.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MODIFY_SNAPSHOT_SETTINGS" ElementId="#BACEHJJI">
          <Description>Modifies the snapshot settings</Description>
          <Parameters>
            <Parameter Name="RETENTION">New retention time (in minutes). The specified value must be in the range of MIN_RETENTION (1 day) to MAX_RETENTION (100 years).If ZERO is specified, snapshots will be retained forever. A large system-defined value will be used as the retention setting.If NULL is specified, the old value for retention is preserved.NOTE: The retention setting must be greater than or equal to the window size of the 'SYSTEM_MOVING_WINDOW' baseline. If the retention needs to be less than the window size, the MODIFY_BASELINE_WINDOW_SIZE Procedure can be used to adjust the window size.</Parameter>
            <Parameter Name="INTERVAL">New interval setting between each snapshot, in units of minutes. The specified value must be in the range MIN_INTERVAL (10 minutes) to MAX_INTERVAL (1 year).If ZERO is specified, automatic and manual snapshots will be disabled. A large system-defined value will be used as the retention setting.If NULL is specified, the current value is preserved.</Parameter>
            <Parameter Name="TOPNSQL">If NUMBER: Top N SQL size. The number of Top SQL to flush for each SQL criteria (Elapsed Time, CPU Time, Parse Calls, Shareable Memory, Version Count). The value for this setting will not be affected by the statistics/flush level and will override the system default behavior for the AWR SQL collection. The setting will have a minimum value of 30 and a maximum value of 50,000. Specifying NULL will keep the current setting.If VARCHAR2: Users are allowed to specify the following values: (DEFAULT, MAXIMUM, N), where N is the number of Top SQL to flush for each SQL criteria. Specifying DEFAULT will revert the system back to the default behavior of Top 30 for statistics level TYPICAL and Top 100 for statistics level ALL. Specifying MAXIMUM will cause the system to capture the complete set of SQL in the cursor cache. Specifying the number N is equivalent to setting the Top N SQL with the NUMBER type. Specifying NULL for this argument will keep the current setting.</Parameter>
            <Parameter Name="DBID">Database identifier in AWR for which to modify the snapshot settings. If NULL is specified, the local dbid will be used. Defaults to NULL.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MODIFY_BASELINE_WINDOW_SIZE" ElementId="#BABBIEDG">
          <Description>Modifies the window size for the Default Moving Window Baseline</Description>
          <Parameters>
            <Parameter Name="WINDOW_SIZE">New Window size for the default Moving Window Baseline, in number of days.</Parameter>
            <Parameter Name="DBID">Database ID (default to local DBID)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PURGE_SQL_DETAILS" ElementId="#CHDHJICI">
          <Description>Purges SQL details, specifically rows from WRH$_SQLTEXT and WRH$_SQL_PLAN that do not have corresponding rows (DBID, SQL_ID) in WRH$_SQLSTAT.</Description>
          <Parameters>
            <Parameter Name="NUMROWS">Number of rows</Parameter>
            <Parameter Name="DBID">Database ID (default to local DBID)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVE_COLORED_SQL" ElementId="#CHDJGBFI">
          <Description>Removes a colored SQL ID</Description>
          <Parameters>
            <Parameter Name="SQL_ID">13-character external SQL ID</Parameter>
            <Parameter Name="DBID">Optional dbid, defaults to Local DBID</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RENAME_BASELINE" ElementId="#BABIJFJE">
          <Description>Renames a baseline</Description>
          <Parameters>
            <Parameter Name="OLD_BASELINE_NAME">Old baseline name</Parameter>
            <Parameter Name="NEW_BASELINE_NAME">New baseline name</Parameter>
            <Parameter Name="DBID">Database ID (default to local DBID)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SELECT_BASELINE_METRIC" ElementId="#BABDIFIA">
          <Description>Shows the values of the metrics corresponding to a baseline</Description>
          <Parameters>
            <Parameter Name="BASELINE_NAME">Name of the baseline for which we would like to view metrics</Parameter>
            <Parameter Name="DBID">Database Identifier for baseline. If NULL, then use the database identifier for the local database. Defaults to NULL.</Parameter>
            <Parameter Name="INSTANCE_NUM">Instance for which number the user wants to see statistics. If NULL, show statistics for the local instance. Defaults to NULL.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UPDATE_OBJECT_INFO" ElementId="#CHDEHHAB">
          <Description>Updates rows of WRH$_SEG_STAT_OBJ table that represent objects in the local database</Description>
          <Parameters>
            <Parameter Name="MAXROWS">Maximum number of rows to be updated. Default= 0, meaning there is no limit.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_XA" Url="http://docs.oracle.com/database/121/ARPLS/d_xa.htm">
      <Description>The DBMS_XA package contains the XA/Open interface for applications to call XA interface in PL/SQL. Using this package, application developers can switch or share transactions across SQL*Plus sessions or processes using PL/SQL.</Description>
    </Package>
    <Package Name="DBMS_XDB" Url="http://docs.oracle.com/database/121/ARPLS/d_xdb.htm">
      <Description>Note:
The DBMS_XDB package subprograms and constants are deprecated with Oracle Database 12c. While all features continue to be supported for backward compatibility, Oracle recommends that you use the alternative procedures provided in each case. For more information, see Deprecated Subprograms and Constants.</Description>
      <SubPrograms>
        <SubProgram Name="ACLCHECKPRIVILEGES" ElementId="#i1007419">
          <Description>Checks access privileges granted to the current user by specified ACL document on a resource whose owner is specified by the 'owner' parameter.</Description>
          <Parameters>
            <Parameter Name="ACL_PATH">Absolute path in the Hierarchy for ACL document</Parameter>
            <Parameter Name="OWNER">Resource owner name; the pseudo user "DAV:owner" is replaced by this user during ACL privilege resolution</Parameter>
            <Parameter Name="PRIVS">An XMLType instance of the privilege element specifying the requested set of access privileges. See description for CHECKPRIVILEGES Function.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADDHTTPEXPIREMAPPING" ElementId="#BDCICHHJ">
          <Description>Adds to xdb$config a mapping of the URL pattern to an expiration date. This will control the Expire headers for URLs matching the pattern.</Description>
          <Parameters>
            <Parameter Name="PATTERN">URL pattern (only * accepted as wildcards)</Parameter>
            <Parameter Name="EXPIRE">Expiration directive, follows the ExpireDefault in Apache's mod_expires:</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADDMIMEMAPPING" ElementId="#CHDFBAIF">
          <Description>Adds a mime mapping to the XDB configuration</Description>
          <Parameters>
            <Parameter Name="EXTENSION">Extension for which a mime type is being added</Parameter>
            <Parameter Name="MIMETYPE">Mime type</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADDSCHEMALOCMAPPING" ElementId="#CHDBEGDG">
          <Description>Adds a schema location mapping to the XDB configuration</Description>
          <Parameters>
            <Parameter Name="NAMESPACE">Namespace</Parameter>
            <Parameter Name="ELEMENT">Element</Parameter>
            <Parameter Name="SCHEMAURL">Schema URL</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADDSERVLET" ElementId="#CHDBICDG">
          <Description>Adds a servlet to XDB configuration</Description>
          <Parameters>
            <Parameter Name="NAME">Servlet name</Parameter>
            <Parameter Name="LANGUAGE">Must be one of "C", "Java", "PL/SQL"</Parameter>
            <Parameter Name="DISPNAME">Display name</Parameter>
            <Parameter Name="ICON">Icon</Parameter>
            <Parameter Name="DESCRIPT">Description</Parameter>
            <Parameter Name="CLASS">The class / jspfile / plsql function corresponding to this servlet. The first non-NULL argument amongst these three is chosen, and the others are treated as NULL.</Parameter>
            <Parameter Name="JSPFILE">The class / jspfile / plsql function corresponding to this servlet. The first non-NULL argument amongst these three is chosen, and the others are treated as NULL.</Parameter>
            <Parameter Name="PLSQL">The class / jspfile / plsql function corresponding to this servlet. The first non-NULL argument amongst these three is chosen, and the others are treated as NULL.</Parameter>
            <Parameter Name="SCHEMA">Schema</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADDSERVLETMAPPING" ElementId="#CHDCGCHA">
          <Description>Adds a servlet mapping to XDB configuration</Description>
          <Parameters>
            <Parameter Name="PATTERN">Sservlet pattern</Parameter>
            <Parameter Name="NAME">Servlet name</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADDSERVLETSECROLE" ElementId="#CHDJJGBA">
          <Description>Adds a security role REF to a specified servlet in the XDB configuration</Description>
          <Parameters>
            <Parameter Name="SERVNAME">Sservlet name</Parameter>
            <Parameter Name="ROLENAME">Role name</Parameter>
            <Parameter Name="ROLELINK">Role link</Parameter>
            <Parameter Name="DESCRIPT">Description</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADDXMLEXTENSION" ElementId="#CHDEIEFA">
          <Description>Adds adds an XML extension to the XDB configuration</Description>
          <Parameters>
            <Parameter Name="EXTENSION">XML extension to be added</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="APPENDRESOURCEMETADATA" ElementId="#BGBEICDF">
          <Description>Takes in user-defined metadata either as a REF to XMLTYPE or an XMLTYPE and adds it to the desired resource</Description>
        </SubProgram>
        <SubProgram Name="CFG_GET" ElementId="#i1011724">
          <Description>Retrieves the session's configuration information</Description>
        </SubProgram>
        <SubProgram Name="CFG_REFRESH" ElementId="#i1013251">
          <Description>Refreshes the session's configuration information to the latest configuration</Description>
        </SubProgram>
        <SubProgram Name="CFG_UPDATE" ElementId="#i1007513">
          <Description>Updates the configuration information</Description>
          <Parameters>
            <Parameter Name="XDBCONFIG">The new configuration data</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CHANGEOWNER" ElementId="#CHDDJHJG">
          <Description>Changes the owner of the resource/s to the specified owner.</Description>
          <Parameters>
            <Parameter Name="ABSPATH">Absolute path of the resource</Parameter>
            <Parameter Name="OWNER">New owner for the resource</Parameter>
            <Parameter Name="RECURSE">If TRUE, recursively change owner of all resources in the folder tree</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CHANGEPRIVILEGES" ElementId="#i1009624">
          <Description>Adds a specified ACE to a specified resource's ACL</Description>
          <Parameters>
            <Parameter Name="RES_PATH">Path name of the resource for which privileges need to be changed</Parameter>
            <Parameter Name="ACE">An XMLType instance of the &lt;ace&gt; element which specifies the &lt;principal&gt;, the operation &lt;grant&gt; and the list of privileges</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CHECKPRIVILEGES" ElementId="#i1007635">
          <Description>Checks access privileges granted to the current user on the specified resource</Description>
          <Parameters>
            <Parameter Name="RES_PATH">Absolute path in the Hierarchy for resource</Parameter>
            <Parameter Name="PRIVS">An XMLType instance of the privilege element specifying the requested set of access privileges</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATEFOLDER" ElementId="#i1007707">
          <Description>Creates a new folder resource in the hierarchy</Description>
          <Parameters>
            <Parameter Name="PATH">Path name for the new folder</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATEOIDPATH" ElementId="#i1013935">
          <Description>Creates a virtual path to the resource based on object ID</Description>
          <Parameters>
            <Parameter Name="OID">Object ID of the resource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATERESOURCE" ElementId="#i1010030">
          <Description>Creates a new resource</Description>
          <Parameters>
            <Parameter Name="ABSPATH">Absolute path of the resource to create. The path name's parent folder must already exist in the hierarchy. In other words, if /foo/bar.txt is passed in, then folder /foo must already exist.</Parameter>
            <Parameter Name="DATA">String buffer containing new resource's contents. The data is parsed to check if it contains a schema-based XML document, and the contents are stored as schema-based in the schema's default table. Otherwise, it is saved as binary data.</Parameter>
            <Parameter Name="DATAROW">REF to an XMLType row to be used as the contents</Parameter>
            <Parameter Name="CSID">Character set id of the document. Must be a valid Oracle ID; otherwise returns an error.If CSID is not specified, or if a zero CSID is specified, then the character set id of the document is determined as follows:From the abspath extension, determine the resource's MIME type.If the MIME type is */xml, then the encoding is detected based on Appendix F of the W3C XML 1.0 Reference at http://www.w3.org/TR/2000/REC-xml-20001006;Otherwise, it is defaulted to the database character set.</Parameter>
            <Parameter Name="CREATEFOLDERS">If TRUE, create the parent folders if they do not exist</Parameter>
            <Parameter Name="SCHEMAURL">For XML data, schema URL data conforms to (default NULL)</Parameter>
            <Parameter Name="ELEM">Element name (default NULL)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETEHTTPEXPIREMAPPING" ElementId="#CHDHHCEI">
          <Description>Deletes from xdb$config all mappings of the URL pattern to an expiration date</Description>
          <Parameters>
            <Parameter Name="PATTERN">URL pattern (only * accepted as wildcards)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETEMIMEMAPPING" ElementId="#BDCIHHGA">
          <Description>Deletes the mime mapping from the XDB configuration</Description>
          <Parameters>
            <Parameter Name="EXTENSION">Extension for which a mime type is to be deleted</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETERESOURCE" ElementId="#i1007804">
          <Description>Deletes a resource from the hierarchy</Description>
          <Parameters>
            <Parameter Name="PATH">Path name of the resource to delete</Parameter>
            <Parameter Name="DELETE_OPTION">The option that controls how a a resource is deleted; defined in Table 181-2:DELETE_RESOURCEDELETE_RECURSIVEDELETE_FORCEDELETE_RECURSIVE_FORCE</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETERESOURCEMETADATA" ElementId="#BDCFECCC">
          <Description>Deletes metadata from a resource (can be used for schema-based or nonschema-based metadata)</Description>
          <Parameters>
            <Parameter Name="ABSPATH">Absolute path of the resource</Parameter>
            <Parameter Name="METADATA">REF to the piece of metadata (schema based) to be deleted</Parameter>
            <Parameter Name="METTADATANS">Namespace of the metadata fragment to be removed</Parameter>
            <Parameter Name="METTADATANAME">Local name of the metadata fragment to be removed</Parameter>
            <Parameter Name="DELETE_OPTION">Only applicable for schema-based metadata, this can be one of the following:DELETE_RES_METADATA_CASCADE - deletes the corresponding row in the metadata tableDELETE_RES_METADATA_NOCASCADE - does not delete the row in the metadata table</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETESCHEMALOCMAPPING" ElementId="#CHDDIHFH">
          <Description>Deletes the schema location mapping for the specified schema URL from the XDB configuration.</Description>
          <Parameters>
            <Parameter Name="SCHEMAURL">Schema URL</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETESERVLET" ElementId="#CHDCGHFE">
          <Description>Deletes a servlet from XDB configuration</Description>
          <Parameters>
            <Parameter Name="NAME">Servlet name</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETESERVLETMAPPING" ElementId="#CHDGDBDI">
          <Description>Deletes the servlet mapping for the specified servlet name from the XDB configuration</Description>
          <Parameters>
            <Parameter Name="NAME">Servlet name</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETESERVLETSECROLE" ElementId="#CHDEBDGB">
          <Description>Deletes the specified role from a servlet in the XDB configuration</Description>
          <Parameters>
            <Parameter Name="SERVNAME">Servlet name</Parameter>
            <Parameter Name="ROLENAME">Name of the role to be deleted</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETEXMLEXTENSION" ElementId="#CHDCJDBG">
          <Description>Deletes the specified XML extension from the XDB configuration</Description>
          <Parameters>
            <Parameter Name="EXTENSION">XML extension to be deleted</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ENABLEDIGESTAUTHENTICATION" ElementId="#BGBGAIJE">
          <Description>Enables digest authentication</Description>
        </SubProgram>
        <SubProgram Name="EXISTSRESOURCE" ElementId="#i1009928">
          <Description>Determines if a resource is the hierarchy, based on its absolute path</Description>
          <Parameters>
            <Parameter Name="ABSPATH">Path name of the resource whose ACL document is required</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETACLDOCUMENT" ElementId="#BABJIABG">
          <Description>Retrieves ACL document that protects resource given its path name</Description>
          <Parameters>
            <Parameter Name="ABSPATH">Path name of the resource whose ACL document is required</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETCONTENTBLOB" ElementId="#CHDFGGHA">
          <Description>Retrieves the contents of a resource returned as a BLOB</Description>
          <Parameters>
            <Parameter Name="ABSPATH">Absolute path of the resource</Parameter>
            <Parameter Name="CSID">If TRUE, lock and return the source LOB. If FALSE, return a temp LOB copy.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETCONTENTCLOB" ElementId="#CHDBIJFJ">
          <Description>Retrieves the contents of a resource returned as a CLOB</Description>
          <Parameters>
            <Parameter Name="ABSPATH">Absolute path of the resource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETCONTENTVARCHAR2" ElementId="#CHDEDBAF">
          <Description>Retrieves the contents of a resource returned as a string</Description>
          <Parameters>
            <Parameter Name="ABSPATH">Absolute path of the resource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETCONTENTXMLREF" ElementId="#CHDGIEBE">
          <Description>Retrieves the contents of a resource returned as a a REF to an XMLTYPE</Description>
          <Parameters>
            <Parameter Name="ABSPATH">Absolute path of the resource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETCONTENTXMLTYPE" ElementId="#CHDCDDBA">
          <Description>Retrieves the contents of a resource returned as an XMLTYPE</Description>
          <Parameters>
            <Parameter Name="ABSPATH">Absolute path of the resource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETFTPPORT" ElementId="#BDCFFJHG">
          <Description>Gets the value of the current FTP port</Description>
        </SubProgram>
        <SubProgram Name="GETHTTPPORT" ElementId="#BDCJBJBA">
          <Description>Gets the value of the current HTTP port</Description>
        </SubProgram>
        <SubProgram Name="GETHTTPREQUESTHEADER" ElementId="#BGBIGGCD">
          <Description>Gets the values of the passed header</Description>
          <Parameters>
            <Parameter Name="HEADER_NAME">Passed header</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETLISTENERENDPOINT" ElementId="#BGBGCCGG">
          <Description>Retrieves the parameters of a listener end point corresponding to the XML DB HTTP server</Description>
          <Parameters>
            <Parameter Name="ENDPOINT">End point to be retrieved. Its value can be XDB_ENDPOINT_HTTP or XDB_ENDPOINT_HTTP2.</Parameter>
            <Parameter Name="HOST">Interface on which the listener end point listens</Parameter>
            <Parameter Name="PORT">Port on which the listener end point listens</Parameter>
            <Parameter Name="PROTOCOL">Transport protocol accepted by the listener end point</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETLOCKTOKEN" ElementId="#i1010361">
          <Description>Returns that resource's lock token for the current user given a path to a resource</Description>
          <Parameters>
            <Parameter Name="PATH">Path name to the resource</Parameter>
            <Parameter Name="LOCKTOKEN">Logged-in user's lock token for the resource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETPRIVILEGES" ElementId="#BGBJCEGI">
          <Description>Gets all privileges granted to the current user on a specified resource</Description>
          <Parameters>
            <Parameter Name="RES_PATH">Absolute path in the hierarchy of the resource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETRESOID" ElementId="#i1009913">
          <Description>Returns the object ID of the resource from its absolute path</Description>
          <Parameters>
            <Parameter Name="ABSPATH_PATH">Absolute path of the resource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETXDB_TABLESPACE" ElementId="#i1009852">
          <Description>Returns the current tablespace of the XDB (user)</Description>
        </SubProgram>
        <SubProgram Name="HASBLOBCONTENT" ElementId="#CHDHJIHI">
          <Description>Returns TRUE if the resource has BLOB content</Description>
          <Parameters>
            <Parameter Name="ABSPATH_PATH">Absolute path of the resource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="HASCHARCONTENT" ElementId="#CHDGBFCI">
          <Description>Returns TRUE if the resource has character content</Description>
          <Parameters>
            <Parameter Name="ABSPATH_PATH">Absolute path of the resource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="HASXMLCONTENT" ElementId="#CHDGCDIH">
          <Description>Returns TRUE if the resource has XML content</Description>
          <Parameters>
            <Parameter Name="ABSPATH_PATH">Absolute path of the resource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="HASXMLREFERENCE" ElementId="#CHDJEDJG">
          <Description>Returns TRUE if the resource has REF to XML content</Description>
          <Parameters>
            <Parameter Name="ABSPATH_PATH">Absolute path of the resource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ISFOLDER" ElementId="#CHDDDEGD">
          <Description>Returns TRUE if the resource is a folder or container</Description>
        </SubProgram>
        <SubProgram Name="LINK" ElementId="#i1009588">
          <Description>Creates a link to an existing resource</Description>
          <Parameters>
            <Parameter Name="SRCPATH">Path name of the resource to which a link is created</Parameter>
            <Parameter Name="LINKFOLDER">Folder in which the new link is placed</Parameter>
            <Parameter Name="LINKNAME">Name of the new link</Parameter>
            <Parameter Name="LINKTYPE">Type of link to be created:DBMS_XDB.LINK_TYPE_HARD (default)DBMS_XDB.LINK_TYPE_WEAKDBMS_XDB.LINK_TYPE_SYMBOLIC</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LOCKRESOURCE" ElementId="#i1004427">
          <Description>Gets a WebDAV-style lock on that resource given a path to that resource</Description>
          <Parameters>
            <Parameter Name="PATH">Path name of the resource to lock.</Parameter>
            <Parameter Name="DEPTHZERO">Currently not supported</Parameter>
            <Parameter Name="SHARED">Passing TRUE obtains a shared write lock</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PROCESSLINKS" ElementId="#BDCGJGGF">
          <Description>Processes document links in the specified resource</Description>
          <Parameters>
            <Parameter Name="ABSPATH">Absolute path of the resource. If the path is a folder, use the recurse flag.</Parameter>
            <Parameter Name="RECURSE">Used only if abspath specifies a folder. If TRUE, process links of all resources in the folder hierarchy rooted at the specified resource. If FALSE, process links of all documents in this folder only.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PURGERESOURCEMETADATA" ElementId="#BGBHDJFC">
          <Description>Deletes all user metadata from a resource</Description>
          <Parameters>
            <Parameter Name="ABSPATH">Absolute path of the resource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RENAMERESOURCE" ElementId="#i1010294">
          <Description>Renames the XDB resource</Description>
          <Parameters>
            <Parameter Name="SRCPATH">Absolute path in the Hierarchy for the source resource destination folder</Parameter>
            <Parameter Name="DESTFOLDER">Absolute path in the Hierarchy for the destination folder</Parameter>
            <Parameter Name="NEWNAME">Name of the child in the destination folder</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETACL" ElementId="#i1010297">
          <Description>Sets the ACL on a specified resource</Description>
          <Parameters>
            <Parameter Name="RES_PATH">Absolute path in the Hierarchy for resource</Parameter>
            <Parameter Name="ACL_PATH">Absolute path in the Hierarchy for ACL</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETFTPPORT" ElementId="#BDCFGCJE">
          <Description>Sets the FTP port to a new value</Description>
          <Parameters>
            <Parameter Name="NEW_PORT">Value to which the FTP port is set</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETHTTPPORT" ElementId="#CHDJBAEF">
          <Description>Sets the HTTP port to a new value</Description>
          <Parameters>
            <Parameter Name="NEW_PORT">Value to which the HTTP port is set</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETLISTENERENDPOINT" ElementId="#BGBICAII">
          <Description>Sets the parameters of a listener end point corresponding to the XML DB HTTP server</Description>
          <Parameters>
            <Parameter Name="ENDPOINT">End point to be set. Its value can be XDB_ENDPOINT_HTTP or XDB_ENDPOINT_HTTP2.</Parameter>
            <Parameter Name="HOST">Interface on which the listener end point is to listen. Its value can be 'LOCALHOST,' NULL, or a hostname. If its value is 'LOCALHOST' the listener end point is permitted to only listen on the localhost interface. If its value is NULL or hostname, the listener end point is permitted to listen on both localhost and non-localhost interfaces.</Parameter>
            <Parameter Name="PORT">Port on which the listener end point is to listen</Parameter>
            <Parameter Name="PROTOCOL">Transport protocol that the listener end point is to accept. Its value can be XDB_PROTOCOL_TCP or XDB_PROTOCOL_TCPS</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETLISTENERLOCALACCESS" ElementId="#BGBIHIFI">
          <Description>Restricts all listener end points of the XML DB HTTP server to listen either only on the localhost interface or on both localhost and non-localhost interfaces</Description>
          <Parameters>
            <Parameter Name="L_ACCESS">TRUE or FALSE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SPLITPATH" ElementId="#BDCFDFBE">
          <Description>Splits the path into a parentpath and childpath</Description>
          <Parameters>
            <Parameter Name="ABSPATH">Absolute path to be split</Parameter>
            <Parameter Name="PARENTPATH">Parentpath</Parameter>
            <Parameter Name="CHILDPATH">Childpath</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="TOUCHRESOURCE" ElementId="#CHDHHCIF">
          <Description>Changes the modification time of the resource to the current time</Description>
        </SubProgram>
        <SubProgram Name="UNLOCKRESOURCE" ElementId="#i1004491">
          <Description>Unlocks the resource given a lock token and resource path</Description>
          <Parameters>
            <Parameter Name="PATH">Path name to the resource</Parameter>
            <Parameter Name="DELTOKEN">Lock token to be removed</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UPDATERESOURCEMETADATA" ElementId="#BDCEDDJH">
          <Description>Updates metadata for a resource</Description>
          <Parameters>
            <Parameter Name="ABSPATH">Absolute path of the resource</Parameter>
            <Parameter Name="OLDMETADATA">REF to the old of metadata</Parameter>
            <Parameter Name="NEWMETADATA">REF to the new, replacement metadata (can be either schema-based or nonschema-based depending on the overload)</Parameter>
            <Parameter Name="OLDNS">Namespace identifying old metadata</Parameter>
            <Parameter Name="OLDNAME">Local name identifying old metadata</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_XDB_ADMIN" Url="http://docs.oracle.com/database/121/ARPLS/d_xdb_admin.htm">
      <Description>The DBMS_XDB_ADMIN package provides an interface to manage the Oracle XML DB repository.</Description>
    </Package>
    <Package Name="DBMS_XDB_CONFIG" Url="http://docs.oracle.com/database/121/ARPLS/d_xdb_config.htm">
      <Description>The DBMS_XDB_CONFIG package provides an interface for configuring Oracle XML DB and its repository.</Description>
      <SubPrograms>
        <SubProgram Name="ADDHTTPEXPIREMAPPING" ElementId="#BABEJJAG">
          <Description>Adds to XDB$CONFIG a mapping of the URL pattern to an expiration date. This will control the Expire headers for URLs matching the pattern.</Description>
          <Parameters>
            <Parameter Name="PATTERN">URL pattern (only * accepted as wildcards)</Parameter>
            <Parameter Name="EXPIRE">Expiration directive, follows the ExpireDefault in Apache's mod_expires:</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADDMIMEMAPPING" ElementId="#BABFJJID">
          <Description>Adds a mime mapping to XDB configuration</Description>
          <Parameters>
            <Parameter Name="EXTENSION">Extension for which a mime type is being added</Parameter>
            <Parameter Name="MIMETYPE">Mime type</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADDSCHEMALOCMAPPING" ElementId="#BABJEFJJ">
          <Description>Adds a schema location mapping to the XDB configuration</Description>
          <Parameters>
            <Parameter Name="NAMESPACE">Namespace</Parameter>
            <Parameter Name="ELEMENT">Element</Parameter>
            <Parameter Name="SCHEMAURL">Schema URL</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADDSERVLET" ElementId="#BABFDAED">
          <Description>Adds a servlet to XDB configuration</Description>
          <Parameters>
            <Parameter Name="NAME">Servlet name</Parameter>
            <Parameter Name="LANGUAGE">Must be one of "C", "Java", "PL/SQL"</Parameter>
            <Parameter Name="DISPNAME">Display name</Parameter>
            <Parameter Name="ICON">Icon</Parameter>
            <Parameter Name="DESCRIPT">Description</Parameter>
            <Parameter Name="CLASS">The class / jspfile / plsql function corresponding to this servlet. The first non-NULL argument amongst these three is chosen, and the others are treated as NULL.</Parameter>
            <Parameter Name="JSPFILE">The class / jspfile / plsql function corresponding to this servlet. The first non-NULL argument amongst these three is chosen, and the others are treated as NULL.</Parameter>
            <Parameter Name="PLSQL">The class / jspfile / plsql function corresponding to this servlet. The first non-NULL argument amongst these three is chosen, and the others are treated as NULL.</Parameter>
            <Parameter Name="SCHEMA">Schema</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADDSERVLETMAPPING" ElementId="#BABJEEAE">
          <Description>Adds a servlet mapping to XDB configuration</Description>
          <Parameters>
            <Parameter Name="PATTERN">Sservlet pattern</Parameter>
            <Parameter Name="NAME">Servlet name</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADDSERVLETSECROLE" ElementId="#BABDJFJG">
          <Description>Adds a security role REF to a specified servlet in XDB configuration</Description>
          <Parameters>
            <Parameter Name="SERVNAME">Sservlet name</Parameter>
            <Parameter Name="ROLENAME">Role name</Parameter>
            <Parameter Name="ROLELINK">Role link</Parameter>
            <Parameter Name="DESCRIPT">Description</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADDXMLEXTENSION" ElementId="#BABBFIFA">
          <Description>Adds adds the following XML extension to the XDB configuration under &lt;xml-extensions&gt;: &lt;extension&gt;extension&lt;/extension&gt;</Description>
          <Parameters>
            <Parameter Name="EXTENSION">XML extension to be added</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CFG_GET" ElementId="#BABBJJIF">
          <Description>Retrieves the session's configuration information as an XMLType instance</Description>
        </SubProgram>
        <SubProgram Name="CFG_REFRESH" ElementId="#BABHJDED">
          <Description>Refreshes the session's configuration information to the latest configuration</Description>
        </SubProgram>
        <SubProgram Name="CFG_UPDATE" ElementId="#BABIGJFA">
          <Description>Updates the configuration information and commits the change.</Description>
          <Parameters>
            <Parameter Name="XDBCONFIG">The new configuration data</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETEHTTPEXPIREMAPPING" ElementId="#BABFIDEB">
          <Description>Deletes from XDB$CONFIG all mappings of the URL pattern to an expiration date</Description>
          <Parameters>
            <Parameter Name="PATTERN">URL pattern (only * accepted as wildcards)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETEMIMEMAPPING" ElementId="#BABCBDJA">
          <Description>Deletes the mime mapping for a specified extension from the XDB configuration</Description>
          <Parameters>
            <Parameter Name="EXTENSION">Extension for which a mime type is to be deleted</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETESCHEMALOCMAPPING" ElementId="#BABEDJCD">
          <Description>Deletes the schema location mapping for a specified schema URL from the XDB configuration</Description>
          <Parameters>
            <Parameter Name="SCHEMAURL">Schema URL</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETESERVLET" ElementId="#BABDEADA">
          <Description>Deletes a servlet from the XDB configuration</Description>
          <Parameters>
            <Parameter Name="NAME">Servlet name</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETESERVLETMAPPING" ElementId="#BABCDEGG">
          <Description>Deletes the servlet mapping for a specified servlet name from the XDB configuration</Description>
          <Parameters>
            <Parameter Name="NAME">Servlet name</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETESERVLETSECROLE" ElementId="#BABEICHF">
          <Description>Deletes the specified role from a servlet in the XDB configuration</Description>
          <Parameters>
            <Parameter Name="SERVNAME">Servlet name</Parameter>
            <Parameter Name="ROLENAME">Name of the role to be deleted</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETEXMLEXTENSION" ElementId="#BABHBIGF">
          <Description>Deletes the specified XML extension from the XDB configuration</Description>
          <Parameters>
            <Parameter Name="EXTENSION">XML extension to be deleted</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ENABLEDIGESTAUTHENTICATION" ElementId="#BABCIFDJ">
          <Description>Enables enables digest authentication</Description>
        </SubProgram>
        <SubProgram Name="GETFTPPORT" ElementId="#BABIBAFB">
          <Description>Gets the value of the current FTP port</Description>
        </SubProgram>
        <SubProgram Name="GETHTTPPORT" ElementId="#BABGEBCD">
          <Description>Gets the value of the current HTTP port</Description>
        </SubProgram>
        <SubProgram Name="GETHTTPCONFIGREALM" ElementId="#CEGBFHEI">
          <Description>Gets the realm name</Description>
        </SubProgram>
        <SubProgram Name="GETHTTPSPORT" ElementId="#BABEEDDA">
          <Description>Gets the value of the current HTTPS port</Description>
        </SubProgram>
        <SubProgram Name="GETLISTENERENDPOINT" ElementId="#BABEFCBH">
          <Description>Gets the parameters of a listener end point corresponding to the XML DB HTTP server</Description>
          <Parameters>
            <Parameter Name="ENDPOINT">End point to be retrieved. Its value can be XDB_ENDPOINT_HTTP or XDB_ENDPOINT_HTTP2.</Parameter>
            <Parameter Name="HOST">Interface on which the listener end point listens</Parameter>
            <Parameter Name="PORT">Port on which the listener end point listens</Parameter>
            <Parameter Name="PROTOCOL">Transport protocol accepted by the listener end point</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETFTPPORT" ElementId="#BABHJCFB">
          <Description>Sets the FTP port to a new value</Description>
          <Parameters>
            <Parameter Name="NEW_PORT">Value to which the FTP port is set</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETHTTPPORT" ElementId="#BABCBDGF">
          <Description>Sets the HTTP port to a new value</Description>
          <Parameters>
            <Parameter Name="NEW_PORT">Value to which the HTTP port is set</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETHTTPCONFIGREALM" ElementId="#CEGIGFDC">
          <Description>Sets the realm to a new value</Description>
        </SubProgram>
        <SubProgram Name="SETHTTPSPORT" ElementId="#BABBAJAB">
          <Description>Sets the HTTPS port to a new value</Description>
          <Parameters>
            <Parameter Name="NEW_PORT">Value to which the HTTPS port is set</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETLISTENERENDPOINT" ElementId="#BABIIECG">
          <Description>Sets the parameters of a listener end point corresponding to the XML DB HTTP server</Description>
          <Parameters>
            <Parameter Name="ENDPOINT">End point to be set. Its value can be XDB_ENDPOINT_HTTP or XDB_ENDPOINT_HTTP2.</Parameter>
            <Parameter Name="HOST">Interface on which the listener end point is to listen. Its value can be 'LOCALHOST,' NULL, or a hostname. If its value is 'LOCALHOST' the listener end point is permitted to only listen on the localhost interface. If its value is NULL or hostname, the listener end point is permitted to listen on both localhost and non-localhost interfaces.</Parameter>
            <Parameter Name="PORT">Port on which the listener end point is to listen</Parameter>
            <Parameter Name="PROTOCOL">Transport protocol that the listener end point is to accept. Its value can be XDB_PROTOCOL_TCP or XDB_PROTOCOL_TCPS</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETLISTENERLOCALACCESS" ElementId="#BABECFGI">
          <Description>Restricts all listener end points of the XML DB HTTP server to listen either only on the localhost interface (when l_access is set to TRUE) or to listen on both localhost and non-localhost interfaces (when l_access is set to FALSE)</Description>
          <Parameters>
            <Parameter Name="L_ACCESS">TRUE or FALSE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="USEDPORT" ElementId="#BABFDFGH">
          <Description>Obtains the port numbers used by other pluggable databases in the same consolidation database</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_XDB_CONSTANTS" Url="http://docs.oracle.com/database/121/ARPLS/d_xdb_constants.htm">
      <Description>The DBMS_XDB_CONSTANTS package provides an interface to commonly used constants. Users should use constants instead of dynamic strings to avoid typographical errors.</Description>
      <SubPrograms>
        <SubProgram Name="ENCODING_DEFAULT" ElementId="#CACGIGDC">
          <Description>Returns 'AL32UTF8'</Description>
        </SubProgram>
        <SubProgram Name="ENCODING_ISOLATIN1" ElementId="#BABEDFIE">
          <Description>Returns 'WE8ISO8859P1'</Description>
        </SubProgram>
        <SubProgram Name="ENCODING_UTF8" ElementId="#CACGIDDF">
          <Description>Returns 'AL32UTF8'</Description>
        </SubProgram>
        <SubProgram Name="ENCODING_WIN1252" ElementId="#CACHBGDA">
          <Description>Returns 'WE8MSWIN1252'</Description>
        </SubProgram>
        <SubProgram Name="NAMESPACE_ACL" ElementId="#CACEGDBC">
          <Description>Returns 'http://xmlns.oracle.com/xdb/acl.xsd'</Description>
        </SubProgram>
        <SubProgram Name="NAMESPACE_METADATA" ElementId="#CACEIIJJ">
          <Description>Returns 'http://xmlns.oracle.com/xdbuserMetaData'</Description>
        </SubProgram>
        <SubProgram Name="NAMESPACE_ORACLE" ElementId="#CACDBDDG">
          <Description>Returns 'http://xmlns.oracle.com'</Description>
        </SubProgram>
        <SubProgram Name="NAMESPACE_ORACLE_XDB" ElementId="#CACIJCGF">
          <Description>Returns 'http://xmlns.oracle.com/xdb'</Description>
        </SubProgram>
        <SubProgram Name="NAMESPACE_RESOURCE" ElementId="#CACBAIJF">
          <Description>Returns 'http://xmlns.oracle.com/xdb/XDBResource.xsd'</Description>
        </SubProgram>
        <SubProgram Name="NAMESPACE_RESOURCE_EVENT" ElementId="#CACGHJEA">
          <Description>Returns 'http://xmlns.oracle.com/resourceEvent'</Description>
        </SubProgram>
        <SubProgram Name="NAMESPACE_RESOURCE_CONFIG" ElementId="#CACIIHBJ">
          <Description>Returns 'http://xmlns.oracle.com/XDBResConfig.xsd'</Description>
        </SubProgram>
        <SubProgram Name="NAMESPACE_XDBSCHEMA" ElementId="#CACDIHED">
          <Description>Returns 'http://xmlns.oracle.com/xdb/XDBSchema.xsd'</Description>
        </SubProgram>
        <SubProgram Name="NAMESPACE_XMLDIFF" ElementId="#CACEHFGH">
          <Description>Returns 'http://xmlns.oracle.com/xdb/xdiff.xsd'</Description>
        </SubProgram>
        <SubProgram Name="NAMESPACE_XMLINSTANCE" ElementId="#CACCIHAI">
          <Description>Returns 'http://www.w3.org/2001/XMLSchema-instance'</Description>
        </SubProgram>
        <SubProgram Name="NAMESPACE_XMLSCHEMA" ElementId="#CACFJIGB">
          <Description>Returns 'http://www.w3.org/2001/XMLSchema'</Description>
        </SubProgram>
        <SubProgram Name="NSPREFIX_ACL_ACL" ElementId="#CACHBHIJ">
          <Description>Returns 'xmlns:acl= 'http://xmlns.oracle.com/acs.xsd'</Description>
        </SubProgram>
        <SubProgram Name="NSPREFIX_RESCONFIG_RC" ElementId="#CACJFGBA">
          <Description>Returns 'xmlns:rc="http://xmlns.oracle.com/xdb/XDBResConfig.xsd"'</Description>
        </SubProgram>
        <SubProgram Name="NSPREFIX_RESOURCE_R" ElementId="#CACIIAAF">
          <Description>Returns 'xmlns:r="http://xmlns.oracle.com/XDBResource.xsd'</Description>
        </SubProgram>
        <SubProgram Name="NSPREFIX_XDB_XDB" ElementId="#CACFJDGF">
          <Description>Returns 'http://xmlns.oracle.com/xdb'</Description>
        </SubProgram>
        <SubProgram Name="NSPREFIX_XMLINSTANCE_XSI" ElementId="#CACHGBFH">
          <Description>Returns 'xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"'</Description>
        </SubProgram>
        <SubProgram Name="NSPREFIX_XMLDIFF_XD" ElementId="#CACFEJJH">
          <Description>Returns 'xmlns:xd="http://xmlns.oracle.com/xdb/xdiff.xsd"'</Description>
        </SubProgram>
        <SubProgram Name="NSPREFIX_XMLSCHEMA_XSD" ElementId="#CACGJIIA">
          <Description>Returns 'xmlns:xsd="http://www.w3.org/2001/XMLSchema"'</Description>
        </SubProgram>
        <SubProgram Name="SCHEMAURL_ACL" ElementId="#CACEJAEE">
          <Description>Returns 'http://xmlns.oracle.com/xdb/acl.xsd'</Description>
        </SubProgram>
        <SubProgram Name="SCHEMAELEM_RES_ACL" ElementId="#CACCAHAH">
          <Description>Returns 'http://xmlns.oracle.com/xdb/acl.xsd#acl'</Description>
        </SubProgram>
        <SubProgram Name="SCHEMAELEM_RESCONTENT_BINARY" ElementId="#CACBJGCI">
          <Description>Returns 'http://xmlns.oracle.com/xdb/XDBSchema.xsd#binary'</Description>
        </SubProgram>
        <SubProgram Name="SCHEMAELEM_RESCONTENT_TEXT" ElementId="#CACIGBJB">
          <Description>Returns 'http://xmlns.oracle.com/xdb/XDBSchema.xsd#text'</Description>
        </SubProgram>
        <SubProgram Name="SCHEMAURL_RESOURCE" ElementId="#CACCHHGJ">
          <Description>Returns 'http://xmlns.oracle.com/xdb/XDBResource.xsd'</Description>
        </SubProgram>
        <SubProgram Name="SCHEMAURL_XDBSCHEMA" ElementId="#CACBGDEI">
          <Description>Returns 'http://xmlns.oracle.com/xdb/XDBSchema.xsd'</Description>
        </SubProgram>
        <SubProgram Name="XDBSCHEMA_PREFIXES" ElementId="#CACJGEFF">
          <Description>Returns 'xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xdb="http://xmlns.oracle.com/xdb'</Description>
        </SubProgram>
        <SubProgram Name="XSD_ATTRIBUTE" ElementId="#CACFAGED">
          <Description>Returns 'attribute'</Description>
        </SubProgram>
        <SubProgram Name="XSD_COMPLEX_TYPE" ElementId="#CACBAHGC">
          <Description>Returns 'complexType'</Description>
        </SubProgram>
        <SubProgram Name="XSD_ELEMENT" ElementId="#CACIIEED">
          <Description>Returns 'element'</Description>
        </SubProgram>
        <SubProgram Name="XSD_GROUP" ElementId="#CACHBJBC">
          <Description>Returns 'group'</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_XDB_REPOS" Url="http://docs.oracle.com/database/121/ARPLS/d_xdb_repos.htm">
      <Description>The DBMS_XDB_REPOS package provides an interface to operate on the Oracle XML database Repository.</Description>
      <SubPrograms>
        <SubProgram Name="ACLCHECKPRIVILEGES" ElementId="#BABIAFIH">
          <Description>Checks access privileges granted to the current user by specified ACL document on a resource whose owner is specified by the 'owner' parameter.</Description>
          <Parameters>
            <Parameter Name="ACL_PATH">Absolute path in the Hierarchy for ACL document</Parameter>
            <Parameter Name="OWNER">Resource owner name; the pseudo user "DAV:owner" is replaced by this user during ACL privilege resolution</Parameter>
            <Parameter Name="PRIVS">An XMLType instance of the privilege element specifying the requested set of access privileges. See description for CHECKPRIVILEGES Function.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="APPENDRESOURCEMETADATA" ElementId="#BABGJCFJ">
          <Description>Takes in user-defined metadata either as a REF to XMLTYPE or an XMLTYPE and adds it to the desired resource</Description>
        </SubProgram>
        <SubProgram Name="CHANGEOWNER" ElementId="#BABJCICC">
          <Description>Changes the owner of the resource/s to the specified owner.</Description>
          <Parameters>
            <Parameter Name="ABSPATH">Absolute path of the resource</Parameter>
            <Parameter Name="OWNER">New owner for the resource</Parameter>
            <Parameter Name="RECURSE">If TRUE, recursively change owner of all resources in the folder tree</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CHANGEPRIVILEGES" ElementId="#BABDBBDJ">
          <Description>Adds a specified ACE to a specified resource's ACL</Description>
          <Parameters>
            <Parameter Name="RES_PATH">Path name of the resource for which privileges need to be changed</Parameter>
            <Parameter Name="ACE">An XMLType instance of the &lt;ace&gt; element which specifies the &lt;principal&gt;, the operation &lt;grant&gt; and the list of privileges</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CHECKPRIVILEGES" ElementId="#BABCBHGC">
          <Description>Checks access privileges granted to the current user on the specified resource</Description>
          <Parameters>
            <Parameter Name="RES_PATH">Absolute path in the Hierarchy for resource</Parameter>
            <Parameter Name="PRIVS">An XMLType instance of the privilege element specifying the requested set of access privileges</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATEFOLDER" ElementId="#BABCDCEB">
          <Description>Creates a new folder resource in the hierarchy</Description>
          <Parameters>
            <Parameter Name="PATH">Path name for the new folder</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATEOIDPATH" ElementId="#BABIAAJH">
          <Description>Creates a virtual path to the resource based on object ID</Description>
          <Parameters>
            <Parameter Name="OID">Object ID of the resource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATERESOURCE" ElementId="#BABJBFGH">
          <Description>Creates a new resource</Description>
          <Parameters>
            <Parameter Name="ABSPATH">Absolute path of the resource to create. The path name's parent folder must already exist in the hierarchy. In other words, if /foo/bar.txt is passed in, then folder /foo must already exist.</Parameter>
            <Parameter Name="DATA">String buffer containing new resource's contents. The data is parsed to check if it contains a schema-based XML document, and the contents are stored as schema-based in the schema's default table. Otherwise, it is saved as binary data.</Parameter>
            <Parameter Name="DATAROW">REF to an XMLType row to be used as the contents</Parameter>
            <Parameter Name="CSID">Character set id of the document. Must be a valid Oracle ID; otherwise returns an error.If CSID is not specified, or if a zero CSID is specified, then the character set id of the document is determined as follows:From the abspath extension, determine the resource's MIME type.If the MIME type is */xml, then the encoding is detected based on Appendix F of the W3C XML 1.0 Reference at http://www.w3.org/TR/2000/REC-xml-20001006;Otherwise, it is defaulted to the database character set.</Parameter>
            <Parameter Name="SCHEMAURL">For XML data, schema URL data conforms to (default NULL)</Parameter>
            <Parameter Name="ELEM">Element name (default NULL)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETERESOURCE" ElementId="#BABGBIJJ">
          <Description>Deletes a resource from the hierarchy</Description>
          <Parameters>
            <Parameter Name="PATH">Path name of the resource to delete</Parameter>
            <Parameter Name="DELETE_OPTION">The option that controls how a a resource is deleted:DELETE_RESOURCEDELETE_RECURSIVEDELETE_FORCEDELETE_RECURSIVE_FORCE</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETERESOURCEMETADATA" ElementId="#BABHAECG">
          <Description>Deletes metadata from a resource (can be used for schema-based or nonschema-based metadata)</Description>
          <Parameters>
            <Parameter Name="ABSPATH">Absolute path of the resource</Parameter>
            <Parameter Name="METADATA">REF to the piece of metadata (schema based) to be deleted</Parameter>
            <Parameter Name="METTADATANS">Namespace of the metadata fragment to be removed</Parameter>
            <Parameter Name="METTADATANAME">Local name of the metadata fragment to be removed</Parameter>
            <Parameter Name="DELETE_OPTION">Only applicable for schema-based metadata, this can be one of the following:DELETE_RES_METADATA_CASCADE - deletes the corresponding row in the metadata tableDELETE_RES_METADATA_NOCASCADE - does not delete the row in the metadata table</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXISTSRESOURCE" ElementId="#BABCDDGI">
          <Description>Determines if a resource is the hierarchy, based on its absolute path</Description>
          <Parameters>
            <Parameter Name="ABSPATH">Path name of the resource whose ACL document is required</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETACLDOCUMENT" ElementId="#BABBFACB">
          <Description>Retrieves ACL document that protects resource given its path name</Description>
          <Parameters>
            <Parameter Name="ABSPATH">Path name of the resource whose ACL document is required</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETCONTENTBLOB" ElementId="#BABFHBJC">
          <Description>Retrieves the contents of a resource returned as a BLOB</Description>
          <Parameters>
            <Parameter Name="ABSPATH">Absolute path of the resource</Parameter>
            <Parameter Name="CSID">If TRUE, lock and return the source LOB. If FALSE, return a temp LOB copy.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETCONTENTCLOB" ElementId="#BABEADGD">
          <Description>Retrieves the contents of a resource returned as a CLOB</Description>
          <Parameters>
            <Parameter Name="ABSPATH">Absolute path of the resource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETCONTENTVARCHAR2" ElementId="#BABEJHHD">
          <Description>Retrieves the contents of a resource returned as a string</Description>
          <Parameters>
            <Parameter Name="ABSPATH">Absolute path of the resource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETCONTENTXMLREF" ElementId="#BABDGEDG">
          <Description>Retrieves the contents of a resource returned as a a REF to an XMLTYPE</Description>
          <Parameters>
            <Parameter Name="ABSPATH">Absolute path of the resource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETCONTENTXMLTYPE" ElementId="#BABHHEHA">
          <Description>Retrieves the contents of a resource returned as an XMLTYPE</Description>
          <Parameters>
            <Parameter Name="ABSPATH">Absolute path of the resource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETLOCKTOKEN" ElementId="#BABIFBDI">
          <Description>Returns that resource's lock token for the current user given a path to a resource</Description>
          <Parameters>
            <Parameter Name="PATH">Path name to the resource</Parameter>
            <Parameter Name="LOCKTOKEN">Logged-in user's lock token for the resource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETPRIVILEGES" ElementId="#BABBAGFI">
          <Description>Gets all privileges granted to the current user on a specified resource</Description>
          <Parameters>
            <Parameter Name="RES_PATH">Absolute path in the hierarchy of the resource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETRESOID" ElementId="#BABEFJDC">
          <Description>Returns the object ID of the resource from its absolute path</Description>
          <Parameters>
            <Parameter Name="ABSPATH_PATH">Absolute path of the resource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETXDB_TABLESPACE" ElementId="#BABFCIIG">
          <Description>Returns the current tablespace of the XDB (user)</Description>
        </SubProgram>
        <SubProgram Name="HASBLOBCONTENT" ElementId="#BABFCAGJ">
          <Description>Returns TRUE if the resource has BLOB content</Description>
          <Parameters>
            <Parameter Name="ABSPATH_PATH">Absolute path of the resource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="HASCHARCONTENT" ElementId="#BABBFJAH">
          <Description>Returns TRUE if the resource has character content</Description>
          <Parameters>
            <Parameter Name="ABSPATH_PATH">Absolute path of the resource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="HASXMLCONTENT" ElementId="#BABJGDGE">
          <Description>Returns TRUE if the resource has XML content</Description>
          <Parameters>
            <Parameter Name="ABSPATH_PATH">Absolute path of the resource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="HASXMLREFERENCE" ElementId="#BABCDAIH">
          <Description>Returns TRUE if the resource has REF to XML content</Description>
          <Parameters>
            <Parameter Name="ABSPATH_PATH">Absolute path of the resource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ISFOLDER" ElementId="#BABEEHEB">
          <Description>Returns TRUE if the resource is a folder or container</Description>
          <Parameters>
            <Parameter Name="ABSPATH_PATH">Absolute path of the resource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LINK" ElementId="#BABIBFCC">
          <Description>Creates a link to an existing resource</Description>
          <Parameters>
            <Parameter Name="SRCPATH">Path name of the resource to which a link is created</Parameter>
            <Parameter Name="LINKFOLDER">Folder in which the new link is placed</Parameter>
            <Parameter Name="LINKNAME">Name of the new link</Parameter>
            <Parameter Name="LINKTYPE">Type of link to be created:DBMS_XDB.LINK_TYPE_HARD (default)DBMS_XDB.LINK_TYPE_WEAKDBMS_XDB.LINK_TYPE_SYMBOLIC</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LOCKRESOURCE" ElementId="#BABFIEDI">
          <Description>Gets a WebDAV-style lock on that resource given a path to that resource</Description>
          <Parameters>
            <Parameter Name="PATH">Path name of the resource to lock.</Parameter>
            <Parameter Name="DEPTHZERO">Currently not supported</Parameter>
            <Parameter Name="SHARED">Passing TRUE obtains a shared write lock</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PROCESSLINKS" ElementId="#BABCADAF">
          <Description>Processes document links in the specified resource</Description>
          <Parameters>
            <Parameter Name="ABSPATH">Absolute path of the resource. If the path is a folder, use the recurse flag.</Parameter>
            <Parameter Name="RECURSE">Used only if abspath specifies a folder. If TRUE, process links of all resources in the folder hierarchy rooted at the specified resource. If FALSE, process links of all documents in this folder only.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PURGERESOURCEMETADATA" ElementId="#BABHBBGF">
          <Description>Deletes all user metadata from a resource</Description>
          <Parameters>
            <Parameter Name="ABSPATH">Absolute path of the resource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RENAMERESOURCE" ElementId="#BABGCBFE">
          <Description>Renames the XDB resource</Description>
          <Parameters>
            <Parameter Name="SRCPATH">Absolute path in the Hierarchy for the source resource destination folder</Parameter>
            <Parameter Name="DESTFOLDER">Absolute path in the Hierarchy for the destination folder</Parameter>
            <Parameter Name="NEWNAME">Name of the child in the destination folder</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETACL" ElementId="#BABGJJBH">
          <Description>Sets the ACL on a specified resource</Description>
          <Parameters>
            <Parameter Name="RES_PATH">Absolute path in the Hierarchy for resource</Parameter>
            <Parameter Name="ACL_PATH">Absolute path in the Hierarchy for ACL</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SPLITPATH" ElementId="#BABGHJGB">
          <Description>Splits the path into a parentpath and childpath</Description>
          <Parameters>
            <Parameter Name="ABSPATH">Absolute path to be split</Parameter>
            <Parameter Name="PARENTPATH">Parentpath</Parameter>
            <Parameter Name="CHILDPATH">Childpath</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="TOUCHRESOURCE" ElementId="#BABBHAAE">
          <Description>Changes the modification time of the resource to the current time</Description>
          <Parameters>
            <Parameter Name="ABSPATH_PATH">Absolute path of the resource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UNLOCKRESOURCE" ElementId="#BABCAFIH">
          <Description>Unlocks the resource given a lock token and resource path</Description>
          <Parameters>
            <Parameter Name="PATH">Path name to the resource</Parameter>
            <Parameter Name="DELTOKEN">Lock token to be removed</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UPDATERESOURCEMETADATA" ElementId="#BABIEFGI">
          <Description>Updates metadata for a resource</Description>
          <Parameters>
            <Parameter Name="ABSPATH">Absolute path of the resource</Parameter>
            <Parameter Name="OLDMETADATA">REF to the old of metadata</Parameter>
            <Parameter Name="NEWMETADATA">REF to the new, replacement metadata (can be either schema-based or nonschema-based depending on the overload)</Parameter>
            <Parameter Name="OLDNS">Namespace identifying old metadata</Parameter>
            <Parameter Name="OLDNAME">Local name identifying old metadata</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_XDB_VERSION" Url="http://docs.oracle.com/database/121/ARPLS/d_xdb_ver.htm">
      <Description>Oracle XML DB versioning interfaces are found in the DBMS_XBD_VERSION package. Functions and procedures of DBMS_XDB_VERSION help to create a VCR and manage the versions in the version history.</Description>
      <SubPrograms>
        <SubProgram Name="CHECKIN" ElementId="#i1003739">
          <Description>Checks in a checked-out VCR and returns the resource id of the newly-created version</Description>
          <Parameters>
            <Parameter Name="PATHNAME">The path name of the checked-out resource.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CHECKOUT" ElementId="#i1002044">
          <Description>Checks out a VCR before updating or deleting it</Description>
          <Parameters>
            <Parameter Name="PATHNAME">The path name of the VCR to be checked out.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETCONTENTSBLOBBYRESID" ElementId="#i1004044">
          <Description>Obtain contents as a BLOB</Description>
        </SubProgram>
        <SubProgram Name="GETCONTENTSCLOBBYRESID" ElementId="#i1004065">
          <Description>Obtain contents as a CLOB</Description>
        </SubProgram>
        <SubProgram Name="GETCONTENTSXMLBYRESID" ElementId="#i1004066">
          <Description>Obtain contents as an XMLType</Description>
          <Parameters>
            <Parameter Name="RESID">The resource id.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETPREDECESSORS" ElementId="#i1005110">
          <Description>Retrieves the list of predecessors by path name</Description>
          <Parameters>
            <Parameter Name="PATHNAME">The path name of the resource.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETPREDSBYRESID" ElementId="#CCHJHGAE">
          <Description>Retrieves the list of predecessors by resource id</Description>
          <Parameters>
            <Parameter Name="RESID">The resource id.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETRESOURCEBYRESID" ElementId="#i1002129">
          <Description>Obtains the resource as an XMLType, given the resource object ID</Description>
          <Parameters>
            <Parameter Name="RESID">The resource id.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETSUCCESSORS" ElementId="#i1002146">
          <Description>Retrieves the list of successors by path name</Description>
          <Parameters>
            <Parameter Name="PATHNAME">The path name of the resource.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETSUCCSBYRESID" ElementId="#i1002163">
          <Description>Retrieves the list of successors by resource id</Description>
          <Parameters>
            <Parameter Name="RESID">The resource id.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MAKEVERSIONED" ElementId="#i1003712">
          <Description>Turns a regular resource whose path name is given into a version-controlled resource</Description>
          <Parameters>
            <Parameter Name="PATHNAME">The path name of the resource to be put under version control.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UNCHECKOUT" ElementId="#i1003683">
          <Description>Checks in a checked-out resource, returns the resource id of the version before the resource is checked out</Description>
          <Parameters>
            <Parameter Name="PATHNAME">The path name of the checked-out resource.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_XDBRESOURCE" Url="http://docs.oracle.com/database/121/ARPLS/d_xdbresource.htm">
      <Description>The DBMS_XDBRESOURCE package provides the interface to operate on the resource's metadata and contents.</Description>
      <SubPrograms>
        <SubProgram Name="FREERESOURCE" ElementId="#CACCCIFC">
          <Description>Frees any memory associated with an XDBResource</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource to free</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETACL" ElementId="#CHDIHBAC">
          <Description>Given an XDBResource, returns its ACL as string</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETACLDOCFROMRES" ElementId="#CACBGCAG">
          <Description>Returns the ACL Document for the given resource as XMLType</Description>
        </SubProgram>
        <SubProgram Name="GETAUTHOR" ElementId="#CACGFHAA">
          <Description>Given an XDBResource, returns its author</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETCHARACTERSET" ElementId="#CACGGFFI">
          <Description>Given an XDBResource, returns its character set</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETCOMMENT" ElementId="#CACDGGEC">
          <Description>Given an XDBResource, returns its comment</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETCONTENTBLOB" ElementId="#CACHGDFI">
          <Description>Returns the contents of the resource as a BLOB</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
            <Parameter Name="CSID">Character set ID of the BLOB returned</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETCONTENTCLOB" ElementId="#CACIDJJI">
          <Description>Returns the contents of the resource as a CLOB</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETCONTENTREF" ElementId="#CACGFDEE">
          <Description>Returns the contents of the resource as an XMLTypeRef</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETCONTENTTYPE" ElementId="#CACEECFH">
          <Description>Given an XDBResource, returns its content-type</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETCONTENTXML" ElementId="#CACIBAHB">
          <Description>Returns the contents of the resource as XML</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETCONTENTVARCHAR2" ElementId="#CACECDDJ">
          <Description>Returns the contents of the resource as a string</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETCREATIONDATE" ElementId="#CACEJJFH">
          <Description>Given an XDBResource, returns its creation date</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETCREATOR" ElementId="#CACDEBHG">
          <Description>Given an XDBResource, returns its creator</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETCUSTOMMETADATA" ElementId="#CACHBJGJ">
          <Description>Returns the requested custom metadata given the xpath and namespace to the metadata</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
            <Parameter Name="XPATH">XPath for custom metadata</Parameter>
            <Parameter Name="NAMESPACE">Namespace</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETDISPLAYNAME" ElementId="#CACFGHIJ">
          <Description>Given an XDBResource, returns its display name</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETLANGUAGE" ElementId="#CACIJJDI">
          <Description>Given an XDBResource, returns its language</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETLASTMODIFIER" ElementId="#CACJGDDD">
          <Description>Given an XDBResource, returns its last modifier</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETMODIFICATIONDATE" ElementId="#CACCFHHI">
          <Description>Given an XDBResource, returns its modification date</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETOWNER" ElementId="#CACIHCFH">
          <Description>Given an XDBResource, returns its owner.</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETREFCOUNT" ElementId="#CACJGCDG">
          <Description>Given an XDBResource, returns its reference count</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETVERSIONID" ElementId="#CACBJCFC">
          <Description>Given an XDBResource, returns its version ID.</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="HASACLCHANGED" ElementId="#CACHIAJG">
          <Description>Returns TRUE if the ACL of the given resource has changed, FALSE otherwise</Description>
        </SubProgram>
        <SubProgram Name="HASAUTHORCHANGED" ElementId="#CACFDBAH">
          <Description>Returns TRUE if the ACL of the given resource has changed FALSE otherwise</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="HASCHANGED" ElementId="#CACJBEEB">
          <Description>Returns TRUE if the element or attribute represented by the given XPath has changed, FALSE otherwise</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
            <Parameter Name="XPATH">XPath to check</Parameter>
            <Parameter Name="BNAMESPACE">Namespace to use</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="HASCHARACTERSETCHANGED" ElementId="#CACBHDBJ">
          <Description>Returns TRUE if the character set of the given resource has changed, FALSE otherwise</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="HASCOMMENTCHANGED" ElementId="#CACFAFGG">
          <Description>Returns TRUE if the comment of the given resource has changed, FALSE otherwise</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="HASCONTENTCHANGED" ElementId="#CACGHCCI">
          <Description>Returns TRUE if the contents of the given resource has changed, FALSE otherwise</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="HASCONTENTTYPECHANGED" ElementId="#CACJAIFD">
          <Description>Returns TRUE if the content-type of the given resource has changed, FALSE otherwise</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="HASCREATIONDATECHANGED" ElementId="#CACDJHEF">
          <Description>Returns TRUE if the creation date of the given resource has changed, FALSE otherwise</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="HASCREATORCHANGED" ElementId="#CACHAEBJ">
          <Description>Returns TRUE if the creator of the given resource has changed, FALSE otherwise</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="HASCUSTOMMETADATACHANGED" ElementId="#CACIHDFF">
          <Description>Returns TRUE if custom-metadata for this XPath has changed, FALSE otherwise</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="HASDISPLAYNAMECHANGED" ElementId="#CACDHFJI">
          <Description>Returns TRUE if the display name of the given resource has changed, FALSE otherwise</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="HASLANGUAGECHANGED" ElementId="#CACEEFEA">
          <Description>Returns TRUE if the language of the given resource has changed, FALSE otherwise</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="HASLASTMODIFIERCHANGED" ElementId="#CACFAJIG">
          <Description>Returns TRUE if the last modifier of the given resource has changed, FALSE otherwise</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="HASMODIFICATIONDATECHANGED" ElementId="#CACCEEJE">
          <Description>Returns TRUE if the modification date of the given resource has changed, FALSE otherwise</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="HASOWNERCHANGED" ElementId="#CACFEEFE">
          <Description>Returns TRUE if the owner of the given resource has changed, FALSE otherwise</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="HASREFCOUNTCHANGED" ElementId="#CACBHHHJ">
          <Description>Returns TRUE if the reference count of the given resource has changed, FALSE otherwise</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="HASVERSIONIDCHANGED" ElementId="#CACDGBDJ">
          <Description>Returns TRUE if the version ID of the given resource has changed, FALSE otherwise</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ISFOLDER" ElementId="#CACDAABF">
          <Description>Returns TRUE if the given resource is a folder, FALSE otherwise</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ISNULL" ElementId="#CACCBFFH">
          <Description>Returns TRUE if input resource is NULL, FALSE otherwise</Description>
          <Parameters>
            <Parameter Name="RES">Input resource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MAKEDOCUMENT" ElementId="#CACJBHJI">
          <Description>Converts the XDBResource to a DOMDocument which can be operated on using the XMLDOM interface</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SAVE" ElementId="#CACDEDHF">
          <Description>Updates the resource with any modifications</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETACL" ElementId="#CACFCBHJ">
          <Description>Sets the ACL of the given XDBResource to the path specified</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
            <Parameter Name="ACLPATH">Absolute path of the new ACL</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETAUTHOR" ElementId="#CACCDHID">
          <Description>Sets the author of the given XDBResource to the specified string</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
            <Parameter Name="AUTHOR">Author</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETCHARACTERSET" ElementId="#CACEDFBD">
          <Description>Sets the character set of the given XDBResource to a specified character set</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
            <Parameter Name="CHARSET">New character set</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETCOMMENT" ElementId="#CACEBGGA">
          <Description>Sets a comment associated with the given XDBResource</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
            <Parameter Name="COMMENT">New comment</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETCONTENT" ElementId="#CACGJGDI">
          <Description>Replaces the contents of the given resource with the given CLOB</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
            <Parameter Name="DATA">Data input as BFILE, BLOB, CLOB, string, XMLType</Parameter>
            <Parameter Name="CSID">Character set ID of the BFILE, BLOB</Parameter>
            <Parameter Name="STICKY">If TRUE creates a sticky REF, otherwise non-sticky</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETCONTENTTYPE" ElementId="#CACCAABI">
          <Description>Sets the content-type of the given XDBResource</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
            <Parameter Name="CONTTYPE">New content-type</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETCUSTOMMETADATA" ElementId="#CACBCGHE">
          <Description>Sets the custom metadata specified by the XPath and namespace to new data</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
            <Parameter Name="XPATH">XPath to change</Parameter>
            <Parameter Name="NAMESPACE">Namespace to use</Parameter>
            <Parameter Name="NEWMETADATA">New data that should replace the metadata at the given XPath</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETDISPLAYNAME" ElementId="#CACGBAGE">
          <Description>Sets the display name of the given XDBResource</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
            <Parameter Name="NAME">New display name</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETLANGUAGE" ElementId="#CACEAFGI">
          <Description>Sets the language of the given XDBResource</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
            <Parameter Name="ACLPATH">New path</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETOWNER" ElementId="#CACGEHAI">
          <Description>Sets the owner of the given XDBResource</Description>
          <Parameters>
            <Parameter Name="RES">XDBResource</Parameter>
            <Parameter Name="OWNER">New owner</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_XDBT" Url="http://docs.oracle.com/database/121/ARPLS/d_xdbt.htm">
      <Description>The DBMS_XDBT package provides a convenient mechanism for administrators to set up a CONTEXT index on the Oracle XML DB hierarchy. The package contains procedures to create default preferences, create the index and set up automatic synchronization of the CONTEXT index</Description>
      <SubPrograms>
        <SubProgram Name="CONFIGUREAUTOSYNC" ElementId="#i1004832">
          <Description>Configures the CONTEXT index for automatic maintenance, SYNC</Description>
        </SubProgram>
        <SubProgram Name="CREATEDATASTOREPREF" ElementId="#i1002408">
          <Description>Creates a USER datastore preference for the CONTEXT index</Description>
        </SubProgram>
        <SubProgram Name="CREATEFILTERPREF" ElementId="#i1002419">
          <Description>Creates a filter preference for the CONTEXT index</Description>
        </SubProgram>
        <SubProgram Name="CREATEINDEX" ElementId="#i1009059">
          <Description>Creates the CONTEXT index on the XML DB hierarchy</Description>
        </SubProgram>
        <SubProgram Name="CREATELEXERPREF" ElementId="#i1002427">
          <Description>Creates a lexer preference for the CONTEXT index</Description>
        </SubProgram>
        <SubProgram Name="CREATEPREFERENCES" ElementId="#i1004886">
          <Description>Creates preferences required for the CONTEXT index on the XML DB hierarchy</Description>
        </SubProgram>
        <SubProgram Name="CREATESECTIONGROUPPREF" ElementId="#i1004896">
          <Description>Creates a storage preference for the CONTEXT index</Description>
        </SubProgram>
        <SubProgram Name="CREATESTOPLISTPREF" ElementId="#i1002444">
          <Description>Creates a section group for the CONTEXT index</Description>
        </SubProgram>
        <SubProgram Name="CREATESTORAGEPREF" ElementId="#i1002453">
          <Description>Creates a wordlist preference for the CONTEXT index</Description>
        </SubProgram>
        <SubProgram Name="CREATEWORLDLISTPREF" ElementId="#i1004908">
          <Description>Creates a stoplist for the CONTEXT index</Description>
        </SubProgram>
        <SubProgram Name="DROPPREFERENCES" ElementId="#i1004863">
          <Description>Drops any existing preferences</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_XDBZ" Url="http://docs.oracle.com/database/121/ARPLS/d_xdbz.htm">
      <Description>The DBMS_XDBZ package controls the Oracle XML DB repository security, which is based on Access Control Lists (ACLs).</Description>
      <SubPrograms>
        <SubProgram Name="DISABLE_HIERARCHY" ElementId="#CHDEFCGB">
          <Description>Disables repository support for the specified XMLTYPE table or view</Description>
          <Parameters>
            <Parameter Name="OBJECT_SCHEMA">Schema name of the XMLType table or view</Parameter>
            <Parameter Name="OBJECT_NAME">Name of the XMLType table or view</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ENABLE_HIERARCHY" ElementId="#i1005905">
          <Description>Enables repository support for the specified XMLType table or view</Description>
          <Parameters>
            <Parameter Name="OBJECT_SCHEMA">Schema name of the XMLType table or view</Parameter>
            <Parameter Name="OBJECT_NAME">Name of the XMLType table or view</Parameter>
            <Parameter Name="HIERARCHY_TYPE">How to enable the hierarchy.ENABLE_CONTENTS - enable hierarchy for contents, that is, this table will store contents of resources in the repositoryENABLE_RESMETADATA - enable hierarchy for resource metadata, that is, this table will store schema based custom metadata for resourcesIf this subprogram is called on a table, another call will have no effect. Note that you cannot enable hierarchy for both contents and resource metadata.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_ACLOID" ElementId="#i1005916">
          <Description>Retrieves the ACL Object ID for the specified resource</Description>
          <Parameters>
            <Parameter Name="ACLPATH">ACL resource path for the repository</Parameter>
            <Parameter Name="ACLOID">Returned Object ID</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_USERID" ElementId="#i1005927">
          <Description>Retrieves the user ID for the specified user</Description>
          <Parameters>
            <Parameter Name="USERNAME">Name of the database or LDAP user.</Parameter>
            <Parameter Name="USERID">Return parameter for the matching user id.</Parameter>
            <Parameter Name="FORMAT">Format of the specified user name; valid options are:DBMS_XDBZ.NAME_FORMAT_SHORT (default) -- DB user name or LDAP nicknameDBMS_XDBZ.NAME_FORMAT_DISTINGUISHIED -- LDAP distinguished name.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IS_HIERARCHY_ENABLED" ElementId="#i1005938">
          <Description>Determines if repository support for the specified XMLType table or view is enabled</Description>
          <Parameters>
            <Parameter Name="OBJECT_SCHEMA">Schema name of the XMLType table or view</Parameter>
            <Parameter Name="OBJECT_NAME">Name of the XMLType table or view</Parameter>
            <Parameter Name="HIERARCHY_TYPE">Type of hierarchy to check for:IS_ENABLED_CONTENTS - if hierarchy was enabled for contents, that is, the ENABLE_HIERARCHY Procedure was called with hierarchy_type as ENABLE_CONTENTSIS_ENABLED_RESMETADATA - if hierarchy was enabled for resource metadata, that is, the ENABLE_HIERARCHY Procedure was called with hierarchy_type as ENABLE_RESMETADATA</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PURGELDAPCACHE" ElementId="#i1005953">
          <Description>Purges the LDAP nickname cache</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_XEVENT" Url="http://docs.oracle.com/database/121/ARPLS/d_xevent.htm">
      <Description>The DBMS_XEVENTpackage provides event-related types and supporting subprograms.</Description>
      <SubPrograms>
        <SubProgram Name="CLEAR" ElementId="#BABFACDJ">
          <Description>XDBHandlerList Type Subprograms</Description>
          <Parameters>
            <Parameter Name="HL">Handler list</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETAPPLICATIONDATA" ElementId="#BABEHDCA">
          <Description>XDBRepositoryEvent Type Subprograms</Description>
          <Parameters>
            <Parameter Name="EV">Event of XDBRepositoryEvent type</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETCHILDOID" ElementId="#BABBGAID">
          <Description>XDBLink Type Subprograms</Description>
          <Parameters>
            <Parameter Name="LINK">Link</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETCURRENTUSER" ElementId="#BABECBCE">
          <Description>XDBEvent Type Subprograms</Description>
          <Parameters>
            <Parameter Name="EV">Event of XDBEvent type</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETEVENT" ElementId="#BABICECI">
          <Description>XDBEvent Type Subprograms</Description>
          <Parameters>
            <Parameter Name="EV">Event of XDBEvent type</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETFIRST" ElementId="#BABHBDFE">
          <Description>XDBHandlerList Type Subprograms</Description>
          <Parameters>
            <Parameter Name="HL">Handler list</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETHANDLERLIST" ElementId="#BABFGBHD">
          <Description>XDBRepositoryEvent Type Subprograms</Description>
          <Parameters>
            <Parameter Name="EV">Event of XDBRepositoryEvent type</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETINTERFACE" ElementId="#BABEBJAD">
          <Description>XDBRepositoryEvent Type Subprograms</Description>
          <Parameters>
            <Parameter Name="EV">Event of XDBRepositoryEvent type</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETLANGUAGE" ElementId="#BABCHCFF">
          <Description>XDBHandler Type Subprograms</Description>
        </SubProgram>
        <SubProgram Name="GETLINK" ElementId="#BABEICGF">
          <Description>XDBRepositoryEvent Type Subprograms</Description>
          <Parameters>
            <Parameter Name="EV">Event of XDBRepositoryEvent type</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETLOCK" ElementId="#BABJABAA">
          <Description>XDBRepositoryEvent Type Subprograms</Description>
          <Parameters>
            <Parameter Name="EV">Event of XDBRepositoryEvent type</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETNAME" ElementId="#BABGEBJA">
          <Description>XDBPath Type Subprograms</Description>
          <Parameters>
            <Parameter Name="PATH">Path</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETNAME" ElementId="#BABGEBJA">
          <Description>XDBHandlerList Type Subprograms</Description>
          <Parameters>
            <Parameter Name="PATH">Path</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETOLDRESOURCE" ElementId="#BABJBEGD">
          <Description>XDBRepositoryEvent Type Subprograms</Description>
          <Parameters>
            <Parameter Name="EV">Event of XDBRepositoryEvent type</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETOPENACCESSMODE" ElementId="#BABDIAJA">
          <Description>XDBRepositoryEvent Type Subprograms</Description>
          <Parameters>
            <Parameter Name="EV">Event of XDBRepositoryEvent type</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETOPENDENYMODE" ElementId="#BABJCABH">
          <Description>XDBRepositoryEvent Type Subprograms</Description>
          <Parameters>
            <Parameter Name="EV">Event of XDBRepositoryEvent type</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETOUTPUTSTREAM" ElementId="#BABJCJFD">
          <Description>XDBRepositoryEvent Type Subprograms</Description>
          <Parameters>
            <Parameter Name="EV">Event of XDBRepositoryEvent type</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETPARAMETER" ElementId="#BABBAJIH">
          <Description>XDBRepositoryEvent Type Subprograms</Description>
          <Parameters>
            <Parameter Name="EV">Event of XDBRepositoryEvent type</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETPARENT" ElementId="#BABFFDJC">
          <Description>XDBRepositoryEvent Type Subprograms</Description>
          <Parameters>
            <Parameter Name="EV">Event of XDBRepositoryEvent type</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETPARENTNAME" ElementId="#BABHFEDB">
          <Description>XDBLink Type Subprograms</Description>
          <Parameters>
            <Parameter Name="LINK">Link</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETPARENTOID" ElementId="#BABHCGHF">
          <Description>XDBLink Type Subprograms</Description>
          <Parameters>
            <Parameter Name="LINK">Link</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETPARENTNAME" ElementId="#BABHFEDB">
          <Description>XDBPath Type Subprograms</Description>
          <Parameters>
            <Parameter Name="LINK">Link</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETPATH" ElementId="#BABGGGFA">
          <Description>XDBRepositoryEvent Type Subprograms</Description>
          <Parameters>
            <Parameter Name="EV">Event of XDBRepositoryEvent type</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETRESOURCE" ElementId="#BABDIAIE">
          <Description>XDBRepositoryEvent Type Subprograms</Description>
          <Parameters>
            <Parameter Name="EV">Event of XDBRepositoryEvent type</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETSCHEMA" ElementId="#BABJJCHE">
          <Description>XDBHandler Type Subprograms</Description>
        </SubProgram>
        <SubProgram Name="GETSOURCE" ElementId="#BABHCCAH">
          <Description>XDBHandler Type Subprograms</Description>
        </SubProgram>
        <SubProgram Name="GETUPDATEBYTECOUNT" ElementId="#BABJHJHJ">
          <Description>XDBRepositoryEvent Type Subprograms</Description>
          <Parameters>
            <Parameter Name="EV">Event of XDBRepositoryEvent type</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETUPDATEBYTEOFFSET" ElementId="#BABCHBCE">
          <Description>XDBRepositoryEvent Type Subprograms</Description>
          <Parameters>
            <Parameter Name="EV">Event of XDBRepositoryEvent type</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETXDBEVENT" ElementId="#BABECEGB">
          <Description>XDBRepositoryEvent Type Subprograms</Description>
          <Parameters>
            <Parameter Name="EV">Event of XDBRepositoryEvent type</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ISNULL" ElementId="#BABICCBG">
          <Description>XDBEvent Type Subprograms
XDBRepositoryEvent Type Subprograms
XDBHandlerList Type Subprograms
XDBHandler Type Subprograms
XDBPath Type Subprograms</Description>
          <Parameters>
            <Parameter Name="EV">Event of specified type</Parameter>
            <Parameter Name="HL">Handler list</Parameter>
            <Parameter Name="HANDLER">Handler</Parameter>
            <Parameter Name="PATH">Path</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVE" ElementId="#BABJDEHE">
          <Description>XDBHandlerList Type Subprograms</Description>
          <Parameters>
            <Parameter Name="HL">Handler list</Parameter>
            <Parameter Name="HANDLER">Handler</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETRENDERPATH" ElementId="#BABDFFIB">
          <Description>XDBRepositoryEvent Type Subprograms</Description>
          <Parameters>
            <Parameter Name="EV">XDB Repository Event object</Parameter>
            <Parameter Name="PATH">Path of the resource containing the rendered contents</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETRENDERSTREAM" ElementId="#BABBIBDF">
          <Description>XDBRepositoryEvent Type Subprograms</Description>
          <Parameters>
            <Parameter Name="EV">XDBRepositoryEvent object</Parameter>
            <Parameter Name="ISTR">Input stream from which to get the rendered contents</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_XMLDOM" Url="http://docs.oracle.com/database/121/ARPLS/d_xmldom.htm">
      <Description>The DBMS_XMLDOM package is used to access XMLType objects, and implements the Document Object Model (DOM), an application programming interface for HTML and XML documents.</Description>
    </Package>
    <Package Name="DBMS_XMLGEN" Url="http://docs.oracle.com/database/121/ARPLS/d_xmlgen.htm">
      <Description>The DBMS_XMLGEN package converts the results of a SQL query to a canonical XML format. The package takes an arbitrary SQL query as input, converts it to XML format, and returns the result as a CLOB. This package is similar to the DBMS_XMLQUERY package, except that it is written in C and compiled into the kernel. This package can only be run on the database.</Description>
      <SubPrograms>
        <SubProgram Name="CLOSECONTEXT" ElementId="#i1014938">
          <Description>Closes the context and releases all resources</Description>
          <Parameters>
            <Parameter Name="CTX">The context handle to close.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CONVERT" ElementId="#i1013100">
          <Description>Converts the XML into the escaped or unescaped XML equivalent</Description>
          <Parameters>
            <Parameter Name="XMLDATA">The XML CLOB data to be encoded or decoded.</Parameter>
            <Parameter Name="FLAG">The flag setting; ENTITY_ENCODE (default) for encode, and ENTITY_DECODE for decode.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETNUMROWSPROCESSED" ElementId="#i1013173">
          <Description>Gets the number of SQL rows that were processed in the last call to GETXML Functions</Description>
          <Parameters>
            <Parameter Name="CTX">The context handle obtained from the NEWCONTEXT Functions call.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETXML" ElementId="#i1013206">
          <Description>Gets the XML document</Description>
          <Parameters>
            <Parameter Name="SQLQUERY">The SQL query string.</Parameter>
            <Parameter Name="DTDORSCHEMA">Generate a DTD or a schema? Only NONE is supported.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETXMLTYPE" ElementId="#i1015152">
          <Description>Gets the XML document and returns it as XMLType</Description>
          <Parameters>
            <Parameter Name="CTX">The context handle obtained from the newContext call.</Parameter>
            <Parameter Name="SQLQUERY">The SQL query string.</Parameter>
            <Parameter Name="DTDORSCHEMA">Generate a DTD or a schema? Only NONE is supported.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="NEWCONTEXT" ElementId="#CHEDFHIG">
          <Description>Creates a new context handle</Description>
          <Parameters>
            <Parameter Name="QUERY">The query, in the form of a VARCHAR, the result of which must be converted to XML.</Parameter>
            <Parameter Name="QUERYSTRING">The query string in the form of a PL/SQL ref cursor, the result of which must be converted to XML.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="NEWCONTEXTFROMHIERARCHY" ElementId="#CHDEGIDC">
          <Description>Obtains a handle to use in the GETXML Functions and other functions to get a hierarchical XML with recursive elements from the result</Description>
          <Parameters>
            <Parameter Name="QUERYSTRING">The query string, the result of which must be converted to XML. The query is a hierarchical query typically formed using a CONNECT BY clause, and the result must have the same property as the result set generated by a CONNECT BY query. The result set must have only two columns, the level number and an XML value. The level number is used to determine the hierarchical position of the XML value within the result XML document.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RESTARTQUERY" ElementId="#i1013303">
          <Description>Restarts the query to start fetching from the beginning</Description>
          <Parameters>
            <Parameter Name="CTX">The context handle corresponding to the current query.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETCONVERTSPECIALCHARS" ElementId="#i1013328">
          <Description>Sets whether special characters such as $, which are non-XML characters, should be converted or not to their escaped representation</Description>
          <Parameters>
            <Parameter Name="CTX">The context handle obtained from one of the NEWCONTEXT Functions call.</Parameter>
            <Parameter Name="CONV">TRUE indicates that conversion is needed.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETMAXROWS" ElementId="#i1013360">
          <Description>Sets the maximum number of rows to be fetched each time</Description>
          <Parameters>
            <Parameter Name="CTX">The context handle corresponding to the query executed.</Parameter>
            <Parameter Name="MAXROWS">The maximum number of rows to get for each call to GETXML Functions</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETNULLHANDLING" ElementId="#i1014818">
          <Description>Sets NULL handling options</Description>
          <Parameters>
            <Parameter Name="CTX">The context handle corresponding to the query executed.</Parameter>
            <Parameter Name="FLAG">The NULL handling option set.DROP_NULLS CONSTANT NUMBER:= 0; (Default) Leaves out the tag for NULL elements.NULL_ATTR CONSTANT NUMBER:= 1; Sets xsi:nil="true".EMPTY_TAG CONSTANT NUMBER:= 2; Sets, for example, &lt;foo/&gt;.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETROWSETTAG" ElementId="#i1013393">
          <Description>Sets the name of the element enclosing the entire result</Description>
        </SubProgram>
        <SubProgram Name="SETROWTAG" ElementId="#i1015722">
          <Description>Sets the name of the element enclosing each row of the result</Description>
          <Parameters>
            <Parameter Name="CTX">The context handle obtained from the NEWCONTEXT Functions call.</Parameter>
            <Parameter Name="ROWTAGNAME">The name of the ROW element. Passing NULL indicates that you do not want the ROW element present.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETSKIPROWS" ElementId="#i1010859">
          <Description>Sets the number of rows to skip every time before generating the XML.</Description>
          <Parameters>
            <Parameter Name="CTX">The context handle corresponding to the query executed.</Parameter>
            <Parameter Name="SKIPROWS">The number of rows to skip for each call to getXML.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="USEITEMTAGSFORCOLL" ElementId="#i1010963">
          <Description>Forces the use of the collection column name appended with the tag _ITEM for collection elements</Description>
          <Parameters>
            <Parameter Name="CTX">The context handle.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="USENULLATTRIBUTEINDICATOR" ElementId="#i1013950">
          <Description>Specifies whether to use an XML attribute to indicate NULLness, or to do it by omitting the inclusion of the particular entity in the XML document.</Description>
          <Parameters>
            <Parameter Name="CTX">Context handle.</Parameter>
            <Parameter Name="ATTRIND">Use attribute to indicate NULL?</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_XMLINDEX" Url="http://docs.oracle.com/database/121/ARPLS/d_xmlindex.htm">
      <Description>The DBMS_XMLINDEX package provides an interface to implement asychronous indexing.</Description>
      <SubPrograms>
        <SubProgram Name="CREATEDATEINDEX" ElementId="#BABJJCGF">
          <Description>Creates a secondary index for date values in the VALUE column of a PATH TABLE which is the storage table of an XMLIndex</Description>
          <Parameters>
            <Parameter Name="XML_INDEX_SCHEMA">Name of the owner of the XMLIndex</Parameter>
            <Parameter Name="XML_INDEX_NAME">Name of the XMLIndex</Parameter>
            <Parameter Name="DATE_INDEX_NAME">Name of the secondary index to be created for date values in the VALUE column of the PATH TABLE of XMLIndex named xml_index_name and owned by xml_index_schema</Parameter>
            <Parameter Name="XMLTYPENAME">The type to which values in the VALUE column of the path table are to be cast. Acceptable values are the following strings: DATETIME, TIME, DATE, GDAY, GMONTH, GYEAR, GYEARMONTH, GMONTHDAY.</Parameter>
            <Parameter Name="DATE_INDEX_CLAUSE">Storage clause to be applied to the date index during its creation. This is a string argument appended to the CREATE INDEX statement for creating the date index</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATENUMBERINDEX" ElementId="#CEGCHFGD">
          <Description>Creates a secondary index for number values in the VALUE column of a PATH TABLE which is the storage table of an XMLIndex</Description>
          <Parameters>
            <Parameter Name="XML_INDEX_SCHEMA">Name of the owner of the XMLIndex</Parameter>
            <Parameter Name="XML_INDEX_NAME">Name of the XMLIndex</Parameter>
            <Parameter Name="NUM_INDEX_NAME">Name of the secondary index to be created for number values in the VALUE column of the PATH TABLE of XMLIndex named xml_index_name and owned by xml_index_schema</Parameter>
            <Parameter Name="NUM_INDEX_CLAUSE">Storage clause to be applied to the number index during its creation. This is a string argument appended to the CREATE INDEX statement for creating the number index.</Parameter>
            <Parameter Name="XMLTYPENAME">The type to which values in the VALUE column of the path table are to be cast. Acceptable values are the following strings: FLOAT, DOUBLE, DECIMAL, INTEGER, NONPOSITIVEINTEGER, NEGATIVEINTEGER, LONG, INT, SHORT, BYTE, NONNEGATIVEINTEGER, UNSIGNEDLONG, UNSIGNEDINT, UNSIGNEDSHORT, UNSIGNEDBYTE, POSITIVEINTEGER.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROPPARAMETER" ElementId="#BABFJCIB">
          <Description>Drops the XMLIndex parameter string that is associated with a given parameter identifier.</Description>
          <Parameters>
            <Parameter Name="NAME">Identifier for parameter string</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MODIFYPARAMETER" ElementId="#BABFEAJI">
          <Description>Modifies the XMLIndex parameter string that is associated with a given parameter name</Description>
          <Parameters>
            <Parameter Name="NAME">Identifier for parameter string</Parameter>
            <Parameter Name="PARAMETER">XMLIndex parameter clause that can appear in a CREATE INDEX or an ALTER INDEX statement</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PROCESS_PENDING" ElementId="#BABGBCDD">
          <Description>Processes pending rows for a NONBLOCKING ALTER INDEX OPERATION on an XMLIndex</Description>
          <Parameters>
            <Parameter Name="XML_INDEX_SCHEMA">Name of the owner of the XMLIndex</Parameter>
            <Parameter Name="XML_INDEX_NAME">Name of the XMLIndex to be altered using NONBLOCKING ALTER INDEX OPERATION</Parameter>
            <Parameter Name="PENDING_ROW_COUNT">Number of pending rows to be processed</Parameter>
            <Parameter Name="ERROR_ROW_COUNT">Number of rows for which indexing may have failed because of an error</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REGISTERPARAMETER" ElementId="#BABDFBEI">
          <Description>Registers a parameter string and XMLIndex parameter string pair in XDB</Description>
          <Parameters>
            <Parameter Name="NAME">Identifier for parameter string</Parameter>
            <Parameter Name="PARAMETER">XMLIndex parameter clause that can appear in a CREATE INDEX or an ALTER INDEX statement</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SYNCINDEX" ElementId="#CEGCHBDC">
          <Description>Synchronizes the index manually</Description>
          <Parameters>
            <Parameter Name="XML_INDEX_SCHEMA">Name of the owner of the XMLIndex</Parameter>
            <Parameter Name="XML_SCHEMA_NAME">Name of the XMLIndex</Parameter>
            <Parameter Name="PARTITION_NAME">[Currently not supported]</Parameter>
            <Parameter Name="REINDEX">Default is FALSE. If set to TRUE, this drops the secondary indexes and recreates them later so that they can be bulk-loaded.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_XMLPARSER" Url="http://docs.oracle.com/database/121/ARPLS/d_xmlpar.htm">
      <Description>Using DBMS_XMLPARSER, you can access the contents and structure of XML documents. XML describes a class of data XML document objects. It partially describes the behavior of computer programs which process them. By construction, XML documents are conforming SGML documents.</Description>
      <SubPrograms>
        <SubProgram Name="FREEPARSER" ElementId="#i1006286">
          <Description>Frees a parser object.</Description>
        </SubProgram>
        <SubProgram Name="GETDOCTYPE" ElementId="#i1006330">
          <Description>Gets parsed DTD.</Description>
        </SubProgram>
        <SubProgram Name="GETDOCUMENT" ElementId="#i1006352">
          <Description>Gets DOM document.</Description>
        </SubProgram>
        <SubProgram Name="GETRELEASEVERSION" ElementId="#i1006375">
          <Description>Returns the release version of Oracle XML Parser for PL/SQL.</Description>
        </SubProgram>
        <SubProgram Name="GETVALIDATIONMODE" ElementId="#i1006407">
          <Description>Returns validation mode.</Description>
        </SubProgram>
        <SubProgram Name="NEWPARSER" ElementId="#i1007198">
          <Description>Returns a new parser instance</Description>
        </SubProgram>
        <SubProgram Name="PARSE" ElementId="#i1006453">
          <Description>Parses XML stored in the given url/file.</Description>
        </SubProgram>
        <SubProgram Name="PARSEBUFFER" ElementId="#i1003782">
          <Description>Parses XML stored in the given buffer</Description>
        </SubProgram>
        <SubProgram Name="PARSECLOB" ElementId="#i1003811">
          <Description>Parses XML stored in the given clob</Description>
        </SubProgram>
        <SubProgram Name="PARSEDTD" ElementId="#CHDGFCBA">
          <Description>Parses DTD stored in the given url/file</Description>
        </SubProgram>
        <SubProgram Name="PARSEDTDBUFFER" ElementId="#CHDFFJDA">
          <Description>Parses DTD stored in the given buffer</Description>
        </SubProgram>
        <SubProgram Name="PARSEDTDCLOB" ElementId="#i1003909">
          <Description>Parses DTD stored in the given clob</Description>
        </SubProgram>
        <SubProgram Name="SETBASEDIR" ElementId="#i1003944">
          <Description>Sets base directory used to resolve relative URLs.</Description>
        </SubProgram>
        <SubProgram Name="SETDOCTYPE" ElementId="#i1006592">
          <Description>Sets DTD.</Description>
        </SubProgram>
        <SubProgram Name="SETERRORLOG" ElementId="#CHDHJJIG">
          <Description>Sets errors to be sent to the specified file</Description>
        </SubProgram>
        <SubProgram Name="SETPRESERVEWHITESPACE" ElementId="#i1004028">
          <Description>Sets white space preserve mode</Description>
        </SubProgram>
        <SubProgram Name="SETVALIDATIONMODE" ElementId="#i1004056">
          <Description>Sets validation mode.</Description>
        </SubProgram>
        <SubProgram Name="SHOWWARNINGS" ElementId="#i1006530">
          <Description>Turns warnings on or off.</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_XMLQUERY" Url="http://docs.oracle.com/database/121/ARPLS/d_xmlque.htm">
      <Description>DBMS_XMLQUERY provides database-to-XMLType functionality. Whenever possible, use DBMS_XMLGEN, a built-in package in C, instead of DBMS_XMLQUERY.</Description>
      <SubPrograms>
        <SubProgram Name="CLOSECONTEXT" ElementId="#i1032651">
          <Description>Closes or deallocates a particular query context.</Description>
        </SubProgram>
        <SubProgram Name="GETDTD" ElementId="#i1032867">
          <Description>Generates the DTD.</Description>
        </SubProgram>
        <SubProgram Name="GETEXCEPTIONCONTENT" ElementId="#i1032681">
          <Description>Returns the thrown exception's error code and error message.</Description>
        </SubProgram>
        <SubProgram Name="GETNUMROWSPROCESSED" ElementId="#i1032765">
          <Description>Returns the number of rows processed for the query.</Description>
        </SubProgram>
        <SubProgram Name="GETVERSION" ElementId="#i1032787">
          <Description>Prints the version of the XSU in use.</Description>
        </SubProgram>
        <SubProgram Name="GETXML" ElementId="#i1032793">
          <Description>Generates the XML document.</Description>
        </SubProgram>
        <SubProgram Name="NEWCONTEXT" ElementId="#i1033802">
          <Description>Creates a query context and it returns the context handle.</Description>
        </SubProgram>
        <SubProgram Name="PROPAGATEORIGINALEXCEPTION" ElementId="#i1032972">
          <Description>Tells the XSU that if an exception is raised, and is being thrown, the XSU should throw the very exception raised; rather then, wrapping it with an OracleXMLSQLException.</Description>
        </SubProgram>
        <SubProgram Name="REMOVEXSLTPARAM" ElementId="#i1032925">
          <Description>Removes a particular top-level stylesheet parameter.</Description>
        </SubProgram>
        <SubProgram Name="SETBINDVALUE" ElementId="#i1033007">
          <Description>Sets a value for a particular bind name.</Description>
        </SubProgram>
        <SubProgram Name="SETCOLLIDATTRNAME" ElementId="#i1033127">
          <Description>Sets the name of the id attribute of the collection element's separator tag.</Description>
        </SubProgram>
        <SubProgram Name="SETDATAHEADER" ElementId="#i1033166">
          <Description>Sets the XML data header.</Description>
        </SubProgram>
        <SubProgram Name="SETDATEFORMAT" ElementId="#i1033212">
          <Description>Sets the format of the generated dates in the XML document.</Description>
        </SubProgram>
        <SubProgram Name="SETENCODINGTAG" ElementId="#i1033250">
          <Description>Sets the encoding processing instruction in the XML document.</Description>
        </SubProgram>
        <SubProgram Name="SETERRORTAG" ElementId="#i1027884">
          <Description>Sets the tag to be used to enclose the XML error documents.</Description>
        </SubProgram>
        <SubProgram Name="SETMAXROWS" ElementId="#i1033359">
          <Description>Sets the maximum number of rows to be converted to XML.</Description>
        </SubProgram>
        <SubProgram Name="SETMETAHEADER" ElementId="#i1033409">
          <Description>Sets the XML meta header.</Description>
        </SubProgram>
        <SubProgram Name="SETRAISEEXCEPTION" ElementId="#i1033437">
          <Description>Tells the XSU to throw the raised exceptions.</Description>
        </SubProgram>
        <SubProgram Name="SETRAISENOROWSEXCEPTION" ElementId="#i1033466">
          <Description>Tells the XSU to throw or not to throw an OracleXMLNoRowsException in the case when for one reason or another, the XML document generated is empty.</Description>
        </SubProgram>
        <SubProgram Name="SETROWIDATTRNAME" ElementId="#i1033512">
          <Description>Sets the name of the id attribute of the row enclosing tag.</Description>
        </SubProgram>
        <SubProgram Name="SETROWIDATTRVALUE" ElementId="#i1033541">
          <Description>Specifies the scalar column whose value is to be assigned to the id attribute of the row enclosing tag.</Description>
        </SubProgram>
        <SubProgram Name="SETROWSETTAG" ElementId="#i1033570">
          <Description>Sets the tag to be used to enclose the XML dataset.</Description>
        </SubProgram>
        <SubProgram Name="SETROWTAG" ElementId="#i1033598">
          <Description>Sets the tag to be used to enclose the XML element.</Description>
        </SubProgram>
        <SubProgram Name="SETSKIPROWS" ElementId="#i1028143">
          <Description>Sets the number of rows to skip.</Description>
        </SubProgram>
        <SubProgram Name="SETSQLTOXMLNAMEESCAPING" ElementId="#i1033681">
          <Description>This turns on or off escaping of XML tags in the case that the SQL object name, which is mapped to a XML identifier, is not a valid XML identifier.</Description>
        </SubProgram>
        <SubProgram Name="SETSTYLESHEETHEADER" ElementId="#i1028172">
          <Description>Sets the stylesheet header.</Description>
        </SubProgram>
        <SubProgram Name="SETTAGCASE" ElementId="#i1033636">
          <Description>Specified the case of the generated XML tags.</Description>
        </SubProgram>
        <SubProgram Name="SETXSLT" ElementId="#i1028208">
          <Description>Registers a stylesheet to be applied to generated XML.</Description>
        </SubProgram>
        <SubProgram Name="SETXSLTPARAM" ElementId="#i1028264">
          <Description>Sets the value of a top-level stylesheet parameter.</Description>
        </SubProgram>
        <SubProgram Name="USENULLATTRIBUTEINDICATOR" ElementId="#i1033052">
          <Description>Specifies weather to use an XML attribute to indicate NULLness.</Description>
        </SubProgram>
        <SubProgram Name="USETYPEFORCOLLELEMTAG" ElementId="#i1033080">
          <Description>Tells the XSU to use the collection element's type name as the collection element tag name.</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_XMLSAVE" Url="http://docs.oracle.com/database/121/ARPLS/d_xmlsav.htm">
      <Description>DBMS_XMLSAVE provides XML to database-type functionality.</Description>
      <SubPrograms>
        <SubProgram Name="CLEARKEYCOLUMNLIST" ElementId="#i1048316">
          <Description>Clears the key column list.</Description>
        </SubProgram>
        <SubProgram Name="CLEARUPDATECOLUMNLIST" ElementId="#i1048348">
          <Description>Clears the update column list.</Description>
        </SubProgram>
        <SubProgram Name="CLOSECONTEXT" ElementId="#i1048375">
          <Description>It closes/deallocates a particular save context.</Description>
        </SubProgram>
        <SubProgram Name="DELETEXML" ElementId="#i1048457">
          <Description>Deletes records specified by data from the XML document, from the table specified at the context creation time.</Description>
        </SubProgram>
        <SubProgram Name="GETEXCEPTIONCONTENT" ElementId="#i1048506">
          <Description>Returns the thrown exception's error code and error message.</Description>
        </SubProgram>
        <SubProgram Name="INSERTXML" ElementId="#i1049047">
          <Description>Inserts the XML document into the table specified at the context creation time.</Description>
        </SubProgram>
        <SubProgram Name="NEWCONTEXT" ElementId="#i1048451">
          <Description>Creates a save context, and returns the context handle.</Description>
        </SubProgram>
        <SubProgram Name="PROPAGATEORIGINALEXCEPTION" ElementId="#i1048621">
          <Description>Tells the XSU that if an exception is raised, and is being thrown, the XSU should throw the very exception raised; rather then, wrapping it with an OracleXMLSQLException.</Description>
        </SubProgram>
        <SubProgram Name="REMOVEXSLTPARAM" ElementId="#i1048909">
          <Description>Removes the value of a top-level stylesheet parameter</Description>
        </SubProgram>
        <SubProgram Name="SETBATCHSIZE" ElementId="#i1048725">
          <Description>Changes the batch size used during DML operations.</Description>
        </SubProgram>
        <SubProgram Name="SETCOMMITBATCH" ElementId="#i1048754">
          <Description>Sets the commit batch size.</Description>
        </SubProgram>
        <SubProgram Name="SETDATEFORMAT" ElementId="#i1049668">
          <Description>Sets the format of the generated dates in the XML document.</Description>
        </SubProgram>
        <SubProgram Name="SETIGNORECASE" ElementId="#i1048656">
          <Description>The XSU does mapping of XML elements to database.</Description>
        </SubProgram>
        <SubProgram Name="SETKEYCOLUMN" ElementId="#i1048827">
          <Description>This methods adds a column to the key column list.</Description>
        </SubProgram>
        <SubProgram Name="SETPRESERVEWHITESPACE" ElementId="#i1048792">
          <Description>Tells the XSU whether to preserve whitespace or not.</Description>
        </SubProgram>
        <SubProgram Name="SETROWTAG" ElementId="#i1045022">
          <Description>Names the tag used in the XML document to enclose the XML elements corresponding to database.</Description>
        </SubProgram>
        <SubProgram Name="SETSQLTOXMLNAMEESCAPING" ElementId="#i1045165">
          <Description>This turns on or off escaping of XML tags in the case that the SQL object name, which is mapped to a XML identifier, is not a valid XML identifier.</Description>
        </SubProgram>
        <SubProgram Name="SETUPDATECOLUMN" ElementId="#i1045194">
          <Description>Adds a column to the update column list.</Description>
        </SubProgram>
        <SubProgram Name="SETXSLT" ElementId="#i1045323">
          <Description>Registers a XSL transform to be applied to the XML to be saved.</Description>
        </SubProgram>
        <SubProgram Name="SETXSLTPARAM" ElementId="#i1045379">
          <Description>Sets the value of a top-level stylesheet parameter.</Description>
        </SubProgram>
        <SubProgram Name="UPDATEXML" ElementId="#i1045488">
          <Description>Updates the table given the XML document.</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_XMLSCHEMA" Url="http://docs.oracle.com/database/121/ARPLS/d_xmlsch.htm">
      <Description>DBMS_XMLSCHEMA package provides procedures to manage XML schemas. It is created by script dbmsxsch.sql during Oracle database installation.</Description>
      <SubPrograms>
        <SubProgram Name="COMPILESCHEMA" ElementId="#BABDFDJF">
          <Description>Used to re-compile an already registered XML schema. This is useful for bringing a schema in an invalid state to a valid state.</Description>
          <Parameters>
            <Parameter Name="SCHEMAURL">URL identifying the schema</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="COPYEVOLVE" ElementId="#i1008264">
          <Description>Evolves registered schemas so that existing XML instances remain valid</Description>
          <Parameters>
            <Parameter Name="SCHEMAURLS">VARRAY of URLs of all schemas to be evolved. Should include the dependent schemas. Unless the FORCE parameter is TRUE, URLs should be in the order of dependency.</Parameter>
            <Parameter Name="NEWSCHEMAS">VARRAY of new schema documents. Should be specified in same order as the corresponding URLs.</Parameter>
            <Parameter Name="TRANSFORMS">VARRAY of transforming XSL documents to be applied to schema-based documents. Should be specified in same order as the corresponding URLs. Optional if no transformations are required.</Parameter>
            <Parameter Name="PRESERVEOLDDOCS">Default is FALSE, and temporary tables with old data are dropped. If TRUE, these table are still available after schema evolution is complete.</Parameter>
            <Parameter Name="MAPTABNAME">Specifies the name of the table mapping permanent to temporary tables during the evolution process. Valid columns are:SCHEMA_URL - VARCHAR2(700) - URL of schema to which this table conformsSCHEMA_OWNER -VARCHAR2(30) - Owner of the schemaELEMENT_NAME - VARCHAR2(256)- Element to which this table conformsTAB_NAME - VARCHAR2(65) - Qualified table name: &lt;owner_name&gt;.&lt;table_name&gt;COL_NAME - VARCHAR2(4000) - Name of the column (NULL for XMLType tables)TEMP_TABNAME - VARCHAR2(30) - Name of temporary tables which holds data for this table.</Parameter>
            <Parameter Name="GENERATETABLES">Default is TRUE, and new tables will be generated.If FALSE:new tables will not be generated after registration of new schemaspreserveolddocs must be TRUEmaptablename must be non-NULL</Parameter>
            <Parameter Name="FORCE">Default is FALSE.If TRUE, ignores errors generated during schema evolution. Used when there are circular dependencies among schemas to ensure that all schemas are stored despite possible errors in registration.</Parameter>
            <Parameter Name="SCHEMAOWNERS">VARRAY of names of schema owners. Should be specified in same order as the corresponding URLs. Default is NULL, assuming that all schemas are owned by the current user.</Parameter>
            <Parameter Name="PARALLELDEGREE">Specifies the degree of parallelism to be used in a PARALLEL hint during the data copy stage of the evolution. If this is 0 (default), the PARALLEL hint will not be given in the data copy statements.</Parameter>
            <Parameter Name="OPTIONS">Currently, the only supported option is COPYEVOLVE_BINARY_XML which lets you register the new schemas for binary XML and create the new tables/columns with binary XML as the storage type.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETESCHEMA" ElementId="#i1007471">
          <Description>Removes the schema from the database</Description>
          <Parameters>
            <Parameter Name="SCHEMAURL">URL identifying the schema to be deleted</Parameter>
            <Parameter Name="DELETE_OPTION">Delete options:DELETE_RESTRICT - Schema deletion fails if there are any tables or schemas that depend on this schemaDELETE_INVALIDATE - Schema deletion does not fail if there are any dependencies. Instead, it simply invalidates all dependent objects.DELETE_CASCADE - Schema deletion will also drop all default SQL types and default tables. However the deletion fails if there are any stored instances conforming to this schema.DELETE_CASCADE_FORCE - Similar to DELETE_CASCADE except that it does not check for any stored instances conforming to this schema. Also, it ignores any errors.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GENERATESCHEMA" ElementId="#i1009760">
          <Description>Generates an XML schema from an oracle type name</Description>
          <Parameters>
            <Parameter Name="SCHEMANAME">Name of the database schema containing the type</Parameter>
            <Parameter Name="TYPENAME">Name of the Oracle type</Parameter>
            <Parameter Name="ELEMENTNAME">The name of the top level element in the XML Schema. Defaults to typename.</Parameter>
            <Parameter Name="RECURSE">Whether or not to also generate schema for all types referred to by the type specified</Parameter>
            <Parameter Name="ANNOTATE">Whether or not to put the SQL annotations in the XML Schema</Parameter>
            <Parameter Name="EMBEDCOLL">Determines whether the collections should be embedded in the type which refers to them, or create a complextype. Cannot be FALSE if annotations are turned on</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GENERATESCHEMAS" ElementId="#i1007548">
          <Description>Generates several XML schemas from an oracle type name</Description>
          <Parameters>
            <Parameter Name="SCHEMANAME">Name of the database schema containing the type</Parameter>
            <Parameter Name="TYPENAME">Name of the Oracle type</Parameter>
            <Parameter Name="ELEMENTNAME">The name of the top level element in the XML Schema defaults to typeName</Parameter>
            <Parameter Name="SCHEMAURL">Specifies base URL where schemas will be stored, needed by top level schema for import statement</Parameter>
            <Parameter Name="ANNOTATE">Whether or not to put the SQL annotations in the XML Schema</Parameter>
            <Parameter Name="EMBEDCOLL">Determines whether the collections be embedded in the type which refers to them, or create a complextype. Cannot be FALSE if annotations are turned on</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="INPLACEEVOLVE" ElementId="#BABEJBJE">
          <Description>Evolves registered schemas by propagating schema changes to object types and tables</Description>
          <Parameters>
            <Parameter Name="SCHEMAURL">URL of the schema to evolve</Parameter>
            <Parameter Name="DIFFXML">Changes to be applied to the schema. This is an XML document conforming to the XDIFF schema and specifies what changes need to be applied and the locations in the schema document where the changes are to be applied.</Parameter>
            <Parameter Name="FLAGS">The following bits may be set in this parameter to control the behavior of this procedure:INPLACE_EVOLVE (value 1, meaning that bit 1 is on) – Perform in-place XML schema evolution: construct a new XML schema and validate it (against the XML schema for XML schemas); construct the DDL statements needed to evolve the instance-document disk structures, execute the DDL statements, and replace the old XML schema with the new.INPLACE_TRACE (value 2, meaning that bit 2 is on) – Perform all steps necessary for in-place evolution, except executing the DDL statements and overwriting the old XML schema with the new, then write both the DDL statements and the new XML schema to a trace file.That is, each of the bits constructs the new XML schema, validates it, and determines the steps needed to evolve the disk structures underlying the instance documents. In addition:Bit INPLACE_EVOLVE carries out those evolution steps and replaces the old XML schema with the new.Bit INPLACE_TRACE saves the evolution steps and the new XML schema in a trace file (it does not carry out the evolution steps)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PURGESCHEMA" ElementId="#BABEGJDD">
          <Description>Removes the XML schema</Description>
          <Parameters>
            <Parameter Name="SCHEMAID">ID of the schema to be purged</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REGISTERSCHEMA" ElementId="#i1003177">
          <Description>Registers the specified schema for use by Oracle. This schema can then be used to store documents conforming to this.</Description>
        </SubProgram>
        <SubProgram Name="REGISTERURI" ElementId="#i1003294">
          <Description>Registers an XML schema specified by a URI name</Description>
          <Parameters>
            <Parameter Name="SCHEMAURL">Uniquely identifies the schema document. Can be used inside schemaLocation attribute of XML Schema import element.</Parameter>
            <Parameter Name="SCHEMADOCURI">Pathname (URI) corresponding to the physical location of the schema document. The URI path could be based on HTTP, FTP, DB or Oracle XML DB protocols. This function constructs a URIType instance using the urifactory, and invokes the REGISTERSCHEMA Procedures.</Parameter>
            <Parameter Name="LOCAL">Determines whether this is a local or global schema. By default, all schemas are registered as local schemas, under /sys/schemas/ &lt;username&gt;/... If a schema is registered as global, it is added under /sys/schemas/PUBLIC/... The user needs write privileges on the directory to register a global schema.</Parameter>
            <Parameter Name="GENTYPES">Determines whether the compiler generate object types. By default, TRUE.</Parameter>
            <Parameter Name="GENBEAN">Determines whether the compiler generate Java beans. By default, FALSE.</Parameter>
            <Parameter Name="GENTABLES">Determines whether the compiler generate default tables. TRUE by default.</Parameter>
            <Parameter Name="FORCE">TRUE: schema registration will not raise errors. Instead, it creates an invalid XML schema object in case of any errors. By default, the value of this parameter is FALSE.</Parameter>
            <Parameter Name="OWNER">This parameter specifies the name of the database user owning the XML schema object. By default, the user registering the schema owns the XML schema object. This parameter can be used to register a XML schema to be owned by a different database user.</Parameter>
            <Parameter Name="OPTIONS">Additional options to specify how the schema should be registered. The various options are represented as bits of an integer and the options parameter should be constructed by doing a BITOR of the desired bits. Possible bits:REGISTER_NODOCID - this will suppress the creation of the DOCID column for out of line tables. This is a storage optimization which might be desirable when we do not need to join back to the document table (for example if we do not care about rewriting certain queries that could be rewritten by making use of the DOCID column)</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_XMLSCHEMA_ANNOTATE" Url="http://docs.oracle.com/database/121/ARPLS/d_xmlschema_annotate.htm">
      <Description>The DBMS_XMLSCHEMA_ANNOTATE package provides an interface to manage and configure the structured storage model, mainly through the use of pre-registration schema annotations.</Description>
      <SubPrograms>
        <SubProgram Name="ADDXDBNAMESPACE" ElementId="#CIACDDCB">
          <Description>Adds the XDB namespace required for XDB annotation</Description>
          <Parameters>
            <Parameter Name="XMSCHEMA">Gets an XML Schema as XMLTYPE, performs the annotation and returns it</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DISABLEDEFAULTTABLECREATION" ElementId="#CIAEBGAD">
          <Description>Prevents the creation of a table for the top-level element by adding a default table attribute with an empty value to the element</Description>
          <Parameters>
            <Parameter Name="XMLSCHEMA">XML schema to be annotated</Parameter>
            <Parameter Name="GLOBALELEMENTNAME">Name of the global element in the schema</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DISABLEMAINTAINDOM" ElementId="#CIABJECB">
          <Description>Sets the DOM fidelity attribute to FALSE</Description>
          <Parameters>
            <Parameter Name="XMLSCHEMA">The XML schema to be annotated</Parameter>
            <Parameter Name="COMPLEXTYPENAME">The name of the complex type</Parameter>
            <Parameter Name="OVERWRITE">A boolean that indicates whether or not the procedure overwrites element attributes. The default is TRUE</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ENABLEDEFAULTTABLECREATION" ElementId="#CIAIADID">
          <Description>Enables the creation of ALL top level tables by removing the empty default table name annotation</Description>
          <Parameters>
            <Parameter Name="XMLSCHEMA">The XML schema to be annotated</Parameter>
            <Parameter Name="GLOABLELEMENTNAME">Name of the global element in the schema</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ENABLEMAINTAINDOM" ElementId="#CIAJFABE">
          <Description>Sets the DOM fidelity attribute to TRUE</Description>
          <Parameters>
            <Parameter Name="XMLSCHEMA">The XML schema to be annotated</Parameter>
            <Parameter Name="COMPLEXTYPENAME">The name of the complex type</Parameter>
            <Parameter Name="OVERWRITE">A boolean that indicates whether or not the procedure overwrites element attributes. The default is TRUE</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETSCHEMAANNOTATIONS" ElementId="#CIABBEIJ">
          <Description>Creates a document containing the differences between the annotated XML schema and the original XML schema</Description>
          <Parameters>
            <Parameter Name="XMLSCHEMA">The original XML schema</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GETSIDXDEFFROMVIEW" ElementId="#CIAICIEF">
          <Description>Takes a XMLTABLE view definition on a xmltype column or table and it returns a CLOB which can be used as parameter to create a structured xmlindex that backs up the XMLTABLE view as relational table</Description>
          <Parameters>
            <Parameter Name="VIEWNAME">The original XML schema</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PRINTWARNINGS" ElementId="#CIAEGJFJ">
          <Description>Lets a user raise or suppress a warning if an annotation maps to zero nodes in the XML schema</Description>
          <Parameters>
            <Parameter Name="VAL">For the NO MATCHING ELEMENTS FOUND error message to be raised val must be set to TRUE. In cases in which user wishes to suppress this warning, set to FALSE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVEANYSTORAGE" ElementId="#CIAJGEEF">
          <Description>Removes the setting of the SQL type from the ANY child of the complex type with the given name</Description>
          <Parameters>
            <Parameter Name="XMLSCHEMA">The XML schema to be annotated.</Parameter>
            <Parameter Name="COMPLEXTYPENAME">The name of the complex type.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVEDEFAULTTABLE" ElementId="#CIAGFGAC">
          <Description>Removes any default table attribute given for the element. After calling this procedure, the system generates table names</Description>
          <Parameters>
            <Parameter Name="XMLSCHEMA">XML schema to be annotated</Parameter>
            <Parameter Name="GLOBALELEMENTNAME">Name of the global element in the schema</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVEMAINTAINDOM" ElementId="#CIAHIGDB">
          <Description>Removes all annotations used to maintain DOM from the given schema</Description>
          <Parameters>
            <Parameter Name="XMLSCHEMA">The XML schema to be annotated</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVEOUTOFLINE" ElementId="#CIACDGCB">
          <Description>Removes any existing SQLInline attributes to prevent out-of-line storage</Description>
        </SubProgram>
        <SubProgram Name="REMOVESQLCOLLTYPE" ElementId="#CIACDACE">
          <Description>Removes a SQL collection type.</Description>
          <Parameters>
            <Parameter Name="XMLSCHEMA">The XML schema to be annotated</Parameter>
            <Parameter Name="ELEMENTNAME">The element name</Parameter>
            <Parameter Name="GLOBALOBJECT">The global object (global complex type or global element)</Parameter>
            <Parameter Name="GLOBALNAME">The name of the global object</Parameter>
            <Parameter Name="LOCALELEMENTNAME">The name of a local element that descends from the global element</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVESQLNAME" ElementId="#CIADBBHJ">
          <Description>Removes a SQLNAME from a global element</Description>
          <Parameters>
            <Parameter Name="XMLSCHEMA">XML schema to be annotated</Parameter>
            <Parameter Name="GLOBALOBJECT">Global object (global complex type or global element)</Parameter>
            <Parameter Name="GLOBALOBJECTNAME">Name of the global object</Parameter>
            <Parameter Name="LOCALOBJECT">Object descended from the global object</Parameter>
            <Parameter Name="LOCALOBJECTNAME">Name of the local object</Parameter>
            <Parameter Name="SQLNAME">Name of the SQL attribute that corresponds to the element defined in the XML schema</Parameter>
            <Parameter Name="OVERWRITE">Boolean that indicates whether or not the procedure overwrites element attributes. The default is TRUE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVESQLTYPE" ElementId="#CIAJHIEJ">
          <Description>Removes a SQL type</Description>
          <Parameters>
            <Parameter Name="XMLSCHEMA">XML schema to be annotated.</Parameter>
            <Parameter Name="GLOBALOBJECT">Global object (global complex type or global element)</Parameter>
            <Parameter Name="GLOBALELEMENTNAME">Name of the global element.</Parameter>
            <Parameter Name="GLOBALOBJECTNAME">Name of the global object</Parameter>
            <Parameter Name="LOCALOBJECT">Object descended from the global object</Parameter>
            <Parameter Name="LOCALOBJECTNAME">Name of the local object</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVESQLTYPEMAPPING" ElementId="#CIAFFDGC">
          <Description>Removes the SQL type mapping for the given schema type.</Description>
          <Parameters>
            <Parameter Name="XMLSCHEMA">XML schema to be annotated</Parameter>
            <Parameter Name="SCHEMATYPENAME">Name of the schema type</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVETABLEPROPS" ElementId="#CIACFDHC">
          <Description>Removes the table storage properties from the CREATE TABLE statement</Description>
          <Parameters>
            <Parameter Name="XMLSCHEMA">XML schema to be annotated</Parameter>
            <Parameter Name="GLOBALELEMENTNAME">Name of the global element in the schema</Parameter>
            <Parameter Name="GLOBALOBJECT">Global object (global complex type or global element)</Parameter>
            <Parameter Name="GLOBALOBJECTNAME">Name of the global object</Parameter>
            <Parameter Name="LOCALELEMENTNAME">Name of a local element that descends from the global element</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVETIMESTAMPWITHTIMEZONE" ElementId="#CIAICJCC">
          <Description>Removes he setting of the TimeStampWithTimeZone datatype from all dateTime typed elements in the XML schema</Description>
          <Parameters>
            <Parameter Name="XMLSCHEMA">XML schema to be annotated</Parameter>
            <Parameter Name="SCHEMATYPENAME">Name of the schema type</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETANYSTORAGE" ElementId="#CIAGHDIF">
          <Description>Assigns a SQL datatype to the ANY child of the complex type with the given name</Description>
          <Parameters>
            <Parameter Name="XMLSCHEMA">XML schema to be annotated</Parameter>
            <Parameter Name="COMPLEXTYPENAME">Name of the complex type</Parameter>
            <Parameter Name="SQLTYPENAME">Name of the SQL type</Parameter>
            <Parameter Name="OVERWRITE">Boolean that indicates whether or not the procedure overwrites element attributes. The default is TRUE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETDEFAULTTABLE" ElementId="#CIAHABDI">
          <Description>Sets the name of the table for the specified global element</Description>
          <Parameters>
            <Parameter Name="XMLSCHEMA">XML schema to be annotated</Parameter>
            <Parameter Name="GLOBALELEMENTNAME">Name of the global element in the schema</Parameter>
            <Parameter Name="TABLENAME">Name being assigned to the table</Parameter>
            <Parameter Name="OVERWRITE">Boolean that indicates whether or not the procedure overwrites element attributes. The default is TRUE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETOUTOFLINE" ElementId="#CIAHBFAG">
          <Description>Sets the SQLInline attribute to FALSE</Description>
          <Parameters>
            <Parameter Name="XMLSCHEMA">The XML schema to be annotated.</Parameter>
            <Parameter Name="ELEMENTNAME">The element name</Parameter>
            <Parameter Name="ELEMENTTYPE">The element type</Parameter>
            <Parameter Name="DEFAULTTABLE">The name of the default table.</Parameter>
            <Parameter Name="GLOBALOBJECT">The global object (global complex type or global element)</Parameter>
            <Parameter Name="GLOBALOBJECTNAME">The name of the global object</Parameter>
            <Parameter Name="LOCALELEMENTNAME">The name of a local element that descends from the global element.</Parameter>
            <Parameter Name="REFERENCE">A reference to a global element</Parameter>
            <Parameter Name="OVERWRITE">A boolean that indicates whether or not the procedure overwrites element attributes. The default is TRUE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETSCHEMAANNOTATATIONS" ElementId="#CIADJADJ">
          <Description>Takes the annotated differences resulting from a call to DBMS_XMLSCHEMA_ANNOTATE.GETSCHEMAANNOTATIONS and patches them into the provided XML schema</Description>
        </SubProgram>
        <SubProgram Name="SETSQLCOLLTYPE" ElementId="#CIACAICA">
          <Description>Assigns a SQL type name for a collection</Description>
          <Parameters>
            <Parameter Name="XMLSCHEMA">The XML schema to be annotated</Parameter>
            <Parameter Name="ELEMENTNAME">The element name</Parameter>
            <Parameter Name="SQLCOLLTYPE">The SQL collection type</Parameter>
            <Parameter Name="GLOBALOBJECT">The global object (global complex type or global element)</Parameter>
            <Parameter Name="GLOBALOBJECTNAME">The name of the global object</Parameter>
            <Parameter Name="LOCALELEMENTNAME">The name of a local element that descends from the global element</Parameter>
            <Parameter Name="OVERWRITE">A boolean that indicates whether or not the procedure overwrites element attributes. The default is TRUE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETSQLNAME" ElementId="#CIAHAAHA">
          <Description>Assigns a name to the SQL attribute that corresponds to an element defined in the XML schema</Description>
          <Parameters>
            <Parameter Name="XMLSCHEMA">XML schema to be annotated</Parameter>
            <Parameter Name="GLOBALOBJECT">Global object (global complex type or global element)</Parameter>
            <Parameter Name="GLOBALOBJECTNAME">Name of the global object</Parameter>
            <Parameter Name="LOCALOBJECT">Object descended from the global object</Parameter>
            <Parameter Name="LOCALOBJECTNAME">Name of the local object</Parameter>
            <Parameter Name="SQLNAME">Name of the SQL attribute that corresponds to the element defined in the XML schema</Parameter>
            <Parameter Name="OVERWRITE">Boolean that indicates whether or not the procedure overwrites element attributes. The default is TRUE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETSQLTYPE" ElementId="#CIAJDJGA">
          <Description>Assigns a SQL type to a global object</Description>
          <Parameters>
            <Parameter Name="XMLSCHEMA">XML schema to be annotated</Parameter>
            <Parameter Name="GLOBALOBJECT">Global object (global complex type or global element)</Parameter>
            <Parameter Name="GLOBALOBJECTNAME">Name of the global object</Parameter>
            <Parameter Name="GLOBALELEMENTNAME">Name of the global element</Parameter>
            <Parameter Name="LOCALOBJECT">Object descended from the global object</Parameter>
            <Parameter Name="LOCALOBJECTNAME">Name of the local object</Parameter>
            <Parameter Name="SQLTYPE">SQL type assigned to the named global element</Parameter>
            <Parameter Name="OVERWRITE">Boolean that indicates whether or not the procedure overwrites element attributes. The default is TRUE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETSQLTYPEMAPPING" ElementId="#CIAHHFBE">
          <Description>Defines a mapping of schema type and SQL type</Description>
          <Parameters>
            <Parameter Name="XMLSCHEMA">XML schema to be annotated</Parameter>
            <Parameter Name="SCHEMATYPENAME">Schema type</Parameter>
            <Parameter Name="SQLTYPE">Name of the SQL type</Parameter>
            <Parameter Name="OVERWRITE">Boolean that indicates whether or not the procedure overwrites element attributes. The default is TRUE</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETTABLEPROPS" ElementId="#CIAIJDDD">
          <Description>Specifies properties in the TABLE storage clause that is appended to the default CREATE TABLE statement</Description>
          <Parameters>
            <Parameter Name="XMLSCHEMA">XML schema to be annotated</Parameter>
            <Parameter Name="GLOBALELEMENTNAME">Name of the global element in the schema</Parameter>
            <Parameter Name="TABLEPROPS">Table properties</Parameter>
            <Parameter Name="GLOBALOBJECT">Global object (global complex type or global element)</Parameter>
            <Parameter Name="GLOBALOBJECTNAME">Name of the global object</Parameter>
            <Parameter Name="LOCALELEMENTNAME">Name of a local element that descends from the global element</Parameter>
            <Parameter Name="OVERWRITE">Boolean that indicates whether or not the procedure overwrites element attributes. The default is TRUE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETTIMESTAMPWITHTIMEZONE" ElementId="#CIAJFBAC">
          <Description>Sets the TIMESTAMPWITHTIMEZONE datatype to all dateTime typed elements in the XML schema</Description>
          <Parameters>
            <Parameter Name="XMLSCHEMA">XML schema to be annotated</Parameter>
            <Parameter Name="OVERWRITE">Boolean that indicates whether or not the procedure overwrites element attributes. The default is TRUE.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_XMLSTORAGE_MANAGE" Url="http://docs.oracle.com/database/121/ARPLS/d_xmlstorage_man.htm">
      <Description>The DBMS_XMLSTORAGE_MANAGE package provides an interface to manage and modify XML storage after schema registration has been completed.</Description>
      <SubPrograms>
        <SubProgram Name="DISABLEINDEXESANDCONSTRAINTS" ElementId="#CHDIJDBB">
          <Description>Disables the indexes and constraints for XMLType tables and XMLType columns</Description>
          <Parameters>
            <Parameter Name="OWNER_NAME">Owner's name</Parameter>
            <Parameter Name="TABLE_NAME">Name of the XMLType table that the procedure is being performed on</Parameter>
            <Parameter Name="COLUMN_NAME">XMLType column name</Parameter>
            <Parameter Name="CLEAR">Boolean that when set to TRUE clears all stored index and constraint data for the table before the procedure executes. The default is FALSE, which does not clear them.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ENABLEINDEXESANDCONSTRAINTS" ElementId="#CHDBBDAD">
          <Description>Rebuilds all indexes and enables the constraints on an XMLType table including its child tables and out-of-line tables</Description>
          <Parameters>
            <Parameter Name="OWNER_USER">Owner's name</Parameter>
            <Parameter Name="TABLE_NAME">Name of the table that the indexes and constraints are being removed from</Parameter>
            <Parameter Name="COLUMN_NAME">Column name</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXCHANGEPOSTPROC" ElementId="#CHDDHJFI">
          <Description>Enable constraints after exchange partition</Description>
          <Parameters>
            <Parameter Name="OWNER_USER">Owner's name</Parameter>
            <Parameter Name="TABLE_NAME">Name of the table that the indexes and constraints are being removed from</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="EXCHANGEPREPROC" ElementId="#CHDJDIGH">
          <Description>Disable constraints before exchange partition</Description>
          <Parameters>
            <Parameter Name="OWNER_USER">Owner's name</Parameter>
            <Parameter Name="TABLE_NAME">Name of the table that the indexes and constraints are being removed from</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="INDEXXMLREFERENCES" ElementId="#CHDBIDDE">
          <Description>Creates unique indexes on the REF columns of the given XML type table or the XML type column of a given table</Description>
          <Parameters>
            <Parameter Name="OWNER_NAME">The owner's name</Parameter>
            <Parameter Name="TABLE_NAME">The table being indexed</Parameter>
            <Parameter Name="COLUMN_NAME">A column name. Not needed for XML type tables.</Parameter>
            <Parameter Name="INDEX_NAME">The name of the newly created index</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RENAMECOLLECTIONTABLE" ElementId="#CHDCFFJH">
          <Description>Renames a collection table to the given table name</Description>
          <Parameters>
            <Parameter Name="OWNER_NAME">The name of the owner</Parameter>
            <Parameter Name="COLUMN_NAME">An XMLType column that can be the starting point for specifying the collection table</Parameter>
            <Parameter Name="XPATH">The XPath expression that specifies the collection table</Parameter>
            <Parameter Name="COLLECTION_TABLE_NAME">The name of the collection table</Parameter>
            <Parameter Name="NAMESPACES">For Oracle Database 11g Release 2 (11.2) and higher. The namespaces used in XPath.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SCOPEXMLREFERENCES" ElementId="#CHDDCBAC">
          <Description>Scopes all XML references. Scoped REF types require less storage space and allow more efficient access than unscoped REF types</Description>
        </SubProgram>
        <SubProgram Name="XPATH2TABCOLMAPPING" ElementId="#CHDCECHD">
          <Description>Maps a path expression (in XPath notation or DOT notations) to the corresponding table name and column name</Description>
          <Parameters>
            <Parameter Name="OWNER_USER">Owner's name</Parameter>
            <Parameter Name="TABLE_NAME">Name of the base table</Parameter>
            <Parameter Name="COLUMN_NAME">Optional name of the XML type column if table_name is not an XMLtype table. If table_name refers to XMLType table then column_name should be NULL.</Parameter>
            <Parameter Name="XPATH">Path expression in DOT notation or XPath notation (see examples below)</Parameter>
            <Parameter Name="NAMESPACES">Optional namespace definitions for path expression</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_XMLSTORE" Url="http://docs.oracle.com/database/121/ARPLS/d_xmlstore.htm">
      <Description>DBMS_XMLSTORE provides the ability to store XML data in relational tables.</Description>
      <SubPrograms>
        <SubProgram Name="CLEARKEYCOLUMNLIST" ElementId="#i1048244">
          <Description>Clears the key column list.</Description>
        </SubProgram>
        <SubProgram Name="CLEARUPDATECOLUMNLIST" ElementId="#i1048271">
          <Description>Clears the update column list.</Description>
        </SubProgram>
        <SubProgram Name="CLOSECONTEXT" ElementId="#i1048297">
          <Description>It closes/deallocates a particular save context.</Description>
        </SubProgram>
        <SubProgram Name="DELETEXML" ElementId="#i1048324">
          <Description>Deletes records specified by data from the XML document, from the table specified at the context creation time.</Description>
        </SubProgram>
        <SubProgram Name="INSERTXML" ElementId="#i1048381">
          <Description>Inserts the XML document into the table specified at the context creation time.</Description>
        </SubProgram>
        <SubProgram Name="NEWCONTEXT" ElementId="#i1044980">
          <Description>Creates a save context, and returns the context handle.</Description>
        </SubProgram>
        <SubProgram Name="SETKEYCOLUMN" ElementId="#i1048810">
          <Description>This method adds a column to the key column list.</Description>
        </SubProgram>
        <SubProgram Name="SETROWTAG" ElementId="#CJGJAFFC">
          <Description>Names the tag used in the XML document., to enclose the XML elements corresponding to the database.</Description>
        </SubProgram>
        <SubProgram Name="SETUPDATECOLUMN" ElementId="#CJGDEFEE">
          <Description>Adds a column to the "update column list".</Description>
        </SubProgram>
        <SubProgram Name="UPDATEXML" ElementId="#CJGJHJEA">
          <Description>Updates the table given the XML document.</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_XMLTRANSLATIONS" Url="http://docs.oracle.com/database/121/ARPLS/d_xmltranslations.htm">
      <Description>Note:
The DBMS_XMLTRANSLATIONS package is deprecated with Oracle Database 12c.</Description>
    </Package>
    <Package Name="DBMS_XPLAN" Url="http://docs.oracle.com/database/121/ARPLS/d_xplan.htm">
      <Description>The DBMS_XPLAN package provides an easy way to display the output of the EXPLAIN PLAN command in several, predefined formats. You can also use the DBMS_XPLAN package to display the plan of a statement stored in the Automatic Workload Repository (AWR) or stored in a SQL tuning set. It further provides a way to display the SQL execution plan and SQL execution runtime statistics for cached SQL cursors based on the information stored in the V$SQL_PLAN and V$SQL_PLAN_STATISTICS_ALL fixed views. Finally, it displays plans from a SQL plan baseline.</Description>
      <SubPrograms>
        <SubProgram Name="DIFF_PLAN" ElementId="#BABJIACA">
          <Description>Compares plans</Description>
          <Parameters>
            <Parameter Name="PLAN_1">First plan</Parameter>
            <Parameter Name="PLAN_2">Second plan</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DISPLAY" ElementId="#CACICEDJ">
          <Description>Displays the contents of the plan table</Description>
          <Parameters>
            <Parameter Name="TABLE_NAME">Specifies the table name where the plan is stored. This parameter defaults to PLAN_TABLE, which is the default plan table for the EXPLAIN PLAN command. If NULL is specified it also defaults to PLAN_TABLE.</Parameter>
            <Parameter Name="STATEMENT_ID">Specifies the statement_id of the plan to be displayed. This parameter defaults to NULL, which is the default when the EXPLAIN PLAN command is executed without a set statement_id clause.If no statement_id is specified, the function shows you the plan of the most recent explained statement.</Parameter>
            <Parameter Name="FORMAT">Controls the level of details for the plan. It accepts four values:BASIC: Displays the minimum information in the plan—the operation ID, the operation name and its option.TYPICAL: This is the default. Displays the most relevant information in the plan (operation id, name and option, #rows, #bytes and optimizer cost). Pruning, parallel and predicate information are only displayed when applicable. Excludes only PROJECTION, ALIAS and REMOTE SQL information (see below).SERIAL: Like TYPICAL except that the parallel information is not displayed, even if the plan executes in parallel.ALL: Maximum user level. Includes information displayed with the TYPICAL level with additional information (PROJECTION, ALIAS and information about REMOTE SQL if the operation is distributed).For finer control on the display output, the following keywords can be added to the above three standard format options to customize their default behavior. Each keyword either represents a logical group of plan table columns (such as PARTITION) or logical additions to the base plan table output (such as PREDICATE). Format keywords must be separated by either a comma or a space:ROWS - if relevant, shows the number of rows estimated by the optimizerBYTES - if relevant, shows the number of bytes estimated by the optimizerCOST - if relevant, shows optimizer cost informationPARTITION - if relevant, shows partition pruning informationPARALLEL - if relevant, shows PX information (distribution method and table queue information)PREDICATE - if relevant, shows the predicate sectionPROJECTION -if relevant, shows the projection sectionALIAS - if relevant, shows the "Query Block Name / Object Alias" sectionREMOTE - if relevant, shows the information for distributed query (for example, remote from serial distribution and remote SQL)NOTE - if relevant, shows the note section of the explain planFormat keywords can be prefixed by the sign '-' to exclude the specified information. For example, '-PROJECTION' excludes projection information.If the target plan table (see table_name parameter) also stores plan statistics columns (for example, it is a table used to capture the content of the fixed view V$SQL_PLAN_STATISTICS_ALL), additional format keywords can be used to specify which class of statistics to display when using the DISPLAY Function. These additional format keywords are IOSTATS, MEMSTATS, ALLSTATS and LAST (see the DISPLAY_CURSOR Function or the DISPLAY_SQLSET Function for a full description of these four keywords).</Parameter>
            <Parameter Name="FILTER_PREDS">SQL filter predicate(s) to restrict the set of rows selected from the table where the plan is stored. When value is NULL (the default), the plan displayed corresponds to the last executed explain plan. For example: filter_preds=&gt;'plan_id = 10'Can reference any column of the table where the plan is stored and can contain any SQL construct (for example, sub-query, function calls (see WARNING under Usage Notes)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DISPLAY_AWR" ElementId="#i999706">
          <Description>Displays the contents of an execution plan stored in the AWR</Description>
        </SubProgram>
        <SubProgram Name="DISPLAY_CURSOR" ElementId="#i998364">
          <Description>Displays the execution plan of any cursor in the cursor cache</Description>
          <Parameters>
            <Parameter Name="SQL_ID">Specifies the SQL_ID of the SQL statement in the cursor cache. You can retrieve the appropriate value by querying the column SQL_ID in V$SQL or V$SQLAREA. Alternatively, you could choose the column PREV_SQL_ID for a specific session out of V$SESSION. This parameter defaults to NULL in which case the plan of the last cursor executed by the session is displayed.</Parameter>
            <Parameter Name="CURSOR_CHILD_NO">Child number of the cursor to display. If not supplied, the execution plan of all cursors matching the supplied sql_id parameter are displayed. The child_number can be specified only if sql_id is specified.</Parameter>
            <Parameter Name="FORMAT">Controls the level of details for the plan. It accepts five values:BASIC: Displays the minimum information in the plan—the operation ID, the operation name and its option.TYPICAL: This is the default. Displays the most relevant information in the plan (operation id, name and option, #rows, #bytes and optimizer cost). Pruning, parallel and predicate information are only displayed when applicable. Excludes only PROJECTION, ALIAS and REMOTE SQL information (see below).SERIAL: Like TYPICAL except that the parallel information is not displayed, even if the plan executes in parallel.ALL: Maximum user level. Includes information displayed with the TYPICAL level with additional information (PROJECTION, ALIAS and information about REMOTE SQL if the operation is distributed).ADAPTIVE:- Displays the final plan, or the current plan if the execution has not completed. This section includes notes about runtime optimizations that affect the plan, such as switching from a Nested Loops join to a Hash join.- Plan lineage. This section shows the plans that were run previously due to automatic reoptimization. It also shows the default plan, if the plan changed due to dynamic plans.- Recommended plan. In reporting mode, the plan is chosen based on execution statistics displayed. Note that displaying the recommended plan for automatic reoptimization requires re-compiling the query with the optimizer adjustments collected in the child cursor. Displaying the recommended plan for a dynamic plan does not require this.- Dynamic plans. This summarizes the portions of the plan that differ from the default plan chosen by the optimizer.For finer control on the display output, the following keywords can be added to the above three standard format options to customize their default behavior. Each keyword either represents a logical group of plan table columns (such as PARTITION) or logical additions to the base plan table output (such as PREDICATE).</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DISPLAY_PLAN" ElementId="#BABFAEEG">
          <Description>Displays the contents of the plan table in a variety of formats with CLOB output type</Description>
          <Parameters>
            <Parameter Name="TABLE_NAME">Specifies the table name where the plan is stored. This parameter defaults to PLAN_TABLE, which is the default plan table for the EXPLAIN PLAN command. If NULL is specified it also defaults to PLAN_TABLE.</Parameter>
            <Parameter Name="STATEMENT_ID">Specifies the statement_id of the plan to be displayed. This parameter defaults to NULL, which is the default when the EXPLAIN PLAN command is executed without a set statement_id clause.If no statement_id is specified, the function shows you the plan of the most recent explained statement.</Parameter>
            <Parameter Name="FILTER_PREDS">SQL filter predicate(s) to restrict the set of rows selected from the table where the plan is stored. When value is NULL (the default), the plan displayed corresponds to the last executed explain plan. For example: filter_preds=&gt;'plan_id = 10'Can reference any column of the table where the plan is stored and can contain any SQL construct (for example, sub-query, function calls (see WARNING under Usage Notes)</Parameter>
            <Parameter Name="FORMAT">Controls the level of details for the plan. It accepts five values:BASIC: Displays the minimum information in the plan—the operation ID, the operation name and its option.TYPICAL: This is the default. Displays the most relevant information in the plan (operation id, name and option, #rows, #bytes and optimizer cost). Pruning, parallel and predicate information are only displayed when applicable. Excludes only PROJECTION, ALIAS and REMOTE SQL information (see below).SERIAL: Like TYPICAL except that the parallel information is not displayed, even if the plan executes in parallel.ALL: Maximum user level. Includes information displayed with the TYPICAL level with additional information (PROJECTION, ALIAS and information about REMOTE SQL if the operation is distributed).ADAPTIVE: Displays the default plan, and for each dynamic subplan (if stipulated):- A list of the rowsources from the original which may be replaced, and the rowsources to replace them- If outline display is specified in the format argument, the hints for each option in the dynamic subplan are displayedFor finer control on the display output, the following keywords can be added to the above three standard format options to customize their default behavior. Each keyword either represents a logical group of plan table columns (such as PARTITION) or logical additions to the base plan table output (such as PREDICATE). Format keywords must be separated by either a comma or a space:ROWS - if relevant, shows the number of rows estimated by the optimizerBYTES - if relevant, shows the number of bytes estimated by the optimizerCOST - if relevant, shows optimizer cost informationPARTITION - if relevant, shows partition pruning informationPARALLEL - if relevant, shows PX information (distribution method and table queue information)PREDICATE - if relevant, shows the predicate sectionPROJECTION -if relevant, shows the projection sectionALIAS - if relevant, shows the "Query Block Name / Object Alias" sectionREMOTE - if relevant, shows the information for distributed query (for example, remote from serial distribution and remote SQL)NOTE - if relevant, shows the note section of the explain planFormat keywords can be prefixed by the sign '-' to exclude the specified information. For example, '-PROJECTION' excludes projection information.</Parameter>
            <Parameter Name="TYPE">Output type, one of: 'TEXT', 'ACTIVE', 'HTML', or 'XML' (see Usage Notes regarding type ACTIVE). '</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DISPLAY_SQL_PLAN_BASELINE" ElementId="#BABFBBGC">
          <Description>Displays one or more execution plans for the specified SQL handle of a SQL plan baseline</Description>
          <Parameters>
            <Parameter Name="SQL_HANDLE">SQL statement handle. It identifies a SQL statement whose plan(s) are to be displayed.</Parameter>
            <Parameter Name="PLAN_NAME">Plan name. It identifies a specific plan. Default NULL means all plans associated with identified SQL statement are explained and displayed.</Parameter>
            <Parameter Name="FORMAT">Format string determines what information stored in the plan displayed. One of three format values ('BASIC', 'TYPICAL', 'ALL') can be used, each representing a common use case.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DISPLAY_SQLSET" ElementId="#CHDCBBAB">
          <Description>Displays the execution plan of a given statement stored in a SQL tuning set</Description>
          <Parameters>
            <Parameter Name="SQLSET_NAME">Name of the SQL Tuning Set</Parameter>
            <Parameter Name="SQL_ID">Specifies the sql_id value for a SQL statement having its plan stored in the SQL tuning set. You can find all stored SQL statements by querying table function DBMS_SQLTUNE.SELECT_SQLSET</Parameter>
            <Parameter Name="PLAN_HASH_VALUE">Optional parameter. Identifies a specific stored execution plan for a SQL statement. If suppressed, all stored execution plans are shown.</Parameter>
            <Parameter Name="FORMAT">Controls the level of details for the plan. It accepts four values:BASIC: Displays the minimum information in the plan—the operation ID, the operation name and its option.TYPICAL: This is the default. Displays the most relevant information in the plan (operation id, name and option, #rows, #bytes and optimizer cost). Pruning, parallel and predicate information are only displayed when applicable. Excludes only PROJECTION, ALIAS and REMOTE SQL information (see below).SERIAL: Like TYPICAL except that the parallel information is not displayed, even if the plan executes in parallel.ALL: Maximum user level. Includes information displayed with the TYPICAL level with additional information (PROJECTION, ALIAS and information about REMOTE SQL if the operation is distributed).</Parameter>
            <Parameter Name="SQLSET_OWNER">The owner of the SQL tuning set. The default is the current user.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_XSLPROCESSOR" Url="http://docs.oracle.com/database/121/ARPLS/d_xslpro.htm">
      <Description>The DBMS_XSLPROCESSOR package provides an interface to manage the contents and structure of XML documents.</Description>
      <SubPrograms>
        <SubProgram Name="CLOB2FILE" ElementId="#i1007362">
          <Description>Writes content of a CLOB into a file</Description>
          <Parameters>
            <Parameter Name="CLOB">File directory</Parameter>
            <Parameter Name="FLOCATION">File directory</Parameter>
            <Parameter Name="FNAME">File name</Parameter>
            <Parameter Name="CSID">Character set id of the fileMust be a valid Oracle id; otherwise returns an errorIf 0, content of the output file will be in the database character set</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="FREEPROCESSOR" ElementId="#i1006521">
          <Description>Frees a processor object</Description>
          <Parameters>
            <Parameter Name="P">Processor</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="FREESTYLESHEET" ElementId="#i1006554">
          <Description>Frees a stylesheet object</Description>
          <Parameters>
            <Parameter Name="SS">Stylesheet</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="NEWPROCESSOR" ElementId="#i1006443">
          <Description>Returns a new processor instance</Description>
        </SubProgram>
        <SubProgram Name="NEWSTYLESHEET" ElementId="#i1006587">
          <Description>Creates a new stylesheet from input and reference URLs</Description>
          <Parameters>
            <Parameter Name="XMLDOC">DOMDocument to use for construction</Parameter>
            <Parameter Name="INP">Input URL to use for construction</Parameter>
            <Parameter Name="REF">Reference URL</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PROCESSXSL" ElementId="#i1003747">
          <Description>Transforms an input XML document</Description>
        </SubProgram>
        <SubProgram Name="READ2CLOB" ElementId="#i1007244">
          <Description>Reads content of the file into a CLOB</Description>
          <Parameters>
            <Parameter Name="FLOCATION">File directory</Parameter>
            <Parameter Name="FNAME">File name</Parameter>
            <Parameter Name="CSID">Character set id of the fileMust be a valid Oracle id; otherwise returns an errorIf 0, input file is assumed to be in the database character set</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVEPARAM" ElementId="#i1006644">
          <Description>Removes a top-level stylesheet parameter</Description>
          <Parameters>
            <Parameter Name="SS">Stylesheet instance</Parameter>
            <Parameter Name="NAME">Name of the parameter</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RESETPARAMS" ElementId="#i1006682">
          <Description>Resets the top-level stylesheet parameters</Description>
          <Parameters>
            <Parameter Name="SS">Stylesheet instance</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SELECTNODES" ElementId="#i1006718">
          <Description>Selects nodes from a DOM tree that match a pattern</Description>
          <Parameters>
            <Parameter Name="N">Root DOMNode of the tree</Parameter>
            <Parameter Name="PATTERN">Pattern to use</Parameter>
            <Parameter Name="NAMESPACE">Namespace declared</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SELECTSINGLENODE" ElementId="#i1006747">
          <Description>Selects the first node from the tree that matches a pattern</Description>
          <Parameters>
            <Parameter Name="N">Root DOMNode of the tree</Parameter>
            <Parameter Name="PATTERN">Pattern to use</Parameter>
            <Parameter Name="NAMESPACE">Namespace declared</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETERRORLOG" ElementId="#i1003936">
          <Description>Sets errors to be sent to the specified file</Description>
          <Parameters>
            <Parameter Name="P">Processor instance</Parameter>
            <Parameter Name="FILENAME">Complete path of the file to use as the error log</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SETPARAM" ElementId="#i1006818">
          <Description>Sets a top-level parameter in the stylesheet</Description>
          <Parameters>
            <Parameter Name="SS">Stylesheet instance</Parameter>
            <Parameter Name="NAME">Name of the parameter</Parameter>
            <Parameter Name="VALUE">Value of the parameter</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SHOWWARNINGS" ElementId="#i1006785">
          <Description>Turns warnings on or off</Description>
          <Parameters>
            <Parameter Name="P">Processor instance</Parameter>
            <Parameter Name="YES">Mode to set: TRUE to show warnings, FALSE otherwise</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="TRANSFORMNODE" ElementId="#BHCDEJJA">
          <Description>Transforms a node in a DOM tree using a stylesheet</Description>
          <Parameters>
            <Parameter Name="N">DOMNode to transform</Parameter>
            <Parameter Name="SS">Stylesheet to use</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="VALUEOF" ElementId="#i1004102">
          <Description>Gets the value of the first node that matches a pattern</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_XSTREAM_ADM" Url="http://docs.oracle.com/database/121/ARPLS/d_xstrm_adm.htm">
      <Description>This DBMS_XSTREAM_ADM package provides interfaces for streaming database changes between an Oracle database and other systems. XStream enables applications to stream out or stream in database changes.</Description>
      <SubPrograms>
        <SubProgram Name="ADD_COLUMN" ElementId="#CHDJFCFI">
          <Description>Either adds or removes a declarative rule-based transformation which adds a column to a row logical change record (row LCR) that satisfies the specified rule</Description>
          <Parameters>
            <Parameter Name="RULE_NAME">The name of the rule, specified as [schema_name.]rule_name. If NULL, then the procedure raises an error.For example, to specify a rule in the hr schema named employees12, enter hr.employees12. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="TABLE_NAME">The name of the table to which the column is added in the row LCR, specified as [schema_name.]object_name. For example, hr.employees. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="COLUMN_NAME">The name of the column added to each row LCR that satisfies the rule.</Parameter>
            <Parameter Name="COLUMN_VALUE">The value of the added column. Specify the appropriate ANYDATA function for the column datatype and the column value. For example, if the datatype of the column being added is NUMBER and the value is NULL, then specify the ANYDATA.ConvertNumber(NULL) function.This parameter cannot be specified if the column_function parameter is specified.</Parameter>
            <Parameter Name="COLUMN_FUNCTION">Either the 'SYSDATE' or the 'SYSTIMESTAMP' SQL function.The 'SYSDATE' SQL function places the current date and time set for the operating system on which the database resides. The datatype of the returned value is DATE, and the format returned depends on the value of the NLS_DATE_FORMAT initialization parameter.The 'SYSTIMESTAMP' SQL function returns the system date, including fractional seconds and time zone, of the system on which the database resides. The return type is TIMESTAMP WITH TIME ZONE.The function executes when the rule evaluates to TRUE.This parameter cannot be specified if the column_value parameter is specified.</Parameter>
            <Parameter Name="VALUE_TYPE">Specify 'NEW' to add the column to the new values in the row LCR.Specify 'OLD' to add the column to the old values in the row LCR.</Parameter>
            <Parameter Name="STEP_NUMBER">The order of execution of the transformation.See Also: Oracle Database XStream Guide for more information about transformation ordering</Parameter>
            <Parameter Name="OPERATION">Specify 'ADD' to add the transformation to the rule.Specify 'REMOVE' to remove the transformation from the rule.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADD_GLOBAL_PROPAGATION_RULES" ElementId="#CHDFHEEI">
          <Description>Either adds global rules to the positive rule set for a propagation, or adds global rules to the negative rule set for a propagation, and creates the specified propagation if it does not exist</Description>
          <Parameters>
            <Parameter Name="STREAMS_NAME">The name of the propagation. Do not specify an owner.If the specified propagation does not exist, then the procedure creates it automatically.If NULL and a propagation exists for the same source queue and destination queue (including database link), then the procedure uses this propagation.If NULL and no propagation exists for the same source queue and destination queue (including database link), then the procedure creates a propagation automatically with a system-generated name.</Parameter>
            <Parameter Name="SOURCE_QUEUE_NAME">The name of the source queue, specified as [schema_name.]queue_name. The current database must contain the source queue, and the queue must be ANYDATA type.For example, to specify a source queue named streams_queue in the strmadmin schema, enter strmadmin.streams_queue for this parameter.If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="DESTINATION_QUEUE_NAME">The name of the destination queue, including a database link, specified as [schema_name.]queue_name[@dblink_name], if the destination queue is in a remote database. The queue must be ANYDATA type.For example, to specify a destination queue named streams_queue in the strmadmin schema and use a database link named dbs2.net, enter strmadmin.streams_queue@dbs2.net for this parameter.If the schema is not specified, then the current user is the default.If the database link is omitted, then the procedure uses the global name of the current database, and the source queue and destination queue must be in the same database.Note: Connection qualifiers are not allowed.</Parameter>
            <Parameter Name="INCLUDE_DML">If TRUE, then the procedure creates a rule for DML changes. If FALSE, then the procedure does not create a DML rule. NULL is not permitted.</Parameter>
            <Parameter Name="INCLUDE_DDL">If TRUE, then the procedure creates a rule for DDL changes. If FALSE, then the procedure does not create a DDL rule. NULL is not permitted.</Parameter>
            <Parameter Name="INCLUDE_TAGGED_LCR">If TRUE, then the procedure does not add a condition regarding Oracle Streams tags to the generated rules. Therefore, these rules can evaluate to TRUE regardless of whether a logical change record (LCR) has a non-NULL tag. If the rules are added to the positive rule set for the propagation, then an LCR is always considered for propagation, regardless of whether it has a non-NULL tag. If the rules are added to a positive rule set, then setting this parameter to TRUE is appropriate for a full (for example, standby) copy of a database. If the rules are added to the negative rule set for the propagation, then whether an LCR is discarded does not depend on the tag for the LCR.If FALSE, then the procedure adds a condition to each generated rule that causes the rule to evaluate to TRUE only if an LCR has a NULL Oracle Streams tag. If the rules are added to the positive rule set for the propagation, then an LCR is considered for propagation only when the LCR contains a NULL tag. If the rules are added to a positive rule set, then setting this parameter to FALSE might be appropriate in update-anywhere configurations to avoid sending a change back to its source database. If the rules are added to the negative rule set for the propagation, then an LCR can be discarded only if it has a NULL tag.Usually, specify TRUE for this parameter if the inclusion_rule parameter is set to FALSE.See Also: Oracle Streams Replication Administrator's Guide for more information about tags</Parameter>
            <Parameter Name="SOURCE_DATABASE">The global name of the source database. The source database is where the changes originated. If NULL, then the procedure does not add a condition regarding the source database to the generated rules.If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify DBS1 and the domain is .NET, then the procedure specifies DBS1.NET automatically.Oracle recommends that you specify a source database for propagation rules.</Parameter>
            <Parameter Name="DML_RULE_NAME">If include_dml is TRUE, then this parameter contains the DML rule name.If include_dml is FALSE, then this parameter contains a NULL.</Parameter>
            <Parameter Name="DDL_RULE_NAME">If include_ddl is TRUE, then this parameter contains the DDL rule name.If include_ddl is FALSE, then this parameter contains a NULL.</Parameter>
            <Parameter Name="INCLUSION_RULE">If inclusion_rule is TRUE, then the procedure adds the rules to the positive rule set for the propagation.If inclusion_rule is FALSE, then the procedure adds the rules to the negative rule set for the propagation.In either case, the system creates the rule set if it does not exist.</Parameter>
            <Parameter Name="AND_CONDITION">If non-NULL, appends the specified condition to the system-generated rule condition using an AND clause in the following way:The variable in the specified condition must be :lcr. For example, to specify that the global rules generated by the procedure evaluate to TRUE only if the Oracle Streams tag is the hexadecimal equivalent of '02', specify the following condition:The :lcr in the specified condition is converted to :dml or :ddl, depending on the rule that is being generated. If you are specifying an LCR member subprogram that is dependent on the LCR type (row or DDL), then make sure the procedure only generates the appropriate rule.Specifically, if you specify an LCR member subprogram that is valid only for row LCRs, then specify TRUE for the include_dml parameter and FALSE for the include_ddl parameter. If you specify an LCR member subprogram that is valid only for DDL LCRs, then specify FALSE for the include_dml parameter and TRUE for the include_ddl parameter.See Also: Chapter 275, "Logical Change Record TYPEs"</Parameter>
            <Parameter Name="QUEUE_TO_QUEUE">If TRUE or NULL, then a new propagation created by this procedure is a queue to queue propagation. A queue-to-queue propagation always has its own propagation job and uses a service for automatic failover when the destination queue is a buffered queue in an Oracle Real Application Clusters (Oracle RAC) database.If FALSE, then a new propagation created by this procedure is a queue-to-dblink propagation. A queue-to-dblink propagation can share a propagation job with other propagations that use the same database link and does not support automatic failover in an Oracle RAC environment.The procedure cannot change the queue to queue property of an exiting propagation. If the specified propagation exists, then the procedure behaves in the following way for each setting:If TRUE and the specified propagation is not a queue to queue propagation, then the procedure raises an error.If FALSE and the specified propagation is a queue to queue propagation, then the procedure raises an error.If NULL, then the procedure does not change the queue to queue property of the propagation.See Also: Oracle Streams Concepts and Administration for more information about queue-to-queue propagations</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADD_GLOBAL_RULES" ElementId="#CHDIEFAG">
          <Description>Adds global rules to either the positive or negative rule set of a capture process or apply process, and creates the specified capture process or apply process if it does not exist</Description>
          <Parameters>
            <Parameter Name="STREAMS_TYPE">The type of XStream client:Specify capture for a capture process.Specify apply for an apply process.</Parameter>
            <Parameter Name="STREAMS_NAME">The name of the capture process or apply process. Do not specify an owner.If NULL, if streams_type is capture, and if one relevant capture process for the queue exists, then the relevant XStream client is used. If no relevant XStream client exists for the queue, then an XStream client is created automatically with a system-generated name. If NULL and multiple XStream clients of the specified streams_type for the queue exist, then the procedure raises an error.If NULL, if streams_type is apply, and if one relevant apply process exists, then the procedure uses the relevant apply process. The relevant apply process is identified in one of the following ways:If one existing apply process has the source database specified in source_database and uses the queue specified in queue_name, then the procedure uses this apply process.If source_database is NULL and one existing apply process is using the queue specified in queue_name, then the procedure uses this apply process.If NULL and no relevant apply process exists, then the procedure creates an apply process automatically with a system-generated name.If NULL and multiple relevant apply processes exist, then the procedure raises an error.Each apply process must have a unique name.</Parameter>
            <Parameter Name="QUEUE_NAME">The name of the local queue, specified as [schema_name.]queue_name. The current database must contain the queue, and the queue must be ANYDATA type.For example, to specify a queue named streams_queue in the strmadmin schema, enter strmadmin.streams_queue for this parameter. If the schema is not specified, then the current user is the default.For capture process rules, this is the queue into which a capture process enqueues LCRs. For outbound server rules, this is the queue from which the outbound server dequeues LCRs. For inbound server rules, this is the queue into which an inbound server enqueues error transactions.</Parameter>
            <Parameter Name="INCLUDE_DML">If TRUE, then the procedure creates a rule for DML changes. If FALSE, then the procedure does not create a DML rule. NULL is not permitted.</Parameter>
            <Parameter Name="INCLUDE_DDL">If TRUE, then the procedure creates a rule for DDL changes. If FALSE, then the procedure does not create a DDL rule. NULL is not permitted.</Parameter>
            <Parameter Name="INCLUDE_TAGGED_LCR">If TRUE, then the procedure does not add a condition regarding Oracle Streams tags to the generated rules. Therefore, these rules can evaluate to TRUE regardless of whether a redo entry or LCR has a non-NULL tag. If the rules are added to the positive rule set for the process, then a redo entry is always considered for capture, and an LCR is always considered for apply, regardless of whether the redo entry or LCR has a non-NULL tag. If the rules are added to a positive rule set, then setting this parameter to TRUE is appropriate for a full (for example, standby) copy of a database. If the rules are added to the negative rule set for the process, then whether a redo entry or LCR is discarded does not depend on the tag.If FALSE, then the procedure adds a condition to each generated rule that causes the rule to evaluate to TRUE only if a redo entry or LCR has a NULL Oracle Streams tag. If the rules are added to the positive rule set for the process, then a redo entry is considered for capture, and an LCR is considered for apply, only when the redo entry or LCR contains a NULL tag. If the rules are added to a positive rule set, then setting this parameter to FALSE might be appropriate in update-anywhere configurations to avoid sending a change back to its source database. If the rules are added to the negative rule set for the process, then a redo entry or LCR can be discarded only if it has a NULL tag.Usually, specify TRUE for this parameter if the inclusion_rule parameter is set to FALSE.See Also: Oracle Streams Replication Administrator's Guide for more information about tags</Parameter>
            <Parameter Name="SOURCE_DATABASE">The global name of the source database. If NULL, then the procedure does not add a condition regarding the source database to the generated rules.For capture process rules, specify NULL or the global name of the local database if you are creating a capture process locally at the source database. If you are adding rules to a downstream capture process rule set at a downstream database, then specify the source database of the changes that will be captured.For apply process rules, specify the source database of the changes that will be applied by the apply process. The source database is the database where the changes originated. If an apply process applies captured LCRs, then the apply process can apply LCRs from only one capture process at one source database.In a CDB, specify the global name of the container to which the rules pertain. The container can be the root or a PDB. For example, mycdb.example.com or hrpdb.example.com. See Oracle Database XStream Guide for more information about setting this parameter in a CDB.If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify DBS1 and the domain is .NET, then the procedure specifies DBS1.NET automatically.</Parameter>
            <Parameter Name="DML_RULE_NAME">If include_dml is TRUE, then this parameter contains the DML rule name.If include_dml is FALSE, then this parameter contains a NULL.</Parameter>
            <Parameter Name="DDL_RULE_NAME">If include_ddl is TRUE, then this parameter contains the DDL rule name.If include_ddl is FALSE, then this parameter contains a NULL.</Parameter>
            <Parameter Name="INCLUSION_RULE">If inclusion_rule is TRUE, then the procedure adds the rules to the positive rule set for the XStream client.If inclusion_rule is FALSE, then the procedure adds the rules to the negative rule set for the XStream client.In either case, the system creates the rule set if it does not exist.</Parameter>
            <Parameter Name="AND_CONDITION">If non-NULL, appends the specified condition to the system-generated rule condition using an AND clause in the following way:The variable in the specified condition must be :lcr. For example, to specify that the global rules generated by the procedure evaluate to TRUE only if the Oracle Streams tag is the hexadecimal equivalent of '02', specify the following condition:The :lcr in the specified condition is converted to :dml or :ddl, depending on the rule that is being generated. If you are specifying an LCR member subprogram that is dependent on the LCR type (row or DDL), then make sure this procedure only generates the appropriate rule.Specifically, if you specify an LCR member subprogram that is valid only for row LCRs, then specify TRUE for the include_dml parameter and FALSE for the include_ddl parameter. If you specify an LCR member subprogram that is valid only for DDL LCRs, then specify FALSE for the include_dml parameter and TRUE for the include_ddl parameter.See Also: Chapter 275, "Logical Change Record TYPEs"</Parameter>
            <Parameter Name="SOURCE_ROOT_NAME">The global name of the root in the source CDB. For example, mycdb.example.com.If this parameter is NULL, then the global name of the root in the local CDB is used. If you are configuring downstream capture, then this parameter must be a non-NULL value, and it must specify the global name of the root in the remote source CDB. See Oracle Database XStream Guide for more information about setting this parameter in a CDB.If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify DBS1 and the domain is EXAMPLE.COM, then the procedure specifies DBS1.EXAMPLE.COM automatically.Note: This parameter only applies to a CDB.</Parameter>
            <Parameter Name="SOURCE_CONTAINER_NAME">The short name of the source container. The container can be the root or a PDB. For example, CDB$ROOT or hrpdb. See Oracle Database XStream Guide for more information about setting this parameter in a CDB.Note: This parameter only applies to a CDB.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADD_OUTBOUND" ElementId="#CACCCAJJ">
          <Description>Creates an XStream outbound server that dequeues LCRs from the specified queue</Description>
          <Parameters>
            <Parameter Name="SERVER_NAME">The name of the outbound server being created. A NULL specification is not allowed. Do not specify an owner.The specified name must not match the name of an existing outbound server, inbound server, apply process, or messaging client.Note: The server_name setting cannot exceed 30 bytes, and it cannot be altered after the outbound server is created.</Parameter>
            <Parameter Name="QUEUE_NAME">The name of the local queue from which the outbound server dequeues LCRs, specified as [schema_name.]queue_name. The current database must contain the queue, and the queue must be ANYDATA type.For example, to specify a queue named xstream_queue in the xstrmadmin schema, enter xstrmadmin.xstream_queue for this parameter. If the schema is not specified, then the current user is the default.If NULL, the procedure raises an error.</Parameter>
            <Parameter Name="SOURCE_DATABASE">The global name of the source database. If NULL, then the procedure does not add a condition regarding the source database to the generated rules.In a CDB, specify the global name of the container to which the rules pertain. The container can be the root or a PDB. For example, mycdb.example.com or hrpdb.example.com. See Oracle Database XStream Guide for more information about setting this parameter in a CDB.If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify DBS1 and the domain is .NET, then the procedure specifies DBS1.NET automatically.</Parameter>
            <Parameter Name="TABLE_NAMES">The tables for which data manipulation language (DML) and data definition language (DDL) changes are streamed out to the XStream client application. The tables can be specified in the following ways:Comma-delimited list of type VARCHAR2.A PL/SQL associative array of type DBMS_UTILITY.UNCL_ARRAY, where each element is the name of a table. Specify the first table in position 1. The last position must be NULL.Each table should be specified as [schema_name.]table_name. For example, you can specify hr.employees. If the schema is not specified, then the current user is the default.See Also: "Usage Notes" for more information about this parameter</Parameter>
            <Parameter Name="SCHEMA_NAMES">The schemas for which DML and DDL changes are streamed out to the XStream client application. The schemas can be specified in the following ways:Comma-delimited list of type VARCHAR2.A PL/SQL associative array of type DBMS_UTILITY.UNCL_ARRAY, where each element is the name of a schema. Specify the first schema in position 1. The last position must be NULL.Note: This procedure does not concatenate the schema_names parameter with the table_names parameter. To specify tables, enter fully qualified table names in the table_names parameter (schema_name.table_name).See Also: "Usage Notes" for more information about this parameter</Parameter>
            <Parameter Name="CONNECT_USER">The user who can attach to the specified outbound server to retrieve the LCR stream. The client application must attach to the outbound server as the specified connect user. See "CREATE_OUTBOUND Procedure" for information about the privileges required by a connect user.If NULL, then the current user is the default.</Parameter>
            <Parameter Name="COMMENT">An optional comment associated with the outbound server.</Parameter>
            <Parameter Name="CAPTURE_NAME">The name of the capture process configured to capture changes for the outbound server. Do not specify an owner.If the specified name matches the name of an existing capture process for another outbound server, then the procedure uses the existing capture process and adds the rules for capturing changes to the database to the positive capture process rule set.If the specified name matches the name of an existing capture process for an apply process, then an error is raised.If the specified name does not match the name of an existing capture process, then an error is raised.If NULL, then the outbound server is created without a capture process.</Parameter>
            <Parameter Name="START_SCN">A valid system change number (SCN) for the database from which the capture process starts capturing changes.If the capture_name parameter is NULL, then this parameter is ignored.If NULL and the capture_name parameter is non-NULL, then the start SCN of the capture process is not changed.An error is returned if an invalid SCN is specified.The start_scn and start_time parameters are mutually exclusive.</Parameter>
            <Parameter Name="START_TIME">A valid time from which the capture process starts capturing changes.If the capture_name parameter is NULL, then this parameter is ignored.If NULL and the capture_name parameter is non-NULL, then the start SCN of the capture process is not changed.The start_scn and start_time parameters are mutually exclusive.</Parameter>
            <Parameter Name="INCLUDE_DML">If TRUE, then the procedure creates a rule for DML changes. If FALSE, then the procedure does not create a DML rule. NULL is not permitted.</Parameter>
            <Parameter Name="INCLUDE_DDL">If TRUE, then the procedure creates a rule for DDL changes. If FALSE, then the procedure does not create a DDL rule. NULL is not permitted.</Parameter>
            <Parameter Name="SOURCE_ROOT_NAME">The global name of the root in the source CDB. For example, mycdb.example.com.If this parameter is NULL, then the global name of the root in the local CDB is used. If you are configuring downstream capture, then this parameter must be a non-NULL value, and it must specify the global name of the root in the remote source CDB. See Oracle Database XStream Guide for more information about setting this parameter in a CDB.If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify DBS1 and the domain is EXAMPLE.COM, then the procedure specifies DBS1.EXAMPLE.COM automatically.Note: This parameter only applies to a CDB.</Parameter>
            <Parameter Name="SOURCE_CONTAINER_NAME">The short name of the source container. The container can be the root or a PDB. For example, CDB$ROOT or hrpdb. See Oracle Database XStream Guide for more information about setting this parameter in a CDB.Note: This parameter only applies to a CDB.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADD_SCHEMA_PROPAGATION_RULES" ElementId="#CHDFJBBC">
          <Description>Either adds schema rules to the positive rule set for a propagation, or adds schema rules to the negative rule set for a propagation, and creates the specified propagation if it does not exist</Description>
          <Parameters>
            <Parameter Name="SCHEMA_NAME">The name of the schema. For example, hr.</Parameter>
            <Parameter Name="STREAMS_NAME">The name of the propagation. Do not specify an owner.If the specified propagation does not exist, then the procedure creates it automatically.If NULL and a propagation exists for the same source queue and destination queue (including database link), then the procedure uses this propagation.If NULL and no propagation exists for the same source queue and destination queue (including database link), then the procedure creates a propagation automatically with a system-generated name.</Parameter>
            <Parameter Name="SOURCE_QUEUE_NAME">The name of the source queue, specified as [schema_name.]queue_name. The current database must contain the source queue, and the queue must be ANYDATA type.For example, to specify a source queue named streams_queue in the strmadmin schema, enter strmadmin.streams_queue for this parameter.If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="DESTINATION_QUEUE_NAME">The name of the destination queue, including a database link, specified as [schema_name.]queue_name[@dblink_name], if the destination queue is in a remote database. The queue must be ANYDATA type.For example, to specify a destination queue named streams_queue in the strmadmin schema and use a database link named dbs2.net, enter strmadmin.streams_queue@dbs2.net for this parameter.If the schema is not specified, then the current user is the default.If the database link is omitted, then the procedure uses the global name of the current database, and the source queue and destination queue must be in the same database.Note: Connection qualifiers are not allowed.</Parameter>
            <Parameter Name="INCLUDE_DML">If TRUE, then the procedure creates a rule for DML changes. If FALSE, then the procedure does not create a DML rule. NULL is not permitted.</Parameter>
            <Parameter Name="INCLUDE_DDL">If TRUE, then the procedure creates a rule for DDL changes. If FALSE, then the procedure does not create a DDL rule. NULL is not permitted.</Parameter>
            <Parameter Name="INCLUDE_TAGGED_LCR">If TRUE, then the procedure does not add a condition regarding Oracle Streams tags to the generated rules. Therefore, these rules can evaluate to TRUE regardless of whether a logical change record (LCR) has a non-NULL tag. If the rules are added to the positive rule set for the propagation, then an LCR is always considered for propagation, regardless of whether it has a non-NULL tag. If the rules are added to a positive rule set, then setting this parameter to TRUE is appropriate for a full (for example, standby) copy of a database. If the rules are added to the negative rule set for the propagation, then whether an LCR is discarded does not depend on the tag for the LCR.If FALSE, then the procedure adds a condition to each generated rule that causes the rule to evaluate to TRUE only if an LCR has a NULL Oracle Streams tag. If the rules are added to the positive rule set for the propagation, then an LCR is considered for propagation only when the LCR contains a NULL tag. If the rules are added to a positive rule set, then setting this parameter to FALSE might be appropriate in update-anywhere configurations to avoid sending a change back to its source database. If the rules are added to the negative rule set for the propagation, then an LCR can be discarded only if it has a NULL tag.Usually, specify TRUE for this parameter if the inclusion_rule parameter is set to FALSE.See Also: Oracle Streams Replication Administrator's Guide for more information about tags</Parameter>
            <Parameter Name="SOURCE_DATABASE">The global name of the source database. The source database is where the change originated. If NULL, then the procedure does not add a condition regarding the source database to the generated rules.If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify DBS1 and the domain is .NET, then the procedure specifies DBS1.NET automatically.Oracle recommends that you specify a source database for propagation rules.</Parameter>
            <Parameter Name="DML_RULE_NAME">If include_dml is TRUE, then this parameter contains the DML rule name.If include_dml is FALSE, then this parameter contains a NULL.</Parameter>
            <Parameter Name="DDL_RULE_NAME">If include_ddl is TRUE, then this parameter contains the DDL rule name.If include_ddl is FALSE, then this parameter contains a NULL.</Parameter>
            <Parameter Name="INCLUSION_RULE">If inclusion_rule is TRUE, then the procedure adds the rules to the positive rule set for the propagation.If inclusion_rule is FALSE, then the procedure adds the rules to the negative rule set for the propagation.In either case, the system creates the rule set if it does not exist.</Parameter>
            <Parameter Name="AND_CONDITION">If non-NULL, appends the specified condition to the system-generated rule condition using an AND clause in the following way:The variable in the specified condition must be :lcr. For example, to specify that the schema rules generated by the procedure evaluate to TRUE only if the Oracle Streams tag is the hexadecimal equivalent of '02', specify the following condition:The :lcr in the specified condition is converted to :dml or :ddl, depending on the rule that is being generated. If you are specifying an LCR member subprogram that is dependent on the LCR type (row or DDL), then make sure this procedure only generates the appropriate rule.Specifically, if you specify an LCR member subprogram that is valid only for row LCRs, then specify TRUE for the include_dml parameter and FALSE for the include_ddl parameter. If you specify an LCR member subprogram that is valid only for DDL LCRs, then specify FALSE for the include_dml parameter and TRUE for the include_ddl parameter.See Also: Chapter 275, "Logical Change Record TYPEs"</Parameter>
            <Parameter Name="QUEUE_TO_QUEUE">If TRUE or NULL, then a new propagation created by this procedure is a queue to queue propagation. A queue-to-queue propagation always has its own propagation job and uses a service for automatic failover when the destination queue is a buffered queue in an Oracle Real Application Clusters (Oracle RAC) database.If FALSE, then a new propagation created by this procedure is a queue-to-dblink propagation. A queue-to-dblink propagation can share a propagation job with other propagations that use the same database link and does not support automatic failover in an Oracle RAC environment.This procedure cannot change the queue to queue property of an exiting propagation. If the specified propagation exists, then the procedure behaves in the following way for each setting:If TRUE and the specified propagation is not a queue to queue propagation, then the procedure raises an error.If FALSE and the specified propagation is a queue to queue propagation, then the procedure raises an error.If NULL, then the procedure does not change the queue to queue property of the propagation.See Also: Oracle Streams Concepts and Administration for more information about queue-to-queue propagations</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADD_SCHEMA_RULES" ElementId="#CHDEHIHG">
          <Description>Adds rules to a rule set of XStream clients.</Description>
          <Parameters>
            <Parameter Name="SCHEMA_NAME">The name of the schema. For example, hr.You can specify a schema that does not yet exist, because Oracle Streams does not validate the existence of the schema.</Parameter>
            <Parameter Name="STREAMS_TYPE">The type of XStream client:Specify capture for a capture process.Specify apply for an apply process.</Parameter>
            <Parameter Name="STREAMS_NAME">The name of the capture process or apply process. Do not specify an owner.If NULL, if streams_type is capture, and if one relevant capture process for the queue exists, then the relevant XStream client is used. If no relevant XStream client exists for the queue, then an XStream client is created automatically with a system-generated name. If NULL and multiple XStream clients of the specified streams_type for the queue exist, then the procedure raises an error.If NULL, if streams_type is apply, and if one relevant apply process exists, then the procedure uses the relevant apply process. The relevant apply process is identified in one of the following ways:If one existing apply process has the source database specified in source_database and uses the queue specified in queue_name, then the procedure uses this apply process.If source_database is NULL and one existing apply process is using the queue specified in queue_name, then the procedure uses this apply process.If NULL and no relevant apply process exists, then the procedure creates an apply process automatically with a system-generated name.If NULL and multiple relevant apply processes exist, then the procedure raises an error.Each apply process must have a unique name.</Parameter>
            <Parameter Name="QUEUE_NAME">The name of the local queue, specified as [schema_name.]queue_name. The current database must contain the queue, and the queue must be ANYDATA type.For example, to specify a queue named streams_queue in the strmadmin schema, enter strmadmin.streams_queue for this parameter. If the schema is not specified, then the current user is the default.For capture process rules, this is the queue into which a capture process enqueues LCRs. For outbound server rules, this is the queue from which the outbound server dequeues LCRs. For inbound server rules, this is the queue into which an inbound server enqueues error transactions.</Parameter>
            <Parameter Name="INCLUDE_DML">If TRUE, then the procedure creates a rule for DML changes. If FALSE, then the procedure does not create a DML rule. NULL is not permitted.</Parameter>
            <Parameter Name="INCLUDE_DDL">If TRUE, then the procedure creates a rule for DDL changes. If FALSE, then the procedure does not create a DDL rule. NULL is not permitted.</Parameter>
            <Parameter Name="INCLUDE_TAGGED_LCR">If TRUE, then the procedure does not add a condition regarding Oracle Streams tags to the generated rules. Therefore, these rules can evaluate to TRUE regardless of whether a redo entry or LCR has a non-NULL tag. If the rules are added to the positive rule set for the process, then a redo entry is always considered for capture, and an LCR is always considered for apply, regardless of whether the redo entry or LCR has a non-NULL tag. If the rules are added to a positive rule set, then setting this parameter to TRUE is appropriate for a full (for example, standby) copy of a database. If the rules are added to the negative rule set for the process, then whether a redo entry or LCR is discarded does not depend on the tag.If FALSE, then the procedure adds a condition to each generated rule that causes the rule to evaluate to TRUE only if a redo entry or LCR has a NULL Oracle Streams tag. If the rules are added to the positive rule set for the process, then a redo entry is considered for capture, and an LCR is considered for apply, only when the redo entry or LCR contains a NULL tag. If the rules are added to a positive rule set, then setting this parameter to FALSE might be appropriate in update-anywhere configurations to avoid sending a change back to its source database. If the rules are added to the negative rule set for the process, then a redo entry or LCR can be discarded only if it has a NULL tag.Usually, specify TRUE for this parameter if the inclusion_rule parameter is set to FALSE.See Also: Oracle Streams Replication Administrator's Guide for more information about tags</Parameter>
            <Parameter Name="SOURCE_DATABASE">The global name of the source database. If NULL, then the procedure does not add a condition regarding the source database to the generated rules.For capture process rules, specify NULL or the global name of the local database if you are creating a capture process locally at the source database. If you are adding rules to a downstream capture process rule set at a downstream database, then specify the source database of the changes that will be captured.For apply process rules, specify the source database of the changes that will be applied by the apply process. The source database is the database where the changes originated. If an apply process applies captured LCRs, then the apply process can apply LCRs from only one capture process at one source database.In a CDB, specify the global name of the container to which the rules pertain. The container can be the root or a PDB. For example, mycdb.example.com or hrpdb.example.com. See Oracle Database XStream Guide for more information about setting this parameter in a CDB.If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify DBS1 and the domain is .NET, then the procedure specifies DBS1.NET automatically.</Parameter>
            <Parameter Name="DML_RULE_NAME">If include_dml is TRUE, then this parameter contains the DML rule name.If include_dml is FALSE, then this parameter contains a NULL.</Parameter>
            <Parameter Name="DDL_RULE_NAME">If include_ddl is TRUE, then this parameter contains the DDL rule name.If include_ddl is FALSE, then this parameter contains a NULL.</Parameter>
            <Parameter Name="INCLUSION_RULE">If inclusion_rule is TRUE, then the procedure adds the rules to the positive rule set for the XStream client.If inclusion_rule is FALSE, then the procedure adds the rules to the negative rule set for the XStream client.In either case, the system creates the rule set if it does not exist.</Parameter>
            <Parameter Name="AND_CONDITION">If non-NULL, appends the specified condition to the system-generated rule condition using an AND clause in the following way:The variable in the specified condition must be :lcr. For example, to specify that the schema rules generated by the procedure evaluate to TRUE only if the Oracle Streams tag is the hexadecimal equivalent of '02', specify the following condition:The :lcr in the specified condition is converted to :dml or :ddl, depending on the rule that is being generated. If you are specifying an LCR member subprogram that is dependent on the LCR type (row or DDL), then make sure this procedure only generates the appropriate rule.Specifically, if you specify an LCR member subprogram that is valid only for row LCRs, then specify TRUE for the include_dml parameter and FALSE for the include_ddl parameter. If you specify an LCR member subprogram that is valid only for DDL LCRs, then specify FALSE for the include_dml parameter and TRUE for the include_ddl parameter.See Also: Chapter 275, "Logical Change Record TYPEs"</Parameter>
            <Parameter Name="SOURCE_ROOT_NAME">The global name of the root in the source CDB. For example, mycdb.example.com.If this parameter is NULL, then the global name of the root in the local CDB is used. If you are configuring downstream capture, then this parameter must be a non-NULL value, and it must specify the global name of the root in the remote source CDB. See Oracle Database XStream Guide for more information about setting this parameter in a CDB.If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify DBS1 and the domain is EXAMPLE.COM, then the procedure specifies DBS1.EXAMPLE.COM automatically.Note: This parameter only applies to a CDB.</Parameter>
            <Parameter Name="SOURCE_CONTAINER_NAME">The short name of the source container. The container can be the root or a PDB. For example, CDB$ROOT or hrpdb. See Oracle Database XStream Guide for more information about setting this parameter in a CDB.Note: This parameter only applies to a CDB.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADD_SUBSET_OUTBOUND_RULES" ElementId="#CACFEEIC">
          <Description>Adds subset rules to an outbound server configuration</Description>
          <Parameters>
            <Parameter Name="SERVER_NAME">The name of the outbound server to which rules are being added. Specify an existing outbound server. Do not specify an owner.</Parameter>
            <Parameter Name="TABLE_NAME">The name of the table specified as [schema_name.]object_name. For example, you can specify hr.employees. If the schema is not specified, then the current user is the default.If the outbound server configuration uses a local capture process, then the table must exist at the local source database. If the outbound server configuration uses a downstream capture process, then the table must exist at both the source database and at the downstream capture database.The specified table cannot have any LOB, LONG, or LONG RAW columns currently or in the future.</Parameter>
            <Parameter Name="CONDITION">The subset condition. Specify this condition similar to the way you specify conditions in a WHERE clause in SQL.For example, to specify rows in the hr.employees table where the salary is greater than 4000 and the job_id is SA_MAN, enter the following as the condition:' salary &gt; 4000 and job_id = ''SA_MAN'' 'If NULL, then the procedure raises an error.Note: The quotation marks in the preceding example are all single quotation marks.</Parameter>
            <Parameter Name="COLUMN_LIST">The list of columns either to include in the outbound server configuration or to exclude from the outbound server configuration. Whether the columns are included or excluded depends on the setting for the keep parameter.The columns can be specified in the following ways:Comma-delimited list of type VARCHAR2.A PL/SQL associative array of type DBMS_UTILITY.LNAME_ARRAY, where each element is the name of a column. Specify the first column in position 1. The last position must be NULL.To include or exclude all of the columns in a table, specify each column in the table in the list or array.If NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="KEEP">If TRUE, then the columns specified in the column_list parameter are kept as part of the outbound server configuration. Therefore, changes to these columns that satisfy the condition in the condition parameter are streamed to the outbound server's client application.If FALSE, then the columns specified in the column_list parameter are excluded from the outbound server configuration. Therefore, changes to these columns are not streamed to the outbound server's client application.See Also: "Usage Notes"</Parameter>
            <Parameter Name="SOURCE_DATABASE">The global name of the container where the specified table_names and schema_names are located.If non-NULL, then a condition is added to the outbound server's rules to filter the LCRs based on the global name of the source database. If NULL, then the procedure does not add a condition regarding the source database to the generated rules.In a CDB, specify the global name of the container to which the rules pertain. The container can be the root or a PDB. For example, mycdb.example.com or hrpdb.example.com. See Oracle Database XStream Guide for more information about setting this parameter in a CDB.If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify DBS1 and the domain is EXAMPLE.COM, then the procedure specifies DBS1.EXAMPLE.COM automatically.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADD_SUBSET_PROPAGATION_RULES" ElementId="#CHDICIJJ">
          <Description>Adds subset rules to the positive rule set for a propagation, and creates the specified propagation if it does not exist</Description>
          <Parameters>
            <Parameter Name="TABLE_NAME">The name of the table specified as [schema_name.]object_name. For example, hr.employees. If the schema is not specified, then the current user is the default.The specified table must exist in the same database as the propagation. Also, the specified table cannot have any LOB, LONG, LONG RAW, or XMLType columns currently or in the future.</Parameter>
            <Parameter Name="DML_CONDITION">The subset condition. Specify this condition similar to the way you specify conditions in a WHERE clause in SQL.For example, to specify rows in the hr.employees table where the salary is greater than 4000 and the job_id is SA_MAN, enter the following as the condition:' salary &gt; 4000 and job_id = ''SA_MAN'' 'Note: The quotation marks in the preceding example are all single quotation marks.</Parameter>
            <Parameter Name="STREAMS_NAME">The name of the propagation. Do not specify an owner.If the specified propagation does not exist, then the procedure creates it automatically.If NULL and a propagation exists for the same source queue and destination queue (including database link), then the procedure uses this propagation.If NULL and no propagation exists for the same source queue and destination queue (including database link), then the procedure creates a propagation automatically with a system-generated name.</Parameter>
            <Parameter Name="SOURCE_QUEUE_NAME">The name of the source queue, specified as [schema_name.]queue_name. The current database must contain the source queue, and the queue must be ANYDATA type.For example, to specify a source queue named streams_queue in the strmadmin schema, enter strmadmin.streams_queue for this parameter.If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="DESTINATION_QUEUE_NAME">The name of the destination queue, including a database link, specified as [schema_name.]queue_name[@dblink_name], if the destination queue is in a remote database. The queue must be ANYDATA type.For example, to specify a destination queue named streams_queue in the strmadmin schema and use a database link named dbs2.net, enter strmadmin.streams_queue@dbs2.net for this parameter.If the schema is not specified, then the current user is the default.If the database link is omitted, then the procedure uses the global name of the current database, and the source queue and destination queue must be in the same database.Note: Connection qualifiers are not allowed.</Parameter>
            <Parameter Name="INCLUDE_TAGGED_LCR">If TRUE, then an LCR is always considered for propagation, regardless of whether it has a non-NULL tag. This setting is appropriate for a full (for example, standby) copy of a database.If FALSE, then an LCR is considered for propagation only when the LCR contains a NULL tag. A setting of FALSE is often specified in update-anywhere configurations to avoid sending a change back to its source database.See Also: Oracle Streams Replication Administrator's Guide for more information about tags</Parameter>
            <Parameter Name="SOURCE_DATABASE">The global name of the source database. The source database is where the change originated. If NULL, then the procedure does not add a condition regarding the source database to the generated rules.If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify DBS1 and the domain is .NET, then the procedure specifies DBS1.NET automatically.Oracle recommends that you specify a source database for propagation rules.</Parameter>
            <Parameter Name="INSERT_RULE_NAME">Contains the system-generated INSERT rule name. This rule handles inserts and updates that must be converted into inserts.</Parameter>
            <Parameter Name="UPDATE_RULE_NAME">Contains the system-generated UPDATE rule name. This rule handles updates that remain updates.</Parameter>
            <Parameter Name="DELETE_RULE_NAME">Contains the system-generated DELETE rule name. This rule handles deletes and updates that must be converted into deletes</Parameter>
            <Parameter Name="QUEUE_TO_QUEUE">If TRUE or NULL, then a new propagation created by this procedure is a queue to queue propagation. A queue-to-queue propagation always has its own propagation job and uses a service for automatic failover when the destination queue is a buffered queue in an Oracle Real Application Clusters (Oracle RAC) database.If FALSE, then a new propagation created by this procedure is a queue-to-dblink propagation. A queue-to-dblink propagation can share a propagation job with other propagations that use the same database link and does not support automatic failover in an Oracle RAC environment.This procedure cannot change the queue to queue property of an exiting propagation. If the specified propagation exists, then the procedure behaves in the following way for each setting:If TRUE and the specified propagation is not a queue to queue propagation, then the procedure raises an error.If FALSE and the specified propagation is a queue to queue propagation, then the procedure raises an error.If NULL, then the procedure does not change the queue to queue property of the propagation.See Also: Oracle Streams Concepts and Administration for more information about queue-to-queue propagations</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADD_SUBSET_RULES" ElementId="#CHDGEGBB">
          <Description>Adds subset rules to the positive rule set of a capture process or apply process, and creates the specified capture process or apply process if it does not exist</Description>
          <Parameters>
            <Parameter Name="TABLE_NAME">The name of the table specified as [schema_name.]object_name. For example, hr.employees. If the schema is not specified, then the current user is the default.The specified table must exist in the same database as the capture process or apply process. Also, the specified table cannot have any LOB, LONG, LONG RAW, or XMLType columns currently or in the future.</Parameter>
            <Parameter Name="DML_CONDITION">The subset condition. Specify this condition similar to the way you specify conditions in a WHERE clause in SQL.For example, to specify rows in the hr.employees table where the salary is greater than 4000 and the job_id is SA_MAN, enter the following as the condition:' salary &gt; 4000 and job_id = ''SA_MAN'' 'Note: The quotation marks in the preceding example are all single quotation marks.</Parameter>
            <Parameter Name="STREAMS_TYPE">The type of XStream client:Specify capture for a capture process.Specify apply for an apply process.</Parameter>
            <Parameter Name="STREAMS_NAME">The name of the capture process or apply process. Do not specify an owner.If NULL, if streams_type is capture, and if one relevant capture process for the queue exists, then the procedure uses the relevant XStream client. If no relevant XStream client exists for the queue, then the procedure creates an XStream client automatically with a system-generated name. If NULL and multiple XStream clients of the specified streams_type for the queue exist, then the procedure raises an error.If NULL, if streams_type is apply, and if one relevant apply process exists, then the procedure uses the relevant apply process. The relevant apply process is identified in one of the following ways:If one existing apply process has the source database specified in source_database and uses the queue specified in queue_name, then the procedure uses this apply process.If source_database is NULL and one existing apply process is using the queue specified in queue_name, then the procedure uses this apply process.If NULL and no relevant apply process exists, then the procedure creates an apply process automatically with a system-generated name.If NULL and multiple relevant apply processes exist, then the procedure raises an error.Each apply process must have a unique name.</Parameter>
            <Parameter Name="QUEUE_NAME">The name of the local queue, specified as [schema_name.]queue_name. The current database must contain the queue, and the queue must be ANYDATA type.For example, to specify a queue named streams_queue in the strmadmin schema, enter strmadmin.streams_queue for this parameter. If the schema is not specified, then the current user is the default.For capture process rules, this is the queue into which a capture process enqueues LCRs. For outbound server rules, this is the queue from which the outbound server dequeues LCRs. For inbound server rules, this is the queue into which an inbound server enqueues error transactions.</Parameter>
            <Parameter Name="INCLUDE_TAGGED_LCR">If TRUE, then the XStream client performs its action regardless of the tag:A redo entry is always considered for capture by a capture process, regardless of whether the redo entry has a non-NULL tag.An LCR is always considered for apply by an apply process, regardless of whether redo entry or LCR has a non-NULL tag.If FALSE, then an XStream client performs its action only when the tag is NULL:A redo entry is considered for capture by a capture process only when the redo entry contains a NULL tag.An LCR is considered for apply by an apply process only if the LCR contains a NULL tag.A setting of FALSE is often specified in update-anywhere configurations to avoid sending a change back to its source database.See Also: Oracle Streams Replication Administrator's Guide for more information about tags</Parameter>
            <Parameter Name="SOURCE_DATABASE">The global name of the source database. If NULL, then the procedure does not add a condition regarding the source database to the generated rules.For capture process rules, specify NULL or the global name of the local database if you are creating a capture process locally at the source database. If you are adding rules to a downstream capture process rule set at a downstream database, then specify the source database of the changes that will be captured.For apply process rules, specify the source database of the changes that will be applied by the apply process. The source database is the database where the changes originated. If an apply process applies captured LCRs, then the apply process can apply LCRs from only one capture process at one source database.In a CDB, specify the global name of the container to which the rules pertain. The container can be the root or a PDB. For example, mycdb.example.com or hrpdb.example.com. See Oracle Database XStream Guide for more information about setting this parameter in a CDB.If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify DBS1 and the domain is .NET, then the procedure specifies DBS1.NET automatically.</Parameter>
            <Parameter Name="INSERT_RULE_NAME">Contains the system-generated INSERT rule name. This rule handles inserts and updates that must be converted into inserts.</Parameter>
            <Parameter Name="UPDATE_RULE_NAME">Contains the system-generated UPDATE rule name. This rule handles updates that remain updates.</Parameter>
            <Parameter Name="DELETE_RULE_NAME">Contains the system-generated DELETE rule name. This rule handles deletes and updates that must be converted into deletes</Parameter>
            <Parameter Name="SOURCE_ROOT_NAME">The global name of the root in the source CDB. For example, mycdb.example.com.If this parameter is NULL, then the global name of the root in the local CDB is used. If you are configuring downstream capture, then this parameter must be a non-NULL value, and it must specify the global name of the root in the remote source CDB. See Oracle Database XStream Guide for more information about setting this parameter in a CDB.If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify DBS1 and the domain is EXAMPLE.COM, then the procedure specifies DBS1.EXAMPLE.COM automatically.Note: This parameter only applies to a CDB.</Parameter>
            <Parameter Name="SOURCE_CONTAINER_NAME">The short name of the source container. The container can be the root or a PDB. For example, CDB$ROOT or hrpdb. See Oracle Database XStream Guide for more information about setting this parameter in a CDB.Note: This parameter only applies to a CDB.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADD_TABLE_PROPAGATION_RULES" ElementId="#CHDHAGHE">
          <Description>Either adds table rules to the positive rule set for a propagation, or adds table rules to the negative rule set for a propagation, and creates the specified propagation if it does not exist</Description>
          <Parameters>
            <Parameter Name="TABLE_NAME">The name of the table specified as [schema_name.]table_name. For example, hr.employees. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="STREAMS_NAME">The name of the propagation. Do not specify an owner.If the specified propagation does not exist, then the procedure creates it automatically.If NULL and a propagation exists for the same source queue and destination queue (including database link), then the procedure uses this propagation.If NULL and no propagation exists for the same source queue and destination queue (including database link), then the procedure creates a propagation automatically with a system-generated name.</Parameter>
            <Parameter Name="SOURCE_QUEUE_NAME">The name of the source queue, specified as [schema_name.]queue_name. The current database must contain the source queue, and the queue must be ANYDATA type.For example, to specify a source queue named streams_queue in the strmadmin schema, enter strmadmin.streams_queue for this parameter.If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="DESTINATION_QUEUE_NAME">The name of the destination queue, including a database link, specified as [schema_name.]queue_name[@dblink_name], if the destination queue is in a remote database. The queue must be ANYDATA type.For example, to specify a destination queue named streams_queue in the strmadmin schema and use a database link named dbs2.net, enter strmadmin.streams_queue@dbs2.net for this parameter.If the schema is not specified, then the current user is the default.If the database link is omitted, then the procedure uses the global name of the current database, and the source queue and destination queue must be in the same database.Note: Connection qualifiers are not allowed.</Parameter>
            <Parameter Name="INCLUDE_DML">If TRUE, then the procedure creates a rule for DML changes. If FALSE, then the procedure does not create a DML rule. NULL is not permitted.</Parameter>
            <Parameter Name="INCLUDE_DDL">If TRUE, then the procedure creates a rule for DDL changes. If FALSE, then the procedure does not create a DDL rule. NULL is not permitted.The generated rule evaluates to TRUE for any DDL change that operates on the table or on an object that is part of the table, such as an index or trigger on the table. The rule evaluates to FALSE for any DDL change that either does not refer to the table or refers to the table in a subordinate way. For example, the rule evaluates to FALSE for changes that create synonyms or views based on the table. The rule also evaluates to FALSE for a change to a PL/SQL subprogram that refers to the table.</Parameter>
            <Parameter Name="INCLUDE_TAGGED_LCR">If TRUE, then the procedure does not add a condition regarding Oracle Streams tags to the generated rules. Therefore, these rules can evaluate to TRUE regardless of whether a logical change record (LCR) has a non-NULL tag. If the rules are added to the positive rule set for the propagation, then an LCR is always considered for propagation, regardless of whether it has a non-NULL tag. If the rules are added to a positive rule set, then setting this parameter to TRUE is appropriate for a full (for example, standby) copy of a database. If the rules are added to the negative rule set for the propagation, then whether an LCR is discarded does not depend on the tag for the LCR.If FALSE, then the procedure adds a condition to each generated rule that causes the rule to evaluate to TRUE only if an LCR has a NULL Oracle Streams tag. If the rules are added to the positive rule set for the propagation, then an LCR is considered for propagation only when the LCR contains a NULL tag. If the rules are added to a positive rule set, then setting this parameter to FALSE might be appropriate in update-anywhere configurations to avoid sending a change back to its source database. If the rules are added to the negative rule set for the propagation, then an LCR can be discarded only if it has a NULL tag.Usually, specify TRUE for this parameter if the inclusion_rule parameter is set to FALSE.See Also: Oracle Streams Replication Administrator's Guide for more information about tags</Parameter>
            <Parameter Name="SOURCE_DATABASE">The global name of the source database. The source database is where the change originated. If NULL, then the procedure does not add a condition regarding the source database to the generated rules.If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify DBS1 and the domain is .NET, then the procedure specifies DBS1.NET automatically.Oracle recommends that you specify a source database for propagation rules.</Parameter>
            <Parameter Name="DML_RULE_NAME">If include_dml is TRUE, then this parameter contains the DML rule name.If include_dml is FALSE, then this parameter contains a NULL.</Parameter>
            <Parameter Name="DDL_RULE_NAME">If include_ddl is TRUE, then this parameter contains the DDL rule name.If include_ddl is FALSE, then this parameter contains a NULL.</Parameter>
            <Parameter Name="INCLUSION_RULE">If inclusion_rule is TRUE, then the procedure adds the rules to the positive rule set for the propagation.If inclusion_rule is FALSE, then the procedure adds the rules to the negative rule set for the propagation.In either case, the system creates the rule set if it does not exist.</Parameter>
            <Parameter Name="AND_CONDITION">If non-NULL, appends the specified condition to the system-generated rule condition using an AND clause in the following way:The variable in the specified condition must be :lcr. For example, to specify that the table rules generated by the procedure evaluate to TRUE only if the Oracle Streams tag is the hexadecimal equivalent of '02', specify the following condition:The :lcr in the specified condition is converted to :dml or :ddl, depending on the rule that is being generated. If you are specifying an LCR member subprogram that is dependent on the LCR type (row or DDL), then make sure this procedure only generates the appropriate rule.Specifically, if you specify an LCR member subprogram that is valid only for row LCRs, then specify TRUE for the include_dml parameter and FALSE for the include_ddl parameter. If you specify an LCR member subprogram that is valid only for DDL LCRs, then specify FALSE for the include_dml parameter and TRUE for the include_ddl parameter.See Also: Chapter 275, "Logical Change Record TYPEs"</Parameter>
            <Parameter Name="QUEUE_TO_QUEUE">If TRUE or NULL, then a new propagation created by this procedure is a queue to queue propagation. A queue-to-queue propagation always has its own propagation job and uses a service for automatic failover when the destination queue is a buffered queue in an Oracle Real Application Clusters (Oracle RAC) database.If FALSE, then a new propagation created by this procedure is a queue-to-dblink propagation. A queue-to-dblink propagation can share a propagation job with other propagations that use the same database link and does not support automatic failover in an Oracle RAC environment.This procedure cannot change the queue to queue property of an exiting propagation. If the specified propagation exists, then the procedure behaves in the following way for each setting:If TRUE and the specified propagation is not a queue to queue propagation, then the procedure raises an error.If FALSE and the specified propagation is a queue to queue propagation, then the procedure raises an error.If NULL, then the procedure does not change the queue to queue property of the propagation.See Also: Oracle Streams Concepts and Administration for more information about queue-to-queue propagations</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ADD_TABLE_RULES" ElementId="#CHDBDCDG">
          <Description>This procedure adds rules to a rule set of an XStream client.</Description>
          <Parameters>
            <Parameter Name="TABLE_NAME">The name of the table specified as [schema_name.]object_name. For example, hr.employees. If the schema is not specified, then the current user is the default.You can specify a table that does not yet exist, because Oracle Streams does not validate the existence of the table.</Parameter>
            <Parameter Name="STREAMS_TYPE">The type of XStream client:Specify capture for a capture process.Specify apply for an apply process.</Parameter>
            <Parameter Name="STREAMS_NAME">The name of the capture process or apply process. Do not specify an owner.If NULL, if streams_type is capture, and if one relevant capture process for the queue exists, then the procedure uses the relevant XStream client. If no relevant XStream client exists for the queue, then the procedure creates an XStream client automatically with a system-generated name. If NULL and multiple XStream clients of the specified streams_type for the queue exist, then the procedure raises an error.If NULL, if streams_type is apply, and if one relevant apply process exists, then the procedure uses the relevant apply process. The relevant apply process is identified in one of the following ways:If one existing apply process has the source database specified in source_database and uses the queue specified in queue_name, then the procedure uses this apply process.If source_database is NULL and one existing apply process is using the queue specified in queue_name, then the procedure uses this apply process.If NULL and no relevant apply process exists, then the procedure creates an apply process automatically with a system-generated name.If NULL and multiple relevant apply processes exist, then the procedure raises an error.Each apply process must have a unique name.</Parameter>
            <Parameter Name="QUEUE_NAME">The name of the local queue, specified as [schema_name.]queue_name. The current database must contain the queue, and the queue must be ANYDATA type.For example, to specify a queue named streams_queue in the strmadmin schema, enter strmadmin.streams_queue for this parameter. If the schema is not specified, then the current user is the default.For capture process rules, this is the queue into which a capture process enqueues LCRs. For outbound server rules, this is the queue from which the outbound server dequeues LCRs. For inbound server rules, this is the queue into which an inbound server enqueues error transactions.</Parameter>
            <Parameter Name="INCLUDE_DML">If TRUE, then the procedure creates a DML rule for DML changes. If FALSE, then the procedure does not create a DML rule. NULL is not permitted.</Parameter>
            <Parameter Name="INCLUDE_DDL">If TRUE, then the procedure creates a DDL rule for DDL changes. If FALSE, then the procedure does not create a DDL rule. NULL is not permitted.The generated rule evaluates to TRUE for any DDL change that operates on the table or on an object that is part of the table, such as an index or trigger on the table. The rule evaluates to FALSE for any DDL change that either does not refer to the table or refers to the table in a subordinate way. For example, the rule evaluates to FALSE for changes that create synonyms or views based on the table. The rule also evaluates to FALSE for a change to a PL/SQL subprogram that refers to the table.</Parameter>
            <Parameter Name="INCLUDE_TAGGED_LCR">If TRUE, then the procedure does not add a condition regarding Oracle Streams tags to the generated rules. Therefore, these rules can evaluate to TRUE regardless of whether a redo entry, session, or LCR has a non-NULL tag. If the rules are added to the positive rule set for the XStream client, then the XStream client performs its action regardless of the tag:A redo entry is always considered for capture by a capture process, regardless of whether the redo entry has a non-NULL tag.An LCR is always considered for apply by an apply process, regardless of whether redo entry or LCR has a non-NULL tag.If the rules are added to a positive rule set, then setting this parameter to TRUE is appropriate for a full (for example, standby) copy of a database. If the rules are added to the negative rule set for the XStream client, then whether a database change is discarded does not depend on the tag.If FALSE, then the procedure adds a condition to each generated rule that causes the rule to evaluate to TRUE only if a redo entry, session, or LCR has a NULL Oracle Streams tag. If the rules are added to the positive rule set for an XStream client, then the XStream client performs its action only when the tag is NULL:A redo entry is considered for capture by a capture process only when the redo entry contains a NULL tag.An LCR is considered for apply by an apply process only if the LCR contains a NULL tag.If the rules are added to a positive rule set, then setting this parameter to FALSE might be appropriate in update-anywhere configurations to avoid sending a change back to its source database. If the rules are added to the negative rule set for the XStream client, then a database change can be discarded only if it has a NULL tag.A setting of FALSE is often specified in update-anywhere configurations to avoid sending a change back to its source database.Usually, specify TRUE for this parameter if the inclusion_rule parameter is set to FALSE.See Also: Oracle Streams Replication Administrator's Guide for more information about tags</Parameter>
            <Parameter Name="SOURCE_DATABASE">The global name of the source database. If NULL, then the procedure does not add a condition regarding the source database to the generated rules.For capture process rules, specify NULL or the global name of the local database if you are creating a capture process locally at the source database. If you are adding rules to a downstream capture process rule set at a downstream database, then specify the source database of the changes that will be captured.For apply process rules, specify the source database of the changes that will be applied by the apply process. The source database is the database where the changes originated. If an apply process applies captured LCRs, then the apply process can apply LCRs from only one capture process at one source database.In a CDB, specify the global name of the container to which the rules pertain. The container can be the root or a PDB. For example, mycdb.example.com or hrpdb.example.com. See Oracle Database XStream Guide for more information about setting this parameter in a CDB.If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify DBS1 and the domain is .NET, then the procedure specifies DBS1.NET automatically.</Parameter>
            <Parameter Name="DML_RULE_NAME">If include_dml is TRUE, then this parameter contains the DML rule name.If include_dml is FALSE, then this parameter contains a NULL.</Parameter>
            <Parameter Name="DDL_RULE_NAME">If include_ddl is TRUE, then this parameter contains the DDL rule name.If include_ddl is FALSE, then this parameter contains a NULL.</Parameter>
            <Parameter Name="INCLUSION_RULE">If inclusion_rule is TRUE, then the procedure adds the rules to the positive rule set for the XStream client.If inclusion_rule is FALSE, then the procedure adds the rules to the negative rule set for the XStream client.In either case, the system creates the rule set if it does not exist.</Parameter>
            <Parameter Name="AND_CONDITION">If non-NULL, appends the specified condition to the system-generated rule condition using an AND clause in the following way:The variable in the specified condition must be :lcr. For example, to specify that the table rules generated by the procedure evaluate to TRUE only if the Oracle Streams tag is the hexadecimal equivalent of '02', specify the following condition:The :lcr in the specified condition is converted to :dml or :ddl, depending on the rule that is being generated. If you are specifying an LCR member subprogram that is dependent on the LCR type (row or DDL), then make sure this procedure only generates the appropriate rule.Specifically, if you specify an LCR member subprogram that is valid only for row LCRs, then specify TRUE for the include_dml parameter and FALSE for the include_ddl parameter. If you specify an LCR member subprogram that is valid only for DDL LCRs, then specify FALSE for the include_dml parameter and TRUE for the include_ddl parameter.See Also: Chapter 275, "Logical Change Record TYPEs"</Parameter>
            <Parameter Name="SOURCE_ROOT_NAME">The global name of the root in the source CDB. For example, mycdb.example.com.If this parameter is NULL, then the global name of the root in the local CDB is used. If you are configuring downstream capture, then this parameter must be a non-NULL value, and it must specify the global name of the root in the remote source CDB. See Oracle Database XStream Guide for more information about setting this parameter in a CDB.If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify DBS1 and the domain is EXAMPLE.COM, then the procedure specifies DBS1.EXAMPLE.COM automatically.Note: This parameter only applies to a CDB.</Parameter>
            <Parameter Name="SOURCE_CONTAINER_NAME">The short name of the source container. The container can be the root or a PDB. For example, CDB$ROOT or hrpdb. See Oracle Database XStream Guide for more information about setting this parameter in a CDB.Note: This parameter only applies to a CDB.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ALTER_INBOUND" ElementId="#CACHIFDH">
          <Description>Modifies an XStream inbound server</Description>
          <Parameters>
            <Parameter Name="SERVER_NAME">The name of the inbound server being altered. Specify an existing inbound server. Do not specify an owner.</Parameter>
            <Parameter Name="APPLY_USER">The user who applies all DML and DDL changes that satisfy the inbound server rule sets, who runs user-defined apply handlers, and who runs custom rule-based transformations configured for inbound server rules.The client application must attach to the inbound server as the apply user.Specify a user to change the apply user. In this case, the user who invokes the ALTER_INBOUND procedure must be granted the DBA role. Only the SYS user can set the apply_user to SYS.If NULL, then the apply user is not changed.See "CREATE_INBOUND Procedure" for information about the required privileges for an apply user.</Parameter>
            <Parameter Name="COMMENT">An optional comment associated with the inbound server.If non-NULL, then the specified comment replaces the existing comment.If NULL, then the existing comment is not changed.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ALTER_OUTBOUND" ElementId="#CACEFHHB">
          <Description>Modifies an XStream outbound server</Description>
          <Parameters>
            <Parameter Name="SERVER_NAME">The name of the outbound server being altered. Specify an existing outbound server. Do not specify an owner.</Parameter>
            <Parameter Name="TABLE_NAMES">The tables that are either added to or removed from the XStream Out configuration. Whether the tables are added or removed depends on the setting for the add parameter.The tables can be specified in the following ways:Comma-delimited list of type VARCHAR2.A PL/SQL associative array of type DBMS_UTILITY.UNCL_ARRAY, where each element is the name of a table. Specify the first table in position 1. The last position must be NULL.Each table should be specified as [schema_name.]table_name. For example, hr.employees. If the schema is not specified, then the current user is the default.See Also: "Usage Notes" for more information about this parameter</Parameter>
            <Parameter Name="SCHEMA_NAMES">The schemas that are either added to or removed from the XStream Out configuration. Whether the schemas are added or removed depends on the setting for the add parameter.The schemas can be specified in the following ways:Comma-delimited list of type VARCHAR2.A PL/SQL associative array of type DBMS_UTILITY.UNCL_ARRAY, where each element is the name of a schema. Specify the first schema in position 1. The last position must be NULL.Note: This procedure does not concatenate the schema_names parameter with the table_names parameter. To specify tables, enter fully qualified table names in the table_names parameter (schema_name.table_name).See Also: "Usage Notes" for more information about this parameter</Parameter>
            <Parameter Name="ADD">If TRUE, then the procedure adds to the XStream Out configuration the tables specified in the table_names parameter and the schemas specified in the schema_names parameter.If FALSE, then the procedure removes from the XStream Out configuration the tables specified in the table_names parameter and the schemas specified in the schema_names parameter.</Parameter>
            <Parameter Name="CAPTURE_USER">The user in whose security domain a capture process captures changes that satisfy its rule sets and runs custom rule-based transformations configured for capture process rules.Specify a user to change the capture user. In this case, the user who invokes the ALTER_OUTBOUND procedure must be granted the DBA role. Only the SYS user can set the capture_user to SYS.If NULL, then the capture user is not changed.If you change the capture user, then this procedure grants the new capture user enqueue privilege on the queue used by the capture process and configures the user as a secure queue user.Ensure that the capture user is granted the other required privileges. See "CREATE_OUTBOUND Procedure" for information about the privileges required by a capture user.The capture process is stopped and restarted automatically when you change the value of this parameter.Note: If the capture user for a capture process is dropped using DROP USER . . .  CASCADE, then the capture process is also dropped automatically.</Parameter>
            <Parameter Name="CONNECT_USER">The user who can attach to the specified outbound server to retrieve the change stream. The XStream client application must attach to the outbound server as the specified connect user.Specify a user to change the connect user. In this case, the user who invokes the ALTER_OUTBOUND procedure must be granted the DBA role. Only the SYS user can set the connect_user to SYS.If NULL, then the connect user is not changed.If you change the connect user, then this procedure grants the new connect user dequeue privileges on the queue used by the outbound server and configures the user as a secure queue user.Ensure that the connect user is granted the other required privileges. See "CREATE_OUTBOUND Procedure" for information about the privileges required by a connect user.</Parameter>
            <Parameter Name="COMMENT">An optional comment associated with the outbound server.If non-NULL, then the specified comment replaces the existing comment.If NULL, then the existing comment is not changed.</Parameter>
            <Parameter Name="INCLUSION_RULE">If TRUE and the add parameter is set to TRUE, then the procedure adds rules for the tables specified in the table_names parameter and the schemas specified in the schema_names parameter to the positive rule sets in the XStream Out configuration. When rules for tables and schemas are in positive rule sets, the XStream Out configuration streams DML and DDL changes to the tables and schemas out to the client application.If TRUE and the add parameter is set to FALSE, then the procedure removes rules for the tables specified in the table_names parameter and the schemas specified in the schema_names parameter from the positive rule sets in the XStream Out configuration.If FALSE and the add parameter is set to TRUE, then the procedure adds rules for the tables specified in the table_names parameter and the schemas specified in the schema_names parameter to the negative rule sets in the XStream Out configuration. When rules for tables and schemas are in negative rule sets, the XStream Out configuration does not stream changes to the tables and schemas out to the client application.If FALSE and the add parameter is set to FALSE, then the procedure removes rules for the tables specified in the table_names parameter and the schemas specified in the schema_names parameter from the negative rule sets in the XStream Out configuration.</Parameter>
            <Parameter Name="START_SCN">A valid SCN for the database from which the capture process starts capturing changes. To be valid, the SCN value must be greater than or equal to the first SCN for the capture process.If a valid SCN is specified, then the capture process captures changes from the specified SCN when it is restarted.An error is returned if an invalid SCN is specified.If NULL and the start_time parameter is NULL, then the start SCN is not changed.If NULL and the start_time parameter is non-NULL, then the start SCN is changed to match the specified start time.The start_scn and start_time parameters are mutually exclusive.Note: If the capture process is enabled, then the ALTER_OUTBOUND procedure automatically stops and restarts the capture process when the start_scn parameter is non-NULL. If the capture process is disabled, then the ALTER_OUTBOUND procedure automatically starts the capture process when the start_scn parameter is non-NULL.</Parameter>
            <Parameter Name="START_TIME">A valid time from which the capture process starts capturing changes. To be valid, the time must correspond to an SCN value that is greater than or equal to the first SCN for the capture process.If a valid time is specified, then the capture process captures changes from the specified time when it is restarted.An error is returned if an invalid time is specified.If NULL and the start_scn parameter is NULL, then the start time is not changed.If NULL and the start_scn parameter is non-NULL, then the start time is changed to match the specified start SCN.The start_scn and start_time parameters are mutually exclusive.Note: If the capture process is enabled, then the ALTER_OUTBOUND procedure automatically stops and restarts the capture process when the start_time parameter is non-NULL. If the capture process is disabled, then the ALTER_OUTBOUND procedure automatically starts the capture process when the start_time parameter is non-NULL.</Parameter>
            <Parameter Name="INCLUDE_DML">If TRUE, then the procedure creates a DML rule for DML changes. If FALSE, then the procedure does not create a DML rule. NULL is not permitted.</Parameter>
            <Parameter Name="INCLUDE_DDL">If TRUE, then the procedure creates a DDL rule for DDL changes. If FALSE, then the procedure does not create a DDL rule. NULL is not permitted.</Parameter>
            <Parameter Name="SOURCE_DATABASE">The global name of the container where the specified table_names and schema_names are located.If source_database is non-NULL, then a condition is added to the outbound server's rules to filter the LCRs based on the global name of the source database.</Parameter>
            <Parameter Name="SOURCE_CONTAINER_NAME">The short name of the source container. The container can be the root or a PDB. For example, CDB$ROOT or hrpdb. See Oracle Database XStream Guide for more information about setting this parameter in a CDB.Note: This parameter only applies to a CDB.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_INBOUND" ElementId="#CACEGCGG">
          <Description>Creates an XStream inbound server and its queue</Description>
          <Parameters>
            <Parameter Name="SERVER_NAME">The name of the inbound server being created. A NULL specification is not allowed. Do not specify an owner.The specified name must not match the name of an existing outbound server, inbound server, apply process, or messaging client.Note: The server_name setting cannot exceed 30 bytes, and it cannot be altered after the inbound server is created.</Parameter>
            <Parameter Name="QUEUE_NAME">The name of the local queue used by the inbound server, specified as [schema_name.]queue_name.If the specified queue exists, then it is used. If the specified queue does not exist, then the procedure creates it.For example, to specify a queue named xstream_queue in the xstrmadmin schema, enter xstrmadmin.xstream_queue for this parameter. If the schema is not specified, then the current user is the default.Note: An inbound server's queue is used only to store error transactions.</Parameter>
            <Parameter Name="APPLY_USER">The apply user. If NULL, then the current user is the default.The client application must attach to the inbound server as the apply user.The apply user is the user in whose security domain an inbound server evaluates whether LCRs satisfy its rule sets, applies DML and DDL changes directly to database objects, runs custom rule-based transformations configured for inbound server rules, and runs apply handlers configured for the inbound server. This user must have the necessary privileges to perform these actions. This procedure grants the apply user dequeue privileges on the queue used by the inbound server and configures the user as a secure queue user.In addition to the privileges granted by this procedure, you must grant the following privileges to the apply user:The necessary privileges to perform DML and DDL changes on the apply objectsEXECUTE privilege on the rule sets used by the inbound serverEXECUTE privilege on all rule-based transformation functions used in the rule setEXECUTE privilege on all apply handler proceduresYou can grant these privileges directly to the apply user, or you can grant them through roles.In addition, the apply user must be granted EXECUTE privilege on all packages, including Oracle supplied packages, that are invoked in subprograms run by the inbound server. These privileges must be granted directly to the apply user. They cannot be granted through roles.Note: If the apply user for an inbound server is dropped using DROP USER . . .  CASCADE, then the inbound server is also dropped automatically.</Parameter>
            <Parameter Name="COMMENT">An optional comment associated with the inbound server.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_OUTBOUND" ElementId="#CACBHJDD">
          <Description>Creates an XStream outbound server, queue, and capture process to enable XStream client applications to stream out Oracle database changes encapsulated in LCRs</Description>
          <Parameters>
            <Parameter Name="SERVER_NAME">The name of the outbound server being created. A NULL specification is not allowed. Do not specify an owner.The specified name must not match the name of an existing outbound server, inbound server, apply process, or messaging client.Note: The server_name setting cannot exceed 30 bytes, and it cannot be altered after the outbound server is created.</Parameter>
            <Parameter Name="SOURCE_DATABASE">The global name of the source database. The source database is where the changes to be captured originated.If non-NULL, then a condition is added to the outbound server's rules to filter the LCRs based on the global name of the source database. If NULL, then the procedure does not add a condition regarding the source database to the generated rules.In a CDB, specify the global name of the container to which the rules pertain. The container can be the root or a PDB. For example, mycdb.example.com or hrpdb.example.com. See Oracle Database XStream Guide for more information about setting this parameter in a CDB.In a non-CDB, if non-NULL and the specified name is different from the global name of the current database, then downstream capture is assumed. In this case, configure the transmission of redo data from the source database to the downstream database before running the CREATE_OUTBOUND procedure. See Oracle Database XStream Guide for instructions.If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify DBS1 and the domain is EXAMPLE.COM, then the procedure specifies DBS1.EXAMPLE.COM automatically.</Parameter>
            <Parameter Name="TABLE_NAMES">The tables for which DML and DDL changes are streamed out to the XStream client application. The tables can be specified in the following ways:Comma-delimited list of type VARCHAR2.A PL/SQL associative array of type DBMS_UTILITY.UNCL_ARRAY, where each element is the name of a table. Specify the first table in position 1. The last position must be NULL.Each table should be specified as [schema_name.]table_name. For example, hr.employees. If the schema is not specified, then the current user is the default.See Also: "Usage Notes" for more information about this parameter</Parameter>
            <Parameter Name="SCHEMA_NAMES">The schemas for which DML and DDL changes are streamed out to the XStream client application. The schemas can be specified in the following ways:Comma-delimited list of type VARCHAR2.A PL/SQL associative array of type DBMS_UTILITY.UNCL_ARRAY, where each element is the name of a schema. Specify the first schema in position 1. The last position must be NULL.Note: This procedure does not concatenate the schema_names parameter with the table_names parameter. To specify tables, enter fully qualified table names in the table_names parameter (schema_name.table_name).See Also: "Usage Notes" for more information about this parameter</Parameter>
            <Parameter Name="CAPTURE_USER">The user in whose security domain a capture process captures changes that satisfy its rule sets and runs custom rule-based transformations configured for capture process rules. If NULL, then the current user is the default.This procedure grants the capture user enqueue privilege on the queue used by the capture process and configures the user as a secure queue user.In addition, ensure that the capture user has the following privileges:EXECUTE privilege on the rule sets used by the capture processEXECUTE privilege on all rule-based transformation functions used in the positive rule setYou can grant these privileges directly to the apply user, or you can grant them through roles.In addition, the capture user must be granted EXECUTE privilege on all packages, including Oracle supplied packages, that are invoked in rule-based transformations run by the capture process. These privileges must be granted directly to the capture user. They cannot be granted through roles.Only a user who is granted the DBA role can set a capture user. Only the SYS user can set the capture_user to SYS.A capture user does not require privileges on a database object to capture changes made to it. The capture process can pass these changes to a custom rule-based transformation function. Therefore, ensure that you consider security implications when you configure a capture process.</Parameter>
            <Parameter Name="CONNECT_USER">The user who can attach to the specified outbound server to retrieve the change stream. The client application must attach to the outbound server as the specified connect user.If NULL, then the current user is the default.The connect user is the user in whose security domain an outbound server evaluates LCRs against its rule sets and runs custom rule-based transformations configured for outbound server rules. This user must have the necessary privileges to perform these actions. This procedure grants the connect user dequeue privileges on the queue used by the outbound server and configures the user as a secure queue user.In addition to the privileges granted by this procedure, grant the following privileges to the connect user:EXECUTE privilege on the rule sets used by the outbound serverEXECUTE privilege on all rule-based transformation functions used in the rule setYou can grant these privileges directly to the connect user, or you can grant them through roles.In addition, the connect user must be granted EXECUTE privilege on all packages, including Oracle supplied packages, that are invoked in subprograms run by the outbound server. These privileges must be granted directly to the apply user. They cannot be granted through roles.</Parameter>
            <Parameter Name="COMMENT">An optional comment associated with the outbound server.</Parameter>
            <Parameter Name="CAPTURE_NAME">The name of the capture process configured to capture changes for the outbound server. Do not specify an owner.The capture process must not exist. If the specified name matches the name of an existing capture process, then an error is raised.If the name does not match the name of an existing capture process, then the procedure creates a new capture process with the specified name.If NULL, then the system creates a new capture process with a system-generated name.Note: The capture process name cannot be altered after the capture process is created.</Parameter>
            <Parameter Name="INCLUDE_DML">If TRUE, then the procedure creates a DML rule for DML changes. If FALSE, then the procedure does not create a DML rule. NULL is not permitted.</Parameter>
            <Parameter Name="INCLUDE_DDL">If TRUE, then the procedure creates a DDL rule for DDL changes. If FALSE, then the procedure does not create a DDL rule. NULL is not permitted.</Parameter>
            <Parameter Name="SOURCE_ROOT_NAME">The global name of the root in the source CDB. For example, mycdb.example.com.If this parameter is NULL, then the global name of the root in the local CDB is used. If you are configuring downstream capture, then this parameter must be a non-NULL value, and it must specify the global name of the root in the remote source CDB. See Oracle Database XStream Guide for more information about setting this parameter in a CDB.If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify DBS1 and the domain is EXAMPLE.COM, then the procedure specifies DBS1.EXAMPLE.COM automatically.Note: This parameter only applies to a CDB.</Parameter>
            <Parameter Name="SOURCE_CONTAINER_NAME">The short name of the source container. The container can be the root or a PDB. For example, CDB$ROOT or hrpdb. See Oracle Database XStream Guide for more information about setting this parameter in a CDB.Note: This parameter only applies to a CDB.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DELETE_COLUMN" ElementId="#CHDIJJEC">
          <Description>Either adds or removes a declarative rule-based transformation which deletes a column from a row LCR that satisfies the specified rule</Description>
          <Parameters>
            <Parameter Name="RULE_NAME">The name of the rule, specified as [schema_name.]rule_name. If NULL, then the procedure raises an error.For example, to specify a rule in the hr schema named employees12, enter hr.employees12. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="TABLE_NAME">The name of the table from which the column is deleted in the row LCR, specified as [schema_name.]object_name. For example, hr.employees. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="COLUMN_NAME">The name of the column deleted from each row LCR that satisfies the rule.</Parameter>
            <Parameter Name="VALUE_TYPE">Specify 'NEW' to delete the column from the new values in the row LCR.Specify 'OLD' to delete the column from the old values in the row LCR.Specify '*' to delete the column from both the old and new values in the row LCR.</Parameter>
            <Parameter Name="STEP_NUMBER">The order of execution of the transformation.See Also: Oracle Database XStream Guide for more information about transformation ordering</Parameter>
            <Parameter Name="OPERATION">Specify 'ADD' to add the transformation to the rule.Specify 'REMOVE' to remove the transformation from the rule.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_INBOUND" ElementId="#CACBGICJ">
          <Description>Removes an inbound server configuration</Description>
          <Parameters>
            <Parameter Name="SERVER_NAME">The name of the inbound server being removed. Specify an existing inbound server. Do not specify an owner.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DROP_OUTBOUND" ElementId="#CACICJHG">
          <Description>Removes an outbound server configuration</Description>
          <Parameters>
            <Parameter Name="SERVER_NAME">The name of the outbound server being removed. Specify an existing outbound server. Do not specify an owner.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ENABLE_GG_XSTREAM_FOR_STREAMS" ElementId="#CIAHCHJD">
          <Description>Enables XStream performance optimizations for Oracle Streams components</Description>
          <Parameters>
            <Parameter Name="ENABLE">If TRUE, then enable XStream performance optimizations for Oracle Streams components.If FALSE, then disable XStream performance optimizations for Oracle Streams components.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_MESSAGE_TRACKING" ElementId="#CHDDIGJF">
          <Description>Returns the tracking label for the current session</Description>
        </SubProgram>
        <SubProgram Name="GET_TAG" ElementId="#CHDJEBGF">
          <Description>Gets the binary tag for all redo entries generated by the current session</Description>
        </SubProgram>
        <SubProgram Name="IS_GG_XSTREAM_FOR_STREAMS" ElementId="#CIABJEJF">
          <Description>Returns TRUE if XStream performance optimizations are enabled for Oracle Streams components, or returns FALSE if XStream performance optimizations are disabled for Oracle Streams components</Description>
        </SubProgram>
        <SubProgram Name="KEEP_COLUMNS" ElementId="#CHDHEBJB">
          <Description>Either adds or removes a declarative rule-based transformation which keeps a list of columns in a row LCR that satisfies the specified rule</Description>
          <Parameters>
            <Parameter Name="RULE_NAME">The name of the rule, specified as [schema_name.]rule_name. If NULL, then the procedure raises an error.For example, to specify a rule in the hr schema named employees12, enter hr.employees12. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="TABLE_NAME">The name of the table for which the columns are kept in the row LCR, specified as [schema_name.]object_name. For example, hr.employees. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="COLUMN_LIST">The names of the columns kept for each row LCR that satisfies the rule. Specify a comma-delimited list of type VARCHAR2. The transformation removes columns that are not in the list from the row LCR.If this parameter is set to NULL, and the column_table parameter is also set to NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="COLUMN_TABLE">The names of the columns kept for each row LCR that satisfies the rule. Specify a PL/SQL associative array of type DBMS_UTILITY.LNAME_ARRAY, where each element is the name of a column. The first schema should be in position 1. The last position must be NULL.The transformation removes columns that are not in the table from the row LCR.If this parameter is set to NULL, and the column_list parameter is also set to NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="VALUE_TYPE">Specify 'NEW' to keep the columns in the new values in the row LCR.Specify 'OLD' to keep the columns in the old values in the row LCR.Specify '*' to keep the columns in both the old and new values in the row LCR.</Parameter>
            <Parameter Name="STEP_NUMBER">The order of execution of the transformation.See Also: Oracle Database XStream Guide for more information about transformation ordering</Parameter>
            <Parameter Name="OPERATION">Specify 'ADD' to add the transformation to the rule.Specify 'REMOVE' to remove the transformation from the rule.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MERGE_STREAMS" ElementId="#CHDEDACG">
          <Description>Merges a stream flowing from one capture process with a stream flowing from another capture process</Description>
          <Parameters>
            <Parameter Name="CLONED_PROPAGATION_NAME">The name of the cloned propagation used by the stream that was split off from the original stream using the SPLIT_STREAMS procedure. The name of the cloned propagation also identifies the cloned queue and capture process used by the cloned propagation.You must specify an existing propagation name. Do not specify an owner.</Parameter>
            <Parameter Name="PROPAGATION_NAME">The name of the propagation that is merged back to the original stream.If NULL, then the name of the original propagation in the original stream is used. Specify NULL only if the streams were split using the SPLIT_STREAMS procedure.Specify a non-NULL value to use a name that is different from the original propagation name or if you are merging two streams that were not split by the SPLIT_STREAMS procedure.If a non-NULL value is specified, then an error is raised under either of the following conditions:The queue specified in the queue_name parameter does not exist.The queue specified in the queue_name parameter exists but is not used by a capture process.</Parameter>
            <Parameter Name="QUEUE_NAME">The name of the queue that is the source queue for the propagation that is merged back.If NULL, then the existing, original queue is the source queue for the propagation that is merged back. Specify NULL only if the streams were split using the SPLIT_STREAMS procedure.Specify a non-NULL value if you are merging two streams that were not split by the SPLIT_STREAMS procedure. Specify the name of the existing queue used by the capture process that will capture changes in the merged stream.</Parameter>
            <Parameter Name="PERFORM_ACTIONS">If TRUE, then the procedure performs the necessary actions to merge the streams directly.If FALSE, then the procedure does not perform the necessary actions to merge the streams directly.Specify FALSE when this procedure is generating a script that you can edit and then run. The procedure raises an error if you specify FALSE and either of the following parameters is NULL:script_namescript_directory_object</Parameter>
            <Parameter Name="SCRIPT_NAME">If non-NULL and the perform_actions parameter is FALSE, then specify the name of the script generated by this procedure. The script contains all of the statements used to merge the streams. If a file with the specified script name exists in the specified directory for the script_directory_object parameter, then the procedure appends the statements to the existing file.If non-NULL and the perform_actions parameter is TRUE, then the procedure generates the specified script and performs the actions to split the stream directly.If NULL and the perform_actions parameter is TRUE, then the procedure performs the actions to merge the streams directly and does not generate a script.If NULL and the perform_actions parameter is FALSE, then the procedure raises an error.</Parameter>
            <Parameter Name="SCRIPT_DIRECTORY_OBJECT">The directory object for the directory on the local computer system into which the generated script is placed.If the script_name parameter is NULL, then the procedure ignores this parameter and does not generate a script.If NULL and the script_name parameter is non-NULL, then the procedure raises an error.Note: The specified directory object cannot point to an Oracle Automatic Storage Management (ASM) disk group.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MERGE_STREAMS_JOB" ElementId="#CHDFDGBC">
          <Description>Determines whether the original capture process and the cloned capture are within the specified merge threshold and, if they are, runs the MERGE_STREAMS procedure to merge the two streams</Description>
          <Parameters>
            <Parameter Name="CLONED_PROPAGATION_NAME">The name of the cloned propagation used by the stream that was split off from the original stream using the SPLIT_STREAMS procedure. The name of the cloned propagation also identifies the cloned queue and capture process used by the cloned propagation.You must specify an existing propagation name. Do not specify an owner.</Parameter>
            <Parameter Name="PROPAGATION_NAME">The name of the propagation that is merged back to the original stream.If NULL, then the name of the original propagation in the original stream is used. Specify NULL only if the streams were split using the SPLIT_STREAMS procedure.Specify a non-NULL value to use a name that is different from the original propagation name or if you are merging two streams that were not split by the SPLIT_STREAMS procedure.If a non-NULL value is specified, then an error is raised under either of the following conditions:The queue specified in the queue_name parameter does not exist.The queue specified in the queue_name parameter exists but is not used by a capture process.</Parameter>
            <Parameter Name="QUEUE_NAME">The name of the queue that is the source queue for the propagation that is merged back.If NULL, then the existing, original queue is the source queue for the propagation that is merged back. Specify NULL only if the streams were split using the SPLIT_STREAMS procedure.Specify a non-NULL value if you are merging two streams that were not split by the SPLIT_STREAMS procedure. Specify the name of the existing queue used by the capture process that will capture changes in the merged stream.</Parameter>
            <Parameter Name="MERGE_THRESHOLD">The merge threshold in seconds.The value of the CAPTURE_MESSAGE_CREATE_TIME column for each capture process in the GV$STREAMS_CAPTURE dynamic performance view determines whether the streams are merged.Specifically, if the difference, in seconds, between the CAPTURE_MESSAGE_CREATE_TIME of the cloned capture process and the original capture process is less than or equal to the value specified for this parameter, then this procedure runs the MERGE_STREAMS procedure to merge the streams. If the difference is greater than the value specified by this parameter, then this procedure does nothing.</Parameter>
            <Parameter Name="SCHEDULE_NAME">The name of the schedule for the merge job.If NULL, then no schedule name is specified. Typically, you set this parameter to NULL when the auto_merge_threshold parameter was set to NULL or 0 (zero) in the SPLIT_STREAMS procedure that split the streams.Specify NULL if you run this procedure manually.</Parameter>
            <Parameter Name="MERGE_JOB_NAME">The name of the job that merges the streams.If NULL, then no merge job name is specified. Typically, you set this parameter to NULL when the auto_merge_threshold parameter was set to NULL or 0 (zero) in the SPLIT_STREAMS procedure that split the streams.Specify NULL if you run this procedure manually.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="PURGE_SOURCE_CATALOG" ElementId="#CHDDAGED">
          <Description>Removes all Oracle Streams data dictionary information at the local database for the specified object</Description>
          <Parameters>
            <Parameter Name="SOURCE_DATABASE">In a non-CDB, specify the global name of the source database containing the database object.In a CDB, specify the global name of the container containing the database object. The container can be the root or a PDB.If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify DBS1 and the domain is .NET, then the procedure specifies DBS1.NET automatically.</Parameter>
            <Parameter Name="SOURCE_OBJECT_NAME">The name of the object specified as [schema_name.]object_name. For example, hr.employees. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="SOURCE_OBJECT_TYPE">Type of the object. Currently, TABLE is the only possible object type.</Parameter>
            <Parameter Name="SOURCE_ROOT_NAME">The global name of the source root containing the object in a CDB. The source root is where the changes being captured originated in a CDB.If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify DBS1 and the domain is EXAMPLE.COM, then the procedure specifies DBS1.EXAMPLE.COM automatically.If the source_root_name parameter is NULL, then the global name of the local root is the default.Note: This parameter only applies to a CDB.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RECOVER_OPERATION" ElementId="#CHDDGCAC">
          <Description>Provides options for a split and merge operation that stopped because it encountered an error. This procedure either rolls forward the operation, rolls back the operation, or purges all of the metadata about the operation.</Description>
          <Parameters>
            <Parameter Name="SCRIPT_ID">The operation id of the operation that is being rolled forward, rolled back, or purged. Query the SCRIPT_ID column of the DBA_RECOVERABLE_SCRIPT data dictionary view to determine the operation id.</Parameter>
            <Parameter Name="OPERATION_MODE">If FORWARD, then the procedure rolls forward the operation. Specify FORWARD to try to complete the operation.If ROLLBACK, then the procedure rolls back all of the actions performed in the operation. If the rollback is successful, then this option also moves the metadata about the operation from the DBA_RECOVERABLE_SCRIPT view to the DBA_RECOVERABLE_SCRIPT_HIST view. The other views retain information about the operation for 30 days.If PURGE, then the procedure moves the metadata about the operation from the DBA_RECOVERABLE_SCRIPT view to the DBA_RECOVERABLE_SCRIPT_HIST view without rolling the operation back. The other views retain information about the operation for 30 days.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVE_QUEUE" ElementId="#CHDBHEAC">
          <Description>Removes the specified ANYDATA queue</Description>
          <Parameters>
            <Parameter Name="QUEUE_NAME">The name of the queue to remove, specified as [schema_name.]queue_name. For example, strmadmin.streams_queue. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="CASCADE">If TRUE, then the procedure drops any XStream clients that use the queue.If FALSE, then the procedure raises an error if there are any XStream clients that use the queue. Before you run this procedure with the cascade parameter set to FALSE, make sure no XStream clients are using the queue currently.</Parameter>
            <Parameter Name="DROP_UNUSED_QUEUE_TABLE">If TRUE and the queue table for the queue is empty, then the procedure drops the queue table. The queue table is not dropped if it contains any messages or if it is used by another queue.If FALSE, then the procedure does not drop the queue table.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVE_RULE" ElementId="#CHDJFHCE">
          <Description>Removes the specified rule or all rules from the rule set associated with the specified capture process, apply process, or propagation.</Description>
          <Parameters>
            <Parameter Name="RULE_NAME">The name of the rule to remove, specified as [schema_name.]rule_name. If NULL, then the procedure removes all rules from the specified capture process, apply process, or propagation rule set.For example, to specify a rule in the hr schema named prop_rule1, enter hr.prop_rule1. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="STREAMS_TYPE">The type of XStream client:Specify capture for a capture process.Specify propagation for a propagation.Specify apply for an apply process.</Parameter>
            <Parameter Name="STREAMS_NAME">The name of the XStream client, which can be a capture process, propagation, or apply process. Do not specify an owner.If the specified XStream client does not exist, but there is metadata in the data dictionary that associates the rule with this client, then the procedure removes the metadata.If the specified XStream client does not exist, and there is no metadata in the data dictionary that associates the rule with this client, then the procedure raises an error.</Parameter>
            <Parameter Name="DROP_UNUSED_RULE">If TRUE and the rule is not in any rule set, then the procedure drops the rule from the database.If TRUE and the rule exists in any rule set, then the procedure does not drop the rule from the database.If FALSE, then the procedure does not drop the rule from the database.</Parameter>
            <Parameter Name="INCLUSION_RULE">If inclusion_rule is TRUE, then the procedure removes the rule from the positive rule set for the XStream client.If inclusion_rule is FALSE, then the procedure removes the rule from the negative rule set for the XStream client.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REMOVE_SUBSET_OUTBOUND_RULES" ElementId="#CACHABED">
          <Description>Removes subset rules from an outbound server configuration</Description>
        </SubProgram>
        <SubProgram Name="REMOVE_XSTREAM_CONFIGURATION" ElementId="#CHDJBFGH">
          <Description>Removes the XStream configuration at the local database</Description>
          <Parameters>
            <Parameter Name="CONTAINER">If CURRENT, then the XStream configuration is removed from the current container. CURRENT can be specified while connected to the root or to a PDB in a CDB.If ALL, then the XStream configuration is removed from all of the containers in the CDB. To specify ALL, the procedure must be invoked in the root.If a container name, then the XStream configuration is removed from the specified container. To specify root, use CDB$ROOT while connected to the root. To specify a PDB, the procedure must be invoked in the root.Note: This parameter only applies to a CDB.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RENAME_COLUMN" ElementId="#CHDJIGAC">
          <Description>Either adds or removes a declarative rule-based transformation which renames a column in a row LCR that satisfies the specified rule</Description>
          <Parameters>
            <Parameter Name="RULE_NAME">The name of the rule, specified as [schema_name.]rule_name. If NULL, then the procedure raises an error.For example, to specify a rule in the hr schema named employees12, enter hr.employees12. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="TABLE_NAME">The name of the table in which the column is renamed in the row LCR, specified as [schema_name.]object_name. For example, hr.employees. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="FROM_COLUMN_NAME">The name of the column to be renamed in each row LCR that satisfies the rule.</Parameter>
            <Parameter Name="TO_COLUMN_NAME">The new name of the column in each row LCR that satisfies the rule.</Parameter>
            <Parameter Name="VALUE_TYPE">Specify 'NEW' to rename the column in the new values in the row LCR.Specify 'OLD' to rename the column in the old values in the row LCR.Specify '*' to rename the column in both the old and new values in the row LCR.</Parameter>
            <Parameter Name="STEP_NUMBER">The order of execution of the transformation.See Also: Oracle Database XStream Guide for more information about transformation ordering</Parameter>
            <Parameter Name="OPERATION">Specify 'ADD' to add the transformation to the rule.Specify 'REMOVE' to remove the transformation from the rule.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RENAME_SCHEMA" ElementId="#CHDEHAJI">
          <Description>Either adds or removes a declarative rule-based transformation which renames a schema in a row LCR that satisfies the specified rule</Description>
          <Parameters>
            <Parameter Name="RULE_NAME">The name of the rule, specified as [schema_name.]rule_name. If NULL, then the procedure raises an error.For example, to specify a rule in the hr schema named employees12, enter hr.employees12. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="FROM_SCHEMA_NAME">The name of the schema to be renamed in each row LCR that satisfies the rule.</Parameter>
            <Parameter Name="TO_SCHEMA_NAME">The new name of the schema in each row LCR that satisfies the rule.</Parameter>
            <Parameter Name="STEP_NUMBER">The order of execution of the transformation.See Also: Oracle Database XStream Guide for more information about transformation ordering</Parameter>
            <Parameter Name="OPERATION">Specify 'ADD' to add the transformation to the rule.Specify 'REMOVE' to remove the transformation from the rule.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RENAME_TABLE" ElementId="#CHDDBCIB">
          <Description>Either adds or removes a declarative rule-based transformation which renames a table in a row LCR that satisfies the specified rule</Description>
          <Parameters>
            <Parameter Name="RULE_NAME">The name of the rule, specified as [schema_name.]rule_name. If NULL, then the procedure raises an error.For example, to specify a rule in the hr schema named employees12, enter hr.employees12. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="FROM_TABLE_NAME">The name of the table to be renamed in each row LCR that satisfies the rule, specified as [schema_name.]object_name. For example, hr.employees. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="TO_TABLE_NAME">The new name of the table in each row LCR that satisfies the rule, specified as [schema_name.]object_name. For example, humres.staff.The transformation can rename the table only, the schema only, or the table and the schema. If the schema is not specified, then the current user is the default.</Parameter>
            <Parameter Name="STEP_NUMBER">The order of execution of the transformation.See Also: Oracle Database XStream Guide for more information about transformation ordering</Parameter>
            <Parameter Name="OPERATION">Specify 'ADD' to add the transformation to the rule.Specify 'REMOVE' to remove the transformation from the rule.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_MESSAGE_TRACKING" ElementId="#CHDFIHCA">
          <Description>Sets the tracking label for logical change records (LCRs) produced by the current session</Description>
          <Parameters>
            <Parameter Name="TRACKING_LABEL">The label used to track the LCRs produced by the session.Set this parameter to NULL to stop message tracking in the current session.The size limit for a label is 4,000 bytes.</Parameter>
            <Parameter Name="ACTIONS">When DBMS_XSTREAM_ADM.ACTION_MEMORY is specified, the LCRs are tracked in memory, and the V$STREAMS_MESSAGE_TRACKING dynamic performance view is populated with information about the LCRs.Currently, DBMS_XSTREAM_ADM.ACTION_MEMORY is the only valid setting for this parameter.The value specified for this parameter is an enumerated constant. Enumerated constants must be prefixed with the package name.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_PARAMETER" ElementId="#CHDJAHAF">
          <Description>Sets a parameter for an outbound server, an inbound server, or an outbound server's capture process</Description>
          <Parameters>
            <Parameter Name="STREAMS_TYPE">The type of XStream client:Specify capture for a capture process.Specify apply for an outbound server or inbound server.</Parameter>
            <Parameter Name="STREAMS_NAME">The name of the capture process, outbound server, or inbound server. Do not specify an owner.</Parameter>
            <Parameter Name="PARAMETER">The name of the parameter you are setting.See "Capture Process Parameters" for information about capture process parameters.See "Apply Component Parameters" for information about outbound server and inbound server parameters.</Parameter>
            <Parameter Name="VALUE">The value to which the parameter is set.If NULL, then the parameter is set to its default value.</Parameter>
            <Parameter Name="NO_WAIT">If TRUE, then the parameter is set immediately.If FALSE, then the parameter is set after synchronizing with the running capture process, inbound server, or outbound server.When you modify multiple parameters for the same process consecutively, setting this parameter to TRUE speeds up each call. However, if the process is currently running, you must set this parameter to FALSE in the last to the procedure to ensure that the process uses the modified parameter values. If the no_wait parameter is set to TRUE for the last call to the procedure, the running process might not detect the parameter changes.</Parameter>
            <Parameter Name="SOURCE_DATABASE">If CURRENT, then the parameter is set only in the container where the procedure is invoked. CURRENT can be specified while connected to the root or to a PDB.If ALL, then the parameter is set in all containers in the CDB and all PDBs created after the procedure is invoked. To specify ALL, the procedure must be invoked in the root.If a container name, then the parameter is set in the specified container. To specify root, use CDB$ROOT while connected to the root. To specify a PDB, the procedure must be invoked in the root.Note: This parameter only applies to CDBs. Also, a non-null value can be specified only for the following parameters:include_objects capture parameterexcludetag capture or apply parameterexcludetrans capture or apply parameterexcludeuser capture or apply parameterexcludeuserid capture or apply parametergetreplicates capture or apply parametergetapplops capture or apply parameter</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_TAG" ElementId="#CHDIJDFJ">
          <Description>Sets the binary tag for all redo entries subsequently generated by the current session</Description>
          <Parameters>
            <Parameter Name="TAG">The binary tag for all subsequent redo entries generated by the current session. A raw value is a sequence of bytes, and a byte is a sequence of bits.By default, the tag for a session is NULL.The size limit for a tag value is 2000 bytes.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_UP_QUEUE" ElementId="#CHDFIFAA">
          <Description>Creates a queue table and a queue for use with the capture, propagate, and apply functionality of XStream</Description>
          <Parameters>
            <Parameter Name="QUEUE_TABLE">The name of the queue table specified as [schema_name.]queue_table_name. For example, strmadmin.streams_queue_table. If the schema is not specified, then the current user is the default.If the queue table owner is not specified, then the procedure specifies the user who runs this procedure automatically as the queue table owner.Queue table names can be a maximum of 24 bytes.</Parameter>
            <Parameter Name="STORAGE_CLAUSE">The storage clause for queue tableThe storage parameter is included in the CREATE TABLE statement when the queue table is created. You can specify any valid table storage clause.If a tablespace is not specified here, then the procedure creates the queue table and all its related objects in the default user tablespace of the user who runs this procedure. If a tablespace is specified here, then the procedure creates the queue table and all its related objects in the tablespace specified in the storage clause.If NULL, then the procedure uses the storage characteristics of the tablespace in which the queue table is created.See Also: Oracle Database SQL Language Reference for more information about storage clauses</Parameter>
            <Parameter Name="QUEUE_NAME">The name of the queue that will function as the ANYDATA queue, specified as [schema_name.]queue_name. For example, strmadmin.streams_queue.If the schema is not specified, then the procedure uses the queue table owner. The owner of the queue table must also be the owner of the queue. The queue owner automatically has privileges to perform all queue operations on the queue.If the schema is not specified for this parameter, and the queue table owner is not specified in queue_table, then the current user is the default.Queue names can be a maximum of 24 bytes.</Parameter>
            <Parameter Name="QUEUE_USER">The name of the user who requires ENQUEUE and DEQUEUE privileges for the queue. This user also is configured as a secure queue user of the queue. The queue user cannot grant these privileges to other users because they are not granted with the GRANT option.If NULL, then the procedure does not grant any privileges. You can also grant queue privileges to the appropriate users using the DBMS_AQADM package.</Parameter>
            <Parameter Name="COMMENT">The comment for the queue</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SPLIT_STREAMS" ElementId="#CHDHGCJB">
          <Description>Splits one stream flowing from a capture process off from all of the other streams flowing from the capture process</Description>
          <Parameters>
            <Parameter Name="PROPAGATION_NAME">The name of the propagation that cannot send LCRs to its destination queue. The specified propagation is the propagation for the stream that is being split off from the other streams. You must specify an existing propagation name. Do not specify an owner.</Parameter>
            <Parameter Name="CLONED_PROPAGATION_NAME">The name of the new propagation created by this procedure for the stream that is split off. If NULL, then the system generates a propagation name.</Parameter>
            <Parameter Name="CLONED_QUEUE_NAME">The name of the new queue created by this procedure for the stream that is split off. If NULL, then the system generates a queue name.</Parameter>
            <Parameter Name="CLONED_CAPTURE_NAME">The name of the new capture process created by this procedure for the stream that is split off. If NULL, then the system generates a capture process name.</Parameter>
            <Parameter Name="PERFORM_ACTIONS">If TRUE, then the procedure performs the necessary actions to split the stream directly.If FALSE, then the procedure does not perform the necessary actions to split the stream directly.Specify FALSE when this procedure is generating a script that you can edit and then run. The procedure raises an error if you specify FALSE and either of the following parameters is NULL:script_namescript_directory_object</Parameter>
            <Parameter Name="SCRIPT_NAME">If non-NULL and the perform_actions parameter is FALSE, then specify the name of the script generated by this procedure. The script contains all of the statements used to split the stream. If a file with the specified script name exists in the specified directory for the script_directory_object parameter, then the procedure appends the statements to the existing file.If non-NULL and the perform_actions parameter is TRUE, then the procedure generates the specified script and performs the actions to split the stream directly.If NULL and the perform_actions parameter is TRUE, then the procedure performs the actions to split the stream directly and does not generate a script.If NULL and the perform_actions parameter is FALSE, then the procedure raises an error.</Parameter>
            <Parameter Name="SCRIPT_DIRECTORY_OBJECT">The directory object for the directory on the local computer system into which the generated script is placed.If the script_name parameter is NULL, then the procedure ignores this parameter and does not generate a script.If NULL and the script_name parameter is non-NULL, then the procedure raises an error.Note: The specified directory object cannot point to an Oracle Automatic Storage Management (ASM) disk group.</Parameter>
            <Parameter Name="AUTO_MERGE_THRESHOLD">If a positive number is specified, then the stream that was split off is automatically merged back into all of the other streams flowing from the capture process by an Oracle Scheduler job. The job runs the MERGE_STREAMS_JOB procedure at set intervals according to its schedule. The value of the CAPTURE_MESSAGE_CREATE_TIME column for each capture process in the GV$STREAMS_CAPTURE dynamic performance view determines when the streams are merged. Specifically, if the difference, in seconds, between CAPTURE_MESSAGE_CREATE_TIME of the cloned capture process and the original capture process is less than or equal to the value specified for the auto_merge_threshold parameter, then the two streams are merged automatically. The cloned capture process must be started before the split stream can be merged back with the original stream.If NULL or 0 (zero) is specified, then the split stream is not merged back with the original stream automatically. To merge the split stream with the original stream, run the MERGE_STREAM procedure manually when the CAPTURE_MESSAGE_CREATE_TIME of the cloned capture process catches up to, or nearly catches up to, the CAPTURE_MESSAGE_CREATE_TIME of the original capture process.The CAPTURE_MESSAGE_CREATE_TIME records the time when a captured change was recorded in the redo log.</Parameter>
            <Parameter Name="SCHEDULE_NAME">The Oracle Scheduler schedule name, specified as [schema_name.]schedule_name. For example, strmadmin.merge_schedule. If the schema is not specified, then the current user is the default.If auto_merge_threshold is a non-NULL positive number, then the schedule is used by the job that will automatically merge the streams at the appropriate time. You can specify a schedule name to adhere to naming conventions or to track the schedule more easily.If NULL and auto_merge_threshold is a non-NULL positive number, then the system generates a schedule name.If auto_merge_threshold is NULL or 0 (zero), then this parameter must be NULL.If this procedure creates a schedule, the schedule starts when the procedure completes. You can modify the schedule to control how often the merge job is run.If an existing schedule name is specified, an error is raised.</Parameter>
            <Parameter Name="MERGE_JOB_NAME">The Oracle Scheduler job name, specified as [schema_name.]merge_job_name. For example, strmadmin.merge_job. If the schema is not specified, then the current user is the default.If auto_merge_threshold is a non-NULL positive number, then the job will automatically merge the streams at the appropriate time. Specify a merge job name to adhere to naming conventions or to track the job more easily.If NULL and auto_merge_threshold is a non-NULL positive number, then the system generates a job name.If auto_merge_threshold is NULL or 0 (zero), then this parameter must be NULL.If an existing job name is specified, an error is raised.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="START_OUTBOUND" ElementId="#CHDFHIGF">
          <Description>Starts an XStream outbound server</Description>
          <Parameters>
            <Parameter Name="SERVER_NAME">The name of the outbound server being started. A NULL specification is not allowed. Do not specify an owner.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="STOP_OUTBOUND" ElementId="#CHDIJEIF">
          <Description>Stops an XStream outbound server</Description>
          <Parameters>
            <Parameter Name="SERVER_NAME">The name of the outbound server being stopped. A NULL specification is not allowed. Do not specify an owner.</Parameter>
            <Parameter Name="FORCE">If TRUE, then the procedure stops the outbound server and its capture process as soon as possible.If FALSE, then the procedure stops the outbound server after ensuring that there are no gaps in the set of applied transactions.The behavior of the apply component depends on the setting specified for the force parameter and the setting specified for the commit_serialization apply component parameter.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="DBMS_XSTREAM_AUTH" Url="http://docs.oracle.com/database/121/ARPLS/d_xstrm_auth.htm">
      <Description>The DBMS_XSTREAM_AUTH package provides subprograms for granting privileges to and revoking privileges from XStream administrators.</Description>
      <SubPrograms>
        <SubProgram Name="GRANT_ADMIN_PRIVILEGE" ElementId="#BABCADCJ">
          <Description>Either grants the privileges needed by a user to be an XStream administrator directly, or generates a script that grants these privileges</Description>
          <Parameters>
            <Parameter Name="GRANTEE">The user to whom privileges are granted</Parameter>
            <Parameter Name="PRIVILEGE_TYPE">Specify one of the following values:CAPTURESpecifying CAPTURE grants the minimum privileges required by the user to administer capture processes.APPLYSpecifying APPLY grants the minimum privileges required by the user to administer outbound servers, inbound servers, and apply processes.*Specifying * grants the minimum privileges required by the user to administer capture processes, outbound servers, inbound servers, and apply processes.</Parameter>
            <Parameter Name="GRANT_SELECT_PRIVILEGES">If TRUE, then the procedure grants a set of privileges, including SELECT_CATALOG_ROLE, to the user.If FALSE, then the procedure does not grant the set of privileges to the user.SELECT_CATALOG_ROLE enables the user to select from the data dictionary. Set this parameter to TRUE for the XStream trusted user model. Set this parameter to FALSE for the XStream untrusted user model.</Parameter>
            <Parameter Name="DO_GRANTS">If TRUE, then the procedure grants the privileges to the specified grantee directly, and adds the grantee to the DBA_XSTREAM_ADMINISTRATOR data dictionary view with YES for both the LOCAL_PRIVILEGES column and the ACCESS_FROM_REMOTE column. If the user already has an entry in this data dictionary view, then the procedure does not make another entry, and no error is raised. If TRUE and any of the grant statements fails, then the procedure raises an error.If FALSE, then the procedure does not grant the privileges to the specified grantee directly, and does not add the grantee to the DBA_XSTREAM_ADMINISTRATOR data dictionary view.You specify FALSE when the procedure is generating a file that you will run later. If you specify FALSE and either the file_name or directory_name parameter is NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="FILE_NAME">The name of the file generated by the procedure. The file contains all of the statements that grant the privileges. If a file with the specified file name exists in the specified directory name, then the grant statements are appended to the existing file.If NULL, then the procedure does not generate a file.</Parameter>
            <Parameter Name="DIRECTORY_NAME">The directory into which the generated file is placed. The specified directory must be a directory object created using the SQL statement CREATE DIRECTORY. If you specify a directory, then the user who invokes the procedure must have the WRITE privilege on the directory object.If the file_name parameter is NULL, then this parameter is ignored, and the procedure does not generate a file.If NULL and the file_name parameter is non-NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="GRANT_OPTIONAL_PRIVILEGES">A comma-separated list of optional privileges to grant to the grantee, such as the DV_XSTREAM_ADMIN and DV_GOLDENGATE_ADMIN privileges</Parameter>
            <Parameter Name="CONTAINER">If CURRENT, then grants privileges to the grantee only in the container where the procedure is invoked. CURRENT can be specified while connected to the root or to a PDB.If ALL, then grants privileges to the grantee in all containers in the CDB and all PDBs created after the procedure is invoked. To specify ALL, the procedure must be invoked in the root.If a container name, then grants privileges to the grantee only in the specified container. To specify root, use CDB$ROOT while connected to the root. To specify a PDB, the procedure must be invoked in the root.Note: This parameter only applies to CDBs.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GRANT_REMOTE_ADMIN_ACCESS" ElementId="#BABEBCJF">
          <Description>Enables a remote XStream administrator to perform administrative actions at the local database by connecting to the grantee using a database link</Description>
        </SubProgram>
        <SubProgram Name="REVOKE_ADMIN_PRIVILEGE" ElementId="#BABCHDEG">
          <Description>Either revokes XStream administrator privileges from a user directly, or generates a script that revokes these privileges</Description>
          <Parameters>
            <Parameter Name="GRANTEE">The user from whom privileges are revoked</Parameter>
            <Parameter Name="PRIVILEGE_TYPE">Specify one of the following values:CAPTURESpecifying CAPTURE revokes the minimum privileges required by the user to administer capture processes.APPLYSpecifying APPLY revokes the minimum privileges required by the user to administer outbound servers, inbound servers, and apply processes.*Specifying * revokes the minimum privileges required by the user to administer capture processes, outbound servers, inbound servers, and apply processes.</Parameter>
            <Parameter Name="REVOKE_SELECT_PRIVILEGES">If TRUE, then the procedure revokes a set of privileges, including SELECT_CATALOG_ROLE, to the user.If FALSE, then the procedure does not revoke the set of privileges to the user.SELECT_CATALOG_ROLE enables the user to select from the data dictionary.</Parameter>
            <Parameter Name="DO_REVOKES">If TRUE, then the procedure revokes the privileges from the specified user directly, and removes the user from the DBA_XSTREAM_ADMINISTRATOR data dictionary view. If the user does not have a record in this data dictionary view, then the procedure does not remove a record from the view, and no error is raised. If TRUE and any of the revoke statements fails, then the procedure raises an error. A revoke statement fails if the user is not granted the privilege that is being revoked.If FALSE, then the procedure does not revoke the privileges from the specified user directly, and does not remove the user from the DBA_XSTREAM_ADMINISTRATOR data dictionary view.You specify FALSE when the procedure is generating a file that you will run later. If you specify FALSE and either the file_name or directory_name parameter is NULL, then the procedure does not raise an error.</Parameter>
            <Parameter Name="FILE_NAME">The name of the file generated by this procedure. The file contains all of the statements that revoke the privileges. If a file with the specified file name exists in the specified directory name, then the revoke statements are appended to the existing file.If NULL, then the procedure does not generate a file.</Parameter>
            <Parameter Name="DIRECTORY_NAME">The directory into which the generated file is placed. The specified directory must be a directory object created using the SQL statement CREATE DIRECTORY. If you specify a directory, then the user who invokes the procedure must have the WRITE privilege on the directory object.If the file_name parameter is NULL, then this parameter is ignored, and the procedure does not generate a file.If NULL and the file_name parameter is non-NULL, then the procedure raises an error.</Parameter>
            <Parameter Name="REVOKE_OPTIONAL_PRIVILEGES">A comma-separated list of optional privileges to revoke from the grantee, such as the DV_XSTREAM_ADMIN and DV_GOLDENGATE_ADMIN privileges</Parameter>
            <Parameter Name="CONTAINER">If CURRENT, then revokes privileges from the grantee only in the container where the procedure is invoked. CURRENT can be specified while connected to the root or to a PDB.If ALL, then revokes privileges from the grantee in all containers in the CDB. To specify ALL, the procedure must be invoked in the root.If a container name, then revokes privileges from the grantee only in the specified container. To specify root, use CDB$ROOT while connected to the root. To specify a PDB, the procedure must be invoked in the root.Note: This parameter only applies to CDBs.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REVOKE_REMOTE_ADMIN_ACCESS" ElementId="#BABEIGIE">
          <Description>Disables a remote XStream administrator from performing administrative actions by connecting to the grantee using a database link</Description>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="UTL_CALL_STACK" Url="http://docs.oracle.com/database/121/ARPLS/u_call_stack.htm">
      <Description>The UTL_CALL_STACK package provides an interface to provide information about currently executing subprograms. Functions return subprogram names, unit names, owner names, edition names, and line numbers for given dynamic depths. Other functions return error stack information.</Description>
      <SubPrograms>
        <SubProgram Name="BACKTRACE_DEPTH" ElementId="#CHDHAGFJ">
          <Description>Returns the number of backtrace items in the backtrace</Description>
        </SubProgram>
        <SubProgram Name="BACKTRACE_LINE" ElementId="#CHDBHBJI">
          <Description>Returns the line number of the unit at the specified backtrace depth</Description>
          <Parameters>
            <Parameter Name="BACKTRACE_DEPTH">Depth in backtrace</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BACKTRACE_UNIT" ElementId="#CHDFGDEH">
          <Description>Returns the name of the unit at the specified backtrace depth</Description>
          <Parameters>
            <Parameter Name="BACKTRACE_DEPTH">Depth in backtrace</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CURRENT_EDITION" ElementId="#CHDCDBBD">
          <Description>Returns the current edition name of the unit of the subprogram at the specified dynamic depth</Description>
          <Parameters>
            <Parameter Name="DYNAMIC_DEPTH">Depth in the error stack</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CONCATENATE_SUBPROGRAM" ElementId="#CHDCCGBH">
          <Description>Returns a concatenated form of a unit-qualified name</Description>
          <Parameters>
            <Parameter Name="QUALIFIED_NAME">A unit-qualified name</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DYNAMIC_DEPTH" ElementId="#CHDCGFCA">
          <Description>Returns the number of subprograms on the call stack</Description>
        </SubProgram>
        <SubProgram Name="ERROR_DEPTH" ElementId="#CHDHJGIJ">
          <Description>Returns the number of errors on the error stack</Description>
        </SubProgram>
        <SubProgram Name="ERROR_MSG" ElementId="#CHDHDGIB">
          <Description>Returns the error message of the error at the specified error depth</Description>
          <Parameters>
            <Parameter Name="ERROR_DEPTH">Depth in the error stack</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="ERROR_NUMBER" ElementId="#CHDCBIBF">
          <Description>Returns the error number of the error at the specified error depth</Description>
          <Parameters>
            <Parameter Name="ERROR_DEPTH">Depth in the call stack</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LEXICAL_DEPTH" ElementId="#CHDEJAFA">
          <Description>Returns the lexical nesting level of the subprogram at the specified dynamic depth</Description>
          <Parameters>
            <Parameter Name="DYNAMIC_DEPTH">Depth in the call stack</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="OWNER" ElementId="#CHDCGAIA">
          <Description>Returns the owner name of the unit of the subprogram at the specified dynamic depth</Description>
          <Parameters>
            <Parameter Name="DYNAMIC_DEPTH">Depth in the call stack</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UNIT_LINE" ElementId="#CHDHGFJJ">
          <Description>Returns the line number of the unit of the subprogram at the specified dynamic depth</Description>
          <Parameters>
            <Parameter Name="DYNAMIC_DEPTH">Depth in the call stack</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SUBPROGRAM" ElementId="#CHDJIIFF">
          <Description>Returns the unit-qualified name of the subprogram at the specified dynamic depth</Description>
          <Parameters>
            <Parameter Name="DYNAMIC_DEPTH">Depth in the call stack</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="UTL_COLL" Url="http://docs.oracle.com/database/121/ARPLS/u_coll.htm">
      <Description>The UTL_COLL package lets PL/SQL programs use collection locators to query and update.</Description>
      <SubPrograms>
        <SubProgram Name="IS_LOCATOR" ElementId="#i996742">
          <Description>Determines whether a collection item is actually a locator or not</Description>
          <Parameters>
            <Parameter Name="COLN">Nested table or varray item.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="UTL_COMPRESS" Url="http://docs.oracle.com/database/121/ARPLS/u_compr.htm">
      <Description>The UTL_COMPRESS package provides a set of data compression utilities.</Description>
      <SubPrograms>
        <SubProgram Name="ISOPEN" ElementId="#i1001996">
          <Description>Checks to see if the handle to a piecewise (un)compress context is open or closed</Description>
          <Parameters>
            <Parameter Name="HANDLE">The handle to a piecewise uncompress context.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LZ_COMPRESS" ElementId="#i999176">
          <Description>Compresses data using Lempel-Ziv compression algorithm</Description>
        </SubProgram>
        <SubProgram Name="LZ_COMPRESS_ADD" ElementId="#i1001997">
          <Description>Adds a piece of compressed data</Description>
          <Parameters>
            <Parameter Name="HANDLE">The handle to a piecewise compress context.</Parameter>
            <Parameter Name="DST">The opened LOB from LZ_COMPRESS_OPEN to store compressed data.</Parameter>
            <Parameter Name="SRC">The input data to be compressed.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LZ_COMPRESS_CLOSE" ElementId="#i1001998">
          <Description>Closes and finishes piecewise compress operation</Description>
          <Parameters>
            <Parameter Name="HANDLE">The handle to a piecewise compress context.</Parameter>
            <Parameter Name="DST">The opened LOB from LZ_COMPRESS_OPEN to store compressed data.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LZ_COMPRESS_OPEN" ElementId="#i1001999">
          <Description>Initializes a piecewise context that maintains the compress state and data</Description>
          <Parameters>
            <Parameter Name="DST">User supplied LOB to store compressed data.</Parameter>
            <Parameter Name="QUALITY">Speed versus efficiency of resulting compressed output.Valid values are the range 1..9, with a default value of 6.1=fastest compression, 9=slowest compression and best compressed file size.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LZ_UNCOMPRESS" ElementId="#i1001138">
          <Description>Accepts compressed input, verifies it to be a valid and uncompresses it</Description>
        </SubProgram>
        <SubProgram Name="LZ_UNCOMPRESS_EXTRACT" ElementId="#i1002048">
          <Description>Extracts a piece of uncompressed data</Description>
          <Parameters>
            <Parameter Name="HANDLE">The handle to a piecewise uncompress context.</Parameter>
            <Parameter Name="DST">The uncompressed data.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LZ_UNCOMPRESS_OPEN" ElementId="#i1002049">
          <Description>Initializes a piecewise context that maintains the uncompress state and data</Description>
          <Parameters>
            <Parameter Name="SRC">The input data to be uncompressed.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LZ_UNCOMPRESS_CLOSE" ElementId="#i1002050">
          <Description>Closes and finishes the piecewise uncompress</Description>
          <Parameters>
            <Parameter Name="HANDLE">The handle to a piecewise uncompress context.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="UTL_ENCODE" Url="http://docs.oracle.com/database/121/ARPLS/u_encode.htm">
      <Description>The UTL_ENCODE package provides functions that encode RAW data into a standard encoded format so that the data can be transported between hosts. You can use UTL_ENCODE functions to encode the body of email text. The package also contains the decode counterpart functions of the encode functions. The functions follow published standards for encoding to accommodate non-Oracle utilities on the sending or receiving ends.</Description>
      <SubPrograms>
        <SubProgram Name="BASE64_DECODE" ElementId="#i996851">
          <Description>Reads the base 64-encoded RAW input string and decodes it to its original RAW value</Description>
          <Parameters>
            <Parameter Name="R">The RAW string containing base 64-encoded data. There are no defaults or optional parameters.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BASE64_ENCODE" ElementId="#CACECFHF">
          <Description>Encodes the binary representation of the RAW value into base 64 elements and returns it in the form of a RAW string</Description>
          <Parameters>
            <Parameter Name="R">The RAW value to be encoded. There are no defaults or optional parameters.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MIMEHEADER_DECODE" ElementId="#i999460">
          <Description>Decodes a string from mime header format</Description>
          <Parameters>
            <Parameter Name="BUF">The encoded text data with mime header format tags.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MIMEHEADER_ENCODE" ElementId="#i999461">
          <Description>Encodes a string into mime header format</Description>
          <Parameters>
            <Parameter Name="BUF">The text data.</Parameter>
            <Parameter Name="ENCODE_CHARSET">The target character set.</Parameter>
            <Parameter Name="ENCODING">The encoding format. Valid values are UTL_ENCODE.BASE64, UTL_ENCODE.QUOTED_PRINTABLE and NULL</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="QUOTED_PRINTABLE_DECODE" ElementId="#i998716">
          <Description>Reads the varchar2 quoted printable format input string and decodes it to the corresponding RAW string</Description>
          <Parameters>
            <Parameter Name="R">The RAW string containing a quoted printable data string. There are no defaults or optional parameters.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="QUOTED_PRINTABLE_ENCODE" ElementId="#i998769">
          <Description>Reads the RAW input string and encodes it to the corresponding quoted printable format string</Description>
          <Parameters>
            <Parameter Name="R">The RAW string. There are no defaults or optional parameters.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="TEXT_DECODE" ElementId="#i1000186">
          <Description>Decodes a character set sensitive text string</Description>
          <Parameters>
            <Parameter Name="BUF">The encoded text data.</Parameter>
            <Parameter Name="ENCODE_CHARSET">The source character set.</Parameter>
            <Parameter Name="ENCODING">The encoding format. Valid values are UTL_ENCODE.BASE64, UTL_ENCODE.QUOTED_PRINTABLE and NULL.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="TEXT_ENCODE" ElementId="#i1000187">
          <Description>Encodes a character set sensitive text string</Description>
          <Parameters>
            <Parameter Name="BUF">The text data.</Parameter>
            <Parameter Name="ENCODE_CHARSET">The target character set.</Parameter>
            <Parameter Name="ENCODING">The encoding format. Valid values are UTL_ENCODE.BASE64, UTL_ENCODE.QUOTED_PRINTABLE and NULL</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UUDECODE" ElementId="#i998871">
          <Description>Reads the RAW uuencode format input string and decodes it to the corresponding RAW string</Description>
          <Parameters>
            <Parameter Name="R">The RAW string containing the uuencoded data string. There are no defaults or optional parameters.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UUENCODE" ElementId="#i996890">
          <Description>Reads the RAW input string and encodes it to the corresponding uuencode format string</Description>
          <Parameters>
            <Parameter Name="R">RAW string</Parameter>
            <Parameter Name="TYPE">Optional number parameter containing the type of uuencoded output. Options:complete—a defined PL/SQL constant with a value of 1. (default) header_piece ...middle_piece ...end_piece</Parameter>
            <Parameter Name="FILENAME">Optional varchar2 parameter containing the uuencode filename; the default is uuencode.txt</Parameter>
            <Parameter Name="PERMISSION">Optional varchar2 parameter containing the permission mode; the default is 0 (a text string zero).</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="UTL_FILE" Url="http://docs.oracle.com/database/121/ARPLS/u_file.htm">
      <Description>With the UTL_FILE package, PL/SQL programs can read and write operating system text files. UTL_FILE provides a restricted version of operating system stream file I/O.</Description>
    </Package>
    <Package Name="UTL_HTTP" Url="http://docs.oracle.com/database/121/ARPLS/u_http.htm">
      <Description>The UTL_HTTP package makes Hypertext Transfer Protocol (HTTP) callouts from SQL and PL/SQL. You can use it to access data on the Internet over HTTP.</Description>
      <SubPrograms>
        <SubProgram Name="ADD_COOKIES" ElementId="#i1025556">
          <Description>HTTP Cookies Subprograms</Description>
          <Parameters>
            <Parameter Name="COOKIES">The cookies to be added</Parameter>
            <Parameter Name="REQUEST_CONTEXT">Request context to add the cookies. If NULL, the cookies will be added to the UTL_HTTP package's session state instead.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BEGIN_REQUEST" ElementId="#i1025603">
          <Description>HTTP Requests Subprograms</Description>
          <Parameters>
            <Parameter Name="URL">The URL of the HTTP request</Parameter>
            <Parameter Name="METHOD">The method performed on the resource identified by the URL</Parameter>
            <Parameter Name="HTTP_VERSION">The HTTP protocol version that sends the request. The format of the protocol version is HTTP/major-version.minor-version, where major-version and minor-version are positive numbers. If this parameter is set to NULL, UTL_HTTP uses the latest HTTP protocol version that it supports to send the request. The latest version that the package supports is 1.1 and it can be upgraded to a later version. The default is NULL.</Parameter>
            <Parameter Name="REQUEST_CONTEXT">Request context that holds the private wallet and the cookie table to use in this HTTP request. If this parameter is NULL, the wallet and cookie table shared in the current database session will be used instead.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CLEAR_COOKIES" ElementId="#i1025670">
          <Description>HTTP Cookies Subprograms</Description>
          <Parameters>
            <Parameter Name="REQUEST_CONTEXT">Request context to clear the cookies. If NULL, the cookies maintained in the UTL_HTTP package's session state will be cleared instead.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CLOSE_PERSISTENT_CONN" ElementId="#i1025719">
          <Description>HTTP Persistent Connections Subprograms</Description>
          <Parameters>
            <Parameter Name="CONN">The HTTP persistent connection to close</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CLOSE_PERSISTENT_CONNS" ElementId="#i1025769">
          <Description>HTTP Persistent Connections Subprograms</Description>
          <Parameters>
            <Parameter Name="HOST">The host for which persistent connections are to be closed</Parameter>
            <Parameter Name="PORT">The port number for which persistent connections are to be closed</Parameter>
            <Parameter Name="PROXY_HOST">The proxy host for which persistent connections are to be closed</Parameter>
            <Parameter Name="PROXY_PORT">The proxy port for which persistent connections are to be closed</Parameter>
            <Parameter Name="SSL">Close persistent SSL connection</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CREATE_REQUEST_CONTEXT" ElementId="#i1025869">
          <Description>HTTP Requests Subprograms</Description>
          <Parameters>
            <Parameter Name="WALLET_PATH">Directory path that contains the Oracle wallet. The format is file:directory-path</Parameter>
            <Parameter Name="WALLET_PASSWORD">The password needed to open the wallet. If the wallet is auto-login enabled, the password may be omitted and should be set to NULL. See the Oracle Database Enterprise User Security Administrator's Guide for detailed information about wallets.</Parameter>
            <Parameter Name="ENABLE_COOKIES">Sets whether HTTP requests using this request context should support HTTP cookies or not: TRUE to enable the support, FALSE to disable it.</Parameter>
            <Parameter Name="MAX_COOKIES">Sets the maximum total number of cookies that will be maintained in this request context</Parameter>
            <Parameter Name="MAX_COOKIES_PER_SITE">Sets the maximum number of cookies per each Web site that will be maintained in this request context</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DESTROY_REQUEST_CONTEXT" ElementId="#BHADEHID">
          <Description>HTTP Requests Subprograms</Description>
        </SubProgram>
        <SubProgram Name="END_REQUEST" ElementId="#BHABGIAA">
          <Description>HTTP Requests Subprograms</Description>
          <Parameters>
            <Parameter Name="R">The HTTP request</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="END_RESPONSE" ElementId="#i1025944">
          <Description>HTTP Responses Subprograms</Description>
          <Parameters>
            <Parameter Name="R">The HTTP response</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_AUTHENTICATION" ElementId="#i1025992">
          <Description>HTTP Responses Subprograms</Description>
          <Parameters>
            <Parameter Name="R">The HTTP response</Parameter>
            <Parameter Name="SCHEME">The scheme for the required HTTP authentication</Parameter>
            <Parameter Name="REALM">The realm for the required HTTP authentication</Parameter>
            <Parameter Name="FOR_PROXY">Returns the HTTP authentication information required for the access to the HTTP proxy server instead of the Web server? Default is FALSE</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_BODY_CHARSET" ElementId="#i1026054">
          <Description>Session Settings Subprograms</Description>
          <Parameters>
            <Parameter Name="CHARSET">The default character set of the body of all future HTTP requests</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_COOKIE_COUNT" ElementId="#i1026101">
          <Description>HTTP Cookies Subprograms</Description>
          <Parameters>
            <Parameter Name="REQUEST_CONTEXT">Request context to return the cookie count for. If NULL, the cookie count maintained in the UTL_HTTP package's session state will be returned instead.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_COOKIE_SUPPORT" ElementId="#i1026130">
          <Description>Session Settings Subprograms</Description>
          <Parameters>
            <Parameter Name="ENABLE">Indicates whether future HTTP requests should support HTTP cookies (TRUE) or not (FALSE)</Parameter>
            <Parameter Name="MAX_COOKIES">Indicates the maximum total number of cookies maintained in the current session</Parameter>
            <Parameter Name="MAX_COOKIES_PER_SITE">Indicates the maximum number of cookies maintained in the current session for each Web site</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_COOKIES" ElementId="#i1026186">
          <Description>HTTP Cookies Subprograms</Description>
          <Parameters>
            <Parameter Name="COOKIES">The cookies returned</Parameter>
            <Parameter Name="REQUEST_CONTEXT">Request context to return the cookies for. If NULL, the cookies maintained in the UTL_HTTP package's session state will be returned instead.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_DETAILED_EXCP_SUPPORT" ElementId="#i1026231">
          <Description>Session Settings Subprograms</Description>
          <Parameters>
            <Parameter Name="ENABLE">TRUE if UTL_HTTP raises a detailed exception; otherwise FALSE</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_DETAILED_SQLCODE" ElementId="#i1026279">
          <Description>Error Conditions Subprograms</Description>
        </SubProgram>
        <SubProgram Name="GET_DETAILED_SQLERRM" ElementId="#i1026358">
          <Description>Error Conditions Subprograms</Description>
        </SubProgram>
        <SubProgram Name="GET_FOLLOW_REDIRECT" ElementId="#i1031298">
          <Description>Session Settings Subprograms</Description>
          <Parameters>
            <Parameter Name="MAX_REDIRECTS">The maximum number of redirections for all future HTTP requests</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_HEADER" ElementId="#i1026389">
          <Description>HTTP Responses Subprograms</Description>
          <Parameters>
            <Parameter Name="R">The HTTP response</Parameter>
            <Parameter Name="N">The nth header to return</Parameter>
            <Parameter Name="NAME">The name of the HTTP response header</Parameter>
            <Parameter Name="VALUE">The value of the HTTP response header</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_HEADER_BY_NAME" ElementId="#i1026453">
          <Description>HTTP Responses Subprograms</Description>
          <Parameters>
            <Parameter Name="R">The HTTP response</Parameter>
            <Parameter Name="NAME">The name of the HTTP response header for which the value is to return</Parameter>
            <Parameter Name="VALUE">The value of the HTTP response header</Parameter>
            <Parameter Name="N">The nth occurrence of an HTTP response header by the specified name to return. The default is 1.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_HEADER_COUNT" ElementId="#i1026514">
          <Description>HTTP Responses and HTTP Responses Subprograms</Description>
          <Parameters>
            <Parameter Name="R">The HTTP response</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_PERSISTENT_CONN_COUNT" ElementId="#i1026564">
          <Description>HTTP Persistent Connections Subprograms</Description>
        </SubProgram>
        <SubProgram Name="GET_HEADER_COUNT" ElementId="#i1026514">
          <Description>Session Settings Subprograms</Description>
          <Parameters>
            <Parameter Name="R">The HTTP response</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_PERSISTENT_CONN_SUPPORT" ElementId="#i1026599">
          <Description>HTTP Persistent Connections Subprograms</Description>
          <Parameters>
            <Parameter Name="ENABLE">TRUE if persistent connection support is enabled; otherwise FALSE</Parameter>
            <Parameter Name="MAX_CONNS">the maximum number of persistent connections maintained in the current session</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_PERSISTENT_CONNS" ElementId="#i1026653">
          <Description>HTTP Persistent Connections Subprograms</Description>
          <Parameters>
            <Parameter Name="CONNECTIONS">The network connections kept persistent</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_PROXY" ElementId="#i1026714">
          <Description>Session Settings Subprograms</Description>
          <Parameters>
            <Parameter Name="PROXY">The proxy (host and an optional port number) currently used by the UTL_HTTP package</Parameter>
            <Parameter Name="NO_PROXY_DOMAINS">The list of hosts and domains for which no proxy is used for all requests</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_RESPONSE" ElementId="#i1026766">
          <Description>HTTP Responses Subprograms</Description>
          <Parameters>
            <Parameter Name="R">The HTTP response</Parameter>
            <Parameter Name="RETURN_INFO_RESPONSE">Return 100 informational response or not.TRUE means get_response should return 100 informational response when it is received from the HTTP server. The request will not be ended if a 100 response is returned.FALSE means the API should ignore any 100 informational response received from the HTTP server and should return the following non-100 response instead. The default is FALSE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_RESPONSE_ERROR_CHECK" ElementId="#i1026812">
          <Description>Session Settings Subprograms</Description>
          <Parameters>
            <Parameter Name="ENABLE">TRUE if the response error check is set; otherwise FALSE</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_TRANSFER_TIMEOUT" ElementId="#i1026856">
          <Description>Session Settings Subprograms</Description>
          <Parameters>
            <Parameter Name="TIMEOUT">The network transfer timeout value in seconds</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="READ_LINE" ElementId="#i1026901">
          <Description>HTTP Responses Subprograms</Description>
          <Parameters>
            <Parameter Name="R">The HTTP response</Parameter>
            <Parameter Name="DATA">The HTTP response body in text form</Parameter>
            <Parameter Name="REMOVE_CRLF">Removes the newline characters if set to TRUE</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="READ_RAW" ElementId="#i1026963">
          <Description>HTTP Responses Subprograms</Description>
          <Parameters>
            <Parameter Name="R">The HTTP response</Parameter>
            <Parameter Name="DATA">The HTTP response body in binary form</Parameter>
            <Parameter Name="LEN">The number of bytes of data to read. If len is NULL, this procedure will read as much input as possible to fill the buffer allocated in data. The actual amount of data returned may be less than that specified if not much data is available before the end of the HTTP response body is reached or the transfer_timeout amount of time has elapsed. The default is NULL</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="READ_TEXT" ElementId="#i1027020">
          <Description>HTTP Responses Subprograms</Description>
          <Parameters>
            <Parameter Name="R">The HTTP response</Parameter>
            <Parameter Name="DATA">The HTTP response body in text form</Parameter>
            <Parameter Name="LEN">The maximum number of characters of data to read. If len is NULL, this procedure will read as much input as possible to fill the buffer allocated in data. The actual amount of data returned may be less than that specified if little data is available before the end of the HTTP response body is reached or the transfer_timeout amount of time has elapsed. The default is NULL.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REQUEST" ElementId="#i998070">
          <Description>Simple HTTP Fetches in a Single Call Subprograms</Description>
          <Parameters>
            <Parameter Name="URL">Uniform resource locator</Parameter>
            <Parameter Name="PROXY">(Optional) Specifies a proxy server to use when making the HTTP request. See SET_PROXY for the full format of the proxy setting.</Parameter>
            <Parameter Name="WALLET_PATH">(Optional) Specifies a client-side wallet. The client-side wallet contains the list of trusted certificate authorities required for HTTPS request. The format of wallet_path on a PC is, for example, file:c:\WINNT\Profiles\username\WALLETS, and in Unix is, for example, file:/home/username/walletsWhen the UTL_HTTP package is executed in the Oracle database server, the wallet is accessed from the database server. Therefore, the wallet path must be accessible from the database server. See SET_WALLET for a description on how to set up an Oracle wallet. Non-HTTPS requests do not require an Oracle wallet.</Parameter>
            <Parameter Name="WALLET_PASSWORD">(Optional) Specifies the password required to open the wallet</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REQUEST_PIECES" ElementId="#i998146">
          <Description>Simple HTTP Fetches in a Single Call Subprograms</Description>
          <Parameters>
            <Parameter Name="URL">Uniform resource locator</Parameter>
            <Parameter Name="MAX_PIECES">(Optional) The maximum number of pieces (each 2000 characters in length, except for the last, which may be shorter), that REQUEST_PIECES should return. If provided, then that argument should be a positive integer.</Parameter>
            <Parameter Name="PROXY">(Optional) Specifies a proxy server to use when making the HTTP request. See SET_PROXY for the full format of the proxy setting.</Parameter>
            <Parameter Name="WALLET_PATH">(Optional) Specifies a client-side wallet. The client-side wallet contains the list of trusted certificate authorities required for HTTPS request.The format of wallet_path on a PC is, for example, file:c:\WINNT\Profiles\username\WALLETS, and in Unix is, for example, file:/home/username/wallets. When the UTL_HTTP package is executed in the Oracle database server, the wallet is accessed from the database server. Therefore, the wallet path must be accessible from the database server.See SET_WALLET for the description on how to set up an Oracle wallet. Non-HTTPS requests do not require an Oracle wallet.</Parameter>
            <Parameter Name="WALLET_PASSWORD">(Optional) Specifies the password required to open the wallet</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_AUTHENTICATION" ElementId="#i1027083">
          <Description>HTTP Requests Subprograms</Description>
          <Parameters>
            <Parameter Name="R">HTTP request</Parameter>
            <Parameter Name="USERNAME">Username for the HTTP authentication</Parameter>
            <Parameter Name="PASSWORD">Password for the HTTP authentication</Parameter>
            <Parameter Name="SCHEME">HTTP authentication scheme. Either Basic for the HTTP basic or AWS for Amazon S3 authentication scheme. Default is basic.</Parameter>
            <Parameter Name="FOR_PROXY">Identifies if the HTTP authentication information is for access to the HTTP proxy server instead of the Web server. Default is FALSE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_AUTHENTICATION_FROM_WALLET" ElementId="#BHAHDFJJ">
          <Description>HTTP Requests Subprograms</Description>
          <Parameters>
            <Parameter Name="R">The HTTP request</Parameter>
            <Parameter Name="ALIAS">Alias to identify and retrieve the username and password credential stored in the Oracle wallet</Parameter>
            <Parameter Name="SCHEME">HTTP authentication scheme. Either Basic for the HTTP basic or AWS for Amazon S3 authentication scheme. Default is basic.</Parameter>
            <Parameter Name="FOR_PROXY">Identifies if the HTTP authentication information is for access to the HTTP proxy server instead of the Web server. Default is FALSE.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_BODY_CHARSET" ElementId="#i1027267">
          <Description>Session Settings Subprograms</Description>
          <Parameters>
            <Parameter Name="R">The HTTP response.</Parameter>
            <Parameter Name="CHARSET">The default character set of the response body. The character set can be in Oracle or Internet Assigned Numbers Authority (IANA) naming convention. If charset is NULL, the database character set is assumed.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_BODY_CHARSET" ElementId="#i1027267">
          <Description>HTTP Requests Subprograms</Description>
          <Parameters>
            <Parameter Name="R">The HTTP response.</Parameter>
            <Parameter Name="CHARSET">The default character set of the response body. The character set can be in Oracle or Internet Assigned Numbers Authority (IANA) naming convention. If charset is NULL, the database character set is assumed.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_BODY_CHARSET" ElementId="#i1027267">
          <Description>HTTP Responses Subprograms and Session Settings Subprograms</Description>
          <Parameters>
            <Parameter Name="R">The HTTP response.</Parameter>
            <Parameter Name="CHARSET">The default character set of the response body. The character set can be in Oracle or Internet Assigned Numbers Authority (IANA) naming convention. If charset is NULL, the database character set is assumed.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_COOKIE_SUPPORT" ElementId="#i1027321">
          <Description>HTTP Requests Subprograms</Description>
          <Parameters>
            <Parameter Name="R">The HTTP request</Parameter>
            <Parameter Name="ENABLE">Set enable to TRUE to enable HTTP cookie support; FALSE to disable</Parameter>
            <Parameter Name="MAX_COOKIES">Sets the maximum total number of cookies maintained in the current session</Parameter>
            <Parameter Name="MAX_COOKIES_PER_SITE">Sets the maximum number of cookies maintained in the current session for each Web site</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_DETAILED_EXCP_SUPPORT" ElementId="#i1027452">
          <Description>Session Settings Subprograms</Description>
          <Parameters>
            <Parameter Name="ENABLE">Asks UTL_HTTP to raise a detailed exception directly if set to TRUE; otherwise FALSE</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_DETAILED_EXCP_SUPPORT" ElementId="#i1027452">
          <Description>Session Settings Subprograms</Description>
          <Parameters>
            <Parameter Name="ENABLE">Asks UTL_HTTP to raise a detailed exception directly if set to TRUE; otherwise FALSE</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_FOLLOW_REDIRECT" ElementId="#i1027499">
          <Description>HTTP Requests Subprograms</Description>
          <Parameters>
            <Parameter Name="R">The HTTP request</Parameter>
            <Parameter Name="MAX_REDIRECTS">The maximum number of redirects. Set to zero to disable redirects.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_HEADER" ElementId="#i1027608">
          <Description>Session Settings Subprograms</Description>
          <Parameters>
            <Parameter Name="R">The HTTP request</Parameter>
            <Parameter Name="NAME">The name of the HTTP request header</Parameter>
            <Parameter Name="VALUE">The value of the HTTP request header</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_HEADER" ElementId="#i1027608">
          <Description>HTTP Requests Subprograms</Description>
          <Parameters>
            <Parameter Name="R">The HTTP request</Parameter>
            <Parameter Name="NAME">The name of the HTTP request header</Parameter>
            <Parameter Name="VALUE">The value of the HTTP request header</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_PERSISTENT_CONN_SUPPORT" ElementId="#i1027673">
          <Description>HTTP Requests Subprograms</Description>
          <Parameters>
            <Parameter Name="ENABLE">TRUE to keep the network connection persistent. FALSE otherwise.</Parameter>
            <Parameter Name="R">The HTTP request</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_PROXY" ElementId="#i998249">
          <Description>Session Settings and Session Settings Subprograms</Description>
          <Parameters>
            <Parameter Name="PROXY">The proxy (host and an optional port number) to be used by the UTL_HTTP package</Parameter>
            <Parameter Name="NO_PROXY_DOMAINS">The list of hosts and domains for which no proxy should be used for all requests</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_RESPONSE_ERROR_CHECK" ElementId="#i998591">
          <Description>Session Settings Subprograms</Description>
          <Parameters>
            <Parameter Name="ENABLE">TRUE to check for response errors; otherwise FALSE</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_TRANSFER_TIMEOUT" ElementId="#i1027823">
          <Description>Session Settings and Session Settings Subprograms</Description>
          <Parameters>
            <Parameter Name="TIMEOUT">The network transfer timeout value in seconds.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SET_WALLET" ElementId="#i998681">
          <Description>Session Settings Subprograms</Description>
          <Parameters>
            <Parameter Name="PATH">The directory path that contains the Oracle wallet. The format is file:directory-path.The format of wallet_path on a PC is, for example, file:c:\WINNT\Profiles\username\WALLETS, and in Unix is, for example, file:/home/username/wallets. When the UTL_HTTP package is executed in the Oracle database server, the wallet is accessed from the database server. Therefore, the wallet path must be accessible from the database server.</Parameter>
            <Parameter Name="PASSWORD">The password needed to open the wallet. If the wallet is auto-login enabled, the password may be omitted and should be set to NULL. See "Using Wallets with Automatic Login Enabled" in the Oracle Database Advanced Security Guide for information about using Oracle Wallet Manager and the ORAPKI utility to create an auto-login wallet</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="WRITE_LINE" ElementId="#CHDFFGAG">
          <Description>HTTP Requests Subprograms</Description>
          <Parameters>
            <Parameter Name="R">The HTTP request</Parameter>
            <Parameter Name="DATA">The text line to send in the HTTP request body</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="WRITE_RAW" ElementId="#i999119">
          <Description>HTTP Requests Subprograms</Description>
          <Parameters>
            <Parameter Name="R">The HTTP request</Parameter>
            <Parameter Name="DATA">The binary data to send in the HTTP request body</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="WRITE_TEXT" ElementId="#i1027870">
          <Description>HTTP Requests Subprograms</Description>
          <Parameters>
            <Parameter Name="R">The HTTP request</Parameter>
            <Parameter Name="DATA">The text data to send in the HTTP request body</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="UTL_I18N" Url="http://docs.oracle.com/database/121/ARPLS/u_i18n.htm">
      <Description>UTL_I18N is a set of services that provides additional globalization functionality for applications written in PL/SQL.</Description>
      <SubPrograms>
        <SubProgram Name="ESCAPE_REFERENCE" ElementId="#i1000938">
          <Description>Converts a given text string to its character reference counterparts, for characters that fall outside the document character set.</Description>
          <Parameters>
            <Parameter Name="STR">Specifies the input string</Parameter>
            <Parameter Name="PAGE_CS_NAME">Specifies the character set of the document. If page_cs_name is NULL, then the database character set is used for CHAR data and the national character set is used for NCHAR data.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_COMMON_TIME_ZONES" ElementId="#CACGGHHD">
          <Description>Returns the list of common time zone IDs that are independent of the locales.</Description>
        </SubProgram>
        <SubProgram Name="GET_DEFAULT_CHARSET" ElementId="#i1001031">
          <Description>Returns the default Oracle character set name or the default e-mail safe character set name from an Oracle language name.</Description>
          <Parameters>
            <Parameter Name="LANGUAGE">Specifies a valid Oracle language</Parameter>
            <Parameter Name="CONTEXT">GENERIC_CONTEXT | MAIL_CONTEXTGENERIC_CONTEXT: Returns the default character set for general casesMAIL_CONTEXT: Returns the default e-mail safe character set name</Parameter>
            <Parameter Name="ISWINDOWS">If context is set as MAIL_CONTEXT, then iswindows should be set to TRUE if the platform is Windows and FALSE if the platform is not Windows. The default is FALSE.iswindows has no effect if context is set as GENERIC_CONTEXT.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_DEFAULT_ISO_CURRENCY" ElementId="#CACCCHGG">
          <Description>Returns the default ISO 4217 currency code for the specified territory.</Description>
          <Parameters>
            <Parameter Name="TERRITORY">Specifies a valid Oracle territory. It is case-insensitive.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_DEFAULT_LINGUISTIC_SORT" ElementId="#CACCFEFE">
          <Description>Returns the default linguistic sort name for the specified language.</Description>
          <Parameters>
            <Parameter Name="LANGUAGE">Specifies a valid Oracle language. It is case-insensitive.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_LOCAL_LANGUAGES" ElementId="#CACEAJFA">
          <Description>Returns the local language names for the specified territory.</Description>
          <Parameters>
            <Parameter Name="TERRITORY">Specifies a valid Oracle territory. It is case-insensitive.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_LOCAL_LINGUISTIC_SORTS" ElementId="#CACDDJBE">
          <Description>Returns the local linguistic sort names for the specified language.</Description>
          <Parameters>
            <Parameter Name="LANGUAGE">Specifies a valid Oracle language. It is case-insensitive.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_LOCAL_TERRITORIES" ElementId="#CACHFIBJ">
          <Description>Returns the local territory names for the specified language.</Description>
          <Parameters>
            <Parameter Name="LANGUAGE">Specifies a valid Oracle language. It is case-insensitive.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_LOCAL_TIME_ZONES" ElementId="#CACGGGCD">
          <Description>Returns the local time zone IDs for the specified territory.</Description>
          <Parameters>
            <Parameter Name="TERRITORY">Specifies a valid Oracle territory. It is case-insensitive.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_MAX_CHARACTER_SIZE" ElementId="#CJHEJBAB">
          <Description>Returns the maximum character size of a given character set.</Description>
          <Parameters>
            <Parameter Name="CHARSET_NAME">Specifies a valid character set name. It is case-insensitive.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_TRANSLATION" ElementId="#CACCBGFC">
          <Description>Returns the translation of the language and territory name in the specified translation language.</Description>
          <Parameters>
            <Parameter Name="PARAMETER">Specifies a valid language name, territory name, or a combined string in the form of language_territory. It is case-insensitive.</Parameter>
            <Parameter Name="TRANS_LANGUAGE">Specifies a translation language name. For example, ITALIAN is for the Italian language. The default is AMERICAN, which indicates American English.</Parameter>
            <Parameter Name="FLAG">Specifies the translation type:LANGUAGE_TRANS: The function returns the language translation.TERRITORY_TRANS: The function returns the territory translation.LANGUAGE_TERRITORY_TRANS: The function returns the language and territory translation.The default translation type is LANGUAGE_TRANS.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MAP_CHARSET" ElementId="#i1001102">
          <Description>Maps an Oracle character set name to an IANA character set name.

Maps an IANA character set name to an Oracle character set name.

Maps an Oracle character set name to an e-mail safe character set name.</Description>
          <Parameters>
            <Parameter Name="CHARSET">Specifies the character set name to be mapped. The mapping is case-insensitive.</Parameter>
            <Parameter Name="CONTEXT">GENERIC_CONTEXT | MAIL_CONTEXTGENERIC_CONTEXT: The mapping is between an Oracle character set name and an IANA character set name. This is the default value.MAIL_CONTEXT: The mapping is between an Oracle character set name and an email safe character set name.</Parameter>
            <Parameter Name="FLAG">ORACLE_TO_IANA | IANA_TO_ORACLE if GENERIC_CONTEXT is setORACLE_TO_IANA: Map from an Oracle character set name to an IANA character set name. This is the default.IANA_TO_ORACLE: Map from an IANA character set name to an Oracle character set name.MAIL_GENERIC | MAIL_WINDOWS if MAIL_CONTEXT is setMAIL_GENERIC: Map from an Oracle character set name to an email safe character set name on a non-Windows platform.MAIL_WINDOWS: Map from an Oracle character set name to an email safe character set name on a Windows platform.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MAP_FROM_SHORT_LANGUAGE" ElementId="#CACGHHBG">
          <Description>Maps an Oracle short language name to an Oracle language name.</Description>
          <Parameters>
            <Parameter Name="LANGUAGE">Specifies a valid short language name. It is case-insensitive.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MAP_LANGUAGE_FROM_ISO" ElementId="#i1001270">
          <Description>Returns an Oracle language name from an ISO locale name.</Description>
          <Parameters>
            <Parameter Name="ISOLOCALE">Specifies the ISO locale. The mapping is case-insensitive.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MAP_LOCALE_TO_ISO" ElementId="#i1001337">
          <Description>Returns an ISO locale name from the Oracle language and territory name.</Description>
          <Parameters>
            <Parameter Name="ORA_LANGUAGE">Specifies an Oracle language name. It is case-insensitive.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MAP_TERRITORY_FROM_ISO" ElementId="#i1001400">
          <Description>Returns an Oracle territory name from an ISO locale name.</Description>
          <Parameters>
            <Parameter Name="ISOLOCALE">Specifies the ISO locale. The mapping is case-insensitive.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MAP_TO_SHORT_LANGUAGE" ElementId="#CACBHDAC">
          <Description>Maps an Oracle language name to an Oracle short language name.</Description>
          <Parameters>
            <Parameter Name="LANGUAGE">Specifies a valid full language name. It is case-insensitive.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RAW_TO_CHAR" ElementId="#i998567">
          <Description>Converts RAW data that is not encoded in the database character set into a VARCHAR2 string</Description>
          <Parameters>
            <Parameter Name="DATA">Specifies the RAW data to be converted to a VARCHAR2 string</Parameter>
            <Parameter Name="SRC_CHARSET">Specifies the character set that the RAW data was derived from. If src_charset is NULL, then the database character set is used.</Parameter>
            <Parameter Name="SCANNED_LENGTH">Specifies the number of bytes of source data scanned</Parameter>
            <Parameter Name="SHIFT_STATUS">Specifies the shift status at the end of the scan. The user must set it to SHIFT_IN the first time it is called in piecewise conversion.Note: ISO 2022 character sets use escape sequences instead of shift characters to indicate the encoding method. shift_status cannot hold the encoding method information that is provided by the escape sequences for the next function call. As a result, this function cannot be used to reconstruct ISO 2022 character from raw data in a piecewise way unless each unit of input can be guaranteed to be a closed string. A closed string begins and ends in a 7-bit escape state.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RAW_TO_NCHAR" ElementId="#i998574">
          <Description>Converts RAW data that is not encoded in the national character set into an NVARCHAR2 string</Description>
          <Parameters>
            <Parameter Name="DATA">Specifies the RAW data to be converted to an NVARCHAR2 string</Parameter>
            <Parameter Name="SRC_CHARSET">Specifies the character set that the RAW data was derived from. If src_charset is NULL, then the database character set is used.</Parameter>
            <Parameter Name="SCANNED_LENGTH">Specifies the number of bytes of source data scanned</Parameter>
            <Parameter Name="SHIFT_STATUS">Specifies the shift status at the end of the scan. The user must set it to SHIFT_IN the first time it is called in piecewise conversion.Note: ISO 2022 character sets use escape sequences instead of shift characters to indicate the encoding method. shift_status cannot hold the encoding method information that is provided by the escape sequences for the next function call. As a result, this function cannot be used to reconstruct ISO 2022 character from raw data in a piecewise way unless each unit of input can be guaranteed to be a closed string. A closed string begins and ends in a 7-bit escape state.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="STRING_TO_RAW" ElementId="#i1001698">
          <Description>Converts a VARCHAR2 or NVARCHAR2 string to another character set. The result is returned as a RAW datatype.</Description>
          <Parameters>
            <Parameter Name="DATA">Specifies the VARCHAR2 or NVARCHAR2 string to convert.</Parameter>
            <Parameter Name="DST_CHARSET">Specifies the destination character set. If dst_charset is NULL, then the database character set is used for CHAR data and the national character set is used for NCHAR data.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="TRANSLITERATE" ElementId="#CJHBGCAE">
          <Description>Transliterates between Japanese hiragana and katakana.</Description>
          <Parameters>
            <Parameter Name="DATA">Specifies the data to be converted. Either CHAR or NCHAR datatype can be specified.</Parameter>
            <Parameter Name="NAME">Specifies the transliteration name string. For a list of valid names, see Table 253-23.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UNESCAPE_REFERENCE" ElementId="#i998992">
          <Description>Converts an input string that contains character references to a text string.</Description>
          <Parameters>
            <Parameter Name="STR">Specifies the input string</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="UTL_IDENT" Url="http://docs.oracle.com/database/121/ARPLS/u_ident.htm">
      <Description>The UTL_IDENT package specifies which Database or client PL/SQL is running.</Description>
    </Package>
    <Package Name="UTL_INADDR" Url="http://docs.oracle.com/database/121/ARPLS/u_inaddr.htm">
      <Description>The UTL_INADDR package provides a PL/SQL procedures to support internet addressing. It provides an API to retrieve host names and IP addresses of local and remote hosts.</Description>
      <SubPrograms>
        <SubProgram Name="GET_HOST_ADDRESS" ElementId="#i998289">
          <Description>Retrieves the IP address of the local or remote host given its name</Description>
          <Parameters>
            <Parameter Name="HOST">The name of the host to retrieve the IP address.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_HOST_NAME" ElementId="#i998504">
          <Description>Retrieves the name of the local or remote host given its IP address</Description>
          <Parameters>
            <Parameter Name="IP">The IP address of the host used to determine its host name. If ip is not NULL, the official name of the host with its domain name is returned. If this is NULL, the name of the local host is returned and the name does not contain the domain to which the local host belongs.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="UTL_LMS" Url="http://docs.oracle.com/database/121/ARPLS/u_lms.htm">
      <Description>UTL_LMS retrieves and formats error messages in different languages.</Description>
      <SubPrograms>
        <SubProgram Name="FORMAT_MESSAGE" ElementId="#i999311">
          <Description>Formats a retrieved error message</Description>
          <Parameters>
            <Parameter Name="FORMAT">Specifies the string to format</Parameter>
            <Parameter Name="ARGS">Specifies the list of arguments</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_MESSAGE" ElementId="#BABEHGJJ">
          <Description>Retrieves an error message based on error number, product, facility, language, and message specified</Description>
          <Parameters>
            <Parameter Name="ERRNUM">Specifies the error number.Example: '972' (for ORA-00972)</Parameter>
            <Parameter Name="PRODUCT">Specifies the product to which the error message appliesExample: 'rdbms'</Parameter>
            <Parameter Name="FACILITY">Specifies the error message prefixExample: 'ora'</Parameter>
            <Parameter Name="LANGUAGE">Specifies the language of the message. The parameter is case-insensitive. The default is NULL, which causes GET_MESSAGE to use the value of the NLS_LANGUAGE session parameter.</Parameter>
            <Parameter Name="MESSAGE">Specifies the output buffer for the retrieved message</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="UTL_MAIL" Url="http://docs.oracle.com/database/121/ARPLS/u_mail.htm">
      <Description>The UTL_MAIL package is a utility for managing email which includes commonly used email features, such as attachments, CC, and BCC.</Description>
      <SubPrograms>
        <SubProgram Name="SEND" ElementId="#i1000954">
          <Description>Packages an email message into the appropriate format, locates SMTP information, and delivers the message to the SMTP server for forwarding to the recipients</Description>
          <Parameters>
            <Parameter Name="SENDER">Email address of the sender</Parameter>
            <Parameter Name="RECIPIENTS">Email addresses of the recipient(s), separated by commas</Parameter>
            <Parameter Name="CC">Email addresses of the CC recipient(s), separated by commas, default is NULL</Parameter>
            <Parameter Name="BCC">Email addresses of the BCC recipient(s), separated by commas, default is NULL</Parameter>
            <Parameter Name="SUBJECT">String to be included as email subject string, default is NULL</Parameter>
            <Parameter Name="MESSAGE">Text message body</Parameter>
            <Parameter Name="MIME_TYPE">Mime type of the message, default is 'text/plain; charset=us-ascii'</Parameter>
            <Parameter Name="PRIORITY">Message priority, which maps to the X-priority field. 1 is the highest priority and 5 the lowest. The default is 3.</Parameter>
            <Parameter Name="REPLYTO">Defines to whom the reply email is to be sent</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SEND_ATTACH_RAW" ElementId="#i1001532">
          <Description>Represents the SEND Procedure overloaded for RAW attachments</Description>
          <Parameters>
            <Parameter Name="SENDER">Email address of the sender</Parameter>
            <Parameter Name="RECIPIENTS">Email addresses of the recipient(s), separated by commas</Parameter>
            <Parameter Name="CC">Email addresses of the CC recipient(s), separated by commas, default is NULL</Parameter>
            <Parameter Name="BCC">Email addresses of the BCC recipient(s), separated by commas, default is NULL</Parameter>
            <Parameter Name="SUBJECT">String to be included as email subject string, default is NULL</Parameter>
            <Parameter Name="MESSAGE">Text message body</Parameter>
            <Parameter Name="MIME_TYPE">Mime type of the message, default is 'text/plain; charset=us-ascii'</Parameter>
            <Parameter Name="PRIORITY">Message priority, which maps to the X-priority field. 1 is the highest priority and 5 the lowest. The default is 3.</Parameter>
            <Parameter Name="ATTACHMENT">RAW attachment</Parameter>
            <Parameter Name="ATT_INLINE">Specifies whether the attachment is viewable inline with the message body, default is TRUE</Parameter>
            <Parameter Name="ATT_MIME_TYPE">Mime type of the attachment, default is 'application/octet'</Parameter>
            <Parameter Name="ATT_FILENAME">String specifying a filename containing the attachment, default is NULL</Parameter>
            <Parameter Name="REPLYTO">Defines to whom the reply email is to be sent</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SEND_ATTACH_VARCHAR2" ElementId="#i1001008">
          <Description>Represents the SEND Procedure overloaded for VARCHAR2 attachments</Description>
          <Parameters>
            <Parameter Name="SENDER">Email address of the sender</Parameter>
            <Parameter Name="RECIPIENTS">Email addresses of the recipient(s), separated by commas</Parameter>
            <Parameter Name="CC">Email addresses of the CC recipient(s), separated by commas, default is NULL</Parameter>
            <Parameter Name="BCC">Email addresses of the BCC recipient(s), separated by commas, default is NULL</Parameter>
            <Parameter Name="SUBJECT">String to be included as email subject string, default is NULL</Parameter>
            <Parameter Name="MESSAGE">Text message body</Parameter>
            <Parameter Name="MIME_TYPE">Mime type of the message, default is 'text/plain; charset=us-ascii</Parameter>
            <Parameter Name="PRIORITY">Message priority, which maps to the X-priority field. 1 is the highest priority and 5 the lowest. The default is 3.</Parameter>
            <Parameter Name="ATTACHMENT">Text attachment</Parameter>
            <Parameter Name="ATT_INLINE">Specifies whether the attachment is inline, default TRUE</Parameter>
            <Parameter Name="ATT_MIME_TYPE">Mime type of the attachment, default is 'text/plain; charset=us-ascii'</Parameter>
            <Parameter Name="ATT_FILENAME">String specifying a filename containing the attachment, default is NULL</Parameter>
            <Parameter Name="REPLYTO">Defines to whom the reply email is to be sent</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="UTL_MATCH" Url="http://docs.oracle.com/database/121/ARPLS/u_match.htm">
      <Description>The UTL_MATCH package facilitates matching two records. This is typically used to match names, such as two First Names or two Last Names.</Description>
    </Package>
    <Package Name="UTL_NLA" Url="http://docs.oracle.com/database/121/ARPLS/u_nla.htm">
      <Description>The UTL_NLA package exposes a subset of the BLAS and LAPACK (Version 3.0) operations on vectors and matrices represented as VARRAYs.</Description>
      <SubPrograms>
        <SubProgram Name="BLAS_ASUM" ElementId="#CIAJHJHD">
          <Description>BLAS Level 1 (Vector-Vector Operations) Subprograms</Description>
          <Parameters>
            <Parameter Name="N">Specifies the number of elements of the vectors x and y. n must be at least zero.</Parameter>
            <Parameter Name="X">UTL_NLA_ARRAY_FLT/DBL of dimension at least</Parameter>
            <Parameter Name="INCX">Specifies the increment for the elements of x. incx must not be zero.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BLAS_AXPY" ElementId="#CIAJDJEJ">
          <Description>BLAS Level 1 (Vector-Vector Operations) Subprograms</Description>
          <Parameters>
            <Parameter Name="N">Specifies the number of elements of the vectors x and y. n must be at least zero.  </Parameter>
            <Parameter Name="ALPHA">Specifies the scalar alpha.</Parameter>
            <Parameter Name="X">UTL_NLA_ARRAY_FLT/DBL of dimension at least</Parameter>
            <Parameter Name="INCX">Specifies the increment for the elements of x. incx must not be zero.</Parameter>
            <Parameter Name="Y">UTL_NLA_ARRAY_FLT/DBL of DIMENSION at least</Parameter>
            <Parameter Name="INCY">Specifies the increment for the elements of y. incy must not be zero.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BLAS_COPY" ElementId="#CIAIGABI">
          <Description>BLAS Level 1 (Vector-Vector Operations) Subprograms</Description>
          <Parameters>
            <Parameter Name="N">Specifies the number of elements of the vectors x and y. n must be at least zero.</Parameter>
            <Parameter Name="X">UTL_NLA_ARRAY_FLT/DBL of dimension at least</Parameter>
            <Parameter Name="INCX">Specifies the increment for the elements of x. incx must not be zero.</Parameter>
            <Parameter Name="Y">UTL_NLA_ARRAY_FLT/DBL of dimension at least</Parameter>
            <Parameter Name="INCY">Specifies the increment for the elements of y. incy must not be zero.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BLAS_DOT" ElementId="#CIAICFIG">
          <Description>BLAS Level 1 (Vector-Vector Operations) Subprograms</Description>
          <Parameters>
            <Parameter Name="N">Specifies the number of elements of the vectors x and y. n must be at least zero.</Parameter>
            <Parameter Name="X">UTL_NLA_ARRAY_FLT/DBL of dimension at least</Parameter>
            <Parameter Name="INCX">Specifies the increment for the elements of x. incx must not be zero.</Parameter>
            <Parameter Name="Y">UTL_NLA_ARRAY_FLT/DBL of dimension at least</Parameter>
            <Parameter Name="INCY">Specifies the increment for the elements of y. incy must not be zero.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BLAS_GBMV" ElementId="#CIADGCFJ">
          <Description>BLAS Level 2 (Matrix-Vector Operations) Subprograms</Description>
          <Parameters>
            <Parameter Name="TRANS">Specifies the operation to be performed:trans = 'N' or 'n'y := alpha*A*x + beta*ytrans = 'T' or 't'y := alpha*A'*x + beta*ytrans = 'C' or 'c'y := alpha*A'*x + beta*y</Parameter>
            <Parameter Name="M">Specifies the number of rows of the matrix A. m must be at least zero.</Parameter>
            <Parameter Name="N">Specifies the number of columns of the matrix A. n must be at least zero.</Parameter>
            <Parameter Name="KL">Specifies the number of sub-diagonals of the matrix A. kl must satisfy 0. le. kl.</Parameter>
            <Parameter Name="ALPHA">SCALAR_FLOAT/DOUBLE. Specifies the scalar alpha.</Parameter>
            <Parameter Name="A">UTL_NLA_ARRAY_FLT/DBL of DIMENSION (lda,n).Before entry, the leading (kl + ku + 1) by n part of the array A must contain the matrix of coefficients, supplied column by column, with the leading diagonal of the matrix in row (ku+1) of the array, the first super-diagonal starting at position 2 in row ku, the first sub-diagonal starting at position 1 in row(ku+2), and so on.Elements in the array A that do not correspond to elements in the band matrix (such as the top left ku by ku triangle) are not referenced.</Parameter>
            <Parameter Name="LDA">Specifies the first dimension of a as declared in the calling (sub) program. lda must be at least (kl+ku+1).</Parameter>
            <Parameter Name="X">UTL_NLA_ARRAY_FLT/DBL of dimension at leastwhen trans = ''N' or 'n' and at leastotherwise. Before entry, the incremented array X must contain the vector x.</Parameter>
            <Parameter Name="INCX">Specifies the increment for the elements of x. Must not be zero.</Parameter>
            <Parameter Name="BETA">SCALAR_FLOAT/DOUBLE. Specifies the scalar beta. When beta is supplied as zero then y need not be set on input.</Parameter>
            <Parameter Name="Y">UTL_NLA_ARRAY_FLT/DBL of dimension at leastwhen trans = 'N' or 'n' and at leastotherwise. Before entry with beta nonzero, the incremented array Y must contain the vector y. On exit, Y is overwritten by the updated vector y.</Parameter>
            <Parameter Name="INCY">Specifies the increment for the elements of y. Must not be zero.</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BLAS_GEMM" ElementId="#CIACCFIJ">
          <Description>BLAS Level 3 (Matrix-Matrix Operations) Subprograms</Description>
          <Parameters>
            <Parameter Name="TRANSA">Specifies the form of op(A) to be used in the matrix multiplication as follows:transa = 'N' or 'n' : op(A) = 'A'transa = 'T' or 't' : op(A) = 'A'transa = 'C' or 'c' : op(A) = 'A'</Parameter>
            <Parameter Name="TRANSB">Specifies the form of op(B) to be used in the matrix multiplication as follows:transb = 'N' or 'n' : op(B) = Btransb ='T' or 't' : op(B) = B'transb = 'C' or 'c': op(B) = B'</Parameter>
            <Parameter Name="M">Specifies the number of rows of the matrix op(A) and of the matrix C. m must be at least zero.</Parameter>
            <Parameter Name="N">Specifies the number of columns of the matrix op(B) and of the matrix C. n must be at least zero.</Parameter>
            <Parameter Name="ALPHA">SCALAR_FLOAT/DOUBLE. Specifies the scalar alpha.</Parameter>
            <Parameter Name="A">UTL_NLA_ARRAY_FLT/DBL of DIMENSION (lda, ka) where ka is k when transa = 'N' or 'n', and is m otherwise. Before entry with transa = 'N' or 'n', the leading m by k part of the array A must contain the matrix A, otherwise the leading k by m part of the array A must contain the matrix A.</Parameter>
            <Parameter Name="LDA">Specifies the first dimension of a as declared in the calling (sub) program. When transa = 'N' or 'n', lda must be at least max (1,k).</Parameter>
            <Parameter Name="B">UTL_NLA_ARRAY_FLT/DBL of DIMENSION (lda, kb) where kb is n when transb = ''N' or 'n', and is k otherwise. Before entry with transb = 'N' or 'n', the leading k by n part of the array b must contain the matrix B, otherwise the leading n by k part of the arrayb must contain the matrix B.</Parameter>
            <Parameter Name="LDB">Specifies the first dimension of b as declared in the calling (sub) program. When transb = 'N' or 'n', ldb must be at least max (1, n).</Parameter>
            <Parameter Name="BETA">SCALAR_FLOAT/DOUBLE. Specifies the scalar beta. When beta is supplied as zero then c need not be set on input.</Parameter>
            <Parameter Name="LDC">Specifies the first dimension of C as declared in the calling (sub) program. ldc must be at least max(1, m).</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BLAS_GEMV" ElementId="#CIAFEAFG">
          <Description>BLAS Level 2 (Matrix-Vector Operations) Subprograms</Description>
          <Parameters>
            <Parameter Name="TRANS">Specifies the operation to be performed:trans = 'N' or 'n',y := alpha*A*x + beta*ytrans = 'T' or 't'y := alpha*A'*x + beta*ytrans = 'C' or 'c'y := alpha*A'*x + beta*y</Parameter>
            <Parameter Name="M">Specifies the number of rows of the matrix A. m must be at least zero.</Parameter>
            <Parameter Name="N">Specifies the number of columns of the matrix A. n must be at least zero.</Parameter>
            <Parameter Name="ALPHA">SCALAR_FLOAT/DOUBLE. Specifies the scalar alpha.</Parameter>
            <Parameter Name="A">UTL_NLA_ARRAY_FLT/DBL of DIMENSION (lda, n). Before entry, the leading m by n part of the array a must contain the matrix of coefficients.</Parameter>
            <Parameter Name="LDA">Specifies the first dimension of a as declared in the calling (sub) program. lda must be at least max(1, m).</Parameter>
            <Parameter Name="X">UTL_NLA_ARRAY_FLT/DBL of dimension at leastwhen trans = ''N' or 'n' and at leastotherwise. Before entry, the incremented array X must contain the vector x.</Parameter>
            <Parameter Name="INCX">Specifies the increment for the elements of x. Must not be zero.</Parameter>
            <Parameter Name="BETA">SCALAR_FLOAT/DOUBLE. Specifies the scalar beta. When beta is supplied as zero then y need not be set on input.</Parameter>
            <Parameter Name="Y">UTL_NLA_ARRAY_FLT/DBL of dimension at leastwhen trans = 'N' or 'n' and at leastotherwise. Before entry with beta nonzero, the incremented array Y must contain the vector y. On exit, Y is overwritten by the updated vector y.</Parameter>
            <Parameter Name="INCY">Specifies the increment for the elements of y. Must not be zero.</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BLAS_GER" ElementId="#CIAEIJCI">
          <Description>BLAS Level 2 (Matrix-Vector Operations) Subprograms</Description>
          <Parameters>
            <Parameter Name="M">Specifies the number of rows of the matrix A. m must be at least zero.</Parameter>
            <Parameter Name="N">Specifies the number of columns of the matrix A. n must be at least zero.</Parameter>
            <Parameter Name="ALPHA">Specifies the scalar alpha.</Parameter>
            <Parameter Name="X">UTL_NLA_ARRAY_FLT/DBL of dimension at leastBefore entry, the incremented array X must contain the m element vector x.</Parameter>
            <Parameter Name="INCX">Specifies the increment for the elements of x. incx must not be zero.</Parameter>
            <Parameter Name="Y">UTL_NLA_ARRAY_FLT/DBL of dimension at leastBefore entry, the incremented array Y must contain the m element vector y.</Parameter>
            <Parameter Name="INCY">Specifies the increment for the elements of y. incx must not be zero.</Parameter>
            <Parameter Name="A">UTL_NLA_ARRAY_FLT/DBL of DIMENSION (lda, n).Before entry, the leading m by n part of the array a must contain the matrix of coefficients. On exit, a is overwritten by the updated matrix.</Parameter>
            <Parameter Name="LDA">Specifies the first dimension of a as declared in the calling (sub) program. lda must be at least</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BLAS_IAMAX" ElementId="#CIAIGEAJ">
          <Description>BLAS Level 1 (Vector-Vector Operations) Subprograms</Description>
          <Parameters>
            <Parameter Name="N">Specifies the number of elements of the vectors x and y. n must be at least zero.</Parameter>
            <Parameter Name="X">UTL_NLA_ARRAY_FLT/DBL of DIMENSION at least</Parameter>
            <Parameter Name="INCX">Specifies the increment for the elements of x. incx must not be zero.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BLAS_NRM2" ElementId="#CIAJEIAC">
          <Description>BLAS Level 1 (Vector-Vector Operations) Subprograms</Description>
          <Parameters>
            <Parameter Name="N">Specifies the number of elements of the vectors x and y. n must be at least zero.</Parameter>
            <Parameter Name="X">UTL_NLA_ARRAY_FLT/DBL of dimension at least</Parameter>
            <Parameter Name="INCX">Specifies the increment for the elements of x. incx must not be zero.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BLAS_ROT" ElementId="#CIAGCADG">
          <Description>BLAS Level 1 (Vector-Vector Operations) Subprograms</Description>
          <Parameters>
            <Parameter Name="N">Specifies the number of elements of the vectors x and y. n must be at least zero.</Parameter>
            <Parameter Name="X">UTL_NLA_ARRAY_FLT/DBL of dimension at least</Parameter>
            <Parameter Name="INCX">Specifies the increment for the elements of x. incx must not be zero.</Parameter>
            <Parameter Name="Y">UTL_NLA_ARRAY_FLT/DBL of DIMENSION at least</Parameter>
            <Parameter Name="INCY">Specifies the increment for the elements of y. incy must not be zero.</Parameter>
            <Parameter Name="C">SCALAR_FLOAT/DOUBLE.Specifies the scalar C.</Parameter>
            <Parameter Name="S">SCALAR_FLOAT/DOUBLE.Specifies the scalar S.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BLAS_ROTG" ElementId="#CIAFGGDH">
          <Description>BLAS Level 1 (Vector-Vector Operations) Subprograms</Description>
          <Parameters>
            <Parameter Name="A">SCALAR_FLOAT/DOUBLE. Specifies the scalar A.</Parameter>
            <Parameter Name="B">SCALAR_FLOAT/DOUBLE. Specifies the scalar B. </Parameter>
            <Parameter Name="C">SCALAR_FLOAT/DOUBLE. Specifies the scalar C.</Parameter>
            <Parameter Name="S">SCALAR_FLOAT/DOUBLE. Specifies the scalar S. </Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BLAS_SBMV" ElementId="#CIABHIIE">
          <Description>BLAS Level 2 (Matrix-Vector Operations) Subprograms</Description>
          <Parameters>
            <Parameter Name="UPLO">Specifies whether the upper or lower triangular part of the band matrix A is being supplied:uplo = 'U' or 'u'. The upper triangular part of A is supplied.uplo = 'L' or 'l'. The lower triangular part of A is supplied.</Parameter>
            <Parameter Name="N">Specifies the order of the matrix A. n must be at least zero.</Parameter>
            <Parameter Name="K">Specifies the number of super-diagonals of the matrix A. k must satisfy 0 .le. k.</Parameter>
            <Parameter Name="ALPHA">SCALAR_FLOAT/DOUBLE. Specifies the scalar alpha.</Parameter>
            <Parameter Name="A">UTL_NLA_ARRAY_FLT/DBL of DIMENSION (lda,n).Before entry with uplo = 'U' or 'u', the leading (k+1) by n part of the array A must contain the upper triangular band part of the symmetric matrix, supplied column by column, with the leading diagonal of the matrix in row (k+1) of the array, the first super-diagonal starting at position 2 in rowk, and so on. The top left k by k triangle of the array A is not referenced.Before entry with uplo = 'L' or 'l', the leading (k+1) by n part of the array A must contain the lower triangular band part of the symmetric matrix, supplied column by column, with the leading diagonal of the matrix in row 1 of the array, the first sub-diagonal starting at position 1 in row 2, and so on. The bottom right k by k triangle of the array A is not referenced.Unchanged on exit</Parameter>
            <Parameter Name="LDA">Specifies the first dimension of a as declared in the calling (sub) program. lda must be at least (k + 1).</Parameter>
            <Parameter Name="X">UTL_NLA_ARRAY_FLT/DBL of dimension at leastBefore entry, the incremented array X must contain the n element vector x.</Parameter>
            <Parameter Name="INCX">Specifies the increment for the elements of x. Must not be zero.</Parameter>
            <Parameter Name="BETA">SCALAR_FLOAT/DOUBLE. Specifies the scalar beta.</Parameter>
            <Parameter Name="Y">UTL_NLA_ARRAY_FLT/DBL of dimension at leastBefore entry, the incremented array Y must contain the n element vector y. On exit, Y is overwritten by the updated vector y.</Parameter>
            <Parameter Name="INCY">Specifies the increment for the elements of y. Must not be zero.</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BLAS_SCAL" ElementId="#CIAIBBHJ">
          <Description>BLAS Level 1 (Vector-Vector Operations) Subprograms</Description>
          <Parameters>
            <Parameter Name="N">Specifies the number of elements of the vectors x and y. n must be at least zero.</Parameter>
            <Parameter Name="ALPHA">Specifies the scalar alpha.</Parameter>
            <Parameter Name="X">UTL_NLA_ARRAY_FLT/DBL of dimension at least</Parameter>
            <Parameter Name="INCX">Specifies the increment for the elements of x. incx must not be zero.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BLAS_SPMV" ElementId="#CIAGFAGC">
          <Description>BLAS Level 2 (Matrix-Vector Operations) Subprograms</Description>
          <Parameters>
            <Parameter Name="UPLO">Specifies the upper or lower triangular part of the matrix A is supplied in the packed array AP:uplo = 'U' or 'u'. The upper triangular part of A is supplied in AP.uplo = 'L' or 'l'. The lower triangular part of A is supplied in AP.</Parameter>
            <Parameter Name="N">Specifies the order of the matrix A. n must be at least zero.</Parameter>
            <Parameter Name="ALPHA">SCALAR_FLOAT/DOUBLE. Specifies the scalar alpha.</Parameter>
            <Parameter Name="AP">UTL_NLA_ARRAY_FLT/DBL of dimension at leastBefore entry with uplo = 'U' or 'u', the array ap must contain the upper triangular part of the symmetric matrix packed sequentially, column by column, so that ap(1) contains a(1,1), ap(2) and ap(3) contain a(1,2) and a(2,2) respectively, and so on.Before entry with uplo = 'L' or 'l', the array ap must contain the lower triangular part of the symmetric matrix packed sequentially, column by column, so that ap(1) contains, ap(2) and ap(3) contain a(2,1) and a(3,1) respectively, and so on.</Parameter>
            <Parameter Name="X">UTL_NLA_ARRAY_FLT/DBL of dimension at leastBefore entry, the incremented array X must contain the n element vector x.</Parameter>
            <Parameter Name="INCX">Specifies the increment for the elements of x. Must not be zero.</Parameter>
            <Parameter Name="BETA">SCALAR_FLOAT/DOUBLE. Specifies the scalar beta. When beta is supplied as zero then Y need not be set on input.</Parameter>
            <Parameter Name="Y">UTL_NLA_ARRAY_FLT/DBL of dimension at leasTBefore entry, the incremented array Y must contain the n element vector y. On exit, Y is overwritten by the updated vector y.</Parameter>
            <Parameter Name="INCY">Specifies the increment for the elements of y. Must not be zero.</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BLAS_SPR" ElementId="#CIAIECGG">
          <Description>BLAS Level 2 (Matrix-Vector Operations) Subprograms</Description>
          <Parameters>
            <Parameter Name="UPLO">Specifies whether the upper or lower triangular part of the matrix A is supplied in the packed array ap:uplo = 'U' or 'u': The upper triangular part of A is supplied in ap.uplo = 'L' or 'l' : The lower triangular part of A is supplied in ap.</Parameter>
            <Parameter Name="N">Specifies the order of the matrix A. n must be at least zero.</Parameter>
            <Parameter Name="ALPHA">Specifies the scalar alpha.</Parameter>
            <Parameter Name="X">UTL_NLA_ARRAY_FLT/DBL of dimension at leastBefore entry, the incremented array X must contain the m element vector x.</Parameter>
            <Parameter Name="INCX">Specifies the increment for the elements of x. incx must not be zero.</Parameter>
            <Parameter Name="A">UTL_NLA_ARRAY_FLT/DBL of dimension at leastBefore entry with uplo = 'U' or 'u', the array ap must contain the upper triangular part of the symmetric matrix packed sequentially, column by column, so that ap(1) contains a(1,1), ap(2) and ap(3) contain a(1,2) and a(2,2) respectively, and so on. On exit, the array ap is overwritten by the upper triangular part of the updated matrix.Before entry with uplo = 'L' or 'l', the array ap must contain the lower triangular part of the symmetric matrix packed sequentially, column by column, so that ap(1) contains a(1,1), ap(2) and ap(3) contain a(2,1) and a(3,1) respectively, and so on. On exit, the array ap is overwritten by the lower triangular part of the updated matrix</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BLAS_SPR2" ElementId="#CIACHFGD">
          <Description>BLAS Level 2 (Matrix-Vector Operations) Subprograms</Description>
          <Parameters>
            <Parameter Name="UPLO">Specifies whether the upper or lower triangular part of the matrix A is supplied in the packed array ap :uplo = 'U' or 'u' : The upper triangular part of A is supplied in ap.uplo = 'L' or 'l' : The lower triangular part of A is supplied in ap.</Parameter>
            <Parameter Name="N">Specifies the order of the matrix A. n must be at least zero.</Parameter>
            <Parameter Name="ALPHA">Specifies the scalar alpha.</Parameter>
            <Parameter Name="X">UTL_NLA_ARRAY_FLT/DBL of dimension at leastBefore entry, the incremented array X must contain the m element vector x.</Parameter>
            <Parameter Name="INCX">Specifies the increment for the elements of x. incx must not be zero.</Parameter>
            <Parameter Name="Y">UTL_NLA_ARRAY_FLT/DBL of dimension at leastBefore entry, the incremented array X must contain the m element vector y.</Parameter>
            <Parameter Name="INCY">Specifies the increment for the elements of y. incy must not be zero.</Parameter>
            <Parameter Name="AP">UTL_NLA_ARRAY_FLT/DBL of dimension at leastBefore entry with uplo = 'U' or 'u', the array ap must contain the upper triangular part of the symmetric matrix packed sequentially, column by column, so that ap(1) contains ap(1) contains a(1,1), ap(2) and ap(3) contain a(1,2) and a(2,2) respectively, and so on. On exit, the array ap is overwritten by the upper triangular part of the updated matrix.Before entry with uplo = 'L' or 'l', the array ap must contain the lower triangular part of the symmetric matrix packed sequentially, column by column, so that ap(1) contains a(1,1), ap(2) and ap(3) contain a(2,1) and a(3,1) respectively, and so on. On exit, the array ap is overwritten by the lower triangular part of the updated matrix</Parameter>
            <Parameter Name="LDA">Specifies the first dimension of a as declared in the calling (sub) program. lda must be at least (k + 1).</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BLAS_SWAP" ElementId="#CIADBHFG">
          <Description>BLAS Level 1 (Vector-Vector Operations) Subprograms</Description>
          <Parameters>
            <Parameter Name="N">Specifies the number of elements of the vectors x and y. n must be at least zero.</Parameter>
            <Parameter Name="X">UTL_NLA_ARRAY_FLT/DBL of dimension at least</Parameter>
            <Parameter Name="INCX">Specifies the increment for the elements of x. incx must not be zero.</Parameter>
            <Parameter Name="Y">UTL_NLA_ARRAY_FLT/DBL of DIMENSION at least</Parameter>
            <Parameter Name="INCY">Specifies the increment for the elements of y. incy must not be zero.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BLAS_SYMM" ElementId="#CIAHABIJ">
          <Description>BLAS Level 3 (Matrix-Matrix Operations) Subprograms</Description>
          <Parameters>
            <Parameter Name="SIDE">Specifies whether the symmetric matrix A appears on the left or right in the operation:side = 'L' or 'l' : C := alpha*A*B + beta*Cside = 'R' or 'r' : C := alpha*B*A + beta*C</Parameter>
            <Parameter Name="UPLO">Specifies whether the upper or lower triangular part of the array A is to be referenced:uplo = 'U' or 'u' : Only the upper triangular part of the symmetric matrix is to be referenced.uplo = 'L' or 'l' : Only the lower triangular part of the symmetric matrix is to be referenced.</Parameter>
            <Parameter Name="M">Specifies the number of rows of the matrix C. m must be at least zero.</Parameter>
            <Parameter Name="N">Specifies the number of columns of the matrix C. n must be at least zero.</Parameter>
            <Parameter Name="ALPHA">SCALAR_FLOAT/DOUBLE. Specifies the scalar alpha.</Parameter>
            <Parameter Name="A">UTL_NLA_ARRAY_FLT/DBL of DIMENSION (lda,ka) where ka is m when side = 'L' or 'l', and is n otherwise.Before entry with side = 'L' or 'l', the leading m by m part of the array A must contain the symmetric matrix, such that when uplo = 'U' or 'u', the leading m by m upper triangular part of the array A must contain the upper triangular part of the symmetric matrix and the strictly lower triangular part of A is not referenced, and when uplo = 'L' or 'l', the leading m by m lower triangular part of the array A must contain the lower triangular part of the symmetric matrix and the strictly upper triangular part of A is not referenced.Before entry with side = 'R' or 'r', the n by n part of the array A must contain the symmetric matrix, such that when uplo = 'U' or 'u', the leading n by n upper triangular part of the array A must contain the upper triangular part of the symmetric matrix and the strictly lower triangular part of A is not referenced, and when uplo = 'L' or 'l', the leading n by n lower triangular part of the array A must contain the lower triangular part of the symmetric matrix and the strictly upper triangular part of A is not referenced.</Parameter>
            <Parameter Name="LDA">Specifies the first dimension of a as declared in the calling (sub) program. When side = 'L' or 'l', lda must be at least max(1,m), otherwise lda must be at least max(1,n).</Parameter>
            <Parameter Name="B">UTL_NLA_ARRAY_FLT/DBL of DIMENSION (ldb,n).Before entry, the leading m by n part of the array B must contain the matrix B.</Parameter>
            <Parameter Name="LDB">Specifies the first dimension of b as declared in the calling (sub) program. ldb must be at least max(1,m).</Parameter>
            <Parameter Name="BETA">SCALAR_FLOAT/DOUBLE. Specifies the scalar beta. When beta is supplied as zero then c need not be set on input.</Parameter>
            <Parameter Name="LDC">Specifies the first dimension of C as declared in the calling (sub) program. ldc must be at least max (1,m).</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BLAS_SYMV" ElementId="#CIAEAJDG">
          <Description>BLAS Level 2 (Matrix-Vector Operations) Subprograms</Description>
          <Parameters>
            <Parameter Name="UPLO">Specifies whether the upper or lower triangular part of the array A is to be referenced:uplo = 'U'or 'u'. Only the upper triangular part ofA is to be referenced.uplo = 'L' or 'l'. Only the lower triangular part of A is to be referenced.</Parameter>
            <Parameter Name="N">Specifies the order of the matrix A. n must be at least zero.</Parameter>
            <Parameter Name="ALPHA">SCALAR_FLOAT/DOUBLE. Specifies the scalar alpha.</Parameter>
            <Parameter Name="A">UTL_NLA_ARRAY_FLT/DBL of DIMENSION (lda,n). Before entry with uplo = 'U' or 'u', the leading n by n upper triangular part of the array A must contain the upper triangular part of the symmetric matrix and the strictly lower triangular part of A is not referenced.Before entry with uplo = 'L' or 'l', the leading n by n lower triangular part of the array A must contain the lower triangular part of the symmetric matrix and the strictly upper triangular part of A is not referenced.</Parameter>
            <Parameter Name="LDA">Specifies the first dimension of a as declared in the calling (sub) program. lda must be at least max(1,n).</Parameter>
            <Parameter Name="X">UTL_NLA_ARRAY_FLT/DBL of dimension at leastBefore entry, the incremented array X must contain the n element vector x.</Parameter>
            <Parameter Name="INCX">Specifies the increment for the elements of x. Must not be zero.</Parameter>
            <Parameter Name="BETA">SCALAR_FLOAT/DOUBLE. Specifies the scalar beta. When beta is supplied as zero then y need not be set on input.</Parameter>
            <Parameter Name="Y">UTL_NLA_ARRAY_FLT/DBL of dimension at leastBefore entry, the incremented array Y must contain the n element vector y. On exit, Y is overwritten by the updated vector y.</Parameter>
            <Parameter Name="INCY">Specifies the increment for the elements of y. Must not be zero.</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BLAS_SYR" ElementId="#CIAFBJAJ">
          <Description>BLAS Level 2 (Matrix-Vector Operations) Subprograms</Description>
          <Parameters>
            <Parameter Name="UPLO">Specifies whether the upper or lower triangular part of the array A is to be referenced:uplo = 'U'or 'u' : Only the upper triangular part of A is to be referenced.uplo = 'L'or 'l' : Only the lower triangular part of A is to be referenced.</Parameter>
            <Parameter Name="N">Specifies the order of the matrix A. n must be at least zero.</Parameter>
            <Parameter Name="ALPHA">Specifies the scalar alpha.  </Parameter>
            <Parameter Name="X">UTL_NLA_ARRAY_FLT/DBL of dimension at leastBefore entry, the incremented array X must contain the m element vector x.</Parameter>
            <Parameter Name="INCX">Specifies the increment for the elements of x. incx must not be zero.</Parameter>
            <Parameter Name="A">UTL_NLA_ARRAY_FLT/DBL of DIMENSION (lda, n)Before entry with uplo = 'U' or 'u', the leading n by n upper triangular part of the array A must contain the upper triangular part of the symmetric matrix and the strictly lower triangular part of A is not referenced. On exit, the upper triangular part of the array A is overwritten by the upper triangular part of the updated matrix.Before entry with uplo = 'L' or 'l', the leading n by n lower triangular part of the array A must contain the lower triangular part of the symmetric matrix and the strictly upper triangular part of A is not referenced. On exit, the lower triangular part of the array A is overwritten by the lower triangular part of the updated matrix.</Parameter>
            <Parameter Name="LDA">Specifies the first dimension of a as declared in the calling (sub) program. lda must be at least</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BLAS_SYR2" ElementId="#CIAHBHJB">
          <Description>BLAS Level 2 (Matrix-Vector Operations) Subprograms</Description>
          <Parameters>
            <Parameter Name="UPLO">Specifies whether the upper or lower triangular part of the array A is to be referenced:uplo = 'U' or 'u' : Only the upper triangular part of A is to be referenced.uplo = 'L' or 'l' : Only the lower triangular part of A is to be referenced.</Parameter>
            <Parameter Name="N">Specifies the order of the matrix A. n must be at least zero.  </Parameter>
            <Parameter Name="ALPHA">Specifies the scalar alpha.  </Parameter>
            <Parameter Name="X">UTL_NLA_ARRAY_FLT/DBL of dimension at leastBefore entry, the incremented array X must contain the m element vector x.</Parameter>
            <Parameter Name="INCX">Specifies the increment for the elements of x. incx must not be zero.</Parameter>
            <Parameter Name="Y">UTL_NLA_ARRAY_FLT/DBL of dimension at leastBefore entry, the incremented array Y must contain the m element vector y.</Parameter>
            <Parameter Name="INCY">Specifies the increment for the elements of y. incy must not be zero.</Parameter>
            <Parameter Name="A">UTL_NLA_ARRAY_FLT/DBL of DIMENSION (lda, n)With uplo = 'U' or 'u', the leading n by n upper triangular part of the array A must contain the upper triangular part of the symmetric matrix and the strictly lower triangular part of A is not referenced. On exit, the upper triangular part of the array A is overwritten by the upper triangular part of the updated matrix.With uplo = 'L' or 'l', the leading n by n lower triangular part of the array A must contain the lower triangular part of the symmetric matrix and the strictly upper triangular part of A is not referenced. On exit, the lower triangular part of the array A is overwritten by the lower triangular part of the updated matrix.</Parameter>
            <Parameter Name="LDA">Specifies the first dimension of a as declared in the calling (sub) program. lda must be at least</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BLAS_SYR2K" ElementId="#CIAJFDDD">
          <Description>BLAS Level 3 (Matrix-Matrix Operations) Subprograms</Description>
          <Parameters>
            <Parameter Name="UPLO">Specifies whether the upper or lower triangular part of the array C is to be referenced:uplo = 'U' or 'u' : Only the upper triangular part of C is to be referenced.uplo = 'L' or 'l' : Only the lower triangular part of C is to be referenced.</Parameter>
            <Parameter Name="TRANS">Specifies the operations to be performed:trans = 'N' or 'n'C : C := alpha*A*B' + alpha*B*A' + beta*Ctrans = 'T' or 't'C : C := alpha*A'*B + alpha*B'*A + beta*Ctrans = 'C' or 'c'C : C := alpha*A'*B + alpha*B'*A + beta*C</Parameter>
            <Parameter Name="N">Specifies the order of matrix C. n must be at least zero.</Parameter>
            <Parameter Name="K">On entry with trans = 'N' or 'n', k specifies the number of columns of the matrices A and B. On entry with trans = 'T' or 't' or trans = 'C' or 'c', k specifies the number of rows of the matrices A and B. k must be at least zero.</Parameter>
            <Parameter Name="ALPHA">SCALAR_FLOAT/DOUBLE. Specifies the scalar alpha.</Parameter>
            <Parameter Name="A">UTL_NLA_ARRAY_FLT/DBL of DIMENSION (lda,ka) where kb is k when trans = 'N' or 'n', and is n otherwise.Before entry with trans = 'N' or 'n', the leading n byk part of the array A must contain the matrix A, otherwise the leading k by n part of the array A must contain the matrix A.</Parameter>
            <Parameter Name="LDA">Specifies the first dimension of a as declared in the calling (sub) program. When trans = 'N' or 'n', lda must be at leastmax(1,n), otherwise lda must be at least max(1,k).</Parameter>
            <Parameter Name="B">UTL_NLA_ARRAY_FLT/DBL of DIMENSION (lda,kb) where kb is k when trans = 'N' or 'n', and is n otherwise.Before entry with trans = 'N' or 'n', the leading n byk part of the array B must contain the matrix B, otherwise the leading k by n part of the array B must contain the matrix B.</Parameter>
            <Parameter Name="LDB">Specifies the first dimension of b as declared in the calling (sub) program. When trans = 'N' or 'n', ldb must be at least max (1,n), otherwise ldb must be at least max (1,k).</Parameter>
            <Parameter Name="BETA">SCALAR_FLOAT/DOUBLE. Specifies the scalar beta.</Parameter>
            <Parameter Name="LDC">Specifies the first dimension of C as declared in the calling (sub) program. ldc must be at least max(1,n).</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BLAS_SYRK" ElementId="#CIABCBAG">
          <Description>BLAS Level 3 (Matrix-Matrix Operations) Subprograms</Description>
          <Parameters>
            <Parameter Name="UPLO">Specifies whether the upper or lower triangular part of the array C is to be referenced:uplo = 'U' or 'u' : Only the upper triangular part of C is to be referenced.uplo = 'L' or 'l' : Only the lower triangular part of C is to be referenced.</Parameter>
            <Parameter Name="TRANS">Specifies the operations to be performed:trans = 'N' or 'n' : C := alpha*A*A' + beta*Ctrans = 'T' or 't' : C := alpha*A'*A + beta*Ctrans ='C' or 'c' : C := alpha*A'*A + beta*C</Parameter>
            <Parameter Name="N">Specifies the order of matrix C. n must be at least zero.</Parameter>
            <Parameter Name="K">On entry with trans = 'N' or 'n', k specifies the number of columns of the matrix A. On entry with trans = 'T' or 't' or trans = 'C' or 'c', k specifies the number of rows of the matrix A. k must be at least zero.</Parameter>
            <Parameter Name="ALPHA">SCALAR_FLOAT/DOUBLE. Specifies the scalar alpha.</Parameter>
            <Parameter Name="A">UTL_NLA_ARRAY_FLT/DBL of DIMENSION (lda,ka) where ka is k when trans = 'N' or 'n', and is n otherwise.Before entry with trans = 'N' or 'n', the leading n byk part of the array A must contain the matrix A, otherwise the leading k by n part of the array A must contain the matrix A.</Parameter>
            <Parameter Name="LDA">Specifies the first dimension of a as declared in the calling (sub) program. When trans = 'N' or 'n', lda must be at least max(1,n), otherwiselda must be at least max(1,k).</Parameter>
            <Parameter Name="BETA">SCALAR_FLOAT/DOUBLE. Specifies the scalar beta.</Parameter>
            <Parameter Name="LDC">Specifies the first dimension of C as declared in the calling (sub) program. ldc must be at least max(1,n).</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BLAS_TBMV" ElementId="#CIAFEEGF">
          <Description>BLAS Level 2 (Matrix-Vector Operations) Subprograms</Description>
          <Parameters>
            <Parameter Name="UPLO">Specifies whether the matrix is an upper or lower triangular matrix:uplo = 'U' or 'u'. A is an upper triangular matrix.uplo = 'L' or 'l'. A is a lower triangular matrix.</Parameter>
            <Parameter Name="TRANS">Specifies the operation to be performed:trans = 'N' or 'n'x := A*xtrans = 'T' or 't'x := A'*xtrans = 'C' or 'c'x := A'*x</Parameter>
            <Parameter Name="DIAG">Specifies whether or not A is unit triangular:diag = 'U' or 'u'. A is assumed to be unit triangular.diag = 'N' or 'n'. A is not assumed to be unit triangular.</Parameter>
            <Parameter Name="N">Specifies the order of the matrix A. n must be at least zero.  </Parameter>
            <Parameter Name="K">Specifies whether or not A is unit triangular:with uplo = 'U' or 'u', K specifies the number of super-diagonals of the matrix A.with uplo = 'L' or 'l', K specifies the number of sub-diagonals of the matrix A.K must satisfy 0 .le. k.</Parameter>
            <Parameter Name="A">UTL_NLA_ARRAY_FLT/DBL of DIMENSION ( lda, n ).Before entry with uplo = 'U' or 'u', the leading (k+1) by n part of the array A must contain the upper triangular band part of the matrix of coefficients, supplied column by column, with the leading diagonal of the matrix in row(k+1) of the array, the first super-diagonal starting at position 2 in row k, and so on. The top left k by k triangle of the array A is not referenced.Before entry with uplo = 'L' or 'l', the leading (k+1) by n part of the array A must contain the lower triangular band part of the matrix of coefficients, supplied column by column, with the leading diagonal of the matrix in row 1 of the array, the first sub-diagonal starting at position 1 in row 2, and so on. The bottom right k by k triangle of the array A is not referenced.Note that when diag = ''U' or 'u', the elements of the array A corresponding to the diagonal elements of the matrix are not referenced, but are assumed to be unity.</Parameter>
            <Parameter Name="LDA">Specifies the first dimension of a as declared in the calling (sub) program. lda must be at least (k+1).</Parameter>
            <Parameter Name="X">UTL_NLA_ARRAY_FLT/DBL of dimension at least (1+(n-1)*abs(incx)). Before entry, the incremented array X must contain the n element vector x. On exit, X is overwritten with the transformed vector x.</Parameter>
            <Parameter Name="INCX">Specifies the increment for the elements of x. Must not be zero.</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BLAS_TBSV" ElementId="#CIACICEE">
          <Description>BLAS Level 2 (Matrix-Vector Operations) Subprograms</Description>
          <Parameters>
            <Parameter Name="UPLO">Specifies whether the matrix is an upper or lower triangular matrix:uplo = ''U' or 'u'. A is an upper triangular matrix.uplo = 'L' or 'l'. A is a lower triangular matrix.</Parameter>
            <Parameter Name="TRANS">Specifies the equations to be solved:trans = 'N' or 'n : 'A*x = btrans = 'T' or 't': A'*x = btrans = 'C' or 'c': A'*x = b</Parameter>
            <Parameter Name="DIAG">Specifies whether or not A is unit triangular:diag = 'U' or 'u' : A is assumed to be unit triangular.diag = 'N' or 'n' : A is not assumed to be unit triangular.</Parameter>
            <Parameter Name="N">Specifies the order of the matrix A. n must be at least zero.</Parameter>
            <Parameter Name="K">Specifies whether or not A is unit triangular:with uplo = 'U' or 'u', K specifies the number of super-diagonals of the matrix A.with uplo = 'L' or 'l', K specifies the number of sub-diagonals of the matrix A.K must satisfy 0 .le. k.</Parameter>
            <Parameter Name="A">UTL_NLA_ARRAY_FLT/DBL of DIMENSION (lda,n).Before entry with uplo = 'U' or 'u', the leading (k+1) by n part of the array A must contain the upper triangular band part of the matrix of coefficients, supplied column by column, with the leading diagonal of the matrix in row (k+1) of the array, the first super-diagonal starting at position 2 in row k, and so on. The top left k by k triangle of the array A is not referenced.Before entry with uplo = 'L' or 'l', the leading (k+1) by n part of the array A must contain the lower triangular band part of the matrix of coefficients, supplied column by column, with the leading diagonal of the matrix in row 1 of the array, the first sub-diagonal starting at position 1 in row 2, and so on. The bottom right k by k triangle of the array A is not referenced.Note that when diag = 'U' or 'u', the elements of the array A corresponding to the diagonal elements of the matrix are not referenced, but are assumed to be unity.</Parameter>
            <Parameter Name="LDA">On entry, lda specifies the first dimension of A as declared in the calling (sub) program. lda must be at least (k+1).</Parameter>
            <Parameter Name="X">UTL_NLA_ARRAY_FLT/DBL of dimension at leastBefore entry, the incremented array X must contain the n element right-hand side vector b.On exit, X is overwritten with the solution vector x.</Parameter>
            <Parameter Name="INCX">Specifies the increment for the elements of x. incx must not be zero.</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BLAS_TPMV" ElementId="#CIAIFFDD">
          <Description>BLAS Level 2 (Matrix-Vector Operations) Subprograms</Description>
          <Parameters>
            <Parameter Name="UPLO">Specifies whether the matrix is an upper or lower triangular matrix:uplo = 'U' or 'u'. A is an upper triangular matrix.uplo = 'L' or 'l'. A is a lower triangular matrix.</Parameter>
            <Parameter Name="TRANS">Specifies the operation to e performed:trans = 'N' or 'n'x := A*xtrans = 'T' or 't'x := A'*xtrans = 'C' or 'c'x := A'*x</Parameter>
            <Parameter Name="DIAG">Specifies whether or not A is unit triangular:diag = 'U' or 'u'. A is assumed to be unit triangular.diag = 'N' or 'n'. A is not assumed to be unit triangular.</Parameter>
            <Parameter Name="N">Specifies the order of the matrix A. n must be at least zero.</Parameter>
            <Parameter Name="AP">UTL_NLA_ARRAY_FLT/DBL of DIMENSION (lda,n).Before entry with uplo = 'U' or 'u', the leading (k+1) by n part of the array A must contain the upper triangular band part of the matrix of coefficients, supplied column by column, with the leading diagonal of the matrix in row (k+1) of the array, the first super-diagonal starting at position 2 in row k, and so on. The top left k by k triangle of the array A is not referenced.Before entry with uplo = 'L' or 'l', the leading (k+1) by n part of the array A must contain the lower triangular band part of the matrix of coefficients, supplied column by column, with the leading diagonal of the matrix in row 1 of the array, the first sub-diagonal starting at position 1 in row 2, and so on. The bottom right k by k triangle of the array A is not referenced.Note that when diag = 'U' or 'u', the elements of the array A corresponding to the diagonal elements of the matrix are not referenced, but are assumed to be unity.</Parameter>
            <Parameter Name="X">UTL_NLA_ARRAY_FLT/DBL of dimension at least (1+(n-1)*abs(incx)). Before entry, the incremented array X must contain the n element vector x. On exit, X is overwritten with the transformed vector x.</Parameter>
            <Parameter Name="INCX">Specifies the increment for the elements of x. Must not be zero.</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BLAS_TPSV" ElementId="#CIACJJHC">
          <Description>BLAS Level 2 (Matrix-Vector Operations) Subprograms</Description>
          <Parameters>
            <Parameter Name="UPLO">Specifies whether the matrix is an upper or lower triangular matrix:uplo = 'U' or 'u' : A is an upper triangular matrix.uplo = 'L' or 'l' : A is a lower triangular matrix.</Parameter>
            <Parameter Name="TRANS">Specifies the operation to be performed:trans = 'N' or 'n' : A*x = btrans = 'T' or 't' : A'*x = btrans = 'C' or 'c' : A'*x = b</Parameter>
            <Parameter Name="DIAG">Specifies whether or not A is unit triangular:diag = 'U' or 'u' : A is assumed to be unit triangular.diag = 'N' or 'n' : 'A is not assumed to be unit triangular.</Parameter>
            <Parameter Name="N">Specifies the order of the matrix A. n must be at least zero.</Parameter>
            <Parameter Name="AP">UTL_NLA_ARRAY_FLT/DBL of dimension at leastBefore entry with uplo = 'U' or 'u', the array ap must contain the upper triangular matrix packed sequentially, column by column, so that ap(1) contains a(1,1), ap(2) and ap(3) contain a(1,2) and a(2,2) respectively, and so on.Before entry with uplo = 'L' or 'l', the array ap must contain the lower triangular matrix packed sequentially, column by column, so that ap(1) contains a(1,1), ap(2) and ap(3) contain a(2,1) and a(3,1) respectively, and so on.Note that when diag = 'U' or 'u', the diagonal elements of A are not referenced, but are assumed to be unity.</Parameter>
            <Parameter Name="X">UTL_NLA_ARRAY_FLT/DBL of dimension at leastBefore entry, the incremented array X must contain the n element right-hand side vector b. On exit, X is overwritten with the solution vector x.</Parameter>
            <Parameter Name="INCX">Specifies the increment for the elements of x. incx must not be zero.</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BLAS_TRMM" ElementId="#CIAEJGDI">
          <Description>BLAS Level 2 (Matrix-Vector Operations) Subprograms</Description>
          <Parameters>
            <Parameter Name="SIDE">Specifies whether the symmetric matrix A appears on the left or right in the operation:side = 'L' or 'l' : B := alpha*op(A)*Bside = 'R' or 'r' : B := alpha*B*op(A)</Parameter>
            <Parameter Name="UPLO">Specifies whether the upper or lower triangular part of the array A is to be referenced:uplo = 'U' or 'u' : A is an upper triangular matrix.uplo = 'L' or 'l'' : A is a lower triangular matrix.</Parameter>
            <Parameter Name="TRANSA">Specifies the form of op(A) to be used in the matrix multiplication as follows:transa = 'N' or 'n' : op(A) = Atransa = 'T' or 't' : op(A) = A'transa ='C' or 'c' : op(A) = A'</Parameter>
            <Parameter Name="DIAG">Specifies whether or not A is unit triangular:diag = 'U' or 'u'. A is assumed to be unit triangular.diag = 'N' or 'n'. A is not assumed to be unit triangular.</Parameter>
            <Parameter Name="M">Specifies the number of rows of the B. m must be at least zero.</Parameter>
            <Parameter Name="N">Specifies the number of columns of B. n must be at least zero.</Parameter>
            <Parameter Name="ALPHA">SCALAR_FLOAT/DOUBLE. Specifies the scalar alpha. When alpha is zero then A is not referenced and B need not be set before entry.</Parameter>
            <Parameter Name="A">UTL_NLA_ARRAY_FLT/DBL of DIMENSION (lda,k) where k is m when side = 'L' or 'l', and is n when side = ''R' or 'r'.Before entry with uplo = 'U' or 'u' , the leading k by k upper triangular part of the array A must contain the upper triangular matrix, and the strictly lower triangular part of A is not referenced.Before entry with uplo = 'L' or 'l', the leading k byk lower triangular part of the array A must contain the lower triangular matrix and the strictly upper triangular part of A is not referenced.Note that when diag = ''U' or 'u', the diagonal elements of A are not referenced either, but are assumed to be unity.</Parameter>
            <Parameter Name="LDA">Specifies the first dimension of a as declared in the calling (sub) program. When side = 'L' or 'l', lda must be at least max(1,m), otherwise lda must be at least max(1,n).</Parameter>
            <Parameter Name="B">UTL_NLA_ARRAY_FLT/DBL of DIMENSION (ldb,n).Before entry, the leading m by n part of the array B must contain the matrix B, and on exit is overwritten by the transformed matrix.</Parameter>
            <Parameter Name="LDB">Specifies the first dimension of b as declared in the calling (sub) program. ldb must be at least max(1,m).</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BLAS_TRMV" ElementId="#CIAHFEBJ">
          <Description>BLAS Level 2 (Matrix-Vector Operations) Subprograms</Description>
          <Parameters>
            <Parameter Name="UPLO">Specifies whether the matrix is an upper or lower triangular matrix:uplo = 'U' or 'u'. A is an upper triangular matrix.uplo = 'L' or 'l'. A is a lower triangular matrix.</Parameter>
            <Parameter Name="TRANS">Specifies the operation to be performed:trans = 'N' or 'n'x := A*xtrans= 'T' or 't'x := A'*xtrans = 'C' or 'c'x := A'*x</Parameter>
            <Parameter Name="DIAG">Specifies whether or not A is unit triangular:diag = 'U' or 'u'. A is assumed to be unit triangular.diag = 'N' or 'n'. A is not assumed to be unit triangular.</Parameter>
            <Parameter Name="N">Specifies the order of the matrix A. n must be at least zero.  </Parameter>
            <Parameter Name="A">UTL_NLA_ARRAY_FLT/DBL of DIMENSION (lda, n ).Before entry with uplo = 'U' or 'u', the leading n by n upper triangular part of the array A must contain the upper triangular matrix and the strictly lower triangular part of A is not referenced.Before entry with uplo = 'L' or 'l', the leading n by n lower triangular part of the array A must contain the lower triangular matrix and the strictly upper triangular part of A is not referenced.Note that when diag = 'U' or 'u', the diagonal elements of A are not referenced either, but are assumed to be unity</Parameter>
            <Parameter Name="LDA">Specifies the first dimension of a as declared in the calling (sub) program. lda must be at least max(1,n).</Parameter>
            <Parameter Name="X">UTL_NLA_ARRAY_FLT/DBL of dimension at least(1+(n-1)*as(incx)). Before entry, the incremented array X must contain the n element vector x.</Parameter>
            <Parameter Name="INCX">Specifies the increment for the elements of x. Must not be zero.</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BLAS_TRSM" ElementId="#CIAHHHFD">
          <Description>BLAS Level 3 (Matrix-Matrix Operations) Subprograms</Description>
          <Parameters>
            <Parameter Name="SIDE">Specifies whether the symmetric matrix A appears on the left or right in the operation:side = 'L' or 'l' : op(A)*X = alpha*Bside = 'R' or 'r' : X*op(A) = alpha*B</Parameter>
            <Parameter Name="UPLO">Specifies whether the upper or lower triangular part of the array A is to be referenced:uplo = 'U' or 'u' : A is an upper triangular matrix.uplo = 'L' or 'l' : A is a lower triangular matrix.</Parameter>
            <Parameter Name="TRANSA">Specifies the form of op(A) to be used in the matrix multiplication as follows:transa = 'N' or 'n' : op(A) = Atransa ='T' or 't' : op(A) = A'transa = 'C' or 'c' : op(A) = A'</Parameter>
            <Parameter Name="DIAG">Specifies whether or not A is unit triangular:diag = 'U' or 'u'. A is assumed to be unit triangular.diag = 'N' or 'n'. A is not assumed to be unit triangular.</Parameter>
            <Parameter Name="M">Specifies the number of rows of the B. m must be at least zero.</Parameter>
            <Parameter Name="N">Specifies the number of columns of B. n must be at least zero.</Parameter>
            <Parameter Name="ALPHA">SCALAR_FLOAT/DOUBLE. Specifies the scalar alpha. When alpha is zero then A is not referenced and B need not be set before entry.</Parameter>
            <Parameter Name="A">UTL_NLA_ARRAY_FLT/DBL of DIMENSION (lda, k) where k is m when side = 'L' or 'l', and is n when side = 'R' or 'r'.Before entry with uplo = 'U' or 'u', the leading k by k upper triangular part of the array A must contain the upper triangular matrix, and the strictly lower triangular part of A is not referenced.Before entry with uplo = 'L' or 'l', the leading k by k lower triangular part of the array A must contain the lower triangular matrix and the strictly upper triangular part of A is not referenced.Note that when diag = 'U' or 'u', the diagonal elements of A are not referenced either, but are assumed to be unity.</Parameter>
            <Parameter Name="LDA">Specifies the first dimension of a as declared in the calling (sub) program. When side = 'L' or 'l', lda must be at least max(1, m), otherwise lda must be at least max (1, n).</Parameter>
            <Parameter Name="B">UTL_NLA_ARRAY_FLT/DBL of DIMENSION (ldb, n).Before entry, the leading m by n part of the array B must contain the matrix B, and on exit is overwritten by the solution matrix X.</Parameter>
            <Parameter Name="LDB">Specifies the first dimension of b as declared in the calling (sub) program. ldb must be at least max(1, m).</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BLAS_TRSV" ElementId="#CIABJIEI">
          <Description>BLAS Level 2 (Matrix-Vector Operations) Subprograms</Description>
          <Parameters>
            <Parameter Name="UPLO">Specifies whether the matrix is an upper or lower triangular matrix:uplo = 'U' or 'u'. A is an upper triangular matrix.uplo = 'L' or 'l'. A is a lower triangular matrix.</Parameter>
            <Parameter Name="TRANS">Specifies the operation to be performed:trans = 'N' or 'n'A*x = btrans = 'T' or 't'A'*x = btrans = 'C' or 'c'A'*x = b</Parameter>
            <Parameter Name="DIAG">Specifies whether or not A is unit triangular:diag = 'U' or 'u'. A is assumed to be unit triangular.diag = 'N' or 'n'. A is not assumed to be unit triangular.</Parameter>
            <Parameter Name="N">Specifies the order of the matrix A. n must be at least zero.  </Parameter>
            <Parameter Name="A">UTL_NLA_ARRAY_FLT/DBL of DIMENSION (lda, n).Before entry with uplo = 'U' or 'u', the leading n by n upper triangular part of the array A must contain the upper triangular matrix and the strictly lower triangular part of A is not referenced.Before entry with uplo = 'L' or 'l', the leading n by n lower triangular part of the array A must contain the lower triangular matrix and the strictly upper triangular part of A is not referenced.Note that when diag = 'U' or 'u', the diagonal elements of A are not referenced either, but are assumed to be unity.</Parameter>
            <Parameter Name="LDA">Specifies the first dimension of A as declared in the calling (sub) program. lda must be at least max(1, n).</Parameter>
            <Parameter Name="X">UTL_NLA_ARRAY_FLT/DBL of dimension at leastBefore entry, the incremented array X must contain the n element right-hand side vector b. On exit, X is overwritten with the solution vector x.</Parameter>
            <Parameter Name="INCX">Specifies the increment for the elements of x. Must not be zero.</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LAPACK_GBSV" ElementId="#CIABIIEB">
          <Description>LAPACK Driver Routines (Linear Equations) Subprograms</Description>
          <Parameters>
            <Parameter Name="N">The number of linear equations, equivalent to the order of the matrixa .n &gt;= 0</Parameter>
            <Parameter Name="KL">The number of sub diagonals within the band of a. kl &gt;= 0.</Parameter>
            <Parameter Name="KU">The number of superdiagonals within the band of a . ku &gt;= 0.</Parameter>
            <Parameter Name="NRHS">The number of right-hand sides, which is the number of columns of the matrix b. nrhs &gt;= 0.</Parameter>
            <Parameter Name="AB">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (ldab, n).On entry, the matrix a in band storage, in rows kl+1 to 2*kl+ku+1; rows 1 to kl of the array need not be set. The j-th column of A is stored in the j-th column of the array ab:ab(kl+ku+1+i-j,j) = a(i,j) for max(1,j-ku)&lt;=i&lt;=min(n,j+kl)On exit, details of the factorization: U is stored as an upper triangular band matrix with kl+ku superdiagonals in rows 1 to KL+KU+1, and the multipliers used during the factorization are stored in rows:kl+ku+2 to 2*kl+ku+1</Parameter>
            <Parameter Name="LDAB">The leading dimension of the array ab.ldab &gt;= 2*kl+ku+1</Parameter>
            <Parameter Name="IPIV">INTEGER array, DIMENSION (n).The pivot indices that define the permutation matrix P; row iof the matrix was interchanged with row ipiv(i).</Parameter>
            <Parameter Name="B">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (ldb, nrhs).On entry, the n by nrhs matrix of right hand side matrix b.On exit, if info = 0 , the n by nrhs solution matrix X.</Parameter>
            <Parameter Name="LDB">The leading dimension of the array b.ldb &gt;= max(1,n)</Parameter>
            <Parameter Name="INFO">= 0 : successful exit&lt; 0 : if info = -i , the i-th argument had an illegal value&gt; 0 : if info = i, U(i,i) is exactly zero. The factorization has been completed, but the factor U is exactly singular, and the solution has not been computed</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LAPACK_GEES" ElementId="#CIADGHHA">
          <Description>LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</Description>
          <Parameters>
            <Parameter Name="JOBZ">'N': Schur vectors are not computed.'V': Schur vectors are computed.</Parameter>
            <Parameter Name="N">The order of the matrix a. N &gt;= 0.</Parameter>
            <Parameter Name="LDA">The leading dimension of the array a. lda &gt;= max(1,n).</Parameter>
            <Parameter Name="WR">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (n).wr and wi contain the real and imaginary parts respectively of the computed eigenvalues in the same order that they appear on the diagonal of the output Schur form T. Complex conjugate pairs of eigenvalues will appear consecutively with the eigenvalue having the positive imaginary part first.</Parameter>
            <Parameter Name="WI">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (ldz, n).wr and wi contain the real and imaginary parts respectively of the computed eigenvalues in the same order that they appear on the diagonal of the output Schur form T. Complex conjugate pairs of eigenvalues will appear consecutively with the eigenvalue having the positive imaginary part first.</Parameter>
            <Parameter Name="VS">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (n).If jobvs = 'V', vs contains the orthogonal matrix Z of Schur vectors.If jobvs = 'N', vs is not referenced.</Parameter>
            <Parameter Name="LDVS">The leading dimension of the array vs. VS. ldvs &gt;= 1. If jobvs = 'V', ldvs &gt;= N</Parameter>
            <Parameter Name="INFO">= 0 : successful exit&lt; 0 : if info = -i, the i-th argument had an illegal value&gt; 0 : if info = i, and i is &lt;= N: the QR algorithm failed to compute all the eigenvalues. Elements 1:ILO-1 and i+1:N of wr and wi contain those eigenvalues which have converged. If jobvs = 'V', vs contains the matrix which reduces A to its partially converged Schur form.</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LAPACK_GEEV" ElementId="#CIADEDBA">
          <Description>LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</Description>
          <Parameters>
            <Parameter Name="JOBVL">'N': Left eigenvectors of A are not computed.'V': Left eigenvectors of A are computed.</Parameter>
            <Parameter Name="JOBVR">'N': Right eigenvectors of A are not computed.'V': Right eigenvectors of A are computed.</Parameter>
            <Parameter Name="N">The order of the matrix a. N &gt;= 0.</Parameter>
            <Parameter Name="A">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (lda, n).On entry, the n by n matrix A.On exit, A has been overwritten.</Parameter>
            <Parameter Name="LDA">The leading dimension of the array a. lda &gt;= max(1,n).</Parameter>
            <Parameter Name="WR">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (n).wr and wi contain the real and imaginary parts respectively of the computed eigenvalues. Complex conjugate pairs of eigenvalues will appear consecutively with the eigenvalue having the positive imaginary part first.</Parameter>
            <Parameter Name="WI">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (ldz, n).wr and wi contain the real and imaginary parts respectively of the computed eigenvalues. Complex conjugate pairs of eigenvalues will appear consecutively with the eigenvalue having the positive imaginary part first.</Parameter>
            <Parameter Name="VL">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (n).If jobvl = 'V', the left eigenvectors u(j) are stored one after another in the columns of vl, in the same order as their eigenvalues.If jobvs = 'N', vl is not referenced.If the j-th eigenvalue is real, then u(j) = VL(:,j), the j-th column of vl.If the j-th and (j+1)-st eigenvalues form a complex conjugate pair, then u(j) = VL(:,j) + i*VL(:,j+1) and u(j+1) = VL(:,j) - i*VL(:,j+1).</Parameter>
            <Parameter Name="LDV1">The leading dimension of the array vl. ldvl &gt;= 1. If jobvl = 'v', ldvl &gt;= n.</Parameter>
            <Parameter Name="VR">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (ldvr, n).If jobvr = 'V', the right eigenvectors v(j) are stored one after another in the columns of vr, in the same order as their eigenvalues..If jobvr = 'N', vr is not referenced.If the j-th eigenvalue is real, then v(j) = VR(:,j), the j-th column of vr.If the j-th and (j+1)-st eigenvalues form a complex conjugate pair, then v(j) = VR(:,j) + i*VR(:,j+1) and v(j+1) = VR(:,j) - i*VR(:,j+1).</Parameter>
            <Parameter Name="LDVR">The leading dimension of the array vr. vr.ldvr &gt;= 1. If jobvr = 'V', ldvr &gt;= N</Parameter>
            <Parameter Name="INFO">= 0 : successful exit&lt; 0 : if info = -i, the i-th argument had an illegal value&gt; 0 : if info = i, and i is &lt;= N: the QR algorithm failed to compute all the eigenvalues, and no eigenvectors have been computed. Elements i+1:N of wr and wi contain eigenvalues which have converged..</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LAPACK_GELS" ElementId="#CIADBIAE">
          <Description>LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</Description>
          <Parameters>
            <Parameter Name="TRANS">CHARACTER = 'N': The linear system involves A.CHARACTER = 'T': The linear system involves A**T .</Parameter>
            <Parameter Name="M">The number of rows of the matrix a. M &gt;= 0.</Parameter>
            <Parameter Name="N">The number of columns of the matrix a. N &gt;= 0.</Parameter>
            <Parameter Name="NRHS">The number of right-hand sides, which is the number of columns of the matrix band x.nrhs &gt;= 0.</Parameter>
            <Parameter Name="A">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (lda, n).On entry, the matrix b of right hand side vectors, stored columnwise; b is m by nrhs if TRANS = 'N', or n by nrhsif trans = 'T'.On exit, if m &gt;= n, a is overwritten by details of its QR factorization as returned by SGEQRF. If m &lt; n, A is overwritten by details of its LQ factorization as returned by SGELQF.</Parameter>
            <Parameter Name="LDA">The leading dimension of the array A. lda &gt;= max(1,m).</Parameter>
            <Parameter Name="B">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (ldb, nrhs).On entry, the matrix b of right hand side vectors, stored columnwise. b is m bynrhs if trans = 'n', or n by nrhs if trans = 'T'.On exit, b is overwritten by the solution vectors, stored columnwise:If trans = 'n' and m &gt;= n, rows 1 to n of b contain the least squares solution vectors; the residual sum of squares for the solution in each column is given by the sum of squares of elements n+1 to m in that column.If trans = 'n' and m &lt; n, rows 1 to n of b contain the minimum norm solution vectors.If trans = 'T' and m &gt;= n, rows 1 to m of b contain the minimum norm solution vectors.If trans = 'T' and m &lt; n, rows 1 to m of b contain the least squares solution vectors; the residual sum of squares for the solution in each column is given by the sum of squares of elements m+1 to n in that column.</Parameter>
            <Parameter Name="LDB">The leading dimension of the array b.ldb &gt;= max(1,m,n)</Parameter>
            <Parameter Name="INFO">= 0 : successful exit&lt; 0 : if info = -i, the i-th argument had an illegal value</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LAPACK_GESDD" ElementId="#CIAJBIGH">
          <Description>LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</Description>
          <Parameters>
            <Parameter Name="JOBZ">Specifies options for computing all or part of the matrix U:'A': All m columns of u and all n rows of V**T are returned in arrays u and vt.'S': The first min(m,n) columns of u and the first min(m,n) rows of V**T are returned in the arrays u and vt.'O': The first min(m,n) columns of u (the left singular vectors) are overwritten on the array a. jobu and jobvt cannot both be 'O'N': No columns of u (no left singular vectors) are computed.</Parameter>
            <Parameter Name="M">The order of the matrix a. m &gt;= 0.</Parameter>
            <Parameter Name="N">The order of the matrix a. n &gt;= 0.</Parameter>
            <Parameter Name="A">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (lda, n).On entry, the n by n matrix A.On exit:If jobz = 'O', a is overwritten with the first min(m,n) columns of u (the left singular vectors, stored columnwise).If m &gt;= n, a is overwritten with the first m rows of V**T (the right singular vectors, stored rowwise).If jobz .ne. 'O', the contents of a are destroyed.</Parameter>
            <Parameter Name="LDA">The leading dimension of the array a. lda &gt;= max(1,m).</Parameter>
            <Parameter Name="S">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (min(m,n)).The singular values of a, sorted so that S(i) &gt;= S(i+1).</Parameter>
            <Parameter Name="U">UTL_NLA_ARRAY_FLT/DBL. ucol = m if jobz = 'A' or jobz = 'O' and m &lt; n; ucol = min(m,n) if jobz = 'S'.If jobz = 'A' or jobz = 'O' and m &lt; n, u contains the m by m orthogonal matrix u.If jobz = 'S', u contains the first min(m,n) columns of u (the left singular vectors, stored columnwise).If jobz = 'O' and m &gt;= n, or jobz = 'n', u is not referenced.</Parameter>
            <Parameter Name="LDU">The leading dimension of the array U. ldu &gt;= 1. If jobz = 'S' or 'A',or jobz = 'O' and m &lt; n, ldu &gt;= m.</Parameter>
            <Parameter Name="VT">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (ldvt, n).If jobz = 'A' or jobz = 'O' and m &gt;= n, vt contains the n by n orthogonal matrix V**T.If jobz = 'S', vt contains the first min(m,n) rows of V**T (the right singular vectors, stored rowwise).If jobz = 'O' and m &lt; n, or jobz = 'N', vt is not referenced.</Parameter>
            <Parameter Name="LDVT">The leading dimension of the array vt. ldvt &gt;= 1.If jobz = 'A', or jobz = 'O' and m &gt;= n, ldvt &gt;= n.If jobz = 'S', ldvt &gt;= min(m,n).</Parameter>
            <Parameter Name="INFO">= 0 : successful exit&lt; 0 : If info = -i, the i-th argument had an illegal value&gt; 0 : SBDSDC did not converge, updating process failed.</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LAPACK_GESV" ElementId="#CIAFDDCG">
          <Description>LAPACK Driver Routines (Linear Equations) Subprograms</Description>
          <Parameters>
            <Parameter Name="N">The number of linear equations, equivalent to the order of the matrix a. n &gt;= 0</Parameter>
            <Parameter Name="NRHS">The number of right-hand sides, which is the number of columns of the matrix b. nrhs &gt;= 0.</Parameter>
            <Parameter Name="A">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (lda, n).On entry, the n by n coefficient matrix a.On exit, the factors L and U from the factorization a = P*L*U; the unit diagonal elements of L are not stored.</Parameter>
            <Parameter Name="LDA">The leading dimension of the array a.lda &gt;= max(1,n)</Parameter>
            <Parameter Name="IPIV">INTEGER array, DIMENSION (n).The pivot indices that define the permutation matrix P; row iof the matrix was interchanged with row ipiv(i).</Parameter>
            <Parameter Name="B">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (ldb, nrhs).On entry, the n by nrhs matrix of right hand side matrix b.On exit, if info = 0 , the n by nrhs solution matrix X.</Parameter>
            <Parameter Name="LDB">The leading dimension of the array b.ldb &gt;= max(1,n)</Parameter>
            <Parameter Name="INFO">= 0 : successful exit&lt; 0 : if info = -i , the i-th argument had an illegal value&gt; 0 : if info = i, U(i,i) is exactly zero. The factorization has been completed, but the factor U is exactly singular, so the solution could not be computed.</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LAPACK_GESVD" ElementId="#CIAFBFFI">
          <Description>LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</Description>
          <Parameters>
            <Parameter Name="JOBU">Specifies options for computing all or part of the matrix U:'A': All m columns of U are returned in array U.'S': The first min(m,n) columns of U (the left singular vectors) are returned in the array U.'O': The first min(m,n) columns of U (the left singular vectors) are overwritten on the array a. jobu and jobvt cannot both be 'O''N': No columns of U (no left singular vectors) are computed.</Parameter>
            <Parameter Name="JOBVT">Specifies options for computing all or part of the matrix V**T:'A': All n rows of V**T are returned in the array vt.'S': The first min(m,n) rows of V**T (the right singular vectors) are returned in the array vt.'O': The first min(m,n) rows of V**T (the right singular vectors) are overwritten on the array a. jobvt and jobu cannot both be 'O'.'N': No rows of V**T (no right singular vectors) are computed.</Parameter>
            <Parameter Name="M">The order of the matrix a. M &gt;= 0.</Parameter>
            <Parameter Name="N">The order of the matrix a. N &gt;= 0.</Parameter>
            <Parameter Name="A">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (lda, n).On entry, the n by n matrix A.On exit:If jobu = 'O', A is overwritten with the first min(m,n) columns of U (the left singular vectors, stored columnwise);If jobvt = 'O', A is overwritten with the first min(m,n) rows of V**T (the right singular vectors, stored rowwise);If jobu.ne.'O' and jobvt.ne.'O', the contents of A are destroyed.</Parameter>
            <Parameter Name="LDA">The leading dimension of the array a. lda &gt;= max(1,n).</Parameter>
            <Parameter Name="S">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (min(m,n)).The singular values of A, sorted so that S(i) &gt;= S(i+1).</Parameter>
            <Parameter Name="U">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (ldu,ucol).(ldu,m)if jobu = 'A' or (ldu,min(m,n)) if jobu = 'S'.If jobu = 'A', U contains the m by m orthogonal matrix U.If jobu = 'S', U contains the first min(m,n) columns of U (the left singular vectors, stored columnwise).If jobu = 'N' or 'O', U is not referenced.</Parameter>
            <Parameter Name="LDU">The leading dimension of the array U. ldu &gt;= 1. If jobu = 'S' or 'a', ldu &gt;= m.</Parameter>
            <Parameter Name="VT">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (ldvt, n).If jobvt = 'A', vt contains the n by n orthogonal matrix V**T.If jobvt = 'S', vt contains the first min(m,n) rows of V**T (the right singular vectors, stored rowwise).If jobvt = 'N' or 'O', vt is not referenced.</Parameter>
            <Parameter Name="LDVT">The leading dimension of the array vt. ldvt &gt;= 1.If jobvt = 'A', ldvt &gt;= n.If jobvt = 'S', ldvt &gt;= min(m,n).</Parameter>
            <Parameter Name="INFO">= 0 : successful exit&lt; 0 : If info = -i, the i-th argument had an illegal value&gt; 0 : If SBDSQR did not converge, info specifies how many superdiagonals of an intermediate bidiagonal form B did not converge to zero.</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LAPACK_GTSV" ElementId="#CIAFDEJI">
          <Description>LAPACK Driver Routines (Linear Equations) Subprograms</Description>
          <Parameters>
            <Parameter Name="N">The order of the matrix a .n &gt;= 0</Parameter>
            <Parameter Name="NRHS">The number of right-hand sides, which is the number of columns of the matrix b. nrhs &gt;= 0.</Parameter>
            <Parameter Name="DL">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (n-1).On entry, dl must contain the (n-1) sub-diagonal elements of a.On exit, dl is overwritten by the (n-2) elements of the second super-diagonal of the upper triangular matrix U from the LU factorization of a, in dl(1), ..., dl(n-2).</Parameter>
            <Parameter Name="D">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (n).On entry, d must contain the diagonal elements of a.On exit, d is overwritten by the n diagonal elements of U.</Parameter>
            <Parameter Name="DU">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (n-1).On entry, du must contain the (n-1)super-diagonal elements of a.On exit, du is overwritten by the (n-1) elements of the first super-diagonal of U.</Parameter>
            <Parameter Name="B">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (LDB, nrhs).On entry, the n by nrhs matrix of right hand side matrix b.On exit, if info = 0, the n by nrhs solution matrix X.</Parameter>
            <Parameter Name="LDB">The leading dimension of the array b.ldb &gt;= max (1, n)</Parameter>
            <Parameter Name="INFO">= 0 : successful exit&lt; 0 : if info = -i , the i-th argument had an illegal value&gt; 0 : if info = i, U(i,i) is exactly zero, and the solution has not been computed. The factorization has not been completed unless i = n.</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LAPACK_PBSV" ElementId="#CIAJHJBC">
          <Description>LAPACK Driver Routines (Linear Equations) Subprograms</Description>
          <Parameters>
            <Parameter Name="UPLO">uplo = 'U'. Upper triangular of A is stored.uplo = 'L'. Lower triangular of A is stored.</Parameter>
            <Parameter Name="N">The number of linear equations, that is, the order of the matrix a .n &gt;= 0</Parameter>
            <Parameter Name="KD">The number of superdiagonals of the matrix A if uplo = 'U', or the number of subdiagonals if UPLO = 'L'. KD &gt;= 0.</Parameter>
            <Parameter Name="NRHS">The number of right-hand sides, which is the number of columns of the matrix b. nrhs &gt;= 0.</Parameter>
            <Parameter Name="AB">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (ldab, n).On entry, the upper or lower triangle of the symmetric band matrix a, stored in the first kd+1 rows of the array. The j-th column of a is stored in the j-th column of the array ab is as follows:if uplo = 'U', AB(KD+1+i-j,j) = A(i,j) for max(1,j-KD)&lt;=i&lt;=j;if uplo = 'L', AB(1+i-j,j) = A(i,j) for j&lt;=i&lt;=min(N,j+KD).See below for further details.On exit, if info = 0, the triangular factor U or L from the Cholesky factorization A = U**T*U or A = L*L**T of the bandmatrix A, in the same storage format as a.</Parameter>
            <Parameter Name="LDAB">The leading dimension of the array ab.ldb &gt;= kd+1</Parameter>
            <Parameter Name="B">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (ldb, nrhs).On entry, the n by nrhs matrix of right hand side matrix b.On exit, if info = 0 , the n by nrhs solution matrix X.</Parameter>
            <Parameter Name="LDB">The leading dimension of the array b.ldb &gt;= max(1,n)</Parameter>
            <Parameter Name="INFO">= 0 : successful exit&lt; 0 : if info = -i , the i-th argument had an illegal value&gt; 0 : if info = i, the leading minor of order i of a is not positive definite, so the factorization could not be completed, and the solution has not been computed.</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LAPACK_POSV" ElementId="#CIAGDCGG">
          <Description>LAPACK Driver Routines (Linear Equations) Subprograms</Description>
          <Parameters>
            <Parameter Name="UPLO">uplo = 'U'. Upper triangular of A is stored.uplo = 'L'. Lower triangular of A is stored.</Parameter>
            <Parameter Name="N">The number of linear equations, that is, the order of the matrix a .n &gt;= 0</Parameter>
            <Parameter Name="NRHS">The number of right-hand sides, which is the number of columns of the matrix b. nrhs &gt;= 0.</Parameter>
            <Parameter Name="A">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (lda, n).If uplo = 'U', the leading NRHS n by n upper triangular part of a contains the upper NRHS triangular part of the matrix A, and the strictly lower NRHS triangular part of A is not referenced.If uplo = ''L', then rhs leading n by n lower triangular part of a contains the lower nrhs triangular part of the matrix a, and the strictly upper nrhs triangular part of a is not referenced.On exit, if info = 0, the factor U or L from the Cholesky factorization A = U**T*U or A = L*L**T.</Parameter>
            <Parameter Name="LDA">The leading dimension of the array a.lda &gt;= max (1, n)</Parameter>
            <Parameter Name="B">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (ldb, nrhs).On entry, the n by nrhs matrix of right hand side matrix b.On exit, if info = 0 , the n by nrhs solution matrix X.</Parameter>
            <Parameter Name="LDB">The leading dimension of the array b.ldb &gt;= max(1,n)</Parameter>
            <Parameter Name="INFO">= 0 : successful exit&lt; 0 : if info = -i , the i-th argument had an illegal value&gt; 0 : if info = i, the leading minor of order i of a is not positive definite, so the factorization could not be completed, and the solution has not been computed.</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LAPACK_PPSV" ElementId="#CIAGICJH">
          <Description>LAPACK Driver Routines (Linear Equations) Subprograms</Description>
          <Parameters>
            <Parameter Name="UPLO">uplo = 'U' . Upper triangular of A is stored.uplo = 'L'. Lower triangular of A is stored.</Parameter>
            <Parameter Name="N">The number of linear equations, that is, the order of the matrix a .n &gt;= 0</Parameter>
            <Parameter Name="NRHS">The number of right-hand sides, which is the number of columns of the matrix b. nrhs &gt;= 0.</Parameter>
            <Parameter Name="AP">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (n*(n+1)/2).On entry, the upper or lower triangle of the symmetric matrix a, packed columnwise in a linear array. The j-th column of a is stored in the array ap as follows:If uplo = 'U', AP(i + (j-1)*j/2) = A(i,j) for 1&lt;=i&lt;=j;If uplo = 'L', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j&lt;=i&lt;=n;On exit, if info = 0, the factor U or 'L' from the Cholesky factorization A = U**T*U or A = L*L**T in the same storage format as A.</Parameter>
            <Parameter Name="B">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (ldb, nrhs).On entry, the n by nrhs matrix of right hand side matrix b.On exit, if info = 0 , the n by nrhs solution matrix X.</Parameter>
            <Parameter Name="LDB">The leading dimension of the array b.ldb &gt;= max(1,n)</Parameter>
            <Parameter Name="INFO">= 0 : successful exit&lt; 0 : if info = -i , the i-th argument had an illegal value&gt; 0 : if info = i, the leading minor of order i of a is not positive definite, so the factorization could not be completed, and the solution has not been computed.</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LAPACK_PTSV" ElementId="#CIAEJBEG">
          <Description>LAPACK Driver Routines (Linear Equations) Subprograms</Description>
          <Parameters>
            <Parameter Name="N">The order of the matrix a. N &gt;= 0.</Parameter>
            <Parameter Name="NRHS">The number of right-hand sides, which is the number of columns of the matrix b. nrhs &gt;= 0.</Parameter>
            <Parameter Name="D">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (n).On entry, the n diagonal elements of the tridiagonal matrix a.On exit, the n diagonal elements of the diagonal matrix d from the factorization A = L*D*L**T.</Parameter>
            <Parameter Name="E">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (n-1).On entry, the (n-1) subdiagonal elements of the tridiagonal matrix a.On exit, the (n-1) diagonal elements of the unit bidiagonal factor L from the factorization A = L*D*L**T of a.(e can also be regarded as the superdiagonal of the unit bidiagonal factor U from the U**T*D*U factorization of a)</Parameter>
            <Parameter Name="B">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (ldb, nrhs).On entry, the n by nrhs matrix of right hand side matrix b.On exit, if info = 0 , the n by nrhs solution matrix X.</Parameter>
            <Parameter Name="LDB">The leading dimension of the array b.ldb &gt;= max(1,n)</Parameter>
            <Parameter Name="INFO">= 0 : successful exit&lt; 0 : if info = -i , the i-th argument had an illegal value&gt; 0 : if info = i, the leading minor of order i of a is not positive definite, so the factorization could not be completed, and the solution has not been computed.</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LAPACK_SBEV" ElementId="#CIAIJDGB">
          <Description>LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</Description>
          <Parameters>
            <Parameter Name="JOBZ">'N': Compute eigenvalues only.'V': Compute eigenvalues and eigenvectors.</Parameter>
            <Parameter Name="UPLO">'U': Upper triangle of A is stored.'L': Lower triangle of A is stored.</Parameter>
            <Parameter Name="N">The order of the matrix a. N &gt;= 0.</Parameter>
            <Parameter Name="KD">The number of superdiagonals of the matrix A if uplo = 'U', or the number of subdiagonals if uplo = 'L'. kd &gt;= 0.</Parameter>
            <Parameter Name="AB">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (ldab, n).On entry, the upper or lower triangle of the symmetric band matrix A stored in the first kd+1 rows of the array. The j-th column of A is stored in the j-th column of the array ab:If uplo = 'U', ab(kd+1+i-j,j) = a(i,j) for max(1,j-kd)&lt;=i&lt;=j.If uplo = 'L', AB(1+i-j,j) = A(i,j) for j&lt;=i&lt;=min(n,j+kd).On exit, ab is overwritten by values generated during the reduction to tridiagonal form:If uplo = 'U', the diagonal and first superdiagonal of the tridiagonal matrix T are returned in rows kd and kd+1 of ab.If uplo = 'L', the diagonal and first subdiagonal of T are returned in the first two rows of ab.</Parameter>
            <Parameter Name="LDAB">The leading dimension of the array ab. ldab &gt;= kd + 1.</Parameter>
            <Parameter Name="W">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (n).If info = 0, the eigenvalues in ascending order.</Parameter>
            <Parameter Name="Z">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (n).If jobz = 'V', then if info = 0, z contains the orthonormal eigenvectors of the matrix A, with the i-th column of z holding the eigenvector associated with w(i).If jobz = 'N', then z is not referenced.</Parameter>
            <Parameter Name="LDZ">The leading dimension of the array z. ldz &gt;= 1, and if jobz = 'v', ldz &gt;= max(1,n).</Parameter>
            <Parameter Name="INFO">= 0 : successful exit&lt; 0 : if info = -i, the i-th argument had an illegal value&gt; 0 : if info = i, the algorithm failed to converge; i off-diagonal elements of an intermediate tridiagonal form did not converge to zero</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LAPACK_SBEVD" ElementId="#CIAHJDIJ">
          <Description>LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</Description>
          <Parameters>
            <Parameter Name="JOBZ">'N': Compute eigenvalues only.'V': Compute eigenvalues and eigenvectors.</Parameter>
            <Parameter Name="UPLO">'U': Upper triangle of A is stored.'L': Lower triangle of A is stored.</Parameter>
            <Parameter Name="N">The order of the matrix a. N &gt;= 0.</Parameter>
            <Parameter Name="KD">The number of superdiagonals of the matrix A if uplo = 'U', or the number of subdiagonals if uplo = 'L'. kd &gt;= 0.</Parameter>
            <Parameter Name="AB">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (ldab, n).On entry, the upper or lower triangle of the symmetric band matrix A stored in the first kd+1 rows of the array. The j-th column of A is stored in the j-th column of the array ab:If uplo = 'U', ab(kd+1+i-j,j) = a(i,j) for max(1,j-kd)&lt;=i&lt;=j.If uplo = 'L', AB(1+i-j,j) = A(i,j) for j&lt;=i&lt;=min(n,j+kd).On exit, ab is overwritten by values generated during the reduction to tridiagonal form:If uplo = 'U', the diagonal and first superdiagonal of the tridiagonal matrix T are returned in rows kd and kd+1 of ab.If uplo = 'L', the diagonal and first subdiagonal of T are returned in the first two rows of ab.</Parameter>
            <Parameter Name="LDAB">The leading dimension of the array ab. ldab &gt;= kd + 1.</Parameter>
            <Parameter Name="W">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (ldz,n).If info = 0, the eigenvalues in ascending order.</Parameter>
            <Parameter Name="Z">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (n).If jobz = 'V', then if info = 0, z contains the orthonormal eigenvectors of the matrix A, with the i-th column of z holding the eigenvector associated with w(i).If jobz = 'N', then z is not referenced.</Parameter>
            <Parameter Name="LDZ">The leading dimension of the array z. ldz &gt;= 1, and if jobz = 'v', ldz &gt;= max(1,n).</Parameter>
            <Parameter Name="INFO">= 0 : successful exit&lt; 0 : if info = -i, the i-th argument had an illegal value&gt; 0 : if info = i, the algorithm failed to converge; i off-diagonal elements of an intermediate tridiagonal form did not converge to zero</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LAPACK_SPEV" ElementId="#CIADGJII">
          <Description>LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</Description>
          <Parameters>
            <Parameter Name="JOBZ">'N': Compute eigenvalues only.'V': Compute eigenvalues and eigenvectors.</Parameter>
            <Parameter Name="UPLO">'U': Upper triangle of A is stored.'L': Lower triangle of A is stored.</Parameter>
            <Parameter Name="N">The order of the matrix a. N &gt;= 0.</Parameter>
            <Parameter Name="AP">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (n*(n+1)/2).On entry, the upper or lower triangle of the symmetric matrix a packed columnwise in a linear array. The j-th column of a is stored in the array ap:If uplo = 'U', ap(i + (j-1)*j/2) = a(i,j) for 1&lt;=i&lt;=j.If uplo = 'L', ap(i + (j-1)*(2*n-j)/2) = a(i,j) for j&lt;=i&lt;=n.On exit, ap is overwritten by values generated during the reduction to tridiagonal form:If uplo = 'U', the diagonal and first superdiagonal of the tridiagonal matrix T overwrite the corresponding elements of A.If uplo = 'L', the diagonal and first subdiagonal of T overwrite the corresponding elements of A.</Parameter>
            <Parameter Name="W">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (n).If info = 0, the eigenvalues in ascending order.</Parameter>
            <Parameter Name="Z">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (ldz,n).If jobz = 'V', then if info = 0, z contains the orthonormal eigenvectors of the matrix A, with the i-th column of z holding the eigenvector associated with w(i).If jobz = 'N', then z is not referenced.</Parameter>
            <Parameter Name="LDZ">The leading dimension of the array z. ldz &gt;= 1, and if jobz = 'v', ldz &gt;= max(1,n).</Parameter>
            <Parameter Name="INFO">= 0 : successful exit&lt; 0 : if info = -i, the i-th argument had an illegal value&gt; 0 : if info = i, the algorithm failed to converge; i off-diagonal elements of an intermediate tridiagonal form did not converge to zero</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LAPACK_SPEVD" ElementId="#CIABDIAF">
          <Description>LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</Description>
          <Parameters>
            <Parameter Name="JOBZ">'N': Compute eigenvalues only.'V': Compute eigenvalues and eigenvectors.</Parameter>
            <Parameter Name="UPLO">'U': Upper triangle of A is stored.'L': Lower triangle of A is stored.</Parameter>
            <Parameter Name="N">The order of the matrix a. N &gt;= 0.</Parameter>
            <Parameter Name="AP">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (n*(n+1)/2).On entry, the upper or lower triangle of the symmetric matrix a packed columnwise in a linear array. The j-th column of a is stored in the array ap:If uplo = 'U', ap(i + (j-1)*j/2) = a(i,j) for 1&lt;=i&lt;=j.If uplo = 'L', ap(i + (j-1)*(2*n-j)/2) = a(i,j) for j&lt;=i&lt;=n.On exit, ap is overwritten by values generated during the reduction to tridiagonal form:If uplo = 'U', the diagonal and first superdiagonal of the tridiagonal matrix T overwrite the corresponding elements of A.If uplo = 'L', the diagonal and first subdiagonal of T overwrite the corresponding elements of A.</Parameter>
            <Parameter Name="W">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (n).If info = 0, the eigenvalues in ascending order.</Parameter>
            <Parameter Name="Z">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (ldz,n).If jobz = 'V', then if info = 0, z contains the orthonormal eigenvectors of the matrix A, with the i-th column of z holding the eigenvector associated with w(i).If jobz = 'N', then z is not referenced.</Parameter>
            <Parameter Name="LDZ">The leading dimension of the array z. ldz &gt;= 1, and if jobz = 'v', ldz &gt;= max(1,n).</Parameter>
            <Parameter Name="INFO">= 0 : successful exit&lt; 0 : if info = -i, the i-th argument had an illegal value&gt; 0 : if info = i, the algorithm failed to converge; i off-diagonal elements of an intermediate tridiagonal form did not converge to zero</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LAPACK_SPSV" ElementId="#CIAEDCDH">
          <Description>LAPACK Driver Routines (Linear Equations) Subprograms</Description>
          <Parameters>
            <Parameter Name="UPLO">uplo = 'U'. Upper triangular of A is stored.uplo = 'L' . Lower triangular of A is stored.</Parameter>
            <Parameter Name="N">The number of linear equations, which is the order of the matrix a. N &gt;= 0.</Parameter>
            <Parameter Name="NRHS">The number of right-hand sides, which is the number of columns of the matrix b. nrhs &gt;= 0.</Parameter>
            <Parameter Name="AP">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (n*(n+1)/2).On entry, the upper or lower triangle of the symmetric matrix A, packed columnwise in a linear array. The j-th column of A is stored in the array ap as follows:uplo = 'U': AP(i + (j-1)*j/2) = A(i,j) for 1&lt;=i&lt;=juplo = 'L' : AP(i + (j-1)*(2n-j)/2) = A(i,j) for j&lt;=i&lt;=nSee below for further details.On exit, the block diagonal matrix D and the multipliers used to obtain the factor U or L from the factorization A = U*D*U**T or A = L*D*L**T as computed by SSPTRF, stored as a packed triangular matrix in the same storage format as A.</Parameter>
            <Parameter Name="IPIV">INTEGER array, DIMENSION (n).Details of the interchanges and the block structure of d, as determined by SSPTRF.If ipiv(k) &gt; 0, then rows and columns k and ipiv(k) were interchanged, and d(k,k) is a 1 by1 diagonal block.If uplo = 'U' and ipiv(k) = ipiv(k-1) &lt; 0, then rows and columns k-1 and -ipiv(k) were interchanged and d(k-1:k,k-1:k) is a 2 by 2 diagonal block.If uplo = 'L' and ipiv(k) = ipiv(k+1) &lt; 0, then rows and columns k+1 and -ipiv(k) were interchanged and d(k:k+1,k:k+1) is a 2 by 2 diagonal block.</Parameter>
            <Parameter Name="B">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (ldb, nrhs).On entry, the n by nrhs right hand side matrix b.On exit, if info = 0 , the n by nrhs solution matrix X.</Parameter>
            <Parameter Name="LDB">The leading dimension of the array b.ldb &gt;= max(1,n)</Parameter>
            <Parameter Name="INFO">= 0 : successful exit&lt; 0 : if info = -i, the i-th argument had an illegal value&gt; 0 : if info = i, d(i,i) is exactly zero. The factorization has been completed, but the block diagonal matrix d is exactly singular, so the solution could not be computed.</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LAPACK_STEV" ElementId="#CIAGEJCI">
          <Description>LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</Description>
          <Parameters>
            <Parameter Name="JOBZ">'N': Compute eigenvalues only.'V': Compute eigenvalues and eigenvectors.</Parameter>
            <Parameter Name="N">The order of the matrix a. N &gt;= 0.</Parameter>
            <Parameter Name="D">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (n).On entry, the n diagonal elements of the tridiagonal matrix A.On exit, if info = 0, the eigenvalues in ascending order.</Parameter>
            <Parameter Name="Z">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (ldz, n).If jobz = 'V', then if info = 0, z contains the orthonormal eigenvectors of the matrix A, with the i-th column of z holding the eigenvector associated with d(i).If jobz = 'N', then z is not referenced.</Parameter>
            <Parameter Name="LDZ">The leading dimension of the array z. ldz &gt;= 1, and if jobz = 'v', ldz &gt;= max(1,n).</Parameter>
            <Parameter Name="INFO">= 0 : successful exit&lt; 0 : if info = -i, the i-th argument had an illegal value&gt; 0 : if info = i, the algorithm failed to converge; i off-diagonal elements of an intermediate tridiagonal form did not converge to zero</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LAPACK_STEVD" ElementId="#CIAHFFCC">
          <Description>LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</Description>
          <Parameters>
            <Parameter Name="JOBZ">'N': Compute eigenvalues only.'V': Compute eigenvalues and eigenvectors.</Parameter>
            <Parameter Name="N">The order of the matrix a. N &gt;= 0.</Parameter>
            <Parameter Name="D">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (n).On entry, the n diagonal elements of the tridiagonal matrix A.On exit, if info = 0, the eigenvalues in ascending order.</Parameter>
            <Parameter Name="Z">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (ldz, n).If jobz = 'V', then if info = 0, z contains the orthonormal eigenvectors of the matrix A, with the i-th column of z holding the eigenvector associated with d(i).If jobz = 'N', then z is not referenced.</Parameter>
            <Parameter Name="LDZ">The leading dimension of the array z. ldz &gt;= 1, and if jobz = 'v', ldz &gt;= max(1,n).</Parameter>
            <Parameter Name="INFO">= 0 : successful exit&lt; 0 : if info = -i, the i-th argument had an illegal value&gt; 0 : if info = i, the algorithm failed to converge; i off-diagonal elements of an intermediate tridiagonal form did not converge to zero</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LAPACK_SYEVD" ElementId="#CIAGBGGH">
          <Description>LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</Description>
          <Parameters>
            <Parameter Name="JOBZ">'N': Compute eigenvalues only.'V': Compute eigenvalues and eigenvectors.</Parameter>
            <Parameter Name="UPLO">'U' : Upper triangle of A is stored.'L': Upper triangle of A is stored.</Parameter>
            <Parameter Name="N">The order of the matrix a. N &gt;= 0.</Parameter>
            <Parameter Name="A">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (lda, n).On entry, the symmetric matrix a:If uplo = 'U', the leading n by n upper triangular part of a contains the upper triangular part of the matrix a.If uplo = 'L', the leading n byn lower triangular part of a contains the lower triangular part of the matrix a.On exit:If jobz = 'V', then if info = 0, a contains the orthonormal eigenvectors of the matrix a.If jobz = 'N', then on exit the lower triangle (if uplo = 'L') or the upper triangle (if uplo = 'U') of a, including the diagonal, is destroyed.</Parameter>
            <Parameter Name="LDA">The leading dimension of the array a. lda &gt;= max(1,n).</Parameter>
            <Parameter Name="W">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (n).If info = 0, the eigenvalues in ascending order.</Parameter>
            <Parameter Name="INFO">= 0 : successful exit&lt; 0 : if info = -i, the i-th argument had an illegal value&gt; 0 : if info = i, the algorithm failed to converge; i off-diagonal elements of an intermediate tridiagonal form did not converge to zero</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LAPACK_SYSV" ElementId="#CIADGGFJ">
          <Description>LAPACK Driver Routines (Linear Equations) Subprograms</Description>
          <Parameters>
            <Parameter Name="UPLO">uplo = 'U'. Upper triangular of A is stored.uplo = 'L' . Lower triangular of A is stored.</Parameter>
            <Parameter Name="N">The number of linear equations, which is the order of the matrix a. N &gt;= 0.</Parameter>
            <Parameter Name="NRHS">The number of right-hand sides, which is the number of columns of the matrix b. nrhs &gt;= 0.</Parameter>
            <Parameter Name="A">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (n-1).On entry, the symmetric matrix a. If UPLO = 'U', the leading n by n upper triangular part of a contains the upper triangular part of the matrix a, and the strictly lower triangular part of a is not referenced. If uplo = 'L', the leading n by n lower triangular part of a contains the lower triangular part of the matrix a, and the strictly upper triangular part of a is not referenced.On exit, if info = 0, the block diagonal matrix d and the multipliers used to obtain the factor U or L from the factorization A = U*D*U**T or A = L*D*L**T as computed by SSYTRF.</Parameter>
            <Parameter Name="LDA">The leading dimension of the array a.lda &gt;= max(1,n)</Parameter>
            <Parameter Name="IPIV">INTEGER array, DIMENSION (ldb, nrhs).Details of the interchanges and the block structure of d, as determined by SSYTRF.If ipiv(k) &gt; 0, then rows and columns k and ipiv(k) were interchanged, and d(k,k) is a 1 by1 diagonal block.If uplo = 'U' and ipiv(k) = ipiv(k-1) &lt; 0, then rows and columns k-1 and -ipiv(k) were interchanged and d(k-1:k,k-1:k) is a 2 by 2 diagonal block.If uplo = 'L' and ipiv(k) = ipiv(k+1) &lt; 0, then rows and columns k+1 and -ipiv(k) were interchanged and d(k:k+1,k:k+1) is a 2 by 2 diagonal block.</Parameter>
            <Parameter Name="B">UTL_NLA_ARRAY_FLT/DBL, DIMENSION (ldb, nrhs).On entry, the n by nrhs matrix of right hand side matrix b.On exit, if info = 0 , the n by nrhs solution matrix X.</Parameter>
            <Parameter Name="LDB">The leading dimension of the array b.ldb &gt;= max(1,n)</Parameter>
            <Parameter Name="INFO">= 0 : successful exit&lt; 0 : if info = -i , the i-th argument had an illegal value&gt; 0 : if info = i, d(i,i) is exactly zero. The factorization has been completed, but the block diagonal matrix d is exactly singular, so the solution could not be computed.</Parameter>
            <Parameter Name="PACK">(Optional) Flags the packing of the matrices:'C': column-major (default)'R': row-major</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="UTL_RAW" Url="http://docs.oracle.com/database/121/ARPLS/u_raw.htm">
      <Description>The UTL_RAW package provides SQL functions for manipulating RAW datatypes.</Description>
      <SubPrograms>
        <SubProgram Name="BIT_AND" ElementId="#i1003896">
          <Description>Performs bitwise logical "and" of the values in RAW r1 with RAW r2 and returns the "anded" result RAW</Description>
          <Parameters>
            <Parameter Name="R1">RAW to "and" with r2</Parameter>
            <Parameter Name="R2">RAW to "and" with r1</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BIT_COMPLEMENT" ElementId="#BABGJABI">
          <Description>Performs bitwise logical "complement" of the values in RAW r and returns the "complement'ed" result RAW</Description>
          <Parameters>
            <Parameter Name="R">RAW to perform "complement" operation</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BIT_OR" ElementId="#i1003945">
          <Description>Performs bitwise logical "or" of the values in RAW r1 with RAW r2 and returns the "or'd" result RAW</Description>
          <Parameters>
            <Parameter Name="R1">RAW to "or" with r2</Parameter>
            <Parameter Name="R2">RAW to "or" with r1</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="BIT_XOR" ElementId="#i1003994">
          <Description>Performs bitwise logical "exclusive or" of the values in RAW r1 with RAW r2 and returns the "xor'd" result RAW</Description>
          <Parameters>
            <Parameter Name="R1">RAW to "xor" with r2</Parameter>
            <Parameter Name="R2">RAW to "xor" with r1</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CAST_FROM_BINARY_DOUBLE" ElementId="#i1004317">
          <Description>Returns the RAW binary representation of a BINARY_DOUBLE value</Description>
          <Parameters>
            <Parameter Name="N">BINARY_DOUBLE value</Parameter>
            <Parameter Name="ENDIANESS">A BINARY_INTEGER value indicating the endianess. The function recognizes the defined constants big_endian (1), little_endian (2), and machine_endian (3). The default is big_endian. A setting of machine_endian has the same effect as big_endian on a big endian machine, or the same effect as little_endian on a little endian machine.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CAST_FROM_BINARY_FLOAT" ElementId="#i1004373">
          <Description>Returns the RAW binary representation of a BINARY_FLOAT value</Description>
          <Parameters>
            <Parameter Name="N">BINARY_FLOAT value</Parameter>
            <Parameter Name="ENDIANESS">A BINARY_INTEGER value indicating the endianess. The function recognizes the defined constants big_endian (1), little_endian (2), and machine_endian (3). The default is big_endian. A setting of machine_endian has the same effect as big_endian on a big endian machine, or the same effect as little_endian on a little endian machine.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CAST_FROM_BINARY_INTEGER" ElementId="#i1004238">
          <Description>Returns the RAW binary representation of a BINARY_INTEGER value</Description>
          <Parameters>
            <Parameter Name="N">BINARY_INTEGER value.</Parameter>
            <Parameter Name="ENDIANESS">A BINARY_INTEGER value indicating the endianess. The function recognizes the defined constants big_endian (1), little_endian (2), and machine_endian (3). The default is big_endian. A setting of machine_endian has the same effect as big_endian on a big endian machine, or the same effect as little_endian on a little endian machine.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CAST_FROM_NUMBER" ElementId="#BABBCAEG">
          <Description>Returns the RAW binary representation of a NUMBER value</Description>
          <Parameters>
            <Parameter Name="N">NUMBER value</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CAST_TO_BINARY_DOUBLE" ElementId="#i1004636">
          <Description>Casts the RAW binary representation of a BINARY_DOUBLE into a BINARY_DOUBLE</Description>
          <Parameters>
            <Parameter Name="R">Binary representation of a BINARY_DOUBLE</Parameter>
            <Parameter Name="ENDIANESS">A PLS_INTEGER representing big-endian or little-endian architecture. The default is big-endian.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CAST_TO_BINARY_FLOAT" ElementId="#i1004637">
          <Description>Casts the RAW binary representation of a BINARY_FLOAT into a BINARY_FLOAT</Description>
          <Parameters>
            <Parameter Name="R">Binary representation of a BINARY_FLOAT</Parameter>
            <Parameter Name="ENDIANESS">A PLS_INTEGER representing big-endian or little-endian architecture. The default is big-endian.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CAST_TO_BINARY_INTEGER" ElementId="#BABGHJBD">
          <Description>Casts the RAW binary representation of a BINARY_INTEGER into a BINARY_INTEGER</Description>
          <Parameters>
            <Parameter Name="R">Binary representation of a BINARY_INTEGER</Parameter>
            <Parameter Name="ENDIANESS">A PLS_INTEGER representing big-endian or little-endian architecture. The default is big-endian.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CAST_TO_NUMBER" ElementId="#BABJJAFB">
          <Description>Casts the RAW binary representation of a NUMBER into a NUMBER</Description>
        </SubProgram>
        <SubProgram Name="CAST_TO_NVARCHAR2" ElementId="#i1007280">
          <Description>Converts a RAW value into a VARCHAR2 value</Description>
          <Parameters>
            <Parameter Name="R">RAW (without leading length field) to be changed to a NVARCHAR2)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CAST_TO_RAW" ElementId="#i997085">
          <Description>Converts a VARCHAR2 value into a RAW value</Description>
          <Parameters>
            <Parameter Name="C">VARCHAR2 to be changed to a RAW</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CAST_TO_VARCHAR2" ElementId="#BABJFGBH">
          <Description>Converts a RAW value into a VARCHAR2 value</Description>
          <Parameters>
            <Parameter Name="R">RAW (without leading length field) to be changed to a VARCHAR2</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="COMPARE" ElementId="#BABCIBGE">
          <Description>Compares RAW r1 against RAW r2</Description>
          <Parameters>
            <Parameter Name="R1">1st RAW to be compared, may be NULL or 0 length</Parameter>
            <Parameter Name="R2">2nd RAW to be compared, may be NULL or 0 length</Parameter>
            <Parameter Name="PAD">This is an optional parameter. Byte to extend whichever of r1 or r2 is shorter. The default: x'00'</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CONCAT" ElementId="#i997176">
          <Description>Concatenates up to 12 RAWs into a single RAW</Description>
        </SubProgram>
        <SubProgram Name="CONVERT" ElementId="#i1003765">
          <Description>Converts RAW r from character set from_charset to character set to_charset and returns the resulting RAW</Description>
          <Parameters>
            <Parameter Name="R">RAW byte-string to be converted</Parameter>
            <Parameter Name="TO_CHARSET">Name of the character set to which r is converted</Parameter>
            <Parameter Name="FROM_CHARSET">Name of the character set in which r is supplied</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="COPIES" ElementId="#BABCGGCD">
          <Description>Returns n copies of r concatenated together</Description>
          <Parameters>
            <Parameter Name="R">RAW to be copied</Parameter>
            <Parameter Name="N">Number of times to copy the RAW (must be positive)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LENGTH" ElementId="#BABCFHDJ">
          <Description>Returns the length in bytes of a RAW r</Description>
          <Parameters>
            <Parameter Name="R">RAW byte stream to be measured</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="OVERLAY" ElementId="#i1003455">
          <Description>Overlays the specified portion of target RAW with overlay RAW, starting from byte position pos of target and proceeding for len bytes</Description>
          <Parameters>
            <Parameter Name="OVERLAY_STR">Byte-string used to overlay target</Parameter>
            <Parameter Name="TARGET">Byte-string which is to be overlaid</Parameter>
            <Parameter Name="POS">Position in target (numbered from 1) to start overlay</Parameter>
            <Parameter Name="LEN">The number of target bytes to overlay</Parameter>
            <Parameter Name="PAD">Pad byte used when overlay len exceeds overlay_str length or pos exceeds target length</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="REVERSE" ElementId="#i1003598">
          <Description>Reverses a byte sequence in RAW r from end to end</Description>
          <Parameters>
            <Parameter Name="R">RAW to reverse</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SUBSTR" ElementId="#BABIFIJB">
          <Description>Returns len bytes, starting at pos from RAW r</Description>
          <Parameters>
            <Parameter Name="R">RAW byte-string from which a portion is extracted</Parameter>
            <Parameter Name="POS">Byte position in r at which to begin extraction</Parameter>
            <Parameter Name="LEN">Number of bytes from pos to extract from r (optional)</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="TRANSLATE" ElementId="#i997340">
          <Description>Translates the bytes in the input RAW r according to the bytes in the translation RAWs from_set and to_set</Description>
          <Parameters>
            <Parameter Name="R">RAW source byte-string to be translated</Parameter>
            <Parameter Name="FROM_SET">RAW byte-codes to be translated, if present in r</Parameter>
            <Parameter Name="TO_SET">RAW byte-codes to which corresponding from_str bytes are translated</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="TRANSLITERATE" ElementId="#i997416">
          <Description>Converts the bytes in the input RAW r according to the bytes in the transliteration RAWs from_set and to_set</Description>
          <Parameters>
            <Parameter Name="R">RAW input byte-string to be converted</Parameter>
            <Parameter Name="TO_SET">RAW byte-codes to which corresponding from_set bytes are converted (any length)</Parameter>
            <Parameter Name="FROM_SET">RAW byte-codes to be converted, if presenting r (any length)</Parameter>
            <Parameter Name="PAD">1 byte used when to-set is shorter than the from_set</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="XRANGE" ElementId="#BABGDIIJ">
          <Description>Returns a RAW containing all valid 1-byte encodings in succession, beginning with the value start_byte and ending with the value end_byte</Description>
          <Parameters>
            <Parameter Name="START_BYTE">Beginning byte-code value of resulting sequence. The default is x'00'.</Parameter>
            <Parameter Name="END_BYTE">Ending byte-code value of resulting sequence. The default is x'FF'.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="UTL_RECOMP" Url="http://docs.oracle.com/database/121/ARPLS/u_recomp.htm">
      <Description>The UTL_RECOMP package recompiles invalid PL/SQL modules, invalid views, Java classes, indextypes and operators in a database, either sequentially or in parallel.</Description>
      <SubPrograms>
        <SubProgram Name="RECOMP_PARALLEL" ElementId="#i999462">
          <Description>Recompiles invalid objects in a given schema, or all invalid objects in the database, in parallel</Description>
          <Parameters>
            <Parameter Name="THREADS">The number of recompile threads to run in parallel. If NULL, use the value of 'job_queue_processes'.</Parameter>
            <Parameter Name="SCHEMA">The schema in which to recompile invalid objects. If NULL, all invalid objects in the database are recompiled.</Parameter>
            <Parameter Name="FLAGS">Flag values are intended for internal testing and diagnosability only.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="RECOMP_SERIAL" ElementId="#i999769">
          <Description>Recompiles invalid objects in a given schema or all invalid objects in the database</Description>
          <Parameters>
            <Parameter Name="SCHEMA">The schema in which to recompile invalid objects. If NULL, all invalid objects in the database are recompiled.</Parameter>
            <Parameter Name="FLAGS">Flag values are intended for internal testing and diagnosability only.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="UTL_REF" Url="http://docs.oracle.com/database/121/ARPLS/u_ref.htm">
      <Description>The UTL_REF package provides PL/SQL procedures to support reference-based operations. Unlike SQL, UTL_REF procedures enable you to write generic type methods without knowing the object table name.</Description>
      <SubPrograms>
        <SubProgram Name="DELETE_OBJECT" ElementId="#i999151">
          <Description>Deletes an object given a reference</Description>
          <Parameters>
            <Parameter Name="REFERENCE">Reference of the object to delete.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="LOCK_OBJECT" ElementId="#i999239">
          <Description>Locks an object given a reference</Description>
          <Parameters>
            <Parameter Name="REFERENCE">Reference of the object to lock.</Parameter>
            <Parameter Name="OBJECT">The PL/SQL variable that stores the locked object. This variable should be of the same object type as the locked object.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SELECT_OBJECT" ElementId="#i999141">
          <Description>Selects an object given a reference</Description>
          <Parameters>
            <Parameter Name="REFERENCE">Reference to the object to select or retrieve.</Parameter>
            <Parameter Name="OBJECT">The PL/SQL variable that stores the selected object; this variable should be of the same object type as the referenced object.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UPDATE_OBJECT" ElementId="#i996944">
          <Description>Updates an object given a reference</Description>
          <Parameters>
            <Parameter Name="REFERENCE">Reference of the object to update.</Parameter>
            <Parameter Name="OBJECT">The PL/SQL variable that contains the new value of the object. This variable should be of the same object type as the object to update.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="UTL_SMTP" Url="http://docs.oracle.com/database/121/ARPLS/u_smtp.htm">
      <Description>The UTL_SMTP package is designed for sending electronic mails (e-mails) over Simple Mail Transfer Protocol (SMTP) as specified by RFC821.</Description>
      <SubPrograms>
        <SubProgram Name="AUTH" ElementId="#BHAGEECF">
          <Description>Sends the AUTH command to authenticate to the SMTP server</Description>
        </SubProgram>
        <SubProgram Name="CLOSE_CONNECTION" ElementId="#BABCEFGD">
          <Description>Closes the SMTP connection, causing the current SMTP operation to terminate</Description>
          <Parameters>
            <Parameter Name="C">SMTP connection</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CLOSE_DATA" ElementId="#i1003341">
          <Description>Closes the data session</Description>
        </SubProgram>
        <SubProgram Name="COMMAND" ElementId="#i1003617">
          <Description>Performs a generic SMTP command</Description>
        </SubProgram>
        <SubProgram Name="COMMAND_REPLIES" ElementId="#i997284">
          <Description>Performs a generic SMTP command and retrieves multiple reply lines</Description>
          <Parameters>
            <Parameter Name="C">SMTP connection</Parameter>
            <Parameter Name="CMD">SMTP command to send to the server</Parameter>
            <Parameter Name="ARG">Optional argument to the SMTP argument. A space is inserted between cmd and arg.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="DATA" ElementId="#i1002758">
          <Description>Sends the e-mail body</Description>
        </SubProgram>
        <SubProgram Name="EHLO" ElementId="#i1003308">
          <Description>Performs the initial handshake with SMTP server using the EHLO command</Description>
        </SubProgram>
        <SubProgram Name="HELO" ElementId="#i1004728">
          <Description>Performs the initial handshake with SMTP server using the HELO command</Description>
        </SubProgram>
        <SubProgram Name="HELP" ElementId="#i1004779">
          <Description>Sends HELP command</Description>
          <Parameters>
            <Parameter Name="C">SMTP connection</Parameter>
            <Parameter Name="COMMAND">Command to get the help message</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="MAIL" ElementId="#i1001650">
          <Description>Initiates an e-mail transaction with the server, the destination is a mailbox</Description>
        </SubProgram>
        <SubProgram Name="NOOP" ElementId="#i1005000">
          <Description>NULL command</Description>
        </SubProgram>
        <SubProgram Name="OPEN_CONNECTION" ElementId="#i1002710">
          <Description>Opens a connection to an SMTP server</Description>
        </SubProgram>
        <SubProgram Name="OPEN_DATA" ElementId="#i1002852">
          <Description>Sends the DATA command</Description>
        </SubProgram>
        <SubProgram Name="QUIT" ElementId="#i997611">
          <Description>Terminates an SMTP session and disconnects from the server</Description>
        </SubProgram>
        <SubProgram Name="RCPT" ElementId="#i1002798">
          <Description>Specifies the recipient of an e-mail message</Description>
        </SubProgram>
        <SubProgram Name="RSET" ElementId="#i1004041">
          <Description>Terminates the current e-mail transaction</Description>
        </SubProgram>
        <SubProgram Name="STARTTLS" ElementId="#BHAEHHBB">
          <Description>Sends STARTTLS command to secure the SMTP connection using SSL/TLS</Description>
        </SubProgram>
        <SubProgram Name="VRFY" ElementId="#i1002366">
          <Description>Verifies the validity of a destination e-mail address</Description>
          <Parameters>
            <Parameter Name="C">SMTP connection</Parameter>
            <Parameter Name="RECIPIENT">E-mail address to be verified</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="WRITE_DATA" ElementId="#i1004100">
          <Description>Writes a portion of the e-mail message</Description>
          <Parameters>
            <Parameter Name="C">SMTP connection</Parameter>
            <Parameter Name="DATA">Portion of the text of the message to be sent, including headers, in [RFC822] format</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="WRITE_RAW_DATA" ElementId="#CHDEHIEA">
          <Description>Writes a portion of the e-mail message with RAW data</Description>
          <Parameters>
            <Parameter Name="C">SMTP connection</Parameter>
            <Parameter Name="DATA">Portion of the text of the message to be sent, including headers, in [RFC822] format</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="UTL_SPADV" Url="http://docs.oracle.com/database/121/ARPLS/u_spadv.htm">
      <Description>The UTL_SPADV package, one of a set of Oracle Streams packages, provides subprograms to collect and analyze statistics for the Oracle Streams components in a distributed database environment. This package uses the Oracle Streams Performance Advisor to gather statistics.</Description>
      <SubPrograms>
        <SubProgram Name="ALTER_MONITORING" ElementId="#BABBJAHH">
          <Description>Alters the monitoring job submitted by the current user.</Description>
          <Parameters>
            <Parameter Name="INTERVAL">The amount of time, in seconds, between each Performance Advisor run. The maximum is 3600 seconds.If NULL, then the current value is not changed.</Parameter>
            <Parameter Name="TOP_EVENT_THRESHOLD">A percentage that determines whether a top wait event statistic is collected.The percentage for a wait event must be greater than the value specified in this parameter for the procedure to collect the wait event statistic. For example, if 15 is specified, then only wait events with a value larger than 15% are collected.If NULL, then the current value is not changed.</Parameter>
            <Parameter Name="BOTTLENECK_IDLE_THRESHOLD">A percentage that determines whether an Oracle Streams component session is eligible for bottleneck analysis based on its IDLE percentage.The IDLE percentage must be less than or equal to the value specified in this parameter for the Oracle Streams component session to be eligible for bottleneck analysis. For example, if 50 is specified, then only components that are idle 50% of the time or less are eligible for bottleneck analysis.If NULL, then the current value is not changed.</Parameter>
            <Parameter Name="BOTTLENECK_FLOWCTRL_THRESHOLD">A percentage that determines whether an Oracle Streams component session is eligible for bottleneck analysis based on its FLOW CONTROL percentage.The FLOW CONTROL percentage must be less than or equal to the value specified in this parameter for the Oracle Streams component session to be eligible for bottleneck analysis. For example, if 50 is specified, then only components that are paused for flow control 50% of the time or less are eligible for bottleneck analysis.If NULL, then the current value is not changed.</Parameter>
            <Parameter Name="RETENTION_TIME">The number of hours to retain monitoring results.If NULL, then the current value is not changed.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="COLLECT_STATS" ElementId="#CACIJCAG">
          <Description>Uses the Oracle Streams Performance Advisor to gather statistics about the Oracle Streams components and subcomponents in a distributed database environment.</Description>
          <Parameters>
            <Parameter Name="INTERVAL">The amount of time, in seconds, between each Performance Advisor run. The maximum is 3600 seconds.</Parameter>
            <Parameter Name="NUM_RUNS">The number of times that the Oracle Streams Performance Advisor is run by the procedure.</Parameter>
            <Parameter Name="COMP_STAT_TABLE">The name of the table that stores the statistics collected for Oracle Streams components and subcomponents. Specify the table name as [schema_name.]object_name. If the schema is not specified, then the current user is the default.The procedure creates the specified table if it does not exist.Oracle recommends that you use the default table STREAMS$_ADVISOR_COMP_STAT.See "Usage Notes" for more information about this parameter.</Parameter>
            <Parameter Name="PATH_STAT_TABLE">The name of the table that stores the statistics collected for stream paths. Specify the table name as [schema_name.]object_name. If the schema is not specified, then the current user is the default.The procedure creates the specified table if it does not exist.Oracle recommends that you use the default table STREAMS$_ADVISOR_PATH_STAT.See "Usage Notes" for more information about this parameter.</Parameter>
            <Parameter Name="TOP_EVENT_THRESHOLD">A percentage that determines whether a top wait event statistic is collected.The percentage for a wait event must be greater than the value specified in this parameter for the procedure to collect the wait event statistic. For example, if 15 is specified, then only wait events with a value larger than 15% are collected.</Parameter>
            <Parameter Name="BOTTLENECK_IDLE_THRESHOLD">A percentage that determines whether an Oracle Streams component session is eligible for bottleneck analysis based on its IDLE percentage.The IDLE percentage must be less than or equal to the value specified in this parameter for the Oracle Streams component session to be eligible for bottleneck analysis. For example, if 50 is specified, then only components that are idle 50% of the time or less are eligible for bottleneck analysis.</Parameter>
            <Parameter Name="BOTTLENECK_FLOWCTRL_THRESHOLD">A percentage that determines whether an Oracle Streams component session is eligible for bottleneck analysis based on its FLOW CONTROL percentage.The FLOW CONTROL percentage must be less than or equal to the value specified in this parameter for the Oracle Streams component session to be eligible for bottleneck analysis. For example, if 50 is specified, then only components that are paused for flow control 50% of the time or less are eligible for bottleneck analysis.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="IS_MONITORING" ElementId="#BABEEJJE">
          <Description>Checks whether a monitoring job is currently running.</Description>
          <Parameters>
            <Parameter Name="JOB_NAME">The name of the job for which to check.</Parameter>
            <Parameter Name="CLIENT_NAME">The name of the client that submitted the job.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SHOW_STATS" ElementId="#CACGFCFF">
          <Description>Generates output that includes the statistics gathered by the COLLECT_STATS procedure.</Description>
          <Parameters>
            <Parameter Name="PATH_STAT_TABLE">The name of the table that contains the stream path statistics. Specify the table name as [schema_name.]object_name. If the schema is not specified, then the current user is the default.When you gather statistics using the COLLECT_STATS procedure, this table is specified in the path_stat_table parameter in the COLLECT_STATS procedure. The default table is STREAMS$_ADVISOR_PATH_STAT.When you gather statistics using the START_MONITORING procedure, you can determine the name for this table by querying the SHOW_STATS_TABLE column in the STREAMS$_PA_MONITORING view. The default table for a monitoring job is STREAMS$_PA_SHOW_PATH_STAT.</Parameter>
            <Parameter Name="PATH_ID">A stream path ID.If non-NULL, then the procedure shows output for the specified stream path only.If NULL, then the procedure shows output for all active stream paths.</Parameter>
            <Parameter Name="BGN_RUN_ID">The first Oracle Streams Performance Advisor run ID to show in the range of runs.See "Usage Notes" for more information about this parameter.</Parameter>
            <Parameter Name="END_RUN_ID">The last Oracle Streams Performance Advisor run ID to show in the range of runs.See "Usage Notes" for more information about this parameter.</Parameter>
            <Parameter Name="SHOW_PATH_ID">If TRUE, then the path ID for each stream path is included in the output.If FALSE, then the path ID for each stream path is not included in the output.</Parameter>
            <Parameter Name="SHOW_RUN_ID">If TRUE, then the Oracle Streams Performance Advisor run ID is included in the output.If FALSE, then the Oracle Streams Performance Advisor run ID is not included in the output.</Parameter>
            <Parameter Name="SHOW_RUN_TIME">If TRUE, then the Oracle Streams Performance Advisor run time is included in the output.If FALSE, then the Oracle Streams Performance Advisor run time is not included in the output.</Parameter>
            <Parameter Name="SHOW_OPTIMIZATION">If TRUE, then path output includes information pertaining to the combined capture and apply optimization.If FALSE, then path output does not include information pertaining to the combined capture and apply optimization.</Parameter>
            <Parameter Name="SHOW_SETTING">If TRUE, then the settings for the threshold parameters are included in the output. The threshold parameters are the top_event_threshold, bottleneck_idle_threshold, and bottleneck_flowctrl_threshold parameters in the COLLECT_STATS procedure.If FALSE, then the settings for the threshold parameters are not included in the output.</Parameter>
            <Parameter Name="SHOW_STAT">If TRUE, then the component-level and subcomponent-level statistics are included in the output. These components include capture processes, queues, propagation senders, propagation receivers, and apply processes. The subcomponents are the subcomponents for capture processes and apply processes.If FALSE, then the component-level and subcomponent-level statistics are not included in the output.</Parameter>
            <Parameter Name="SHOW_SESS">If TRUE, then the session-level statistics are included in the output. Session-level statistics include IDLE, FLOW CONTROL, and EVENT statistics.If FALSE, then the session-level statistics are not included in the output.</Parameter>
            <Parameter Name="SHOW_LEGEND">If TRUE, then the legend is included in the output. The legend describes the abbreviations used in the output.If FALSE, then the legend is not included in the output.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SHOW_STATS_HTML" ElementId="#CHDHBAAJ">
          <Description>Generates HTML output that includes the statistics gathered by the COLLECT_STATS procedure.</Description>
          <Parameters>
            <Parameter Name="DIRECTORY">The directory object for the directory on the local computer system into which the generated HTML report is placedThe specified directory object must be created using the SQL statement CREATE DIRECTORY, and the user who invokes the procedure must have READ and WRITE privilege on each one.</Parameter>
            <Parameter Name="REPORTNAME">The name of the HTML report</Parameter>
            <Parameter Name="COMP_STAT_TABLE">The name of the table that stores the statistics collected for Oracle Streams components and subcomponents. Specify the table name as [schema_name.]object_name. If the schema is not specified, then the current user is the default.When you gather statistics using the COLLECT_STATS procedure, this table is specified in the comp_stat_table parameter in the COLLECT_STATS procedure. The default table is STREAMS$_ADVISOR_COMP_STAT.When you gather statistics using the START_MONITORING procedure, you can determine the name for this table by querying the SHOW_STATS_TABLE column in the STREAMS$_PA_MONITORING view. The default table for a monitoring job is STREAMS$_PA_SHOW_PATH_STAT.Oracle recommends that you start a monitoring job with the START_MONITORING procedure in this package and use the appropriate the STREAMS$_PA_SHOW_PATH_STAT table.</Parameter>
            <Parameter Name="PATH_ID">A stream path ID.If non-NULL, then the procedure shows output for the specified stream path only.If NULL, then the procedure shows output for all active stream paths.</Parameter>
            <Parameter Name="BGN_RUN_ID">The first Oracle Streams Performance Advisor run ID to show in the range of runs.See "Usage Notes" for more information about this parameter.</Parameter>
            <Parameter Name="END_RUN_ID">The last Oracle Streams Performance Advisor run ID to show in the range of runs.See "Usage Notes" for more information about this parameter.</Parameter>
            <Parameter Name="DETAILED">If TRUE, then the procedure generates component-level statistics.If FALSE, then the procedure does not generate component-level statistics.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="START_MONITORING" ElementId="#BABEBDDG">
          <Description>Starts a monitoring job.</Description>
          <Parameters>
            <Parameter Name="JOB_NAME">The name of the monitoring job to create.</Parameter>
            <Parameter Name="CLIENT_NAME">The name of the client.</Parameter>
            <Parameter Name="QUERY_USER_NAME">The user who will query the result tables.This procedure grants privileges to the specified user to enable the user to query the result tables.</Parameter>
            <Parameter Name="INTERVAL">The amount of time, in seconds, between each Performance Advisor run. The maximum is 3600 seconds.The specified interval is used for the interval parameter in the COLLECT_STATS procedure.</Parameter>
            <Parameter Name="TOP_EVENT_THRESHOLD">A percentage that determines whether a top wait event statistic is collected.The percentage for a wait event must be greater than the value specified in this parameter for the procedure to collect the wait event statistic. For example, if 15 is specified, then only wait events with a value larger than 15% are collected.</Parameter>
            <Parameter Name="BOTTLENECK_IDLE_THRESHOLD">A percentage that determines whether an Oracle Streams component session is eligible for bottleneck analysis based on its IDLE percentage.The IDLE percentage must be less than or equal to the value specified in this parameter for the Oracle Streams component session to be eligible for bottleneck analysis. For example, if 50 is specified, then only components that are idle 50% of the time or less are eligible for bottleneck analysis.</Parameter>
            <Parameter Name="BOTTLENECK_FLOWCTRL_THRESHOLD">A percentage that determines whether an Oracle Streams component session is eligible for bottleneck analysis based on its FLOW CONTROL percentage.The FLOW CONTROL percentage must be less than or equal to the value specified in this parameter for the Oracle Streams component session to be eligible for bottleneck analysis. For example, if 50 is specified, then only components that are paused for flow control 50% of the time or less are eligible for bottleneck analysis.</Parameter>
            <Parameter Name="RETENTION_TIME">The number of hours to retain monitoring results.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="STOP_MONITORING" ElementId="#BABJAHGF">
          <Description>Stops a monitoring job.</Description>
          <Parameters>
            <Parameter Name="PURGE">If TRUE, then the procedure purges information about the monitoring job from the result tables.If FALSE, then the procedure retains information about the monitoring job in the result tables.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="UTL_TCP" Url="http://docs.oracle.com/database/121/ARPLS/u_tcp.htm">
      <Description>With the UTL_TCP package and its procedures and functions, PL/SQL applications can communicate with external TCP/IP-based servers using TCP/IP. Because many Internet application protocols are based on TCP/IP, this package is useful to PL/SQL applications that use Internet protocols and e-mail.</Description>
      <SubPrograms>
        <SubProgram Name="AVAILABLE" ElementId="#i1002126">
          <Description>Determines the number of bytes available for reading from a TCP/IP connection</Description>
          <Parameters>
            <Parameter Name="C">TCP connection to determine the amount of data that is available to be read</Parameter>
            <Parameter Name="TIMEOUT">Time in seconds to wait before giving up and reporting that no data is available. Zero (0) indicates not to wait at all. NULL indicates to wait forever.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="CLOSE_ALL_CONNECTIONS" ElementId="#i1002194">
          <Description>Closes all open TCP/IP connections</Description>
        </SubProgram>
        <SubProgram Name="CLOSE_CONNECTION" ElementId="#i1002213">
          <Description>Closes an open TCP/IP connection</Description>
          <Parameters>
            <Parameter Name="C">TCP connection to close</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="FLUSH" ElementId="#BABIJEID">
          <Description>Transmits immediately to the server all data in the output buffer, if a buffer is used</Description>
          <Parameters>
            <Parameter Name="C">TCP connection to which to send data</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_LINE" ElementId="#i1004843">
          <Description>Returns the line of data read</Description>
          <Parameters>
            <Parameter Name="C">TCP connection from which to receive data</Parameter>
            <Parameter Name="REMOVE_CRLF">If TRUE, then one ore more trailing CRLF characters are removed from the received message.</Parameter>
            <Parameter Name="PEEK">Normally, you want to read the data and remove it from the input queue, that is, consume it. In some situations, you may just want to look ahead at the data, that is, peek at it, without removing it from the input queue, so that it is still available for reading (or even peeking) in the next call. To keep the data in the input queue, set this flag to TRUE and set up an input buffer before the connection is opened. The amount of data you can peek at (that is, read but keep in the input queue) must be less than the size of input buffer.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_LINE_NCHAR" ElementId="#CEGGCFIC">
          <Description>Returns the line of data read in NCHAR form</Description>
          <Parameters>
            <Parameter Name="C">TCP connection from which to receive data</Parameter>
            <Parameter Name="REMOVE_CRLF">If TRUE, then one ore more trailing CRLF characters are removed from the received message.</Parameter>
            <Parameter Name="PEEK">Normally, you want to read the data and remove it from the input queue, that is, consume it. In some situations, you may just want to look ahead at the data, that is, peek at it, without removing it from the input queue, so that it is still available for reading (or even peeking) in the next call. To keep the data in the input queue, set this flag to TRUE and set up an input buffer before the connection is opened. The amount of data you can peek at (that is, read but keep in the input queue) must be less than the size of input buffer.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_RAW" ElementId="#i1002357">
          <Description>Return the data read instead of the amount of data read</Description>
          <Parameters>
            <Parameter Name="C">TCP connection from which to receive data</Parameter>
            <Parameter Name="LEN">The number of bytes (or characters for VARCHAR2) of data to receive. Default is 1.</Parameter>
            <Parameter Name="PEEK">Normally, you want to read the data and remove it from the input queue, that is, consume it. In some situations, you may just want to look ahead at the data, that is, peek at it, without removing it from the input queue, so that it is still available for reading (or even peeking) in the next call. To keep the data in the input queue, set this flag to TRUE and set up an input buffer before the connection is opened. The amount of data you can peek at (that is, read but keep in the input queue) must be less than the size of input buffer.</Parameter>
            <Parameter Name="REMOVE_CRLF">If TRUE, then one ore more trailing CRLF characters are removed from the received message.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_TEXT" ElementId="#i1002397">
          <Description>Returns the text data read</Description>
          <Parameters>
            <Parameter Name="C">TCP connection from which to receive data</Parameter>
            <Parameter Name="LEN">Number of bytes (or characters for VARCHAR2) of data to receive. Default is 1.</Parameter>
            <Parameter Name="PEEK">Normally, you want to read the data and remove it from the input queue, that is, consume it. In some situations, you may just want to look ahead at the data, that is, peek at it, without removing it from the input queue, so that it is still available for reading (or even peeking) in the next call. To keep the data in the input queue, set this flag to TRUE and set up an input buffer before the connection is opened. The amount of data you can peek at (that is, read but keep in the input queue) must be less than the size of input buffer.</Parameter>
            <Parameter Name="REMOVE_CRLF">If TRUE, then one ore more trailing CRLF characters are removed from the received message.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="GET_TEXT_NCHAR" ElementId="#CEGFABGD">
          <Description>Returns the text data read in NCHAR form</Description>
          <Parameters>
            <Parameter Name="C">TCP connection from which to receive data</Parameter>
            <Parameter Name="LEN">The number of bytes (or characters for VARCHAR2) of data to receive. Default is 1.</Parameter>
            <Parameter Name="PEEK">Normally, you want to read the data and remove it from the input queue, that is, consume it. In some situations, you may just want to look ahead at the data, that is, peek at it, without removing it from the input queue, so that it is still available for reading (or even peeking) in the next call. To keep the data in the input queue, set this flag to TRUE and set up an input buffer before the connection is opened. The amount of data you can peek at (that is, read but keep in the input queue) must be less than the size of input buffer.</Parameter>
            <Parameter Name="REMOVE_CRLF">If TRUE, then one ore more trailing CRLF characters are removed from the received message.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="OPEN_CONNECTION" ElementId="#i997069">
          <Description>Opens a TCP/IP connection to a specified service</Description>
          <Parameters>
            <Parameter Name="REMOTE_HOST">Name of the host providing the service. When remote_host is NULL, it connects to the local host.</Parameter>
            <Parameter Name="REMOTE_PORT">Port number on which the service is listening for connections</Parameter>
            <Parameter Name="LOCAL_HOST">Name of the host providing the service. NULL means does not care.</Parameter>
            <Parameter Name="LOCAL_PORT">Port number on which the service is listening for connections. NULL means don't care.</Parameter>
            <Parameter Name="IN_BUFFER_SIZE">The size of input buffer. The use of an input buffer can speed up execution performance in receiving data from the server. The appropriate size of the buffer depends on the flow of data between the client and the server, and the traffic/latency on the network. A zero value means no buffer should be used. A NULL value means the caller does not care if a buffer is used or not. The maximum size of the input buffer is 32767 bytes.</Parameter>
            <Parameter Name="OUT_BUFFER_SIZE">The size of output buffer. The use of an output buffer can speed up execution performance in sending data to the server. The appropriate size of buffer depends on the flow of data between the client and the server, and the network condition. A zero value means no buffer should be used. A NULL value means the caller does not care if a buffer is used or not. The maximum size of the output buffer is 32767 bytes.</Parameter>
            <Parameter Name="CHARSET">The on-the-wire character set. Since text messages in the database may be encoded in a character set that is different from the one expected on the wire (that is, the character set specified by the communication protocol, or the one stipulated by the other end of the communication), text messages in the database are converted to and from the on-the-wire character set as they are sent and received on the network using READ_TEXT, READ_LINE, WRITE_TEXT and WRITE_LINE. Set this parameter to NULL when no conversion is needed.</Parameter>
            <Parameter Name="NEWLINE">Newline character sequence. This newline character sequence is appended to the text line sent by WRITE_LINE API.</Parameter>
            <Parameter Name="TX_TIMEOUT">Time in seconds that the UTL_TCP package should wait before giving up in a read or write operations in this connection. In read operations, this package gives up if no data is available for reading immediately. In write operations, this package gives up if the output buffer is full and no data is to be sent in the network without being blocked. Zero (0) indicates not to wait at all. NULL indicates to wait forever.</Parameter>
            <Parameter Name="WALLET_PATH">Directory path that contains the Oracle wallet for SSL/TLS. The format is file:directory-path</Parameter>
            <Parameter Name="WALLET_PASSWORD">Password to open the wallet. When the wallet is auto-login enabled, the password may be set to NULL.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="READ_LINE" ElementId="#i1002454">
          <Description>Receives a text line from a service on an open connection</Description>
          <Parameters>
            <Parameter Name="C">TCP connection from which to receive data</Parameter>
            <Parameter Name="DATA">Data received.</Parameter>
            <Parameter Name="REMOVE_CRLF">If TRUE, then one ore more trailing CRLF characters are removed from the received message.</Parameter>
            <Parameter Name="PEEK">Normally, you want to read the data and remove it from the input queue, that is, consume it. In some situations, you may just want to look ahead at the data, that is, peek at it, without removing it from the input queue, so that it is still available for reading (or even peeking) in the next call. To keep the data in the input queue, set this flag to TRUE and set up an input buffer before the connection is opened. The amount of data you can peek at (that is, read but keep in the input queue) must be less than the size of input buffer.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="READ_RAW" ElementId="#BABHEBIA">
          <Description>Receives binary data from a service on an open connection</Description>
          <Parameters>
            <Parameter Name="C">TCP connection from which to receive data</Parameter>
            <Parameter Name="DATA (IN OUT COPY)">Data received</Parameter>
            <Parameter Name="LEN">Number of bytes of data to receive</Parameter>
            <Parameter Name="PEEK">Normally, you want to read the data and remove it from the input queue, that is, consume it. In some situations, you may just want to look ahead at the data, that is, peek at it, without removing it from the input queue, so that it is still available for reading (or even peeking) in the next call. To keep the data in the input queue, set this flag to TRUE and set up an input buffer before the connection is opened. The amount of data you can peek at (that is, read but keep in the input queue) must be less than the size of input buffer.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="READ_TEXT" ElementId="#i1002638">
          <Description>Receives text data from a service on an open connection</Description>
          <Parameters>
            <Parameter Name="C">TCP connection from which to receive data</Parameter>
            <Parameter Name="DATA">Data received</Parameter>
            <Parameter Name="LEN">Number of characters of data to receive</Parameter>
            <Parameter Name="PEEK">Normally, users want to read the data and remove it from the input queue, that is, consume it. In some situations, users may just want to look ahead at the data without removing it from the input queue so that it is still available for reading (or even peeking) in the next call. To keep the data in the input queue, set this flag to TRUE and an input buffer must be set up when the connection is opened. The amount of data that you can peek at (that is, read but keep in the input queue) must be less than the size of input buffer.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="SECURE_CONNECTION" ElementId="#BHAGCIFG">
          <Description>Secures a TCP/IP connection using SSL/TLS</Description>
          <Parameters>
            <Parameter Name="C">TCP connection from which to receive data</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="WRITE_LINE" ElementId="#i1004858">
          <Description>Transmits a text line to a service on an open connection</Description>
          <Parameters>
            <Parameter Name="C">TCP connection to which to send data</Parameter>
            <Parameter Name="DATA">Buffer containing the data to be sent</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="WRITE_RAW" ElementId="#i997232">
          <Description>Transmits a binary message to a service on an open connection</Description>
          <Parameters>
            <Parameter Name="C">TCP connection to which to send data</Parameter>
            <Parameter Name="DATA">Buffer containing the data to be sent</Parameter>
            <Parameter Name="LEN">The number of bytes of data to transmit. When len is NULL, the whole length of data is written.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="WRITE_TEXT" ElementId="#i1002522">
          <Description>Transmits a text message to a service on an open connection</Description>
          <Parameters>
            <Parameter Name="C">TCP connection to which to send data</Parameter>
            <Parameter Name="DATA">Buffer containing the data to be sent</Parameter>
            <Parameter Name="LEN">The number of characters of data to transmit. When len is NULL, the whole length of data is written. The actual amount of data written may be less because of network condition.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
    <Package Name="UTL_URL" Url="http://docs.oracle.com/database/121/ARPLS/u_url.htm">
      <Description>The UTL_URL package has two functions: ESCAPE and UNESCAPE.</Description>
      <SubPrograms>
        <SubProgram Name="ESCAPE" ElementId="#i996850">
          <Description>Returns a URL with illegal characters (and optionally reserved characters) escaped using the %2-digit-hex-code format</Description>
          <Parameters>
            <Parameter Name="URL">The original URL</Parameter>
            <Parameter Name="ESCAPE_RESERVED_CHARS">Indicates whether the URL reserved characters should be escaped. If set to TRUE, both the reserved and illegal URL characters are escaped. Otherwise, only the illegal URL characters are escaped. The default value is FALSE.</Parameter>
            <Parameter Name="URL_CHARSET">When escaping a character (single-byte or multibyte), determine the target character set that character should be converted to before the character is escaped in %hex-code format. If url_charset is NULL, the database charset is assumed and no character set conversion will occur. The default value is the current default body character set of the UTL_HTTP package, whose default value is ISO-8859-1. The character set can be named in Internet Assigned Numbers Authority (IANA) or in the Oracle naming convention.</Parameter>
          </Parameters>
        </SubProgram>
        <SubProgram Name="UNESCAPE" ElementId="#i996904">
          <Description>Unescapes the escape character sequences to their original forms in a URL. Convert the %XX escape character sequences to the original characters</Description>
          <Parameters>
            <Parameter Name="URL">The URL to unescape</Parameter>
            <Parameter Name="URL_CHARSET">After a character is unescaped, the character is assumed to be in the source_charset character set and it will be converted from the source_charset to the database character set before the URL is returned. If source_charset is NULL, the database charset is assumed and no character set conversion occurred. The default value is the current default body character set of the UTL_HTTP package, whose default value is "ISO-8859-1". The character set can be named in Internet Assigned Numbers Authority (IANA) or Oracle naming convention.</Parameter>
          </Parameters>
        </SubProgram>
      </SubPrograms>
    </Package>
  </Packages>
  <DataDictionary>
    <DataDictionaryObject Name="ACTIVE_INSTANCE_COUNT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10001.htm" />
    <DataDictionaryObject Name="ALL_ALL_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20003.htm">ALL_ALL_TABLES describes the object tables and relational tables accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_APPLY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20005.htm">ALL_APPLY displays information about the apply processes that dequeue messages from queues accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_APPLY_CONFLICT_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20006.htm">ALL_APPLY_CONFLICT_COLUMNS displays information about the conflict handlers on the tables accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_APPLY_DML_HANDLERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20007.htm">ALL_APPLY_DML_HANDLERS displays information about the DML handlers on the tables accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_APPLY_ENQUEUE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20332.htm">ALL_APPLY_ENQUEUE displays information about the apply enqueue actions for the rules where the destination queue exists and is accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_APPLY_ERROR" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20008.htm">ALL_APPLY_ERROR displays information about the error transactions generated by the apply processes that dequeue messages from queues accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_APPLY_ERROR_MESSAGES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20783.htm">ALL_APPLY_ERROR_MESSAGES displays information about the individual messages in an error transaction generated by the apply processes that dequeue messages from queues accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_APPLY_EXECUTE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20333.htm">ALL_APPLY_EXECUTE displays information about the apply execute actions for the rules visible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_APPLY_CHANGE_HANDLERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20752.htm">ALL_APPLY_CHANGE_HANDLERS displays information about the change handlers on the tables accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_APPLY_INSTANTIATED_GLOBAL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20334.htm">ALL_APPLY_INSTANTIATED_GLOBAL displays information for the current user about databases for which an instantiation SCN has been set.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_APPLY_INSTANTIATED_OBJECTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20009.htm">ALL_APPLY_INSTANTIATED_OBJECTS displays information about objects accessible to the current user for which an instantiation SCN has been set.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_APPLY_INSTANTIATED_SCHEMAS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20335.htm">ALL_APPLY_INSTANTIATED_SCHEMAS displays information about schemas accessible to the current user for which an instantiation SCN has been set.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_APPLY_KEY_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20010.htm">ALL_APPLY_KEY_COLUMNS displays information about the substitute key columns for the tables accessible to the current user. Substitute key columns are set using the DBMS_APPLY_ADM.SET_KEY_COLUMNS procedure.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_APPLY_PARAMETERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20011.htm">ALL_APPLY_PARAMETERS displays information about the parameters for the apply processes that dequeue events from queues accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_APPLY_PROGRESS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20012.htm">ALL_APPLY_PROGRESS displays information about the progress made by the apply processes that dequeue events from queues accessible to the current user. This view only contains information about captured events. It does not contain information about user-enqueued events.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_APPLY_TABLE_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20398.htm">ALL_APPLY_TABLE_COLUMNS displays, for the tables accessible to the current user, information about the nonkey table columns for which Oracle Streams apply processes do not detect conflicts for updates and deletes.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_ARGUMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20015.htm">ALL_ARGUMENTS lists the arguments of the functions and procedures that are accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_ASSEMBLIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20564.htm">ALL_ASSEMBLIES provides information about assemblies accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_ASSOCIATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20016.htm">ALL_ASSOCIATIONS describes user-defined statistics associated with objects accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_ATTRIBUTE_TRANSFORMATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20017.htm">ALL_ATTRIBUTE_TRANSFORMATIONS displays information about the transformation functions for the transformations accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_AUDIT_POLICIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20020.htm">ALL_AUDIT_POLICIES describes the fine-grained auditing policies on the tables and views accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_AUDIT_POLICY_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20336.htm">ALL_AUDIT_POLICY_COLUMNS describes the fine-grained auditing policy columns on the tables and views accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_AW_PS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20024.htm">ALL_AW_PS describes the page spaces in the analytic workspaces accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_AWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20025.htm">ALL_AWS describes the analytic workspaces accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_BASE_TABLE_MVIEWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20026.htm">ALL_BASE_TABLE_MVIEWS describes the materialized views using materialized view logs accessible to the current user. A materialized view log can be created for a master, base table, or master materialized view. Query this view at the master site or the master materialized view site to show one row for each materialized view using a materialized view log.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CAPTURE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20031.htm">ALL_CAPTURE displays information about the capture processes that enqueue the captured changes into queues accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CAPTURE_EXTRA_ATTRIBUTES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20337.htm">ALL_CAPTURE_EXTRA_ATTRIBUTES displays information about the extra attributes for the capture processes accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CAPTURE_PARAMETERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20032.htm">ALL_CAPTURE_PARAMETERS displays information about the parameters for the capture processes that enqueue the captured changes into queues accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CAPTURE_PREPARED_DATABASE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20033.htm">ALL_CAPTURE_PREPARED_DATABASE displays information about when the local database was prepared for instantiation. If the local database was not prepared for instantiation, then this view contains no rows.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CAPTURE_PREPARED_SCHEMAS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20034.htm">ALL_CAPTURE_PREPARED_SCHEMAS displays information about the schemas prepared for instantiation that are accessible to the current user at the local database.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CAPTURE_PREPARED_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20035.htm">ALL_CAPTURE_PREPARED_TABLES displays information about the tables prepared for instantiation that are accessible to the current user at the local database.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CATALOG" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20036.htm">ALL_CATALOG displays the tables, clusters, views, synonyms, and sequences accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CLUSTER_HASH_EXPRESSIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20038.htm">ALL_CLUSTER_HASH_EXPRESSIONS displays hash functions for all hash clusters accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CLUSTERING_DIMENSIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20827.htm">ALL_CLUSTERING_DIMENSIONS describes dimension tables associated with tables with an attribute clustering clause that the user owns or has system privileges for.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CLUSTERING_JOINS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20828.htm">ALL_CLUSTERING_JOINS describes joins to the dimension tables associated with tables with an attribute clustering clause the user owns or has system privileges for.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CLUSTERING_KEYS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20826.htm">ALL_CLUSTERING_KEYS describes clustering keys for tables with an attribute clustering clause accessible to the user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CLUSTERING_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20825.htm">ALL_CLUSTERING_TABLES describes tables with an attribute clustering clause that are accessible to the user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CLUSTERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20039.htm">ALL_CLUSTERS describes all clusters accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CODE_ROLE_PRIVS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20824.htm">ALL_CODE_ROLE_PRIVS describes all the roles that are associated with program units owned or accessible by the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_COL_COMMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20040.htm">ALL_COL_COMMENTS displays comments on the columns of the tables and views accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_COL_PENDING_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20633.htm">ALL_COL_PENDING_STATS describes the pending statistics of the columns accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_COL_PRIVS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20041.htm">ALL_COL_PRIVS describes the following types of grants:</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_COL_PRIVS_MADE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20042.htm">ALL_COL_PRIVS_MADE describes the column object grants for which the current user is the object owner or grantor.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_COL_PRIVS_RECD" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20043.htm">ALL_COL_PRIVS_RECD describes the following types of grants:</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_COLL_TYPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20044.htm">ALL_COLL_TYPES describes all named collection types (varrays and nested tables) accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CONS_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20045.htm">ALL_CONS_COLUMNS describes columns that are accessible to the current user and that are specified in constraints.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CONS_OBJ_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20046.htm">ALL_CONS_OBJ_COLUMNS displays information about the types that object columns (or attributes) or collection elements have been constrained to, in the tables accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CONSTRAINTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20047.htm">ALL_CONSTRAINTS describes constraint definitions on tables accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CONTEXT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20048.htm">ALL_CONTEXT describes all context namespaces in the current session for which attributes and values have been specified using the DBMS_SESSION.SET_CONTEXT procedure. This view does not display the TYPE column.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CREDENTIALS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20829.htm">ALL_CREDENTIALS lists all credentials visible to the user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CUBE_ATTR_VISIBILITY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20691.htm">ALL_CUBE_ATTR_VISIBILITY describes the OLAP attributes visible for the dimensions, hierarchies, and levels accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CUBE_ATTRIBUTES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20671.htm">ALL_CUBE_ATTRIBUTES describes the attributes for the OLAP cube dimensions accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CUBE_BUILD_PROCESSES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20718.htm">ALL_CUBE_BUILD_PROCESSES describes the OLAP build processes and maintenance scripts accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CUBE_CALCULATED_MEMBERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20672.htm">ALL_CUBE_CALCULATED_MEMBERS describes the calculated members for the OLAP cube dimensions accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CUBE_DIM_LEVELS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20677.htm">ALL_CUBE_DIM_LEVELS describes the OLAP dimension levels accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CUBE_DIM_MODELS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20678.htm">ALL_CUBE_DIM_MODELS describes the models for the OLAP dimensions accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CUBE_DIM_VIEW_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20680.htm">ALL_CUBE_DIM_VIEW_COLUMNS describes the columns of the relational views of the OLAP cube dimensions accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CUBE_DIM_VIEWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20679.htm">ALL_CUBE_DIM_VIEWS describes the relational views of the OLAP dimensions accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CUBE_DIMENSIONALITY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20674.htm">ALL_CUBE_DIMENSIONALITY describes the dimension order for the OLAP cubes accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CUBE_DIMENSIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20690.htm">ALL_CUBE_DIMENSIONS describes the OLAP cube dimensions accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CUBE_HIER_LEVELS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20685.htm">ALL_CUBE_HIER_LEVELS describes the hierarchy levels for the OLAP cube dimensions accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CUBE_HIER_VIEW_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20687.htm">ALL_CUBE_HIER_VIEW_COLUMNS describes the columns of the relational hierarchy views of the OLAP cube dimensions accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CUBE_HIER_VIEWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20686.htm">ALL_CUBE_HIER_VIEWS describes the hierarchies for the OLAP cube dimensions accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CUBE_HIERARCHIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20684.htm">ALL_CUBE_HIERARCHIES describes the OLAP dimension hierarchies accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CUBE_MEASURES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20688.htm">ALL_CUBE_MEASURES describes the measures for the OLAP cubes accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CUBE_NAMED_BUILD_SPECS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20937.htm">ALL_CUBE_NAMED_BUILD_SPECS describes the OLAP cube named build specifications in the database that are accessible by the user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CUBE_SUB_PARTITION_LEVELS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20938.htm">ALL_CUBE_SUB_PARTITION_LEVELS describes the OLAP secondary partition levels in the database that are accessible by the user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CUBE_VIEW_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20676.htm">ALL_CUBE_VIEW_COLUMNS describes the columns of the relational views of the OLAP cubes accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CUBE_VIEWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20675.htm">ALL_CUBE_VIEWS describes the relational views of the OLAP cubes accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_CUBES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20673.htm">ALL_CUBES describes the OLAP cubes accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_DB_LINKS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20050.htm">ALL_DB_LINKS describes the database links accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_DEF_AUDIT_OPTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20052.htm">ALL_DEF_AUDIT_OPTS contains default object-auditing options that will be applied when objects are created. The output for each column takes one of the following forms:</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_DEPENDENCIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20053.htm">ALL_DEPENDENCIES describes dependencies between procedures, packages, functions, package bodies, and triggers accessible to the current user, including dependencies on views created without any database links. This view does not display the SCHEMAID column.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_DEQUEUE_QUEUES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20540.htm">ALL_DEQUEUE_QUEUES describes all queues on which the current user has dequeue privileges. If the user has any Advanced Queuing system privileges, such as DEQUEUE ANY QUEUE or MANAGE ANY QUEUE, then this view describes all queues in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_DIM_ATTRIBUTES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20054.htm">ALL_DIM_ATTRIBUTES describes the relationship between a dimension level and a functionally dependent column. The level columns and the dependent column must be in the same table.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_DIM_HIERARCHIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20056.htm">ALL_DIM_HIERARCHIES describes all dimension hierarchies accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_DIM_CHILD_OF" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20055.htm">ALL_DIM_CHILD_OF describes hierarchical relationships of 1 to n between the pairs of levels in the dimensions accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_DIM_JOIN_KEY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20057.htm">ALL_DIM_JOIN_KEY describes the joins between two dimension tables that are accessible to the current user. The join is always specified between a parent dimension level column and a child column.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_DIM_LEVEL_KEY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20058.htm">ALL_DIM_LEVEL_KEY describes a column of a dimension level accessible to the current user. The position of a column within a level is specified by KEY_POSITION.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_DIM_LEVELS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20059.htm">ALL_DIM_LEVELS describes the dimension levels accessible to the current user. All columns of a dimension level must come from the same relation. </DataDictionaryObject>
    <DataDictionaryObject Name="ALL_DIMENSIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20060.htm">ALL_DIMENSIONS describes the dimension objects accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_DIRECTORIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20061.htm">ALL_DIRECTORIES describes all directories accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_EDITION_COMMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20635.htm">ALL_EDITION_COMMENTS describes the comments on the editions accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_EDITIONING_VIEW_COLS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20669.htm">ALL_EDITIONING_VIEW_COLS describes the relationship between the columns of the editioning views accessible to the current user and the table columns to which they map.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_EDITIONING_VIEW_COLS_AE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20683.htm">ALL_EDITIONING_VIEW_COLS_AE describes the relationship between the columns of the editioning views (across all editions) accessible to the current user and the table columns to which they map.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_EDITIONING_VIEWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20668.htm">ALL_EDITIONING_VIEWS describes the editioning views accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_EDITIONING_VIEWS_AE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20681.htm">ALL_EDITIONING_VIEWS_AE describes the editioning views (across all editions) accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_EDITIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20634.htm">ALL_EDITIONS describes the editions accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_ENCRYPTED_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20534.htm">ALL_ENCRYPTED_COLUMNS displays encryption algorithm information for the encrypted columns in the tables accessible to the current user. </DataDictionaryObject>
    <DataDictionaryObject Name="ALL_ERROR_TRANSLATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20792.htm">ALL_ERROR_TRANSLATIONS describes all error translations accessible to the user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_ERRORS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20065.htm">ALL_ERRORS describes the current errors on the stored objects accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_ERRORS_AE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20577.htm">ALL_ERRORS_AE describes the current errors on the stored objects (across all editions) accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_EVALUATION_CONTEXT_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20066.htm">ALL_EVALUATION_CONTEXT_TABLES describes the tables in the rule evaluation contexts accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_EVALUATION_CONTEXT_VARS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20067.htm">ALL_EVALUATION_CONTEXT_VARS describes the variables in the rule evaluation contexts accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_EVALUATION_CONTEXTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20068.htm">ALL_EVALUATION_CONTEXTS describes the rule evaluation contexts accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_EXTERNAL_LOCATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20073.htm">ALL_EXTERNAL_LOCATIONS describes the locations (data sources) of the external tables accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_EXTERNAL_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20074.htm">ALL_EXTERNAL_TABLES describes the external tables accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_FILE_GROUP_EXPORT_INFO" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20499.htm">ALL_FILE_GROUP_EXPORT_INFO shows export-related information for each version accessible to the current user. There will only be information in this view for versions that have a valid Data Pump dump file.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_FILE_GROUP_FILES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20500.htm">ALL_FILE_GROUP_FILES shows the file set for each versioned file group accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_FILE_GROUP_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20501.htm">ALL_FILE_GROUP_TABLES shows information about the tables accessible to the current user that can be imported using the file set.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_FILE_GROUP_TABLESPACES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20502.htm">ALL_FILE_GROUP_TABLESPACES shows information about the transportable tablespaces present (partially or completely) in the file groups accessible to the current user (when the file groups contain dump files).</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_FILE_GROUP_VERSIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20503.htm">ALL_FILE_GROUP_VERSIONS shows top-level version information for the file groups accessible to the current user. </DataDictionaryObject>
    <DataDictionaryObject Name="ALL_FILE_GROUPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20504.htm">ALL_FILE_GROUPS shows top-level metadata about the file groups accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_GG_INBOUND_PROGRESS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20912.htm">ALL_GG_INBOUND_PROGRESS displays information about the progress made by the GoldenGate inbound servers accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_GOLDENGATE_INBOUND" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20911.htm">ALL_GOLDENGATE_INBOUND displays information about the GoldenGate inbound servers accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_GOLDENGATE_PRIVILEGES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20804.htm">ALL_GOLDENGATE_PRIVILEGES displays details about Oracle GoldenGate privileges for the user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_GOLDENGATE_RULES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20906.htm">ALL_GOLDENGATE_RULES displays information about the GoldenGate rules accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_HEAT_MAP_SEG_HISTOGRAM" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20954.htm">ALL_HEAT_MAP_SEG_HISTOGRAM displays segment access information for all segments visible to the user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_HEAT_MAP_SEGMENT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20955.htm">ALL_HEAT_MAP_SEGMENT displays the latest segment access time for all segments visible to the user. The timestamps in the view are coarse with a granularity of a day reflecting the flush times of the heat map.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_HISTOGRAMS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20079.htm">ALL_HISTOGRAMS is a synonym for ALL_TAB_HISTOGRAMS.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_IDENTIFIERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20599.htm">ALL_IDENTIFIERS displays information about the identifiers in the stored objects accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_IND_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20084.htm">ALL_IND_COLUMNS describes the columns of indexes on all tables accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_IND_EXPRESSIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20085.htm">ALL_IND_EXPRESSIONS describes the expressions of function-based indexes on tables accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_IND_PARTITIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20086.htm">ALL_IND_PARTITIONS displays, for each index partition accessible to the current user, the partition-level partitioning information, the storage parameters for the partition, and various partition statistics generated by the DBMS_STATS package.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_IND_PENDING_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20636.htm">ALL_IND_PENDING_STATS describes the pending statistics for tables, partitions, and subpartitions accessible to the current user collected using the DBMS_STATS package.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_IND_STATISTICS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20360.htm">ALL_IND_STATISTICS displays optimizer statistics for the indexes on the tables accessible to the current user collected using the DBMS_STATS package.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_IND_SUBPARTITIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20087.htm">ALL_IND_SUBPARTITIONS displays, for each index subpartition accessible to the current user, the subpartition-level partitioning information, the storage parameters for the subpartition, and various subpartition statistics generated by the DBMS_STATS package.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_INDEXES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20088.htm">ALL_INDEXES describes the indexes on the tables accessible to the current user. To gather statistics for this view and the related views DBA_INDEXES and USER_INDEXES, use the DBMS_STATS package. </DataDictionaryObject>
    <DataDictionaryObject Name="ALL_INDEXTYPE_ARRAYTYPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20361.htm">ALL_INDEXTYPE_ARRAYTYPES displays information about the array types specified by the indextypes accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_INDEXTYPE_COMMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20089.htm">ALL_INDEXTYPE_COMMENTS displays comments for the user-defined indextypes accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_INDEXTYPE_OPERATORS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20090.htm">ALL_INDEXTYPE_OPERATORS lists all operators supported by indextypes accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_INDEXTYPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20091.htm">ALL_INDEXTYPES displays information about the indextypes accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_INTERNAL_TRIGGERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20092.htm">ALL_INTERNAL_TRIGGERS describes internal triggers on tables accessible to the current user. Internal triggers are internal pieces of code executed when a particular flag is set for a table. This view does not display the OWNER_NAME column.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_JAVA_ARGUMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20093.htm">ALL_JAVA_ARGUMENTS displays argument information about the stored Java classes accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_JAVA_CLASSES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20094.htm">ALL_JAVA_CLASSES displays class level information about the stored Java classes accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_JAVA_COMPILER_OPTIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20637.htm">ALL_JAVA_COMPILER_OPTIONS displays information about the native compiler options accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_JAVA_DERIVATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20095.htm">ALL_JAVA_DERIVATIONS displays mapping information about Java source objects and their derived Java class objects and Java resource objects for the Java classes accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_JAVA_FIELDS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20096.htm">ALL_JAVA_FIELDS displays field information about the stored Java classes accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_JAVA_IMPLEMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20097.htm">ALL_JAVA_IMPLEMENTS describes interfaces implemented by the stored Java classes accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_JAVA_INNERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20098.htm">ALL_JAVA_INNERS displays information about inner classes referred to by the stored Java classes accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_JAVA_LAYOUTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20099.htm">ALL_JAVA_LAYOUTS displays class layout information about the stored Java classes accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_JAVA_METHODS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20100.htm">ALL_JAVA_METHODS displays method information about the stored Java classes accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_JAVA_NCOMPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20101.htm">ALL_JAVA_NCOMPS displays ncomp-related information about the Java classes accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_JAVA_RESOLVERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20103.htm">ALL_JAVA_RESOLVERS displays information about resolvers of the Java classes accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_JAVA_THROWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20104.htm">ALL_JAVA_THROWS displays information about exceptions thrown from methods of the Java classes accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_JOBS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20105.htm">ALL_JOBS is a synonym for USER_JOBS.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_JOIN_IND_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20107.htm">ALL_JOIN_IND_COLUMNS describes the join conditions of bitmap join indexes accessible to the current user. Bitmap join indexes are indexes built on a child table with an index key containing columns from associated parent tables, where all of the tables are connected through join conditions. There is one row for each join condition.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_JSON_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20963.htm">ALL_JSON_COLUMNS provides information on the JavaScript Object Notation (JSON) columns accessible to the current user. Each column that has an IS JSON check constraint in an AND condition and is accessible to the user appears in this view. This view enables a user to find all the JSON columns that are accessible to him or her.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_LIBRARIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20109.htm">ALL_LIBRARIES describes the libraries accessible to the current user.   </DataDictionaryObject>
    <DataDictionaryObject Name="ALL_LOB_PARTITIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20112.htm">ALL_LOB_PARTITIONS displays the LOB partitions in the tables accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_LOB_SUBPARTITIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20113.htm">ALL_LOB_SUBPARTITIONS displays partition-level attributes of the LOB data subpartitions accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_LOB_TEMPLATES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20114.htm">ALL_LOB_TEMPLATES describes the LOB subpartition templates accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_LOBS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20115.htm">ALL_LOBS displays the large objects (LOBs) contained in tables accessible to the current user. LOBs include binary large objects (BLOBs) and character large objects (CLOBs). Binary files (BFILEs) are stored outside the database, so they are not displayed by this view or the related views.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_LOG_GROUP_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20119.htm">ALL_LOG_GROUP_COLUMNS describes columns that are accessible to the current user and that are specified in log groups.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_LOG_GROUPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20120.htm">ALL_LOG_GROUPS describes the log group definitions on the tables accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_MEASURE_FOLDER_CONTENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20716.htm">ALL_MEASURE_FOLDER_CONTENTS describes the contents of the OLAP measure folders accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_MEASURE_FOLDER_SUBFOLDERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20939.htm">ALL_MEASURE_FOLDER_SUBFOLDERS describes the OLAP measure folders contained within the OLAP measure folders accessible to the user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_MEASURE_FOLDERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20689.htm">ALL_MEASURE_FOLDERS describes the OLAP measure folders accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_METADATA_PROPERTIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20943.htm">ALL_METADATA_PROPERTIES describes OLAP metadata properties in the database that are accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_METHOD_PARAMS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20129.htm">ALL_METHOD_PARAMS describes the method parameters of the object types accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_METHOD_RESULTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20130.htm">ALL_METHOD_RESULTS describes the method results of the object types accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_MINING_MODEL_ATTRIBUTES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20556.htm">ALL_MINING_MODEL_ATTRIBUTES describes the attributes of the mining models accessible to the current user. Only the attributes in the model signature are included in this view. The attributes in the model signature correspond to the columns in the training data that were used to build the model.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_MINING_MODEL_SETTINGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20557.htm">ALL_MINING_MODEL_SETTINGS describes the settings of the mining models accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_MINING_MODELS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20555.htm">ALL_MINING_MODELS describes the mining models accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_MVIEW_AGGREGATES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20131.htm">ALL_MVIEW_AGGREGATES describes the grouping functions (aggregate operations) that appear in the SELECT list of materialized aggregate views accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_MVIEW_ANALYSIS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20132.htm">ALL_MVIEW_ANALYSIS describes the materialized views accessible to the current user. It provides additional information for analysis by applications. Minimal information is displayed for materialized views that do not support query rewrite (such as materialized views with remote master tables or nondeterministic functions).</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_MVIEW_COMMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20341.htm">ALL_MVIEW_COMMENTS displays comments on the materialized views accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_MVIEW_DETAIL_PARTITION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20558.htm">ALL_MVIEW_DETAIL_PARTITION displays the freshness information of the materialized views, with respect to a PCT detail partition, accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_MVIEW_DETAIL_RELATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20133.htm">ALL_MVIEW_DETAIL_RELATIONS describes the named detail relations that are either specified in the FROM list of the subquery that defines a materialized view accessible to the current user, or that are indirectly referenced through views in that FROM list. Inline views in the materialized view definition are not represented in this view or the related views.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_MVIEW_DETAIL_SUBPARTITION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20559.htm">ALL_MVIEW_DETAIL_SUBPARTITION displays the freshness information of the materialized views, with respect to a PCT detail subpartition, accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_MVIEW_JOINS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20134.htm">ALL_MVIEW_JOINS describes joins between two columns in the WHERE clause of the subquery that defines a materialized view accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_MVIEW_KEYS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20135.htm">ALL_MVIEW_KEYS describes the columns or expressions in the SELECT list upon which materialized views accessible to the current user are based.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_MVIEW_LOGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20137.htm">ALL_MVIEW_LOGS describes all materialized view logs accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_MVIEW_REFRESH_TIMES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20138.htm">ALL_MVIEW_REFRESH_TIMES describes refresh times of the materialized views accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_MVIEWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20139.htm">ALL_MVIEWS describes all materialized views accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_NESTED_TABLE_COLS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20399.htm">ALL_NESTED_TABLE_COLS describes the columns of the nested tables accessible to the current user. To gather statistics for this view, use the DBMS_STATS package.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_NESTED_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20140.htm">ALL_NESTED_TABLES describes the nested tables in tables accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_OBJ_COLATTRS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20142.htm">ALL_OBJ_COLATTRS describes object columns and attributes contained in the tables accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_OBJECT_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20145.htm">ALL_OBJECT_TABLES describes the object tables accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_OBJECTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20146.htm">ALL_OBJECTS describes all objects accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_OBJECTS_AE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20578.htm">ALL_OBJECTS_AE describes the objects (across all editions) accessible to the current user. Dropped objects appear in this view with OBJECT_TYPE=NON-EXISTENT.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_OPANCILLARY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20147.htm">ALL_OPANCILLARY describes operators whose bindings are ancillary to other (primary) operators.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_OPARGUMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20148.htm">ALL_OPARGUMENTS describes arguments for each operator binding accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_OPBINDINGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20149.htm">ALL_OPBINDINGS describes the binding functions and methods on the operators accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_OPERATOR_COMMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20150.htm">ALL_OPERATOR_COMMENTS displays comments for the user-defined operators accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_OPERATORS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20151.htm">ALL_OPERATORS describes the operators accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_OUTLINE_HINTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20152.htm">ALL_OUTLINE_HINTS is a synonym for USER_OUTLINE_HINTS.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_OUTLINES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20153.htm">ALL_OUTLINES is a synonym for USER_OUTLINES.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_PART_COL_STATISTICS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20154.htm">ALL_PART_COL_STATISTICS displays column statistics and histogram information for the table partitions accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_PART_HISTOGRAMS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20155.htm">ALL_PART_HISTOGRAMS displays the histogram data (endpoints per histogram) for the histograms on the table partitions accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_PART_INDEXES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20156.htm">ALL_PART_INDEXES displays the object-level partitioning information for the partitioned indexes accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_PART_KEY_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20157.htm">ALL_PART_KEY_COLUMNS describes the partitioning key columns for the partitioned objects accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_PART_LOBS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20158.htm">ALL_PART_LOBS displays table-level information about the partitioned LOBs accessible to the current user, including default attributes for LOB data partitions.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_PART_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20159.htm">ALL_PART_TABLES displays the object-level partitioning information for the partitioned tables accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_PARTIAL_DROP_TABS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20160.htm">ALL_PARTIAL_DROP_TABS describes tables accessible to the current user that have partially completed DROP COLUMN operations. Such operations might have been interrupted by the user or by a system crash.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_PENDING_CONV_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20162.htm">ALL_PENDING_CONV_TABLES describes the pending conversion tables (tables which are not upgraded to the latest type version) accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_PLSQL_COLL_TYPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20933.htm">ALL_PLSQL_COLL_TYPES describes named PL/SQL collection types accessible to the user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_PLSQL_OBJECT_SETTINGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20385.htm">ALL_PLSQL_OBJECT_SETTINGS displays information about the compiler settings for the stored objects accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_PLSQL_TYPE_ATTRS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20934.htm">ALL_PLSQL_TYPE_ATTRS describes the attributes of PL/SQL types accessible to the user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_PLSQL_TYPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20935.htm">ALL_PLSQL_TYPES describes the PL/SQL types accessible to the user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_POLICIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20164.htm">ALL_POLICIES describes all Oracle Virtual Private Database (VPD) security policies for objects accessible to the current user. A security policy is a list of security requirements and rules that regulate row level access to those database objects.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_POLICY_ATTRIBUTES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20883.htm">ALL_POLICY_ATTRIBUTES lists the attribute associations {Namespaces, Attributes} of context-sensitive and shared context-sensitive Oracle Virtual Private Database (VPD) policies for objects accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_POLICY_CONTEXTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20165.htm">ALL_POLICY_CONTEXTS describes the driving contexts defined for the synonyms, tables, and views accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_POLICY_GROUPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20166.htm">ALL_POLICY_GROUPS describes the policy groups defined for the synonyms, tables, and views accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_PROCEDURES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20168.htm">ALL_PROCEDURES lists all functions and procedures that are accessible to the current user, along with associated properties. For example, ALL_PROCEDURES indicates whether or not a function is pipelined, parallel enabled or an aggregate function. If a function is pipelined or an aggregate function, the associated implementation type (if any) is also identified.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_PROPAGATION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20170.htm">ALL_PROPAGATION displays information about the Streams propagations that have a source queue accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_QUEUE_SCHEDULES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20174.htm">ALL_QUEUE_SCHEDULES describes the propagation schedules whose source queues are accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_QUEUE_SUBSCRIBERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20544.htm">ALL_QUEUE_SUBSCRIBERS displays the list of subscribers that the current user has privilege to dequeue from.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_QUEUE_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20175.htm">ALL_QUEUE_TABLES describes the queues in the queue tables accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_QUEUES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20176.htm">ALL_QUEUES describes all queues on which the current user has enqueue or dequeue privileges. If the user has any Advanced Queuing system privileges, like MANAGE ANY QUEUE, ENQUEUE ANY QUEUE or DEQUEUE ANY QUEUE, then this view describes all queues in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_REFRESH" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20178.htm">ALL_REFRESH describes all the refresh groups accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_REFRESH_DEPENDENCIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20180.htm">ALL_REFRESH_DEPENDENCIES displays the names of the dependent detail or container tables of all the materialized views in the current schema.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_REFRESH_CHILDREN" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20179.htm">ALL_REFRESH_CHILDREN describes all the objects in refresh groups that are accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_REFS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20181.htm">ALL_REFS describes the REF columns and REF attributes in object type columns accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_REGISTERED_MVIEWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20183.htm">ALL_REGISTERED_MVIEWS describes all registered materialized views (registered at a master site or a master materialized view site) accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_REGISTRY_BANNERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20187.htm">ALL_REGISTRY_BANNERS displays the valid components loaded into the database.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_REPL_DBNAME_MAPPING" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20944.htm">ALL_REPL_DBNAME_MAPPING provides details about the database name mapping in replication for the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_REWRITE_EQUIVALENCES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20344.htm">ALL_REWRITE_EQUIVALENCES describes the rewrite equivalences accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_RULE_SET_RULES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20238.htm">ALL_RULE_SET_RULES describes the rules in the rule sets accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_RULE_SETS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20239.htm">ALL_RULE_SETS describes the rule sets accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_RULES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20240.htm">ALL_RULES describes the rules accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SEC_RELEVANT_COLS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20353.htm">ALL_SEC_RELEVANT_COLS describes the security relevant columns of the security policies for the tables and views accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SECONDARY_OBJECTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20242.htm">ALL_SECONDARY_OBJECTS provides information about secondary objects associated with domain indexes accessible to the user. This view is only relevant for domain indexes. And currently, the secondary objects can only be tables.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SEQUENCES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20244.htm">ALL_SEQUENCES describes all sequences accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SERVICES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20465.htm">ALL_SERVICES displays all services in the database. The view excludes rows marked for deletion.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SCHEDULER_CREDENTIALS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20580.htm">ALL_SCHEDULER_CREDENTIALS displays information about the credentials accessible to the current user (that is, those credentials that the user has ALTER or EXECUTE privileges for).</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SCHEDULER_DB_DESTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20756.htm">ALL_SCHEDULER_DB_DESTS displays information about the destination objects accessible to the current user pointing to remote databases.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SCHEDULER_DESTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20757.htm">ALL_SCHEDULER_DESTS displays information about the destination objects for jobs accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SCHEDULER_EXTERNAL_DESTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20758.htm">ALL_SCHEDULER_EXTERNAL_DESTS displays information about the destination objects accessible to the current user pointing to remote agents.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SCHEDULER_FILE_WATCHERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20759.htm">ALL_SCHEDULER_FILE_WATCHERS displays information about the Scheduler file watch requests accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SCHEDULER_GLOBAL_ATTRIBUTE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20367.htm">ALL_SCHEDULER_GLOBAL_ATTRIBUTE displays the values of all scheduler attributes (for example, DEFAULT_TIMEZONE and CURRENT_OPEN_WINDOW).</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SCHEDULER_GROUP_MEMBERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20760.htm">ALL_SCHEDULER_GROUP_MEMBERS displays information about the members of the Scheduler object groups accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SCHEDULER_GROUPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20761.htm">ALL_SCHEDULER_GROUPS displays information about the Scheduler object groups accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SCHEDULER_CHAIN_RULES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20507.htm">ALL_SCHEDULER_CHAIN_RULES displays information about the rules for the chains accessible to the current user (that is, those chains that the user has ALTER or EXECUTE privileges for).</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SCHEDULER_CHAIN_STEPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20508.htm">ALL_SCHEDULER_CHAIN_STEPS displays information about the defined steps of the chains accessible to the current user (that is, those chains that the user has ALTER or EXECUTE privileges for).</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SCHEDULER_CHAINS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20509.htm">ALL_SCHEDULER_CHAINS displays information about the chains accessible to the current user (that is, those chains that the user has ALTER or EXECUTE privileges for).</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SCHEDULER_JOB_ARGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20346.htm">ALL_SCHEDULER_JOB_ARGS displays information about the arguments of the Scheduler jobs accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SCHEDULER_JOB_CLASSES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20345.htm">ALL_SCHEDULER_JOB_CLASSES displays information about the Scheduler job classes accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SCHEDULER_JOB_DESTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20762.htm">ALL_SCHEDULER_JOB_DESTS displays information about the state of the jobs accessible to the current user at each of their destinations.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SCHEDULER_JOB_LOG" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20347.htm">ALL_SCHEDULER_JOB_LOG displays log information for the Scheduler jobs accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SCHEDULER_JOB_RUN_DETAILS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20386.htm">ALL_SCHEDULER_JOB_RUN_DETAILS displays log run details for the Scheduler jobs accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SCHEDULER_JOBS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20348.htm">ALL_SCHEDULER_JOBS displays information about the Scheduler jobs accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SCHEDULER_NOTIFICATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20763.htm">ALL_SCHEDULER_NOTIFICATIONS displays information about the E-mail notifications for the jobs accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SCHEDULER_PROGRAM_ARGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20349.htm">ALL_SCHEDULER_PROGRAM_ARGS displays information about the arguments of the Scheduler programs accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SCHEDULER_PROGRAMS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20350.htm">ALL_SCHEDULER_PROGRAMS displays information about the Scheduler programs accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SCHEDULER_REMOTE_DATABASES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20658.htm">ALL_SCHEDULER_REMOTE_DATABASES displays information about the remote databases accessible to the current user that have been registered as sources and destinations for remote database jobs.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SCHEDULER_REMOTE_JOBSTATE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20659.htm">ALL_SCHEDULER_REMOTE_JOBSTATE displays information about the state of the jobs accessible to the current user at remote databases.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SCHEDULER_RUNNING_CHAINS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20510.htm">ALL_SCHEDULER_RUNNING_CHAINS displays information about the chain steps of the running chains accessible to the current user (that is, those chains that the user has ALTER privileges for). In the case of nested chains, this view also enables you to traverse the hierarchy of the chain with a SQL statement that contains a CONNECT BY clause linking up the JOB_SUBNAME and STEP_JOB_SUBNAME columns.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SCHEDULER_RUNNING_JOBS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20387.htm">ALL_SCHEDULER_RUNNING_JOBS displays information about the running Scheduler jobs accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SCHEDULER_SCHEDULES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20368.htm">ALL_SCHEDULER_SCHEDULES displays information about the Scheduler schedules accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SCHEDULER_WINDOW_DETAILS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20388.htm">ALL_SCHEDULER_WINDOW_DETAILS displays log details for the Scheduler windows accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SCHEDULER_WINDOW_GROUPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20369.htm">ALL_SCHEDULER_WINDOW_GROUPS displays information about the Scheduler window groups accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SCHEDULER_WINDOW_LOG" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20351.htm">ALL_SCHEDULER_WINDOW_LOG displays log information for the Scheduler windows accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SCHEDULER_WINDOWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20352.htm">ALL_SCHEDULER_WINDOWS displays information about the Scheduler windows accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SCHEDULER_WINGROUP_MEMBERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20370.htm">ALL_SCHEDULER_WINGROUP_MEMBERS displays the members of the Scheduler window groups accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SOURCE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20249.htm">ALL_SOURCE describes the text source of the stored objects accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SOURCE_AE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20694.htm">ALL_SOURCE_AE describes the text source of the stored objects (across all editions) accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SQL_TRANSLATION_PROFILES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20790.htm">ALL_SQL_TRANSLATION_PROFILES describes all SQL translation profiles accessible to the user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SQL_TRANSLATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20791.htm">ALL_SQL_TRANSLATIONS describes all SQL translations accessible to the user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SQLJ_TYPE_ATTRS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20252.htm">ALL_SQLJ_TYPE_ATTRS describes the attributes of the SQLJ object types accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SQLJ_TYPE_METHODS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20253.htm">ALL_SQLJ_TYPE_METHODS describes the methods of the SQLJ object types accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SQLJ_TYPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20254.htm">ALL_SQLJ_TYPES describes the SQLJ object types accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SQLSET" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20466.htm">ALL_SQLSET displays information about all SQL tuning sets accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SQLSET_BINDS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20467.htm">ALL_SQLSET_BINDS displays the bind values associated with all SQL tuning sets accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SQLSET_PLANS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20531.htm">ALL_SQLSET_PLANS describes captured plans for statements in the SQL tuning sets accessible to the current user. </DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SQLSET_REFERENCES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20469.htm">ALL_SQLSET_REFERENCES describes whether or not the SQL tuning sets accessible to the current user are active.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SQLSET_STATEMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20470.htm">ALL_SQLSET_STATEMENTS displays information about the SQL statements, along with their statistics, that form all SQL tuning sets accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_STAT_EXTENSIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20695.htm">ALL_STAT_EXTENSIONS displays information about the optimizer statistics extensions accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_STORED_SETTINGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20256.htm">ALL_STORED_SETTINGS provides information about the persistent parameter settings for stored PL/SQL units for which the current user has execute privileges.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_STREAMS_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20600.htm">ALL_STREAMS_COLUMNS displays information about the Streams unsupported columns accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_STREAMS_GLOBAL_RULES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20257.htm">ALL_STREAMS_GLOBAL_RULES displays information about the following types of rules:</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_STREAMS_MESSAGE_CONSUMERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20372.htm">ALL_STREAMS_MESSAGE_CONSUMERS displays information about the Streams messaging clients accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_STREAMS_MESSAGE_RULES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20373.htm">ALL_STREAMS_MESSAGE_RULES displays information about the Streams messaging rules accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_STREAMS_NEWLY_SUPPORTED" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20390.htm">ALL_STREAMS_NEWLY_SUPPORTED displays information about the tables accessible to the current user that are newly supported by Streams capture processes.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_STREAMS_RULES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20475.htm">ALL_STREAMS_RULES displays information about the rules used by the Streams processes accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_STREAMS_SCHEMA_RULES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20258.htm">ALL_STREAMS_SCHEMA_RULES displays information about the following types of rules:</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_STREAMS_TABLE_RULES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20259.htm">ALL_STREAMS_TABLE_RULES displays information about the following types of rules:</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_STREAMS_TRANSFORM_FUNCTION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20374.htm">ALL_STREAMS_TRANSFORM_FUNCTION displays information about the rule-based transformation functions accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_STREAMS_UNSUPPORTED" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20391.htm">ALL_STREAMS_UNSUPPORTED displays information about the tables accessible to the current user that are not supported by Streams in this release of the Oracle Database.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SUBPART_COL_STATISTICS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20260.htm">ALL_SUBPART_COL_STATISTICS describes column statistics and histogram information for subpartitions of partitioned objects accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SUBPART_HISTOGRAMS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20261.htm">ALL_SUBPART_HISTOGRAMS displays the actual histogram data (end-points per histogram) for histograms on table subpartitions accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SUBPART_KEY_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20262.htm">ALL_SUBPART_KEY_COLUMNS displays subpartitioning key columns for composite-partitioned tables (and local indexes on composite-partitioned tables) accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SUBPARTITION_TEMPLATES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20263.htm">ALL_SUBPARTITION_TEMPLATES describes the subpartition templates accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SUMDELTA" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20267.htm">ALL_SUMDELTA lists direct path load entries accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SYNC_CAPTURE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20572.htm">ALL_SYNC_CAPTURE displays information about the synchronous capture processes that store the captured changes in queues accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SYNC_CAPTURE_PREPARED_TABS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20573.htm">ALL_SYNC_CAPTURE_PREPARED_TABS displays information about the tables accessible to the current user that are prepared for synchronous capture instantiation.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SYNC_CAPTURE_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20574.htm">ALL_SYNC_CAPTURE_TABLES displays information about the tables accessible to the current user that are captured by synchronous Streams captures.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_SYNONYMS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20273.htm">ALL_SYNONYMS describes the synonyms accessible to the current user. The following criteria determine the list of synonyms that ALL_SYNONYMS shows:</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_TAB_COL_STATISTICS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20275.htm">ALL_TAB_COL_STATISTICS displays column statistics and histogram information extracted from "ALL_TAB_COLUMNS".</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_TAB_COLS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20276.htm">ALL_TAB_COLS describes the columns of the tables, views, and clusters accessible to the current user. To gather statistics for this view, use the DBMS_STATS package.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_TAB_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20277.htm">ALL_TAB_COLUMNS describes the columns of the tables, views, and clusters accessible to the current user. To gather statistics for this view, use the DBMS_STATS package.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_TAB_COMMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20278.htm">ALL_TAB_COMMENTS displays comments on the tables and views accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_TAB_HISTGRM_PENDING_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20638.htm">ALL_TAB_HISTGRM_PENDING_STATS describes pending statistics for tables, partitions, and subpartitions accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_TAB_HISTOGRAMS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20279.htm">ALL_TAB_HISTOGRAMS describes histograms on tables and views accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_TAB_IDENTITY_COLS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20830.htm">ALL_TAB_IDENTITY_COLS describes all table identity columns.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_TAB_MODIFICATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20280.htm">ALL_TAB_MODIFICATIONS describes tables accessible to the current user that have been modified since the last time statistics were gathered on the tables.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_TAB_PARTITIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20281.htm">ALL_TAB_PARTITIONS displays partition-level partitioning information, partition storage parameters, and partition statistics generated by the DBMS_STATS package for the partitions accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_TAB_PENDING_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20639.htm">ALL_TAB_PENDING_STATS describes pending statistics for tables, partitions, and subpartitions accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_TAB_PRIVS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20282.htm">ALL_TAB_PRIVS describes the following types of grants:</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_TAB_PRIVS_MADE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20283.htm">ALL_TAB_PRIVS_MADE describes the object grants for which the current user is the object owner or grantor.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_TAB_PRIVS_RECD" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20284.htm">ALL_TAB_PRIVS_RECD describes the following types of grants:</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_TAB_STAT_PREFS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20640.htm">ALL_TAB_STAT_PREFS displays information about statistics preferences for the tables accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_TAB_STATISTICS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20376.htm">ALL_TAB_STATISTICS displays optimizer statistics for the tables accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_TAB_STATS_HISTORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20490.htm">ALL_TAB_STATS_HISTORY provides a history of table statistics modifications for all tables accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_TAB_SUBPARTITIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20285.htm">ALL_TAB_SUBPARTITIONS displays, for each table subpartition accessible to the current user, the subpartition name, name of the table and partition to which it belongs, its storage attributes, and statistics generated by the DBMS_STATS package.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20286.htm">ALL_TABLES describes the relational tables accessible to the current user. To gather statistics for this view, use the DBMS_STATS package.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_TRANSFORMATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20291.htm">ALL_TRANSFORMATIONS displays information about all transformations accessible to the current user. These transformations can be specified with Advanced Queuing operations such as enqueue, dequeue, and subscribe to automatically integrate transformations in AQ messaging.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_TRIGGER_COLS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20292.htm">ALL_TRIGGER_COLS describes the use of columns in the triggers accessible to the current user and in triggers on tables accessible to the current user. If the user has the CREATE ANY TRIGGER privilege, then this view describes the use of columns in all triggers in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_TRIGGER_ORDERING" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20581.htm">ALL_TRIGGER_ORDERING describes the triggers accessible to the current user that have FOLLOWS or PRECEDES ordering.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_TRIGGERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20293.htm">ALL_TRIGGERS describes the triggers on tables accessible to the current user. If the user has the CREATE ANY TRIGGER privilege, then this view describes all triggers in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_TSTZ_TAB_COLS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20732.htm">ALL_TSTZ_TAB_COLS displays information about the columns of the tables accessible to the current user, which have columns defined on TIMESTAMP WITH TIME ZONE data types or object types containing attributes of TIMESTAMP WITH TIME ZONE data types.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_TSTZ_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20731.htm">ALL_TSTZ_TABLES displays information about the tables accessible to the current user, which have columns defined on TIMESTAMP WITH TIME ZONE data types or object types containing attributes of TIMESTAMP WITH TIME ZONE data types.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_TYPE_ATTRS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20295.htm">ALL_TYPE_ATTRS describes the attributes of the object types accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_TYPE_METHODS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20296.htm">ALL_TYPE_METHODS describes the methods of the object types accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_TYPE_VERSIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20297.htm">ALL_TYPE_VERSIONS describes the versions of the object types accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_TYPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20298.htm">ALL_TYPES describes the object types accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_UNUSED_COL_TABS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20300.htm">ALL_UNUSED_COL_TABS describes the tables accessible to the current user that contain unused columns.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_UPDATABLE_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20301.htm">ALL_UPDATABLE_COLUMNS describes all columns in a join view that are updatable by the current user, subject to appropriate privileges.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_USERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20302.htm">ALL_USERS lists all users of the database visible to the current user. This view does not describe the users (see the related views).</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_USTATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20303.htm">ALL_USTATS describes the user-defined statistics collected on the tables and indexes accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_VARRAYS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20304.htm">ALL_VARRAYS describes the varrays accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_VIEWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20305.htm">ALL_VIEWS describes the views accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_VIEWS_AE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20696.htm">ALL_VIEWS_AE describes the views (across all editions) accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_WARNING_SETTINGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20380.htm">ALL_WARNING_SETTINGS displays information about the warning parameter settings for the objects accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_XML_INDEXES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20700.htm">ALL_XML_INDEXES describes the XML indexes accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_XML_NESTED_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20845.htm">ALL_XML_NESTED_TABLES describes all the tables and their corresponding nested tables accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_XML_OUT_OF_LINE_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20846.htm">ALL_XML_OUT_OF_LINE_TABLES descibes all the out of line tables connected to a given root table for the same schema accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_XML_SCHEMA_ATTRIBUTES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20847.htm">ALL_XML_SCHEMA_ATTRIBUTES describes all the attributes and their properties accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_XML_SCHEMA_COMPLEX_TYPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20848.htm">ALL_XML_SCHEMA_COMPLEX_TYPES describes all complex types accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_XML_SCHEMA_ELEMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20849.htm">ALL_XML_SCHEMA_ELEMENTS describes all the elements and their properties accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_XML_SCHEMA_NAMESPACES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20850.htm">ALL_XML_SCHEMA_NAMESPACES describes all the available namespaces accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_XML_SCHEMA_SIMPLE_TYPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20851.htm">ALL_XML_SCHEMA_SIMPLE_TYPES describes all simple types accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_XML_SCHEMA_SUBSTGRP_HEAD" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20852.htm">ALL_XML_SCHEMA_SUBSTGRP_HEAD describes the heads of substitution groups accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_XML_SCHEMA_SUBSTGRP_MBRS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20853.htm">ALL_XML_SCHEMA_SUBSTGRP_MBRS describes all members of substitution groups accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_XML_SCHEMAS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20307.htm">ALL_XML_SCHEMAS describes the registered XML schemas accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_XML_TAB_COLS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20308.htm">ALL_XML_TAB_COLS describes the columns of the XML tables accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_XML_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20309.htm">ALL_XML_TABLES describes the XML tables accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_XML_VIEW_COLS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20310.htm">ALL_XML_VIEW_COLS describes the columns of the XML views accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_XML_VIEWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20311.htm">ALL_XML_VIEWS describes the XML views accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_XSTREAM_ADMINISTRATOR" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20784.htm">ALL_XSTREAM_ADMINISTRATOR displays information about the current users's granted privileges to be an XStream administrator by procedures in the DBMS_XSTREAM_AUTH package.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_XSTREAM_INBOUND" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20734.htm">ALL_XSTREAM_INBOUND displays information about the XStream inbound servers accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_XSTREAM_INBOUND_PROGRESS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20770.htm">ALL_XSTREAM_INBOUND_PROGRESS displays information about the progress made by the XStream inbound servers accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_XSTREAM_OUT_SUPPORT_MODE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20785.htm">ALL_XSTREAM_OUT_SUPPORT_MODE displays information about the level of XStream capture process support for the tables accessible to the current user in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_XSTREAM_OUTBOUND" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20735.htm">ALL_XSTREAM_OUTBOUND displays information about the XStream outbound servers accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_XSTREAM_OUTBOUND_PROGRESS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20736.htm">ALL_XSTREAM_OUTBOUND_PROGRESS displays information about the progress made by the XStream outbound servers accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_XSTREAM_RULES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20737.htm">ALL_XSTREAM_RULES displays information about the XStream rules accessible to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_XSTREAM_TRANSFORMATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20905.htm">ALL_XSTREAM_TRANSFORMATIONS displays information about all XStream transformations accessible to the current user, in order of execution.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_ZONEMAP_MEASURES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20859.htm">ALL_ZONEMAP_MEASURES describes the measures for all zone maps accessible to the user.</DataDictionaryObject>
    <DataDictionaryObject Name="ALL_ZONEMAPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn20860.htm">ALL_ZONEMAPS describes all the zone maps accessible to the user.</DataDictionaryObject>
    <DataDictionaryObject Name="AQ_TM_PROCESSES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10002.htm" />
    <DataDictionaryObject Name="ARCHIVE_LAG_TARGET" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10003.htm" />
    <DataDictionaryObject Name="ASM_DISKGROUPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10247.htm" />
    <DataDictionaryObject Name="ASM_DISKSTRING" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10248.htm" />
    <DataDictionaryObject Name="ASM_POWER_LIMIT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10246.htm" />
    <DataDictionaryObject Name="ASM_PREFERRED_READ_FAILURE_GROUPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10279.htm" />
    <DataDictionaryObject Name="AUDIT_ACTIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29501.htm">AUDIT_ACTIONS describes audit trail action type codes. This table can be used to map action type numbers to action type names.</DataDictionaryObject>
    <DataDictionaryObject Name="AUDIT_FILE_DEST" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10004.htm" />
    <DataDictionaryObject Name="AUDIT_SYS_OPERATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10005.htm" />
    <DataDictionaryObject Name="AUDIT_SYSLOG_LEVEL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10263.htm" />
    <DataDictionaryObject Name="AUDIT_TRAIL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10006.htm" />
    <DataDictionaryObject Name="AUDIT_UNIFIED_CONTEXTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29159.htm">AUDIT_UNIFIED_CONTEXTS describes the application context's attributes, which are configured to be captured in the audit trail.</DataDictionaryObject>
    <DataDictionaryObject Name="AUDIT_UNIFIED_ENABLED_POLICIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29158.htm">AUDIT_UNIFIED_ENABLED_POLICIES describes all the audit policies that are enabled in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="AUDIT_UNIFIED_POLICIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29157.htm">AUDIT_UNIFIED_POLICIES describes all audit policies created in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="AUDIT_UNIFIED_POLICY_COMMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29163.htm">AUDIT_UNIFIED_POLICY_COMMENTS shows the description of each unified audit policy, if a description was entered for the unified audit policy using the COMMENT SQL statement.</DataDictionaryObject>
    <DataDictionaryObject Name="AUDITABLE_SYSTEM_ACTIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29160.htm">AUDITABLE_SYSTEM_ACTIONS maps the auditable system action numbers to the action names. These actions are configurable for audit when unified auditing is enabled.</DataDictionaryObject>
    <DataDictionaryObject Name="AWR_SNAPSHOT_TIME_OFFSET" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10325.htm" />
    <DataDictionaryObject Name="BACKGROUND_CORE_DUMP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10007.htm" />
    <DataDictionaryObject Name="BACKGROUND_DUMP_DEST" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10008.htm" />
    <DataDictionaryObject Name="BACKUP_TAPE_IO_SLAVES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10009.htm" />
    <DataDictionaryObject Name="BITMAP_MERGE_AREA_SIZE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10010.htm" />
    <DataDictionaryObject Name="BLANK_TRIMMING" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10011.htm" />
    <DataDictionaryObject Name="CAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29001.htm">CAT is a synonym for USER_CATALOG.</DataDictionaryObject>
    <DataDictionaryObject Name="CATALOG" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29007.htm">CATALOG is included for compatibility. Oracle recommends that you not use this view.</DataDictionaryObject>
    <DataDictionaryObject Name="CIRCUITS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10014.htm" />
    <DataDictionaryObject Name="CLIENT_RESULT_CACHE_LAG" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10286.htm" />
    <DataDictionaryObject Name="CLIENT_RESULT_CACHE_SIZE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10287.htm" />
    <DataDictionaryObject Name="CLIENT_RESULT_CACHE_STATS$" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29085.htm">CLIENT_RESULT_CACHE_STATS$ displays various Client Result Cache settings and usage statistics. Statistics are stored as name, value pairs. For each client cache ID, there will be multiple rows for each statistic.</DataDictionaryObject>
    <DataDictionaryObject Name="CLONEDB" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10330.htm" />
    <DataDictionaryObject Name="CLU" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29015.htm">CLU is a synonym for USER_CLUSTERS.</DataDictionaryObject>
    <DataDictionaryObject Name="CLUSTER_DATABASE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10015.htm" />
    <DataDictionaryObject Name="CLUSTER_DATABASE_INSTANCES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10016.htm" />
    <DataDictionaryObject Name="CLUSTER_INTERCONNECTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10017.htm" />
    <DataDictionaryObject Name="COL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29008.htm">COL is included for compatibility. Oracle recommends that you not use this view.</DataDictionaryObject>
    <DataDictionaryObject Name="COLS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29016.htm">COLS is a synonym for USER_TAB_COLUMNS.</DataDictionaryObject>
    <DataDictionaryObject Name="COMMIT_LOGGING" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10265.htm" />
    <DataDictionaryObject Name="COMMIT_POINT_STRENGTH" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10018.htm" />
    <DataDictionaryObject Name="COMMIT_WAIT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10266.htm" />
    <DataDictionaryObject Name="COMMIT_WRITE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10260.htm" />
    <DataDictionaryObject Name="COMMON_USER_PREFIX" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10354.htm" />
    <DataDictionaryObject Name="COMPATIBLE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10019.htm" />
    <DataDictionaryObject Name="CONNECTION_BROKERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10333.htm" />
    <DataDictionaryObject Name="CONTROL_FILE_RECORD_KEEP_TIME" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10020.htm" />
    <DataDictionaryObject Name="CONTROL_FILES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10021.htm" />
    <DataDictionaryObject Name="CONTROL_MANAGEMENT_PACK_ACCESS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10296.htm" />
    <DataDictionaryObject Name="CORE_DUMP_DEST" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10022.htm" />
    <DataDictionaryObject Name="CPU_COUNT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10023.htm" />
    <DataDictionaryObject Name="CREATE_BITMAP_AREA_SIZE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10024.htm" />
    <DataDictionaryObject Name="CREATE_STORED_OUTLINES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10232.htm" />
    <DataDictionaryObject Name="CURSOR_BIND_CAPTURE_DESTINATION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10318.htm" />
    <DataDictionaryObject Name="CURSOR_SHARING" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10025.htm" />
    <DataDictionaryObject Name="CURSOR_SPACE_FOR_TIME" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10026.htm" />
    <DataDictionaryObject Name="DATABASE_EXPORT_OBJECTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29112.htm">DATABASE_EXPORT_OBJECTS lists simple path names for some of the object types belonging to a full Data Pump export, which is invoked using the FULL=Y parameter on the expdp command. Users of the Data Pump Export and Import utilities can query this view to determine valid values for the EXCLUDE and INCLUDE parameters.</DataDictionaryObject>
    <DataDictionaryObject Name="DATABASE_PROPERTIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29012.htm">DATABASE_PROPERTIES lists permanent database properties.</DataDictionaryObject>
    <DataDictionaryObject Name="DB_BIG_TABLE_CACHE_PERCENT_TARGET" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10340.htm" />
    <DataDictionaryObject Name="DB_BLOCK_BUFFERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10028.htm" />
    <DataDictionaryObject Name="DB_BLOCK_CHECKING" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10029.htm" />
    <DataDictionaryObject Name="DB_BLOCK_CHECKSUM" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10030.htm" />
    <DataDictionaryObject Name="DB_BLOCK_SIZE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10031.htm" />
    <DataDictionaryObject Name="DB_CACHE_ADVICE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10032.htm" />
    <DataDictionaryObject Name="DB_CACHE_SIZE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10033.htm" />
    <DataDictionaryObject Name="DB_CREATE_FILE_DEST" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10034.htm" />
    <DataDictionaryObject Name="DB_CREATE_ONLINE_LOG_DEST_n" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10035.htm" />
    <DataDictionaryObject Name="DB_DOMAIN" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10036.htm" />
    <DataDictionaryObject Name="DB_FILE_MULTIBLOCK_READ_COUNT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10037.htm" />
    <DataDictionaryObject Name="DB_FILE_NAME_CONVERT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10038.htm" />
    <DataDictionaryObject Name="DB_FILES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10039.htm" />
    <DataDictionaryObject Name="DB_FLASH_CACHE_FILE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10315.htm" />
    <DataDictionaryObject Name="DB_FLASH_CACHE_SIZE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10316.htm" />
    <DataDictionaryObject Name="DB_FLASHBACK_RETENTION_TARGET" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10233.htm" />
    <DataDictionaryObject Name="DB_INDEX_COMPRESSION_INHERITANCE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10336.htm" />
    <DataDictionaryObject Name="DB_KEEP_CACHE_SIZE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10040.htm" />
    <DataDictionaryObject Name="DB_LOST_WRITE_PROTECT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10268.htm" />
    <DataDictionaryObject Name="DB_NAME" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10041.htm" />
    <DataDictionaryObject Name="DB_nK_CACHE_SIZE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10027.htm" />
    <DataDictionaryObject Name="DB_RECOVERY_FILE_DEST" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10234.htm" />
    <DataDictionaryObject Name="DB_RECOVERY_FILE_DEST_SIZE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10235.htm" />
    <DataDictionaryObject Name="DB_RECYCLE_CACHE_SIZE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10042.htm" />
    <DataDictionaryObject Name="DB_SECUREFILE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10290.htm" />
    <DataDictionaryObject Name="DB_ULTRA_SAFE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10295.htm" />
    <DataDictionaryObject Name="DB_UNIQUE_NAME" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10242.htm" />
    <DataDictionaryObject Name="DB_UNRECOVERABLE_SCN_TRACKING" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10319.htm" />
    <DataDictionaryObject Name="DB_WRITER_PROCESSES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10043.htm" />
    <DataDictionaryObject Name="DBA_2PC_NEIGHBORS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23001.htm">DBA_2PC_NEIGHBORS describes incoming and outgoing connections for pending transactions.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_2PC_PENDING" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23002.htm">DBA_2PC_PENDING describes distributed transactions awaiting recovery.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ACL_NAME_MAP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23936.htm">DBA_ACL_NAME_MAP maps new names of the access control lists for PL/SQL network utility packages from old XDB names.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADDM_FDG_BREAKDOWN" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23617.htm">DBA_ADDM_FDG_BREAKDOWN describes the contribution for each finding from the different instances. There is one row for each finding and for each instance participating in the analysis. Rows are omitted if the impact from that instance is not sufficient to register a finding in a local ADDM analysis.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADDM_FINDINGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23618.htm">DBA_ADDM_FINDINGS displays the ADDM findings discovered by all advisors in the database. Each row for ADDM tasks in the related DBA_ADVISOR_FINDINGS view has a corresponding row in this view.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADDM_INSTANCES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23619.htm">DBA_ADDM_INSTANCES displays instance-level information for ADDM tasks that finished executing. For each instance that was supposed to be analyzed (whether it was or not) there is one row describing information about it.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADDM_SYSTEM_DIRECTIVES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23706.htm">02/03/09. Added per bug 6374236; info from Uri Shaft. </DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADDM_TASK_DIRECTIVES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23707.htm">DBA_ADDM_TASK_DIRECTIVES displays information about all ADDM task directives in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADDM_TASKS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23620.htm">DBA_ADDM_TASKS displays information about all ADDM tasks in the database. The view contains one row for each row in the related DBA_ADVISOR_TASKS view that has ADVISOR_NAME=ADDM and STATUS=COMPLETED.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADVISOR_ACTIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23312.htm">DBA_ADVISOR_ACTIONS displays information about the actions associated with all recommendations in the database. Each action is specified by the COMMAND and ATTR1 through ATTR6 columns. Each command defines how the attribute columns will be used.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADVISOR_COMMANDS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23313.htm">DBA_ADVISOR_COMMANDS displays information about the commands used by all advisors in the database for specifying recommendation actions. In addition to the set of commands in the COMMAND column of V$SESSION, the following additional commands are defined:</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADVISOR_DEF_PARAMETERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23314.htm">DBA_ADVISOR_DEF_PARAMETERS displays all default task parameters and their current values in the database. When a task or object is created, the parameters and their values are copied into the private parameter table.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADVISOR_DEFINITIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23315.htm">DBA_ADVISOR_DEFINITIONS displays the properties of all advisors in the database. The view contains one row for each task, representing the current state of the task as well as execution-specific data such as progress monitoring and completion status.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADVISOR_DIR_DEFINITIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23602.htm">DBA_ADVISOR_DIR_DEFINITIONS provides a definition of the base directive.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADVISOR_DIR_INSTANCES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23603.htm">DBA_ADVISOR_DIR_INSTANCES provides information about all global instances for a directive.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADVISOR_DIR_TASK_INST" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23604.htm">DBA_ADVISOR_DIR_TASK_INST provides information about all task directive instances.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADVISOR_EXEC_PARAMETERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23568.htm">DBA_ADVISOR_EXEC_PARAMETERS displays the parameter values used for past executions of tasks. It is more useful for advisors supporting multiple executions, such as SQL Performance Analyzer, where a parameter can have different values for different executions.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADVISOR_EXECUTION_TYPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23567.htm">DBA_ADVISOR_EXECUTION_TYPES displays possible execution action for a given advisor. Only advisors that support multiple executions of their tasks have entries in this view.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADVISOR_EXECUTIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23566.htm">DBA_ADVISOR_EXECUTIONS displays metadata information for task executions. For example, the SQL Performance Analyzer creates a minimum of three executions to perform a change impact analysis on a SQL workload. The first one collects performance data for the version of the workload before the change, the second one collects data for the version of the workload after the change, and the third one performs impact analysis. All of these executions belong to the same task and are grouped into this view. Similarly, the automatic SQL tuning task, SYS_AUTO_SQL_TUNING_TASK, creates a new execution for each tuning run.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADVISOR_FDG_BREAKDOWN" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23621.htm">DBA_ADVISOR_FDG_BREAKDOWN describes the contribution from the different instances to the findings for each ADDM task. This view is populated only with ADDM tasks that are analyzing multiple instances (that is, the ACTUAL_ANALYSIS column in the task's row in DBA_ADDM_TASKS is set to DATABASE or PARTIAL).</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADVISOR_FINDING_NAMES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23565.htm">DBA_ADVISOR_FINDING_NAMES provides a list of all finding names registered with the Advisor Framework.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADVISOR_FINDINGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23317.htm">DBA_ADVISOR_FINDINGS displays the findings discovered by all advisors in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADVISOR_JOURNAL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23318.htm">DBA_ADVISOR_JOURNAL displays the journal entries for all tasks in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADVISOR_LOG" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23319.htm">DBA_ADVISOR_LOG displays information about the current state of all tasks in the database, as well as execution-specific data such as progress monitoring and completion status. The view contains one row for each task.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADVISOR_OBJECT_TYPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23354.htm">DBA_ADVISOR_OBJECT_TYPES displays information about the object types used by all advisors in the database. In addition to the regular database object types (such as TABLE and INDEX), the following types are defined:</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADVISOR_OBJECTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23320.htm">DBA_ADVISOR_OBJECTS displays information about the objects currently referenced by all advisors in the database. Each row in the view pertains to an object instantiation.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADVISOR_PARAMETERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23321.htm">DBA_ADVISOR_PARAMETERS displays all task parameters and their current values in the database. This data is accessible by all tasks.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADVISOR_RATIONALE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23322.htm">DBA_ADVISOR_RATIONALE displays information about the rationales for all recommendations in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADVISOR_RECOMMENDATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23323.htm">DBA_ADVISOR_RECOMMENDATIONS displays the results of an analysis of all recommendations in the database. A recommendation can have multiple actions associated with it. Actions are described in the DBA_ADVISOR_ACTIONS view. A recommendation also points to a set of rationales that present a justification/reasoning for that recommendation. These rationales are in the DBA_ADVISOR_RATIONALE view.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADVISOR_SQLA_REC_SUM" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23324.htm">DBA_ADVISOR_SQLA_REC_SUM displays recommendation rollup information for all workload objects in the database after an Access Advisor analysis operation.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADVISOR_SQLA_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23623.htm">DBA_ADVISOR_SQLA_TABLES displays cross references between the workload statements and the tables referenced in the statement.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADVISOR_SQLA_WK_MAP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23325.htm">DBA_ADVISOR_SQLA_WK_MAP displays the workload references for all tasks in the database. Workload references are necessary to allow the SQL Access Advisor to find required workload data.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADVISOR_SQLA_WK_STMTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23326.htm">DBA_ADVISOR_SQLA_WK_STMTS displays information about all workload objects in the database after an Access Advisor analysis operation.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADVISOR_SQLPLANS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23660.htm">DBA_ADVISOR_SQLPLANS displays the different SQL execution plans generated as part of an advisor analysis.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADVISOR_SQLSTATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23661.htm">DBA_ADVISOR_SQLSTATS displays execution statistics for the test-execution of different SQL plans during the advisor analysis.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADVISOR_SQLW_JOURNAL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23382.htm">DBA_ADVISOR_SQLW_JOURNAL displays the journal entries for all workload objects in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADVISOR_SQLW_PARAMETERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23383.htm">DBA_ADVISOR_SQLW_PARAMETERS displays all workload parameters and their current values in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADVISOR_SQLW_STMTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23327.htm">DBA_ADVISOR_SQLW_STMTS displays rows that correspond to all statements in the workload. All columns are guaranteed to be non-null.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADVISOR_SQLW_SUM" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23328.htm">DBA_ADVISOR_SQLW_SUM displays an aggregated picture of all SQLWkld workload objects in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADVISOR_SQLW_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23329.htm">DBA_ADVISOR_SQLW_TABLES displays cross references between the workload statements and the tables referenced in the statement.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADVISOR_SQLW_TEMPLATES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23355.htm">DBA_ADVISOR_SQLW_TEMPLATES displays an aggregated picture of all SQLWkld template objects in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADVISOR_TASKS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23330.htm">DBA_ADVISOR_TASKS displays information about all tasks in the database. The view contains one row for each task. Each task has a name that is unique to the owner. Task names are just informational and no uniqueness is enforced within any other namespace.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADVISOR_TEMPLATES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23356.htm">DBA_ADVISOR_TEMPLATES displays information about all templates in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ADVISOR_USAGE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23331.htm">DBA_ADVISOR_USAGE displays the usage information for each type of advisor in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ALERT_HISTORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23392.htm">DBA_ALERT_HISTORY describes a time-limited history of alerts which are no longer outstanding.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ALERT_HISTORY_DETAIL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23861.htm">DBA_ALERT_HISTORY_DETAIL describes a time-limited history of cleared and outstanding alerts.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ALL_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23003.htm">DBA_ALL_TABLES describes all object tables and relational tables in the database. Its columns are the same as those in ALL_ALL_TABLES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_APPLICATION_ROLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23004.htm">DBA_APPLICATION_ROLES describes all the roles that have authentication policy functions defined.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_APPLY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23005.htm">DBA_APPLY displays information about all apply processes in the database. Its columns are the same as those in ALL_APPLY.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_APPLY_CONFLICT_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23006.htm">DBA_APPLY_CONFLICT_COLUMNS displays information about the conflict handlers on all tables in the database. Its columns are the same as those in ALL_APPLY_CONFLICT_COLUMNS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_APPLY_DML_HANDLERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23007.htm">DBA_APPLY_DML_HANDLERS displays information about the DML handlers on all tables in the database. Its columns are the same as those in ALL_APPLY_DML_HANDLERS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_APPLY_ENQUEUE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23332.htm">DBA_APPLY_ENQUEUE displays information about the apply enqueue actions for all rules in the database. Its columns are the same as those in ALL_APPLY_ENQUEUE.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_APPLY_ERROR" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23008.htm">DBA_APPLY_ERROR displays information about the error transactions generated by all apply processes in the database. Its columns are the same as those in ALL_APPLY_ERROR.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_APPLY_ERROR_MESSAGES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23783.htm">DBA_APPLY_ERROR_MESSAGES displays information about the individual messages in all of the error transactions generated by all apply processes in the database. Its columns are the same as those in ALL_APPLY_ERROR_MESSAGES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_APPLY_EXECUTE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23333.htm">DBA_APPLY_EXECUTE displays information about the apply execute actions for all rules in the database. Its columns are the same as those in ALL_APPLY_EXECUTE.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_APPLY_CHANGE_HANDLERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23752.htm">DBA_APPLY_CHANGE_HANDLERS displays information about the change handlers on all tables in the database. Its columns are the same as those in ALL_APPLY_CHANGE_HANDLERS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_APPLY_INSTANTIATED_GLOBAL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23334.htm">DBA_APPLY_INSTANTIATED_GLOBAL displays information about databases for which an instantiation SCN has been set. Its columns are the same as those in ALL_APPLY_INSTANTIATED_GLOBAL.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_APPLY_INSTANTIATED_OBJECTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23009.htm">DBA_APPLY_INSTANTIATED_OBJECTS displays information about objects for which an instantiation SCN has been set. Its columns are the same as those in ALL_APPLY_INSTANTIATED_OBJECTS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_APPLY_INSTANTIATED_SCHEMAS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23335.htm">DBA_APPLY_INSTANTIATED_SCHEMAS displays information about schemas for which an instantiation SCN has been set. Its columns are the same as those in ALL_APPLY_INSTANTIATED_SCHEMAS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_APPLY_KEY_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23010.htm">DBA_APPLY_KEY_COLUMNS displays information about the substitute key columns for all tables in the database. Its columns are the same as those in ALL_APPLY_KEY_COLUMNS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_APPLY_OBJECT_DEPENDENCIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23497.htm">DBA_APPLY_OBJECT_DEPENDENCIES displays information about the object dependencies for all apply processes in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_APPLY_PARAMETERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23011.htm">DBA_APPLY_PARAMETERS displays information about the parameters for all apply processes in the database. Its columns are the same as those in ALL_APPLY_PARAMETERS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_APPLY_PROGRESS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23012.htm">DBA_APPLY_PROGRESS displays information about the progress made by all apply processes in the database. Its columns are the same as those in ALL_APPLY_PROGRESS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_APPLY_SPILL_TXN" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23543.htm">DBA_APPLY_SPILL_TXN displays information about the transactions spilled from memory to hard disk by all apply processes in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_APPLY_TABLE_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23398.htm">DBA_APPLY_TABLE_COLUMNS displays, for all tables in the database, information about the nonkey table columns for which Oracle Streams apply processes do not detect conflicts for updates and deletes. Its columns are the same as those in ALL_APPLY_TABLE_COLUMNS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_APPLY_VALUE_DEPENDENCIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23498.htm">DBA_APPLY_VALUE_DEPENDENCIES displays information about the value dependencies for all apply processes in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_AQ_AGENT_PRIVS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23013.htm">DBA_AQ_AGENT_PRIVS displays information about the registered AQ agents that are mapped to all users in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_AQ_AGENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23014.htm">DBA_AQ_AGENTS displays information about all registered AQ agents in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ARGUMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23015.htm">DBA_ARGUMENTS lists the arguments of the functions and procedures that are available in the database. Its columns are the same as those in ALL_ARGUMENTS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ASSEMBLIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23564.htm">DBA_ASSEMBLIES provides information about all assemblies in the database. Its columns are the same as those in ALL_ASSEMBLIES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ASSOCIATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23016.htm">DBA_ASSOCIATIONS describes all user-defined statistics in the database. Its columns are the same as those in ALL_ASSOCIATIONS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ATTRIBUTE_TRANSFORMATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23017.htm">DBA_ATTRIBUTE_TRANSFORMATIONS displays information about the transformation functions for all transformations in the database. Its columns are the same as those in ALL_ATTRIBUTE_TRANSFORMATIONS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_AUDIT_EXISTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23018.htm">DBA_AUDIT_EXISTS displays audit trail entries produced by AUDIT EXISTS and AUDIT NOT EXISTS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_AUDIT_MGMT_CLEAN_EVENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23728.htm">DBA_AUDIT_MGMT_CLEAN_EVENTS displays information about the history of audit trail cleanup or purge events. Periodically, you should delete the contents of this view so that it will not grow too large.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_AUDIT_MGMT_CLEANUP_JOBS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23727.htm">DBA_AUDIT_MGMT_CLEANUP_JOBS displays information about the configured audit trail purge jobs.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_AUDIT_MGMT_CONFIG_PARAMS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23729.htm">DBA_AUDIT_MGMT_CONFIG_PARAMS displays information about the currently configured audit trail properties that are used by the DBMS_AUDIT_MGMT PL/SQL package.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_AUDIT_MGMT_LAST_ARCH_TS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23730.htm">DBA_AUDIT_MGMT_LAST_ARCH_TS displays information about the last archive timestamps set for audit trail cleanup or purges.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_AUDIT_OBJECT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23019.htm">DBA_AUDIT_OBJECT displays audit trail records for all objects in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_AUDIT_POLICIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23020.htm">DBA_AUDIT_POLICIES describes all fine-grained auditing policies in the database. Its columns are the same as those in ALL_AUDIT_POLICIES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_AUDIT_POLICY_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23336.htm">DBA_AUDIT_POLICY_COLUMNS describes all fine-grained auditing policy columns in the database. Its columns are the same as those in ALL_AUDIT_POLICY_COLUMNS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_AUDIT_SESSION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23021.htm">DBA_AUDIT_SESSION displays all audit trail records concerning CONNECT and DISCONNECT.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_AUDIT_STATEMENT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23022.htm">DBA_AUDIT_STATEMENT displays audit trail records for all GRANT, REVOKE, AUDIT, NOAUDIT, and ALTER SYSTEM statements in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_AUDIT_TRAIL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23023.htm">DBA_AUDIT_TRAIL displays all standard audit trail entries.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_AUTO_SEGADV_CTL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23518.htm">DBA_AUTO_SEGADV_CTL exposes the control information used by the segment advisor. This information gives the DBA an idea of what is happening in the auto advisor.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_AUTO_SEGADV_SUMMARY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23519.htm">DBA_AUTO_SEGADV_SUMMARY provides a summary of the auto advisor task runs.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_AUTOTASK_CLIENT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23591.htm">DBA_AUTOTASK_CLIENT displays statistical data for each automated maintenance task over 7-day and 30-day periods.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_AUTOTASK_CLIENT_HISTORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23592.htm">DBA_AUTOTASK_CLIENT_HISTORY displays per-window history of job execution counts for each automated maintenance task. This information is viewable in the Job History page of Enterprise Manager.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_AUTOTASK_CLIENT_JOB" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23593.htm">DBA_AUTOTASK_CLIENT_JOB displays information about currently running Scheduler jobs created for automated maintenance tasks. It provides information about some objects targeted by those jobs, as well as some additional statistics from previous instantiations of the same task. Some of this additional data is taken from generic Scheduler views.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_AUTOTASK_JOB_HISTORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23379.htm">DBA_AUTOTASK_JOB_HISTORY displays the history of automated maintenance task job runs. Jobs are added to this view after they finish executing.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_AUTOTASK_OPERATION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23594.htm">DBA_AUTOTASK_OPERATION displays all automated maintenance task operations for each client.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_AUTOTASK_SCHEDULE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23595.htm">DBA_AUTOTASK_SCHEDULE displays the schedule of maintenance windows for the next 32 days for each client.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_AUTOTASK_STATUS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23876.htm">DBA_AUTOTASK_STATUS displays status information for automated maintenance.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_AUTOTASK_TASK" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23596.htm">DBA_AUTOTASK_TASK displays information about current and past automated maintenance tasks.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_AUTOTASK_WINDOW_CLIENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23597.htm">DBA_AUTOTASK_WINDOW_CLIENTS displays the windows that belong to MAINTENANCE_WINDOW_GROUP, along with the Enabled or Disabled status for the window for each maintenance task. Primarily used by Enterprise Manager.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_AUTOTASK_WINDOW_HISTORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23598.htm">DBA_AUTOTASK_WINDOW_HISTORY displays historical information for automated maintenance task windows.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_AW_PS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23024.htm">DBA_AW_PS describes the page spaces in all analytic workspaces in the database. Its columns are the same as those in ALL_AW_PS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_AWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23025.htm">DBA_AWS describes all analytic workspaces in the database. Its columns are the same as those in ALL_AWS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_BASE_TABLE_MVIEWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23026.htm">DBA_BASE_TABLE_MVIEWS describes all materialized views using materialized view logs in the database. Its columns are the same as those in ALL_BASE_TABLE_MVIEWS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_BLOCKERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23027.htm">DBA_BLOCKERS displays a session if it is not waiting for a locked object but is holding a lock on an object for which another session is waiting. In an Oracle RAC environment, this only applies if the blocker is on the same instance.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CAPTURE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23031.htm">DBA_CAPTURE displays information about all capture processes in the database. Its columns are the same as those in ALL_CAPTURE.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CAPTURE_EXTRA_ATTRIBUTES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23337.htm">DBA_CAPTURE_EXTRA_ATTRIBUTES displays information about the extra attributes for all capture processes in the database. Its columns are the same as those in ALL_CAPTURE_EXTRA_ATTRIBUTES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CAPTURE_PARAMETERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23032.htm">DBA_CAPTURE_PARAMETERS displays information about the parameters for all capture processes in the database. Its columns are the same as those in ALL_CAPTURE_PARAMETERS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CAPTURE_PREPARED_DATABASE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23033.htm">DBA_CAPTURE_PREPARED_DATABASE displays information about when the local database was prepared for instantiation. Its columns are the same as those in ALL_CAPTURE_PREPARED_DATABASE.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CAPTURE_PREPARED_SCHEMAS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23034.htm">DBA_CAPTURE_PREPARED_SCHEMAS displays information about all schemas prepared for instantiation at the local database. Its columns are the same as those in ALL_CAPTURE_PREPARED_SCHEMAS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CAPTURE_PREPARED_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23035.htm">DBA_CAPTURE_PREPARED_TABLES displays information about all tables prepared for instantiation at the local database. Its columns are the same as those in ALL_CAPTURE_PREPARED_TABLES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CATALOG" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23036.htm">DBA_CATALOG lists all tables, views, clusters, synonyms, and sequences in the database. Its columns are the same as those in "ALL_CATALOG".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CDB_RSRC_PLAN_DIRECTIVES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23808.htm">DBA_CDB_RSRC_PLAN_DIRECTIVES provides information about all the CDB resource plan directives.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CDB_RSRC_PLANS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23809.htm">DBA_CDB_RSRC_PLANS provides information about all the CDB resource plans.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CLU_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23037.htm">DBA_CLU_COLUMNS maps all table columns to related cluster columns.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CLUSTER_HASH_EXPRESSIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23038.htm">DBA_CLUSTER_HASH_EXPRESSIONS lists hash functions for all hash clusters in the database. Its columns are the same as those in "ALL_CLUSTER_HASH_EXPRESSIONS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CLUSTERING_DIMENSIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23827.htm">DBA_CLUSTERING_DIMENSIONS describes dimension tables associated with all tables with an attribute clustering clause in the database. Its columns are the same as those in ALL_CLUSTERING_DIMENSIONS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CLUSTERING_JOINS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23828.htm">DBA_CLUSTERING_JOINS describes joins to the dimension tables associated with all tables with an attribute clustering clause in the database. Its columns are the same as those in ALL_CLUSTERING_JOINS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CLUSTERING_KEYS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23826.htm">DBA_CLUSTERING_KEYS describes clustering keys for all tables with an attribute clustering clause. Its columns are the same as those in ALL_CLUSTERING_KEYS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CLUSTERING_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23825.htm">DBA_CLUSTERING_TABLES describes all the tables with an attribute clustering clause. Its columns are the same as those in ALL_CLUSTERING_TABLES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CLUSTERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23039.htm">DBA_CLUSTERS describes all clusters in the database. Its columns are the same as those in "ALL_CLUSTERS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CODE_ROLE_PRIVS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23824.htm">DBA_CODE_ROLE_PRIVS describes all the roles that are associated with program units in the database. Its columns are the same as those in ALL_CODE_ROLE_PRIVS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_COL_COMMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23040.htm">DBA_COL_COMMENTS displays comments on the columns of all tables and views in the database. Its columns are the same as those in ALL_COL_COMMENTS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_COL_PENDING_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23633.htm">DBA_COL_PENDING_STATS describes the pending statistics of all columns in the database. Its columns are the same as those in ALL_COL_PENDING_STATS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_COL_PRIVS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23041.htm">DBA_COL_PRIVS describes all column object grants in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_COLL_TYPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23044.htm">DBA_COLL_TYPES describes all named collection types (arrays, nested tables, object tables, and so on) in the database. Its columns are the same as those in "ALL_COLL_TYPES".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_COMMON_AUDIT_TRAIL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23393.htm">DBA_COMMON_AUDIT_TRAIL displays all standard and fine-grained audit trail entries, mandatory and SYS audit records written in XML format.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_COMPARISON" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23582.htm">DBA_COMPARISON displays information about all comparison objects in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_COMPARISON_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23583.htm">DBA_COMPARISON_COLUMNS displays information about the columns for all comparison objects in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_COMPARISON_ROW_DIF" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23584.htm">DBA_COMPARISON_ROW_DIF displays information about the differing rows in all comparison scans in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_COMPARISON_SCAN" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23585.htm">DBA_COMPARISON_SCAN displays information about all comparison scans in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_COMPARISON_SCAN_VALUES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23586.htm">DBA_COMPARISON_SCAN_VALUES displays information about the values for all comparison scans in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CONNECT_ROLE_GRANTEES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23541.htm">DBA_CONNECT_ROLE_GRANTEES displays information about users who are granted the CONNECT privilege.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CONS_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23045.htm">DBA_CONS_COLUMNS describes all columns in the database that are specified in constraints. Its columns are the same as those in ALL_CONS_COLUMNS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CONS_OBJ_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23046.htm">DBA_CONS_OBJ_COLUMNS displays information about the types that object columns (or attributes) or collection elements have been constrained to, in all tables in the database. Its columns are the same as those in ALL_CONS_OBJ_COLUMNS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CONSTRAINTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23047.htm">DBA_CONSTRAINTS describes all constraint definitions on all tables in the database. Its columns are the same as those in ALL_CONSTRAINTS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CONTAINER_DATA" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23866.htm">DBA_CONTAINER_DATA displays default (user-level) and object-specific CONTAINER_DATA attributes for container data objects.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CONTEXT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23048.htm">DBA_CONTEXT provides all context namespace information in the database. Its columns are the same as those in "ALL_CONTEXT".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CPOOL_INFO" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23605.htm">DBA_CPOOL_INFO displays configuration information about all Database Resident Connection Pools in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CPU_USAGE_STATISTICS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23550.htm">DBA_CPU_USAGE_STATISTICS displays database CPU usage statistics.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CQ_NOTIFICATION_QUERIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23626.htm">DBA_CQ_NOTIFICATION_QUERIES describes the registered queries for all CQ notifications in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CREDENTIALS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23829.htm">DBA_CREDENTIALS lists all credentials in the database. Its columns are the same as those in ALL_CREDENTIALS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CUBE_ATTR_VISIBILITY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23691.htm">DBA_CUBE_ATTR_VISIBILITY describes all OLAP attributes visible for the dimensions, hierarchies, and levels in the database. Its columns are the same as those in ALL_CUBE_ATTR_VISIBILITY.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CUBE_ATTRIBUTES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23671.htm">DBA_CUBE_ATTRIBUTES describes the attributes for all OLAP cube dimensions in the database. Its columns are the same as those in ALL_CUBE_ATTRIBUTES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CUBE_BUILD_PROCESSES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23718.htm">DBA_CUBE_BUILD_PROCESSES describes all OLAP build processes and maintenance scripts in the database. Its columns are the same as those in ALL_CUBE_BUILD_PROCESSES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CUBE_CALCULATED_MEMBERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23672.htm">DBA_CUBE_CALCULATED_MEMBERS describes the calculated members for all OLAP cube dimensions in the database. Its columns are the same as those in ALL_CUBE_CALCULATED_MEMBERS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CUBE_DIM_LEVELS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23677.htm">DBA_CUBE_DIM_LEVELS describes all OLAP dimension levels in the database. Its columns are the same as those in ALL_CUBE_DIM_LEVELS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CUBE_DIM_MODELS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23678.htm">DBA_CUBE_DIM_MODELS describes the models for all OLAP dimensions in the database. Its columns are the same as those in ALL_CUBE_DIM_MODELS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CUBE_DIM_VIEW_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23680.htm">DBA_CUBE_DIM_VIEW_COLUMNS describes the columns of the relational views of all OLAP cube dimensions in the database. Its columns are the same as those in ALL_CUBE_DIM_VIEW_COLUMNS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CUBE_DIM_VIEWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23679.htm">DBA_CUBE_DIM_VIEWS describes the relational views of all OLAP dimensions in the database. Its columns are the same as those in ALL_CUBE_DIM_VIEWS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CUBE_DIMENSIONALITY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23674.htm">DBA_CUBE_DIMENSIONALITY describes the dimension order for all OLAP cubes in the database. Its columns are the same as those in ALL_CUBE_DIMENSIONALITY.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CUBE_DIMENSIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23690.htm">DBA_CUBE_DIMENSIONS describes all OLAP cube dimensions in the database. Its columns are the same as those in ALL_CUBE_DIMENSIONS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CUBE_HIER_LEVELS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23685.htm">DBA_CUBE_HIER_LEVELS describes the hierarchy levels for all OLAP cube dimensions in the database. Its columns are the same as those in ALL_CUBE_HIER_LEVELS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CUBE_HIER_VIEW_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23687.htm">DBA_CUBE_HIER_VIEW_COLUMNS describes the columns of the relational hierarchy views of all OLAP cube dimensions in the database. Its columns are the same as those in ALL_CUBE_HIER_VIEW_COLUMNS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CUBE_HIER_VIEWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23686.htm">DBA_CUBE_HIER_VIEWS describes the hierarchies for all OLAP cube dimensions in the database. Its columns are the same as those in ALL_CUBE_HIER_VIEWS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CUBE_HIERARCHIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23684.htm">DBA_CUBE_HIERARCHIES describes all OLAP dimension hierarchies in the database. Its columns are the same as those in ALL_CUBE_HIERARCHIES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CUBE_MEASURES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23688.htm">DBA_CUBE_MEASURES describes the measures for all OLAP cubes in the database. Its columns are the same as those in ALL_CUBE_MEASURES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CUBE_NAMED_BUILD_SPECS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23937.htm">DBA_CUBE_NAMED_BUILD_SPECS describes the OLAP cube named build specifications in the database. Its columns are the same as those in ALL_CUBE_NAMED_BUILD_SPECS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CUBE_SUB_PARTITION_LEVELS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23938.htm">DBA_CUBE_SUB_PARTITION_LEVELS describes the OLAP secondary partition levels in the database. Its columns are the same as those in ALL_CUBE_SUB_PARTITION_LEVELS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CUBE_VIEW_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23676.htm">DBA_CUBE_VIEW_COLUMNS describes the columns of relational views of all OLAP cubes in the database. Its columns are the same as those in ALL_CUBE_VIEW_COLUMNS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CUBE_VIEWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23675.htm">DBA_CUBE_VIEWS describes the relational views of all OLAP cubes in the database. Its columns are the same as those in ALL_CUBE_VIEWS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CUBES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23673.htm">DBA_CUBES describes all OLAP cubes in the database. Its columns are the same as those in ALL_CUBES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_DATA_FILES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23049.htm">DBA_DATA_FILES describes database files.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_DATAPUMP_JOBS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23338.htm">DBA_DATAPUMP_JOBS identifies all active Data Pump jobs in the database, regardless of their state, on an instance (or on all instances for Real Application Clusters). It also show all Data Pump master tables not currently associated with an active job.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_DATAPUMP_SESSIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23339.htm">DBA_DATAPUMP_SESSIONS identifies the user sessions that are attached to a Data Pump job. The information in this view is useful for determining why a stopped Data Pump operation has not gone away.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_DB_LINKS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23050.htm">DBA_DB_LINKS describes all database links in the database. Its columns (except for PASSWORD) are the same as those in ALL_DB_LINKS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_DBFS_HS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23778.htm">DBA_DBFS_HS shows all Database File System (DBFS) hierarchical stores.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_DBFS_HS_COMMANDS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23779.htm">DBA_DBFS_HS_COMMANDS shows all the registered store commands for all Database File System (DBFS) hierarchical stores.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_DBFS_HS_FIXED_PROPERTIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23781.htm">DBA_DBFS_HS_FIXED_PROPERTIES shows non-modifiable properties of all Database File System (DBFS) hierarchical stores.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_DBFS_HS_PROPERTIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23782.htm">DBA_DBFS_HS_PROPERTIES shows modifiable properties of all Database File System (DBFS) hierarchical stores.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_DDL_LOCKS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23051.htm">DBA_DDL_LOCKS lists all DDL locks held in the database and all outstanding requests for a DDL lock.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_DEPENDENCIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23053.htm">DBA_DEPENDENCIES describes all dependencies in the database between procedures, packages, functions, package bodies, and triggers, including dependencies on views created without any database links. Its columns are the same as those in "ALL_DEPENDENCIES".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_DIGEST_VERIFIERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23793.htm">DBA_DIGEST_VERIFIERS enables the database administrator to check which users have Digest verifiers stored on disk and the type of hashing algorithm used for the verifiers.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_DIM_ATTRIBUTES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23054.htm">DBA_DIM_ATTRIBUTES describes the relationships between dimension levels and functionally dependent columns in the database. The level columns and the dependent column must be in the same table. This view's columns are the same as those in "ALL_DIM_ATTRIBUTES".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_DIM_HIERARCHIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23056.htm">DBA_DIM_HIERARCHIES describes all the dimension hierarchies in the database. Its columns are the same as those in "ALL_DIM_HIERARCHIES".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_DIM_CHILD_OF" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23055.htm">DBA_DIM_CHILD_OF describes a hierarchical relationship of 1 to n between all the pairs of levels in the dimensions in the database. Its columns are the same as those in "ALL_DIM_CHILD_OF".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_DIM_JOIN_KEY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23057.htm">DBA_DIM_JOIN_KEY describes all joins in the database between two dimension tables. The join is always specified between a parent dimension level column and a child column. This view's columns are the same as those in "ALL_DIM_JOIN_KEY".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_DIM_LEVEL_KEY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23058.htm">DBA_DIM_LEVEL_KEY describes the columns of all dimension levels in the database. This view's columns are the same as those in "ALL_DIM_LEVEL_KEY".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_DIM_LEVELS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23059.htm">DBA_DIM_LEVELS describes all dimension levels in the database. All columns of a dimension level must come from the same relation. This view's columns are the same as those in "ALL_DIM_LEVELS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_DIMENSIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23060.htm">DBA_DIMENSIONS represents dimension objects. Its columns are the same as those in "ALL_DIMENSIONS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_DIRECTORIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23061.htm">DBA_DIRECTORIES describes all directory objects in the database. Its columns are the same as those in "ALL_DIRECTORIES".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_DISCOVERY_SOURCE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23914.htm">DBA_DISCOVERY_SOURCE describes sensitive data discovery import information.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_DML_LOCKS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23062.htm">DBA_DML_LOCKS lists all DML locks held in the database and all outstanding requests for a DML lock.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_DMT_FREE_SPACE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23063.htm">DBA_DMT_FREE_SPACE describes the free extents in all dictionary managed tablespaces in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_DMT_USED_EXTENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23064.htm">DBA_DMT_USED_EXTENTS describes the extents comprising the segments in all dictionary managed tablespaces in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_EDITION_COMMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23635.htm">DBA_EDITION_COMMENTS describes the comments on all editions in the database. Its columns are the same as those in ALL_EDITION_COMMENTS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_EDITIONED_TYPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23867.htm">DBA_EDITIONED_TYPES lists all types that are editioned by default for every user in the database. </DataDictionaryObject>
    <DataDictionaryObject Name="DBA_EDITIONING_VIEW_COLS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23669.htm">DBA_EDITIONING_VIEW_COLS describes the relationship between the columns of all editioning views in the database and the table columns to which they map. Its columns are the same as those in ALL_EDITIONING_VIEW_COLS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_EDITIONING_VIEW_COLS_AE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23683.htm">DBA_EDITIONING_VIEW_COLS_AE describes the relationship between the columns of all editioning views (across all editions) in the database and the table columns to which they map. Its columns are the same as those in ALL_EDITIONING_VIEW_COLS_AE.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_EDITIONING_VIEWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23668.htm">DBA_EDITIONING_VIEWS describes all editioning views in the database. Its columns are the same as those in ALL_EDITIONING_VIEWS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_EDITIONING_VIEWS_AE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23681.htm">DBA_EDITIONING_VIEWS_AE describes all editioning views (across all editions) in the database. Its columns are the same as those in ALL_EDITIONING_VIEWS_AE.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_EDITIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23634.htm">DBA_EDITIONS describes all editions in the database. Its columns are the same as those in ALL_EDITIONS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ENABLED_AGGREGATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23394.htm">DBA_ENABLED_AGGREGATIONS displays information about enabled on-demand statistic aggregation.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ENABLED_TRACES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23395.htm">DBA_ENABLED_TRACES displays information about enabled SQL traces.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ENCRYPTED_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23534.htm">DBA_ENCRYPTED_COLUMNS maintains encryption algorithm information for all encrypted columns in the database. Its columns are the same as those in "ALL_ENCRYPTED_COLUMNS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_EPG_DAD_AUTHORIZATION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23709.htm">DBA_EPG_DAD_AUTHORIZATION describes the DADs that are authorized to use different user's privileges.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ERROR_TRANSLATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23792.htm">DBA_ERROR_TRANSLATIONS describes all error translations in the database. Its columns are the same as those in ALL_ERROR_TRANSLATIONS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ERRORS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23065.htm">DBA_ERRORS describes the current errors on all stored objects in the database. Its columns are the same as those in ALL_ERRORS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ERRORS_AE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23577.htm">DBA_ERRORS_AE describes the current errors on all stored objects (across all editions) in the database. Its columns are the same as those in ALL_ERRORS_AE.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_EVALUATION_CONTEXT_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23066.htm">DBA_EVALUATION_CONTEXT_TABLES describes the tables in all rule evaluation contexts in the database. Its columns are the same as those in ALL_EVALUATION_CONTEXT_TABLES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_EVALUATION_CONTEXT_VARS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23067.htm">DBA_EVALUATION_CONTEXT_VARS describes the variables in all rule evaluation contexts in the database. Its columns are the same as those in ALL_EVALUATION_CONTEXT_VARS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_EVALUATION_CONTEXTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23068.htm">DBA_EVALUATION_CONTEXTS describes all rule evaluation contexts in the database. Its columns are the same as those in ALL_EVALUATION_CONTEXTS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_EXP_FILES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23069.htm">DBA_EXP_FILES describes export files.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_EXP_OBJECTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23070.htm">DBA_EXP_OBJECTS describes objects that have been incrementally exported.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_EXP_VERSION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23071.htm">DBA_EXP_VERSION displays the version number of the last export session.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_EXTENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23072.htm">DBA_EXTENTS describes the extents comprising the segments in all tablespaces in the database. </DataDictionaryObject>
    <DataDictionaryObject Name="DBA_EXTERNAL_LOCATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23073.htm">DBA_EXTERNAL_LOCATIONS describes the locations (data sources) of all external tables in the database. Its columns are the same as those in ALL_EXTERNAL_LOCATIONS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_EXTERNAL_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23074.htm">DBA_EXTERNAL_TABLES describes all external tables in the database. Its columns are the same as those in ALL_EXTERNAL_TABLES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_FEATURE_USAGE_STATISTICS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23396.htm">DBA_FEATURE_USAGE_STATISTICS displays information about database feature usage statistics.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_FGA_AUDIT_TRAIL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23075.htm">DBA_FGA_AUDIT_TRAIL displays all audit records for fine-grained auditing.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_FILE_GROUP_EXPORT_INFO" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23499.htm">DBA_FILE_GROUP_EXPORT_INFO shows export-related information for each version in the database that has a valid Data Pump dump file. Its columns are the same as those in "ALL_FILE_GROUP_EXPORT_INFO". </DataDictionaryObject>
    <DataDictionaryObject Name="DBA_FILE_GROUP_FILES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23500.htm">DBA_FILE_GROUP_FILES shows the file set for each versioned file group in the database. Its columns are the same as those in "ALL_FILE_GROUP_FILES".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_FILE_GROUP_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23501.htm">DBA_FILE_GROUP_TABLES shows information about all the tables in the database that can be imported using the file set. Its columns are the same as those in "ALL_FILE_GROUP_TABLES". </DataDictionaryObject>
    <DataDictionaryObject Name="DBA_FILE_GROUP_TABLESPACES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23502.htm">DBA_FILE_GROUP_TABLESPACES shows information about the transportable tablespaces present (partially or completely) in all file sets in the database (when the file set contains dump files). Its columns are the same as those in "ALL_FILE_GROUP_TABLESPACES". </DataDictionaryObject>
    <DataDictionaryObject Name="DBA_FILE_GROUP_VERSIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23503.htm">DBA_FILE_GROUP_VERSIONS shows top-level version information for all file groups in the database. Its columns are the same as those in "ALL_FILE_GROUP_VERSIONS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_FILE_GROUPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23504.htm">DBA_FILE_GROUPS shows top-level metadata about all file groups in the database. Its columns are the same as those for "ALL_FILE_GROUPS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_FLASHBACK_ARCHIVE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23719.htm">DBA_FLASHBACK_ARCHIVE describes all flashback archives available in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_FLASHBACK_ARCHIVE_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23715.htm">DBA_FLASHBACK_ARCHIVE_TABLES displays information about all tables in the database that are enabled for Flashback Archive.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_FLASHBACK_ARCHIVE_TS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23720.htm">DBA_FLASHBACK_ARCHIVE_TS describes all tablespaces in the flashback archives available in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_FLASHBACK_TXN_REPORT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23587.htm">DBA_FLASHBACK_TXN_REPORT displays information about all compensating transactions that have been committed in the database. Each row in this view is associated with one compensating transaction. </DataDictionaryObject>
    <DataDictionaryObject Name="DBA_FLASHBACK_TXN_STATE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23588.htm">DBA_FLASHBACK_TXN_STATE displays information about the compensating status of all transactions in the database. For each compensating transaction, there could be multiple rows, where each row provides the dependency relation between the transactions that have been compensated by the compensating transaction.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_FREE_SPACE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23076.htm">DBA_FREE_SPACE describes the free extents in all tablespaces in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_FREE_SPACE_COALESCED" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23077.htm">DBA_FREE_SPACE_COALESCED describes statistics on coalesced space in all tablespaces in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_GG_INBOUND_PROGRESS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23912.htm">DBA_GG_INBOUND_PROGRESS displays information about the progress made by all GoldenGate inbound servers in the database. Its columns are the same as those in ALL_GG_INBOUND_PROGRESS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_GLOBAL_CONTEXT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23078.htm">DBA_GLOBAL_CONTEXT displays the definition (name, schema, and package) of all global contexts created in the database. This view is a subset of DBA_CONTEXT, which describes all contexts, including global contexts.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_GOLDENGATE_INBOUND" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23911.htm">DBA_GOLDENGATE_INBOUND displays information about all GoldenGate inbound servers in the database. Its columns are the same as those in ALL_GOLDENGATE_INBOUND.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_GOLDENGATE_PRIVILEGES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23804.htm">DBA_GOLDENGATE_PRIVILEGES displays details about Oracle GoldenGate privileges. Its columns are the same as those in ALL_GOLDENGATE_PRIVILEGES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_GOLDENGATE_RULES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23906.htm">DBA_GOLDENGATE_RULES displays information about all GoldenGate server rules in the database. Its columns are the same as those in ALL_GOLDENGATE_RULES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_GOLDENGATE_SUPPORT_MODE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23952.htm">DBA_GOLDENGATE_SUPPORT_MODE displays information about the level of Oracle GoldenGate capture process support for the tables in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HEAT_MAP_SEG_HISTOGRAM" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23954.htm">DBA_HEAT_MAP_SEG_HISTOGRAM displays segment access information for all segments. Its columns are the same as those in ALL_HEAT_MAP_SEG_HISTOGRAM.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HEAT_MAP_SEGMENT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23955.htm">DBA_HEAT_MAP_SEGMENT displays the latest segment access time for all segments. Its columns are the same as those in ALL_HEAT_MAP_SEGMENT.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HEATMAP_TOP_OBJECTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23956.htm">DBA_HEATMAP_TOP_OBJECTS displays heat map information for the top 10000 objects by default. If the database contains fewer than 10000 objects, then fewer than 10000 objects are returned by the view.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HEATMAP_TOP_TABLESPACES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23957.htm">DBA_HEATMAP_TOP_TABLESPACES displays heat map information for the top 100 tablespaces.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIGH_WATER_MARK_STATISTICS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23397.htm">DBA_HIGH_WATER_MARK_STATISTICS displays information about database high-watermark statistics.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_ACTIVE_SESS_HISTORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23400.htm">DBA_HIST_ACTIVE_SESS_HISTORY displays the history of the contents of the in-memory active session history of recent system activity. This view contains snapshots of V$ACTIVE_SESSION_HISTORY. See "V$ACTIVE_SESSION_HISTORY" for further interpretation details for many of these columns (except SNAP_ID, DBID, and INSTANCE_NUMBER).</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_APPLY_SUMMARY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23924.htm">DBA_HIST_APPLY_SUMMARY displays historical statistics information about each apply process for Oracle Streams, Oracle GoldenGate, and Oracle XStream. This view is intended for use with Automatic Workload Repository (AWR).</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_ASH_SNAPSHOT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23772.htm">DBA_HIST_ASH_SNAPSHOT provides the list of snapshots that contains Active Session History (ASH) data. This view differs from DBA_HIST_SNAPSHOT in that it provides snapshots which had errors flushing some Automatic Workload Repository (AWR) tables, but for which ASH data may be successfully flushed (DBA_HIST_SNAPSHOT filters out snapshots which had errors flushing AWR tables).</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_BASELINE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23401.htm">DBA_HIST_BASELINE displays information on baselines taken in the system. For each baseline, this view displays the complete time range and whether the baseline is the default baseline.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_BASELINE_DETAILS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23641.htm">DBA_HIST_BASELINE_DETAILS displays details about the baseline.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_BASELINE_METADATA" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23642.htm">DBA_HIST_BASELINE_METADATA displays metadata information for the baseline.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_BASELINE_TEMPLATE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23643.htm">DBA_HIST_BASELINE_TEMPLATE displays the templates used by the system for baseline generation. The system uses this information to determine which baselines should be automatically created or removed.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_BG_EVENT_SUMMARY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23402.htm">DBA_HIST_BG_EVENT_SUMMARY displays the historical summary background event activity. This view contains snapshots from V$SESSION_EVENT.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_BUFFER_POOL_STAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23403.htm">DBA_HIST_BUFFER_POOL_STAT displays historical statistics about all buffer pools available for the instance. This view contains snapshots of V$BUFFER_POOL_STATISTICS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_BUFFERED_QUEUES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23520.htm">DBA_HIST_BUFFERED_QUEUES displays historical information about all buffered queues available for the instance.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_BUFFERED_SUBSCRIBERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23521.htm">DBA_HIST_BUFFERED_SUBSCRIBERS displays historical information about the subscribers for all buffered queues in the instance.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_CAPTURE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23926.htm">DBA_HIST_CAPTURE displays historical statistics information about each capture process for Oracle Streams, Oracle GoldenGate, and XStream capture operations. This view is intended for use with Automatic Workload Repository (AWR).</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_CLUSTER_INTERCON" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23667.htm">DBA_HIST_CLUSTER_INTERCON displays information about the devices used by the instance to access the interconnect (that is, communicate with other instances).</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_COLORED_SQL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23644.htm">DBA_HIST_COLORED_SQL displays the SQL IDs that have been marked for AWR SQL capture. If a SQL statement is colored using the DBMS_WORKLOAD_REPOSITORY.ADD_COLORED_SQL procedure, then AWR will always capture the SQL statistics for the colored SQL ID. A SQL statement can be removed from coloring using the DBMS_WORKLOAD_REPOSITORY.REMOVE_COLORED_SQL procedure.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_COMP_IOSTAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23522.htm">DBA_HIST_COMP_IOSTAT displays information about I/O statistics aggregated on the component level.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_CR_BLOCK_SERVER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23486.htm">DBA_HIST_CR_BLOCK_SERVER displays historical statistics on the Global Cache Service processes (lMS) used in cache fusion. This view contains snapshots of V$CR_BLOCK_SERVER.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_CURRENT_BLOCK_SERVER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23487.htm">DBA_HIST_CURRENT_BLOCK_SERVER displays historical statistics on the Global Cache Service processes (lMS) used in cache fusion. This view contains snapshots of V$CURRENT_BLOCK_SERVER.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_DATABASE_INSTANCE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23404.htm">DBA_HIST_DATABASE_INSTANCE displays the databases and instances in the Workload Repository.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_DATAFILE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23405.htm">DBA_HIST_DATAFILE displays a history of the data file information from the control file. This view contains snapshots of V$DATAFILE.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_DB_CACHE_ADVICE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23406.htm">DBA_HIST_DB_CACHE_ADVICE displays historical predictions of the number of physical reads for the cache size corresponding to each row. This view contains snapshots of V$DB_CACHE_ADVICE.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_DISPATCHER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23738.htm">DBA_HIST_DISPATCHER displays historical information for each dispatcher process present at the time of the snapshot. This view contains snapshots of information from V$DISPATCHER and V$QUEUE.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_DLM_MISC" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23407.htm">DBA_HIST_DLM_MISC displays miscellaneous Oracle Real Application Clusters (Oracle RAC) statistics. This view contains snapshots of V$DLM_MISC.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_DYN_REMASTER_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23739.htm">DBA_HIST_DYN_REMASTER_STATS displays historical statistical information about the dynamic remastering process. All times are given in hundredths of a second, and total values reflect what has been collected since instance startup. This view contains snapshots of V$DYNAMIC_REMASTER_STATS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_ENQUEUE_STAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23408.htm">DBA_HIST_ENQUEUE_STAT displays historical statistics on the number of enqueue (lock) requests for each type of lock. This view contains snapshots of V$ENQUEUE_STATISTICS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_EVENT_HISTOGRAM" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23551.htm">DBA_HIST_EVENT_HISTOGRAM displays event histogram historical statistics information. This view contains snapshots of V$EVENT_HISTOGRAM.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_EVENT_NAME" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23410.htm">DBA_HIST_EVENT_NAME displays information about wait events. This view contains a snapshot of V$EVENT_NAME.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_FILEMETRIC_HISTORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23411.htm">DBA_HIST_FILEMETRIC_HISTORY displays the history of file metrics collected in the Workload Repository.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_FILESTATXS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23412.htm">DBA_HIST_FILESTATXS displays information about file read/write statistics. This view contains snapshots of V$FILESTAT.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_IC_CLIENT_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23721.htm">DBA_HIST_IC_CLIENT_STATS displays information about the usage of an interconnect device by the instance. The information is divided into several areas of the Oracle Database, each identified by the NAME value.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_IC_DEVICE_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23722.htm">DBA_HIST_IC_DEVICE_STATS displays operating system information about the usage of interconnect devices by the machine. This usage contains Oracle usage but is not limited to it. The quality of the information depends on the operating system.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_IM_SEG_STAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23961.htm">DBA_HIST_IM_SEG_STAT displays information about historical in-memory segment statistics.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_IM_SEG_STAT_OBJ" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23962.htm">DBA_HIST_IM_SEG_STAT_OBJ displays information about object metadata for historical in-memory segments.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_INST_CACHE_TRANSFER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23409.htm">DBA_HIST_INST_CACHE_TRANSFER displays the historical statistics on the cache blocks transferred among instances. This view contains snapshots of V$INSTANCE_CACHE_TRANSFER.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_INSTANCE_RECOVERY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23413.htm">DBA_HIST_INSTANCE_RECOVERY displays the historical monitoring of the mechanisms available to the user to limit recovery I/O. This view contains snapshots of V$INSTANCE_RECOVERY.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_INTERCONNECT_PINGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23723.htm">DBA_HIST_INTERCONNECT_PINGS displays information about measured latency of interconnect messages (round-trip) from instance to instance. In Oracle Database 11g and later releases, the PING process assesses the latencies associated with communications for each pair of instances.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_IOSTAT_DETAIL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23740.htm">DBA_HIST_IOSTAT_DETAIL displays I/O statistics aggregated by combination of file type and function (component). This view contains snapshots of V$IOSTAT_FILE and V$IOSTAT_FUNCTION.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_IOSTAT_FILETYPE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23645.htm">DBA_HIST_IOSTAT_FILETYPE displays historical I/O statistics by file type. This view contains snapshots of V$IOSTAT_FILE.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_IOSTAT_FILETYPE_NAME" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23646.htm">DBA_HIST_IOSTAT_FILETYPE_NAME displays historical I/O statistics for file type names. This view contains snapshots of V$IOSTAT_FILE.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_IOSTAT_FUNCTION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23647.htm">DBA_HIST_IOSTAT_FUNCTION displays historical I/O statistics by function. This view contains snapshots of V$IOSTAT_FUNCTION.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_IOSTAT_FUNCTION_NAME" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23648.htm">DBA_HIST_IOSTAT_FUNCTION_NAME displays historical I/O statistics by function names. This view contains snapshots of V$IOSTAT_FUNCTION.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_JAVA_POOL_ADVICE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23414.htm">DBA_HIST_JAVA_POOL_ADVICE displays historical information about estimated parse time in the Java pool for different pool sizes. This view contains snapshots of V$JAVA_POOL_ADVICE.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_LATCH" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23415.htm">DBA_HIST_LATCH displays historical aggregate latch statistics for both parent and child latches, grouped by latch name. This view contains snapshots of V$LATCH.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_LATCH_CHILDREN" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23416.htm">DBA_HIST_LATCH_CHILDREN displays historical statistics about child latches. This view includes all columns of DBA_HIST_LATCH plus the CHILD# column. Note that child latches have the same parent if their LATCH# columns match each other. This view contains snapshots of V$LATCH_CHILDREN.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_LATCH_MISSES_SUMMARY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23417.htm">DBA_HIST_LATCH_MISSES_SUMMARY displays historical summary statistics about missed attempts to acquire a latch. This view contains snapshots of V$LATCH_MISSES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_LATCH_NAME" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23418.htm">DBA_HIST_LATCH_NAME displays information about decoded latch names for the latches shown in DBA_HIST_LATCH. This view contains a snapshot of V$LATCHNAME.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_LATCH_PARENT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23419.htm">DBA_HIST_LATCH_PARENT displays historical statistics about parent latches. This view contains snapshots of V$LATCH_PARENT.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_LIBRARYCACHE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23420.htm">DBA_HIST_LIBRARYCACHE displays historical statistics about library cache performance and activity. This view contains snapshots of V$LIBRARYCACHE.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_LOG" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23421.htm">DBA_HIST_LOG displays historical log file information from the control file. This view contains snapshots of V$LOG.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_MEM_DYNAMIC_COMP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23726.htm">DBA_HIST_MEM_DYNAMIC_COMP displays historical memory component sizes. This view contains snapshots of V$MEMORY_DYNAMIC_COMPONENTS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_MEMORY_RESIZE_OPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23606.htm">DBA_HIST_MEMORY_RESIZE_OPS displays memory resize operations history. This view contains snapshots of V$MEMORY_RESIZE_OPS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_MEMORY_TARGET_ADVICE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23607.htm">DBA_HIST_MEMORY_TARGET_ADVICE displays memory target advice history. This view contains snapshots of V$MEMORY_TARGET_ADVICE.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_METRIC_NAME" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23422.htm">DBA_HIST_METRIC_NAME describes attributes of the set of RDBMS metrics. This view contains a snapshot of V$METRICNAME.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_MTTR_TARGET_ADVICE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23423.htm">DBA_HIST_MTTR_TARGET_ADVICE displays historical predictions of the number of physical I/O requests for the MTTR corresponding to each row. The data also includes a physical I/O factor, which is the ratio of the number of estimated I/O requests to the number of I/O requests actually performed by the current MTTR setting during the measurement interval. This view contains snapshots of V$MTTR_TARGET_ADVICE.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_MUTEX_SLEEP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23552.htm">DBA_HIST_MUTEX_SLEEP displays mutex sleep summary historical statistics information.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_OPTIMIZER_ENV" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23424.htm">DBA_HIST_OPTIMIZER_ENV displays the optimizer environments that have been captured in the Workload Repository. This view is used with the DBA_HIST_SQLSTAT view.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_OSSTAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23425.htm">DBA_HIST_OSSTAT displays historical operating system statistics. This view contains snapshots of V$OSSTAT.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_OSSTAT_NAME" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23426.htm">DBA_HIST_OSSTAT_NAME displays the names of the operating system statistics. This view is used with DBA_HIST_OSSTAT.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_PARAMETER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23427.htm">DBA_HIST_PARAMETER displays historical information about the initialization parameters that were in effect for the instance. This view contains snapshots of V$SYSTEM_PARAMETER.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_PARAMETER_NAME" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23428.htm">DBA_HIST_PARAMETER_NAME displays information about the parameter names captured in the workload repository. This view is used with the DBA_HIST_PARAMETER view.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_PDB_INSTANCE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23862.htm">DBA_HIST_PDB_INSTANCE displays the pluggable databases (PDB)s and instances in the Workload Repository.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_PERSISTENT_QMN_CACHE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23788.htm">DBA_HIST_PERSISTENT_QMN_CACHE displays the historical summary background queue table activity. This view contains snapshots from V$PERSISTENT_QMN_CACHE.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_PERSISTENT_QUEUES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23608.htm">DBA_HIST_PERSISTENT_QUEUES displays STREAMS AQ persistent queues historical statistics information. This view contains snapshots of V$PERSISTENT_QUEUES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_PERSISTENT_SUBS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23609.htm">DBA_HIST_PERSISTENT_SUBS displays STREAMS AQ persistent queue subscribers historical statistics information. This view contains snapshots of V$PERSISTENT_SUBSCRIBERS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_PGA_TARGET_ADVICE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23429.htm">DBA_HIST_PGA_TARGET_ADVICE displays historical predictions of how the cache hit percentage and over allocation count statistics displayed by the V$PGASTAT performance view would be impacted if the value of the PGA_AGGREGATE_TARGET parameter is changed. This view contains snapshots of V$PGA_TARGET_ADVICE.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_PGASTAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23430.htm">DBA_HIST_PGASTAT displays historical PGA memory usage statistics as well as statistics about the automatic PGA memory manager when it is enabled. This view contains snapshots of V$PGASTAT.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_PLAN_OPERATION_NAME" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23753.htm">DBA_HIST_PLAN_OPERATION_NAME displays historical information about SQL plan operation names.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_PLAN_OPTION_NAME" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23754.htm">DBA_HIST_PLAN_OPTION_NAME displays historical information about SQL plan option names.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_PROCESS_MEM_SUMMARY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23538.htm">DBA_HIST_PROCESS_MEM_SUMMARY displays historical information about dynamic PGA memory usage by named component categories for each process.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_REPLICATION_TBL_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23927.htm">DBA_HIST_REPLICATION_TBL_STATS displays replication table statistics for Oracle GoldenGate and XStream sessions. This view is intended for use with Automatic Workload Repository (AWR).</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_REPLICATION_TXN_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23928.htm">DBA_HIST_REPLICATION_TXN_STATS displays replication transaction statistics for Oracle GoldenGate and XStream sessions.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_REPORTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23881.htm">DBA_HIST_REPORTS displays information about XML reports captured into Automatic Workload Repository (AWR). The reports themselves belong to components such as SQL Monitor, DBOP, and Real-Time ADDM.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_REPORTS_CONTROL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23929.htm">DBA_HIST_REPORTS_CONTROL contains control information about the report capture mechanism that automatically captures XML reports to Automatic Workload Repository (AWR). Reports are captured automatically for components like SQL Monitor and Real-Time Automatic Database Diagnostic Monitor (Real-Time ADDM).</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_REPORTS_DETAILS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23882.htm">DBA_HIST_REPORTS_DETAILS displays details about each report captured in Automatic Workload Repository (AWR). Metadata for each report appears in the DBA_HIST_REPORTS view while the actual report is available in the DBA_HIST_REPORTS_DETAILS view.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_REPORTS_TIMEBANDS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23932.htm">DBA_HIST_REPORTS_TIMEBANDS contains bands of time with a new row created every day corresponding to a band of time. Each band of time represents a period of time, and has a row for every report captured automatically into Automatic Workload Repository (AWR) during that time. If the activity period of a report spans across two bands of time (for example. the activity started before midnight and ended after midnight), then the view contains two rows for that report, with one row for each band of time. The view is partitioned to provide fast access to all reports captured in a given time frame.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_ROWCACHE_SUMMARY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23435.htm">DBA_HIST_ROWCACHE_SUMMARY displays historical summary statistics for data dictionary activity. This view contains snapshots of V$ROWCACHE.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_RSRC_CONSUMER_GROUP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23649.htm">DBA_HIST_RSRC_CONSUMER_GROUP displays historical information about Resource Manager consumer groups. This view contains snapshots of V$RSRC_CONS_GROUP_HISTORY.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_RSRC_PLAN" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23650.htm">DBA_HIST_RSRC_PLAN displays historical information about resource plans. This view contains snapshots of V$RSRC_PLAN_HISTORY.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_RULE_SET" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23523.htm">DBA_HIST_RULE_SET displays historical information about rule set statistics.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_SEG_STAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23436.htm">DBA_HIST_SEG_STAT displays historical information about segment-level statistics. This view captures the top segments based on a set of criteria and captures information from V$SEGSTAT. The total value is the value of the statistics since instance startup. The delta value is the value of the statistics from the BEGIN_INTERVAL_TIME to the END_INTERVAL_TIME in the DBA_HIST_SNAPSHOT view.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_SEG_STAT_OBJ" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23437.htm">DBA_HIST_SEG_STAT_OBJ displays all the names of the segments captured in the workload repository. This view is used with the DBA_HIST_SEG_STAT view.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_SERVICE_NAME" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23431.htm">DBA_HIST_SERVICE_NAME displays the names of the Services tracked by the Workload Repository. This view contains information for V$SERVICES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_SERVICE_STAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23433.htm">DBA_HIST_SERVICE_STAT displays the history of important service statistics tracked by the Workload Repository. The call rate statistics in this view can be used for making run-time routing decisions, for tracking service levels, and for per-instance diagnostics per call rate.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_SERVICE_WAIT_CLASS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23488.htm">DBA_HIST_SERVICE_WAIT_CLASS displays the history of wait class information for services as tracked by the Workload Repository. This view contains information from V$SERVICE_WAIT_CLASS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_SESS_SGA_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23925.htm">DBA_HIST_SESS_SGA_STATS shows usage statistics for high utilization Oracle GoldenGate and XStream sessions.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_SESS_TIME_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23524.htm">DBA_HIST_SESS_TIME_STATS displays information about CPU and I/O time for interesting Streams sessions.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_SESSMETRIC_HISTORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23438.htm">DBA_HIST_SESSMETRIC_HISTORY displays the history of several important session metrics.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_SGA" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23439.htm">DBA_HIST_SGA displays historical summary information about the system global area (SGA). This view contains snapshots of V$SGA.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_SGA_TARGET_ADVICE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23525.htm">DBA_HIST_SGA_TARGET_ADVICE provides historical information about the SGA_TARGET initialization parameter.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_SGASTAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23440.htm">DBA_HIST_SGASTAT displays detailed historical information on the system global area (SGA). This view contains snapshots of V$SGASTAT.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_SHARED_POOL_ADVICE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23441.htm">DBA_HIST_SHARED_POOL_ADVICE displays historical information about estimated parse time in the shared pool for different pool sizes. This view contains snapshots of V$SHARED_POOL_ADVICE.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_SHARED_SERVER_SUMMARY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23741.htm">DBA_HIST_SHARED_SERVER_SUMMARY displays historical information for shared servers. This includes information about shared server activity, the servers, common queues, and dispatcher queues. This view obtains information from V$SHARED_SERVER, V$DISPATCHER, V$CIRCUIT, and V$QUEUE, and is aggregated over all servers, dispatchers, queues, and circuits.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_SNAP_ERROR" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23478.htm">DBA_HIST_SNAP_ERROR displays information about the snapshot error information in the Workload Repository.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_SNAPSHOT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23442.htm">DBA_HIST_SNAPSHOT displays information about the snapshots in the Workload Repository.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_SQL_BIND_METADATA" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23539.htm">DBA_HIST_SQL_BIND_METADATA displays historical information on metadata for bind variables used by SQL cursors.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_SQL_PLAN" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23443.htm">DBA_HIST_SQL_PLAN displays the execution plan information for each child cursor in the workload repository. This view captures information from V$SQL_PLAN and is used with the DBA_HIST_SQLSTAT view.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_SQL_SUMMARY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23444.htm">DBA_HIST_SQL_SUMMARY displays historical SQL summary information.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_SQL_WORKAREA_HSTGRM" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23445.htm">DBA_HIST_SQL_WORKAREA_HSTGRM displays the historical cumulative work area execution statistics (cumulated since instance startup) for different work area groups. This view contains snapshots of V$SQL_WORKAREA_HISTOGRAM.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_SQLBIND" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23446.htm">DBA_HIST_SQLBIND displays historical information on bind variables used by SQL cursors. This view contains snapshots of V$SQL_BIND_CAPTURE.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_SQLCOMMAND_NAME" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23773.htm">DBA_HIST_SQLCOMMAND_NAME displays the mapping between SQL opcodes and names.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_SQLSTAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23447.htm">DBA_HIST_SQLSTAT displays historical information about SQL statistics. This view captures the top SQL statements based on a set of criteria and captures the statistics information from V$SQL. The total value is the value of the statistics since instance startup. The delta value is the value of the statistics from the BEGIN_INTERVAL_TIME to the END_INTERVAL_TIME in the DBA_HIST_SNAPSHOT view.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_SQLTEXT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23448.htm">DBA_HIST_SQLTEXT displays the text of SQL statements belonging to shared SQL cursors captured in the Workload Repository. This view captures information from V$SQL and is used with the DBA_HIST_SQLSTAT view.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_STAT_NAME" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23449.htm">DBA_HIST_STAT_NAME displays decoded statistic names for the statistics captured in the Workload Repository. This includes OLAP statisitics and OLAP timed events. This view captures information from V$STATNAME and is used with DBA_HIST_SYSSTAT and DBA_HIST_SYS_TIME_MODEL.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_STREAMS_APPLY_SUM" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23526.htm">DBA_HIST_STREAMS_APPLY_SUM displays information about each apply process and its activities. This view contains a snapshot of V$STREAMS_APPLY_COORDINATOR, V$STREAMS_APPLY_READER, and V$STREAMS_APPLY_SERVER. This view is intended for use with Automatic Workload Repository (AWR).</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_STREAMS_CAPTURE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23527.htm">DBA_HIST_STREAMS_CAPTURE displays information about each capture process. This view contains a snapshot of V$STREAMS_CAPTURE. This view is intended for use with Automatic Workload Repository (AWR).</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_STREAMS_POOL_ADVICE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23505.htm">DBA_HIST_STREAMS_POOL_ADVICE displays historical information about the estimated count of spilled or unspilled messages and the associated time spent in the spill or unspill activity for different Streams pool sizes. This view is intended for use with Automatic Workload Repository (AWR).</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_SYS_TIME_MODEL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23450.htm">DBA_HIST_SYS_TIME_MODEL displays historical system time model statistics, including OLAP timed stastistics. This view contains snapshots of V$SYS_TIME_MODEL.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_SYSMETRIC_HISTORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23451.htm">DBA_HIST_SYSMETRIC_HISTORY externalizes all available history of the system metric values for the entire set of data kept in the database. This view contains snapshots of V$SYSMETRIC_HISTORY.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_SYSMETRIC_SUMMARY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23452.htm">DBA_HIST_SYSMETRIC_SUMMARY displays a history of statistical summary of all metric values in the System Metrics Long Duration group. This view contains snapshots of V$SYSMETRIC_SUMMARY.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_SYSSTAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23453.htm">DBA_HIST_SYSSTAT displays historical system statistics information, including OLAP kernel statistics. This view contains snapshots of V$SYSSTAT.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_SYSTEM_EVENT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23454.htm">DBA_HIST_SYSTEM_EVENT displays historical information on total waits for an event. This view contains snapshots of V$SYSTEM_EVENT.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_TABLESPACE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23789.htm">DBA_HIST_TABLESPACE displays tablespace information contained in the Workload Repository.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_TABLESPACE_STAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23455.htm">DBA_HIST_TABLESPACE_STAT displays tablespace information from the control file. This view contains snapshots of V$TABLESPACE and DBA_TABLESPACES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_TBSPC_SPACE_USAGE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23456.htm">DBA_HIST_TBSPC_SPACE_USAGE displays historical tablespace usage statistics.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_TEMPFILE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23457.htm">DBA_HIST_TEMPFILE displays a history of the temp file information from the control file. This view contains snapshots of V$TEMPFILE.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_TEMPSTATXS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23458.htm">DBA_HIST_TEMPSTATXS displays information about temporary file read/write statistics. This view contains snapshots of V$TEMPSTAT.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_THREAD" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23459.htm">DBA_HIST_THREAD displays historical thread information from the control file.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_TOPLEVELCALL_NAME" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23774.htm">DBA_HIST_TOPLEVELCALL_NAME displays the mapping between Oracle top level calls and names.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_UNDOSTAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23460.htm">DBA_HIST_UNDOSTAT displays the history of histograms of statistical data to show how well the system is working. The available statistics include undo space consumption, transaction concurrency, and length of queries executed in the instance. This view contains snapshots of V$UNDOSTAT.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_WAITCLASSMET_HISTORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23489.htm">DBA_HIST_WAITCLASSMET_HISTORY displays the history of the wait event class metric data kept by the Workload Repository.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_WAITSTAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23461.htm">DBA_HIST_WAITSTAT displays historical block contention statistics. This view contains snapshots of V$WAITSTAT.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HIST_WR_CONTROL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23462.htm">DBA_HIST_WR_CONTROL displays the control information for the Workload Repository.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HISTOGRAMS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23079.htm">DBA_HISTOGRAMS is a synonym for DBA_TAB_HISTOGRAMS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HOST_ACES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23940.htm">DBA_HOST_ACES describes access control entries defined in host access control lists.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_HOST_ACLS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23941.htm">DBA_HOST_ACLS describes access control lists assigned to restrict access to network hosts through PL/SQL network utility packages.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_CHANGE_NOTIFICATION_REGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23537.htm">DBA_CHANGE_NOTIFICATION_REGS describes all change notification registrations in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_IDENTIFIERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23599.htm">DBA_IDENTIFIERS displays information about the identifiers in all stored objects in the database. Its columns are the same as those in ALL_IDENTIFIERS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ILMDATAMOVEMENTPOLICIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23837.htm">DBA_ILMDATAMOVEMENTPOLICIES contains information specific to data movement-related attributes of an Automatic Data Optimization policy in a database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ILMEVALUATIONDETAILS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23840.htm">DBA_ILMEVALUATIONDETAILS displays details on evaluation of Automatic Data Optimization policies considered for Automatic Data Optimization tasks. It also shows the job name that executes the policy, in case the policy was selected for execution. If the policy was not selected for execution, this view provides a reason.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ILMOBJECTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23838.htm">DBA_ILMOBJECTS displays all the Automatic Data Optimization policies and objects in the database. Many objects inherit policies via their parent objects or because they were created in a particular tablespace. This view provides a mapping between the policies and objects and indicates whether a policy is inherited by an object or is directly specified on it.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ILMPARAMETERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23953.htm">DBA_ILMPARAMETERS can be queried to provide information on the Automatic Data Optimization parameters in the database and their values.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ILMPOLICIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23836.htm">DBA_ILMPOLICIES displays details about Automatic Data Optimization policies in the database. The view contains common details relevant to all types of Automatic Data Optimization policies, not just details relevant to the data movement-related Automatic Data Optimization policies.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ILMRESULTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23841.htm">DBA_ILMRESULTS displays information on data movement-related Automatic Data Optimization jobs in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ILMTASKS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23839.htm">DBA_ILMTASKS displays information on Automatic Data Optimization execution.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_IND_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23084.htm">DBA_IND_COLUMNS describes the columns of all the indexes on all tables and clusters in the database. Its columns are the same as those in "ALL_IND_COLUMNS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_IND_EXPRESSIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23085.htm">DBA_IND_EXPRESSIONS lists expressions of function-based indexes on all tables and clusters in the database. Its columns are the same as those in "ALL_IND_EXPRESSIONS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_IND_PARTITIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23086.htm">DBA_IND_PARTITIONS displays, for each index partition in the database, the partition-level partitioning information, the storage parameters for the partition, and various partition statistics generated by the DBMS_STATS package. Its columns are the same as those in "ALL_IND_PARTITIONS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_IND_PENDING_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23636.htm">DBA_IND_PENDING_STATS describes pending statistics for all tables, partitions, and subpartitions in the database collected using the DBMS_STATS package. Its columns are the same as those in "ALL_IND_PENDING_STATS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_IND_STATISTICS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23360.htm">DBA_IND_STATISTICS displays optimizer statistics for all indexes in the database collected using the DBMS_STATS package. Its columns are the same as those in ALL_IND_STATISTICS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_IND_SUBPARTITIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23087.htm">DBA_IND_SUBPARTITIONS displays, for each index subpartition in the database, the subpartition-level partitioning information, the storage parameters for the subpartition, and various subpartition statistics generated by the DBMS_STATS package. Its columns are the same as those in "ALL_IND_SUBPARTITIONS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_INDEXES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23088.htm">DBA_INDEXES describes all indexes in the database. To gather statistics for this view, use the DBMS_STATS package. This view supports parallel partitioned index scans. Its columns are the same as those in "ALL_INDEXES".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_INDEXTYPE_ARRAYTYPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23361.htm">DBA_INDEXTYPE_ARRAYTYPES displays information about the array types specified by all indextypes in the database. Its columns are the same as those in ALL_INDEXTYPE_ARRAYTYPES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_INDEXTYPE_COMMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23089.htm">DBA_INDEXTYPE_COMMENTS displays comments for all user-defined indextypes in the database. Its columns are the same as those in ALL_INDEXTYPE_COMMENTS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_INDEXTYPE_OPERATORS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23090.htm">DBA_INDEXTYPE_OPERATORS lists all the operators supported by indextypes in the database. Its columns are the same as those in ALL_INDEXTYPE_OPERATORS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_INDEXTYPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23091.htm">DBA_INDEXTYPES describes all indextypes in the database. Its columns are the same as those in ALL_INDEXTYPES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_INTERNAL_TRIGGERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23092.htm">DBA_INTERNAL_TRIGGERS describes internal triggers on all tables in the database. Its columns are the same as those in "ALL_INTERNAL_TRIGGERS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_JAVA_ARGUMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23093.htm">DBA_JAVA_ARGUMENTS displays argument information about all stored Java classes in the database. Its columns are the same as those in ALL_JAVA_ARGUMENTS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_JAVA_CLASSES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23094.htm">DBA_JAVA_CLASSES displays class level information about all stored Java classes in the database. Its columns are the same as those in ALL_JAVA_CLASSES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_JAVA_COMPILER_OPTIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23637.htm">DBA_JAVA_COMPILER_OPTIONS displays information about all native compiler options in the database. Its columns are the same as those in ALL_JAVA_COMPILER_OPTIONS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_JAVA_DERIVATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23095.htm">DBA_JAVA_DERIVATIONS displays mapping information about Java source objects and their derived Java class objects and Java resource objects for all Java classes in the database. Its columns are the same as those in ALL_JAVA_DERIVATIONS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_JAVA_FIELDS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23096.htm">DBA_JAVA_FIELDS displays field information about all stored Java classes in the database. Its columns are the same as those in ALL_JAVA_FIELDS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_JAVA_IMPLEMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23097.htm">DBA_JAVA_IMPLEMENTS describes interfaces implemented by all stored Java classes in the database. Its columns are the same as those in ALL_JAVA_IMPLEMENTS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_JAVA_INNERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23098.htm">DBA_JAVA_INNERS displays information about inner classes referred to by all stored Java classes in the database. Its columns are the same as those in ALL_JAVA_INNERS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_JAVA_LAYOUTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23099.htm">DBA_JAVA_LAYOUTS displays class layout information about all stored Java classes in the database. Its columns are the same as those in ALL_JAVA_LAYOUTS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_JAVA_METHODS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23100.htm">DBA_JAVA_METHODS displays method information about all stored Java classes in the database. Its columns are the same as those in ALL_JAVA_METHODS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_JAVA_NCOMPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23101.htm">DBA_JAVA_NCOMPS displays ncomp-related information about all Java classes in the database. Its columns are the same as those in ALL_JAVA_NCOMPS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_JAVA_POLICY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23102.htm">DBA_JAVA_POLICY describes Java security permissions for all users in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_JAVA_RESOLVERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23103.htm">DBA_JAVA_RESOLVERS displays information about resolvers of all Java classes in the database. Its columns are the same as those in ALL_JAVA_RESOLVERS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_JAVA_THROWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23104.htm">DBA_JAVA_THROWS displays information about exceptions thrown from methods of all Java classes in the database. Its columns are the same as those in ALL_JAVA_THROWSa.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_JOBS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23105.htm">DBA_JOBS describes all jobs in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_JOBS_RUNNING" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23106.htm">DBA_JOBS_RUNNING lists all jobs that are currently running in the instance.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_JOIN_IND_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23107.htm">DBA_JOIN_IND_COLUMNS describes all join conditions in the database. Its columns are the same as those in "ALL_JOIN_IND_COLUMNS" .</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_JSON_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23963.htm">DBA_JSON_COLUMNS provides information on all JavaScript Object Notation (JSON) columns in the database. Its columns are the same as those in ALL_JSON_COLUMNS. Each column that has an IS JSON check constraint in an AND condition appears in this view. This view enables a DBA to find all the JSON columns in the database</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_KGLLOCK" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23108.htm">DBA_KGLLOCK lists all the locks and pins held on KGL objects (objects in the Kernel Generic Library cache).</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_LIBRARIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23109.htm">DBA_LIBRARIES describes all libraries in the database. Its columns are the same as those in ALL_LIBRARIES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_LMT_FREE_SPACE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23110.htm">DBA_LMT_FREE_SPACE describes the free extents in all locally managed tablespaces in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_LMT_USED_EXTENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23111.htm">DBA_LMT_USED_EXTENTS describes the extents comprising the segments in all locally managed tablespaces in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_LOB_PARTITIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23112.htm">DBA_LOB_PARTITIONS displays all LOB partitions in the database. Its columns are the same as those in "ALL_LOB_PARTITIONS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_LOB_SUBPARTITIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23113.htm">DBA_LOB_SUBPARTITIONS displays partition-level attributes of all LOB data subpartitions in the database. Its columns are the same as those in "ALL_LOB_SUBPARTITIONS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_LOB_TEMPLATES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23114.htm">DBA_LOB_TEMPLATES describes all LOB subpartition templates in the database. Its columns are the same as those in ALL_LOB_TEMPLATES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_LOBS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23115.htm">DBA_LOBS displays the BLOBs and CLOBs contained in all tables in the database. BFILEs are stored outside the database, so they are not described by this view. This view's columns are the same as those in "ALL_LOBS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_LOCK" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23116.htm">DBA_LOCK lists all locks or latches held in the database, and all outstanding requests for a lock or latch.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_LOCK_INTERNAL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23117.htm">DBA_LOCK_INTERNAL displays a row for each lock or latch that is being held, and one row for each outstanding request for a lock or latch.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_LOCKS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23118.htm">DBA_LOCKS is a synonym for DBA_LOCK.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_LOG_GROUP_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23119.htm">DBA_LOG_GROUP_COLUMNS describes all columns in the database that are specified in log groups. Its columns are the same as those in "ALL_LOG_GROUP_COLUMNS" .</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_LOG_GROUPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23120.htm">DBA_LOG_GROUPS describes log group definitions on all tables in the database. Its columns are the same as those in "ALL_LOG_GROUPS" .</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_LOGMNR_LOG" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23492.htm">DBA_LOGMNR_LOG displays all archived logs registered with active LogMiner persistent sessions in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_LOGMNR_PURGED_LOG" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23493.htm">DBA_LOGMNR_PURGED_LOG displays archived redo log files that have been applied to the logical standby database and can be deleted because they are no longer needed. FIles in this view are refreshed as a result of executing the DBMS_LOGSTDBY.PURGE_SESSION PL/SQL procedure for Oracle Data Guard SQL Apply:</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_LOGMNR_SESSION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23494.htm">DBA_LOGMNR_SESSION displays all active LogMiner persistent sessions in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_LOGSTDBY_EDS_SUPPORTED" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23777.htm">DBA_LOGSTDBY_EDS_SUPPORTED lists the tables that are candidates for EDS-based replication for Logical Standby based on the data types they contain.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_LOGSTDBY_EDS_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23775.htm">DBA_LOGSTDBY_EDS_TABLES lists the tables that have EDS-based replication for Logical Standby.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_LOGSTDBY_EVENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23121.htm">DBA_LOGSTDBY_EVENTS displays information about the activity of the logical standby database system. It can be used to determine the cause of failures that occur when applying redo data to logical standby databases. This view is for logical standby databases only.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_LOGSTDBY_HISTORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23362.htm">DBA_LOGSTDBY_HISTORY displays the history of switchovers and failovers in a Data Guard configuration. It does this by showing the complete sequence of redo log streams processed or created on the local system, across all role transitions. (After a role transition, a new log stream is started and the log stream sequence number is incremented by the new primary database.). This view is for logical standby databases only.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_LOGSTDBY_LOG" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23122.htm">DBA_LOGSTDBY_LOG displays information about the logs registered for a logical standby database. This view is for logical standby databases only.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_LOGSTDBY_NOT_UNIQUE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23123.htm">DBA_LOGSTDBY_NOT_UNIQUE displays all tables that have no primary and no non-null unique indexes. Most of the tables displayed by this view are supported because their columns contain enough information to be maintained in a logical standby database. Some tables, however, cannot be supported because their columns do not contain the necessary information. Unsupported tables usually contain a column defined using an unsupported data type.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_LOGSTDBY_PARAMETERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23124.htm">DBA_LOGSTDBY_PARAMETERS displays the list of parameters used by SQL apply for logical standby databases. This view is for logical standby databases only.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_LOGSTDBY_PLSQL_MAP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23949.htm">DBA_LOGSTDBY_PLSQL_MAP shows the mapping between a supported user invokable (/external) PL/SQL procedure to the corresponding replicated internal PL/SQL procedure.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_LOGSTDBY_PLSQL_SUPPORT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23950.htm">DBA_LOGSTDBY_PLSQL_SUPPORT shows the PL/SQL packages that are only supported during rolling operations.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_LOGSTDBY_PROGRESS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23125.htm">DBA_LOGSTDBY_PROGRESS is deprecated. The information that was provided in this view is now provided in the V$LOGSTDBY_PROGRESS view.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_LOGSTDBY_SKIP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23126.htm">DBA_LOGSTDBY_SKIP displays the skip rules that are used by SQL Apply. This view is for logical standby databases only.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_LOGSTDBY_SKIP_TRANSACTION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23127.htm">DBA_LOGSTDBY_SKIP_TRANSACTION displays the skip settings chosen. This view is for logical standby databases only.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_LOGSTDBY_UNSUPPORTED" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23128.htm">DBA_LOGSTDBY_UNSUPPORTED displays the schemas, tables, and columns in those tables that contain unsupported data types. The data displayed pertains to the container in which the view is queried. Use this view when you are preparing to perform a manual rolling upgrade using transient logical standby databases. This view is for logical standby databases only.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_LOGSTDBY_UNSUPPORTED_TABLE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23670.htm">DBA_LOGSTDBY_UNSUPPORTED_TABLE displays the data tables that are not supported by Logical Standby. The data displayed pertains to the container in which the view is queried. This view is for logical standby databases only. </DataDictionaryObject>
    <DataDictionaryObject Name="DBA_MEASURE_FOLDER_CONTENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23716.htm">DBA_MEASURE_FOLDER_CONTENTS describes the contents of all OLAP measure folders in the database. Its columns are the same as those in ALL_MEASURE_FOLDER_CONTENTS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_MEASURE_FOLDER_SUBFOLDERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23939.htm">DBA_MEASURE_FOLDER_SUBFOLDERS describes the OLAP measure folders contained within the database OLAP measure folders. Its columns are the same as those in ALL_MEASURE_FOLDER_SUBFOLDERS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_MEASURE_FOLDERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23689.htm">DBA_MEASURE_FOLDERS describes all OLAP measure folders in the database. Its columns are the same as those in ALL_MEASURE_FOLDERS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_METADATA_PROPERTIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23943.htm">DBA_METADATA_PROPERTIES describes OLAP metadata properties in the database. Its columns are the same as those in ALL_METADATA_PROPERTIES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_METHOD_PARAMS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23129.htm">DBA_METHOD_PARAMS describes the method parameters of all object types in the database. Its columns are the same as those in ALL_METHOD_PARAMS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_METHOD_RESULTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23130.htm">DBA_METHOD_RESULTS describes the method results of all object types in the database. Its columns are the same as those in ALL_METHOD_RESULTS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_MINING_MODEL_ATTRIBUTES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23556.htm">DBA_MINING_MODEL_ATTRIBUTES describes all mining model attributes in the database. Its columns are the same as those in ALL_MINING_MODEL_ATTRIBUTES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_MINING_MODEL_SETTINGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23557.htm">DBA_MINING_MODEL_SETTINGS describes all mining model settings in the database. Its columns are the same as those in ALL_MINING_MODEL_SETTINGS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_MINING_MODEL_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23560.htm">DBA_MINING_MODEL_TABLES describes the tables that contain metadata about the mining models in the database. Mining models are schema objects created by Oracle Data Mining.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_MINING_MODELS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23555.htm">DBA_MINING_MODELS describes all mining models in the database. Its columns are the same as those in ALL_MINING_MODELS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_MVIEW_AGGREGATES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23131.htm">DBA_MVIEW_AGGREGATES describes the grouping functions (aggregated measures) that appear in the SELECT list of all aggregated materialized view in the database. Its columns are the same as those in "ALL_MVIEW_AGGREGATES".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_MVIEW_ANALYSIS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23132.htm">DBA_MVIEW_ANALYSIS describes all materialized views in the database that potentially support query rewrite and that provide additional information for analysis by applications. Its columns are the same as those in "ALL_MVIEW_ANALYSIS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_MVIEW_COMMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23341.htm">DBA_MVIEW_COMMENTS displays comments on all materialized views in the database. Its columns are the same as those in ALL_MVIEW_COMMENTS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_MVIEW_DETAIL_PARTITION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23558.htm">DBA_MVIEW_DETAIL_PARTITION displays freshness information for all materialized views in the database, with respect to a PCT detail partition. Its columns are the same as those in "ALL_MVIEW_DETAIL_PARTITION".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_MVIEW_DETAIL_RELATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23133.htm">DBA_MVIEW_DETAIL_RELATIONS represents the named detail relations that are either in the FROM list of a materialized view, or that are indirectly referenced through views in the FROM list. Its columns are the same as those in "ALL_MVIEW_DETAIL_RELATIONS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_MVIEW_DETAIL_SUBPARTITION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23559.htm">DBA_MVIEW_DETAIL_SUBPARTITION displays freshness information for all materialized views in the database, with respect to a PCT detail subpartition. Its columns are the same as those in "ALL_MVIEW_DETAIL_SUBPARTITION".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_MVIEW_JOINS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23134.htm">DBA_MVIEW_JOINS describes a join between two columns in the WHERE clause of a subquery that defines a materialized view. Its columns are the same as those in "ALL_MVIEW_JOINS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_MVIEW_KEYS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23135.htm">DBA_MVIEW_KEYS describes the columns or expressions in the SELECT list upon which materialized views in the database are based. Its columns are the same as those in "ALL_MVIEW_KEYS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_MVIEW_LOG_FILTER_COLS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23136.htm">DBA_MVIEW_LOG_FILTER_COLS displays all columns (excluding primary key columns) being logged in the materialized view logs.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_MVIEW_LOGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23137.htm">DBA_MVIEW_LOGS describes all materialized view logs in the database. Its columns are the same as those in ALL_MVIEW_LOGS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_MVIEW_REFRESH_TIMES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23138.htm">DBA_MVIEW_REFRESH_TIMES describes refresh times of all materialized views in the database. Its columns are the same as those in ALL_MVIEW_REFRESH_TIMES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_MVIEWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23139.htm">DBA_MVIEWS describes all materialized views in the database. Its columns are the same as those in ALL_MVIEWS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_NESTED_TABLE_COLS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23399.htm">DBA_NESTED_TABLE_COLS describes the columns of all nested tables in the database. Its columns are the same as those in "ALL_NESTED_TABLE_COLS". To gather statistics for this view, use the DBMS_STATS package.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_NESTED_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23140.htm">DBA_NESTED_TABLES describes all nested tables contained in all tables in the database. Its columns are the same as those in "ALL_NESTED_TABLES".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_NETWORK_ACL_PRIVILEGES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23712.htm">DBA_NETWORK_ACL_PRIVILEGES describes the network privileges defined in all access control lists that are currently assigned to network hosts.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_NETWORK_ACLS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23711.htm">DBA_NETWORK_ACLS describes the access control list assignments to network hosts.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_OBJ_AUDIT_OPTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23141.htm">DBA_OBJ_AUDIT_OPTS describes auditing options on all objects.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_OBJ_COLATTRS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23142.htm">DBA_OBJ_COLATTRS describes object columns and attributes contained in all tables in the database. Its columns are the same as those in ALL_OBJ_COLATTRS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_OBJECT_SIZE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23143.htm">DBA_OBJECT_SIZE lists the sizes, in bytes, of various PL/SQL objects.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_OBJECT_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23145.htm">DBA_OBJECT_TABLES describes all object tables in the database. Its columns are the same as those in ALL_OBJECT_TABLES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_OBJECT_USAGE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23958.htm">DBA_OBJECT_USAGE displays statistics about index usage gathered from the database for all the indexes in the database. You can use this view to monitor index usage. All indexes that have been used at least once can be monitored and displayed in this view.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_OBJECTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23146.htm">DBA_OBJECTS describes all objects in the database. Its columns are the same as those in "ALL_OBJECTS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_OBJECTS_AE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23578.htm">DBA_OBJECTS_AE describes all objects (across all editions) in the database. Its columns are the same as those in ALL_OBJECTS_AE.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_OPANCILLARY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23147.htm">DBA_OPANCILLARY provides ancillary information for all operator bindings in the database. Its columns are the same as those in "ALL_OPANCILLARY".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_OPARGUMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23148.htm">DBA_OPARGUMENTS provides argument information for all operator bindings in the database. Its columns are the same as those in "ALL_OPARGUMENTS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_OPBINDINGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23149.htm">DBA_OPBINDINGS describes the binding functions and methods on all operators in the database. Its columns are the same as those in ALL_OPBINDINGS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_OPERATOR_COMMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23150.htm">DBA_OPERATOR_COMMENTS displays comments for all user-defined operators in the database. Its columns are the same as those in ALL_OPERATOR_COMMENTS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_OPERATORS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23151.htm">DBA_OPERATORS describes all operators in the database. Its columns are the same as those in ALL_OPERATORS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_OPTSTAT_OPERATION_TASKS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23868.htm">DBA_OPTSTAT_OPERATION_TASKS displays the history of tasks that are performed as part of statistics operations (recorded in DBA_OPTSTAT_OPERATIONS). Each task represents a target object to be processed in the corresponding parent operation.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_OPTSTAT_OPERATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23463.htm">DBA_OPTSTAT_OPERATIONS contains a history of statistics operations performed at the schema and database level using the DBMS_STATS package.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ORPHAN_KEY_TABLE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23692.htm">DBA_ORPHAN_KEY_TABLE reports key values from indexes where the underlying base table has block corruptions. To create the view, run the DBMS_REPAIR.ADMIN_TABLES procedure. To populate the orphan key table for an index, run the DBMS_REPAIR.DUMP_ORPHAN_KEYS procedure on the index. For each key in the index that points to a corrupt data block, Oracle inserts a row into the orphan key table.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_OUTLINE_HINTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23152.htm">DBA_OUTLINE_HINTS describes the set of hints stored in all outlines in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_OUTLINES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23153.htm">DBA_OUTLINES describes all stored outlines in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_OUTSTANDING_ALERTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23464.htm">DBA_OUTSTANDING_ALERTS describes alerts which the server considers to be outstanding.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_PARALLEL_EXECUTE_CHUNKS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23742.htm">DBA_PARALLEL_EXECUTE_CHUNKS displays the chunks for all tasks in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_PARALLEL_EXECUTE_TASKS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23743.htm">DBA_PARALLEL_EXECUTE_TASKS displays all tasks in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_PART_COL_STATISTICS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23154.htm">DBA_PART_COL_STATISTICS displays column statistics and histogram information for all table partitions in the database. Its columns are the same as those in ALL_PART_COL_STATISTICS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_PART_HISTOGRAMS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23155.htm">DBA_PART_HISTOGRAMS displays the histogram data (endpoints per histogram) for the histograms on all table partitions in the database. Its columns are the same as those in ALL_PART_HISTOGRAMS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_PART_INDEXES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23156.htm">DBA_PART_INDEXES displays the object-level partitioning information for all partitioned indexes in the database. Its columns are the same as those in ALL_PART_INDEXES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_PART_KEY_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23157.htm">DBA_PART_KEY_COLUMNS describes the partitioning key columns for all partitioned objects in the database. Its columns are the same as those in ALL_PART_KEY_COLUMNS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_PART_LOBS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23158.htm">DBA_PART_LOBS displays table-level information for all partitioned LOBs in the database, including default attributes for LOB data partitions. Its columns are the same as those in ALL_PART_LOBS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_PART_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23159.htm">DBA_PART_TABLES displays the object-level partitioning information for all partitioned tables in the database. Its columns are the same as those in ALL_PART_TABLES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_PARTIAL_DROP_TABS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23160.htm">DBA_PARTIAL_DROP_TABS describes all tables in the database that have partially completed DROP COLUMN operations. Its columns are the same as those in "ALL_PARTIAL_DROP_TABS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_PDB_HISTORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23865.htm">DBA_PDB_HISTORY describes the lineage of the PDB to which it belongs.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_PDB_SAVED_STATES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23959.htm">DBA_PDB_SAVED_STATES shows information about the current saved PDB states in the CDB.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_PDBS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23794.htm">DBA_PDBS describes PDBs belonging to a given CDB. When queried from the root, it will describe all PDBs belonging to a given CDB. When queried from a PDB, it will always return no rows.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_PENDING_CONV_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23162.htm">DBA_PENDING_CONV_TABLES describes all pending conversion tables in the database. Its columns are the same as those in ALL_PENDING_CONV_TABLES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_PENDING_TRANSACTIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23163.htm">DBA_PENDING_TRANSACTIONS describes unresolved transactions (either due to failure or if the coordinator has not sent a commit/rollback).</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_PLSQL_COLL_TYPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23933.htm">DBA_PLSQL_COLL_TYPES describes all named PL/SQL collection types in the database. Its columns (except for CHAR_USED) are the same as those in ALL_PLSQL_COLL_TYPES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_PLSQL_OBJECT_SETTINGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23385.htm">DBA_PLSQL_OBJECT_SETTINGS displays information about the compiler settings for all stored objects in the database. Its columns are the same as those in ALL_PLSQL_OBJECT_SETTINGS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_PLSQL_TYPE_ATTRS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23934.htm">DBA_PLSQL_TYPE_ATTRS describes the attributes of all PL/SQL types in the database. Its columns are the same as those in ALL_PLSQL_TYPE_ATTRS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_PLSQL_TYPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23935.htm">DBA_PLSQL_TYPES describes all PL/SQL types in the database. Its columns are the same as those in ALL_PLSQL_TYPES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_POLICIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23164.htm">DBA_POLICIES describes all Oracle Virtual Private Database (VPD) security policies in the database. Its columns are the same as those in ALL_POLICIES. A security policy is a list of security requirements and rules that regulate row level access to database objects.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_POLICY_ATTRIBUTES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23883.htm">DBA_POLICY_ATTRIBUTES lists the attribute associations {Namespaces, Attributes} of all context-sensitive and shared context-sensitive Oracle Virtual Private Database (VPD) policies in the database. Its columns are the same as those in ALL_POLICY_ATTRIBUTES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_POLICY_CONTEXTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23165.htm">DBA_POLICY_CONTEXTS describes all driving contexts in the database. Its columns are the same as those in ALL_POLICY_CONTEXTS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_POLICY_GROUPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23166.htm">DBA_POLICY_GROUPS describes all policy groups in the database. Its columns are the same as those in ALL_POLICY_GROUPS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_PRIV_AUDIT_OPTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23167.htm">DBA_PRIV_AUDIT_OPTS describes current system privileges being audited across the system and by user.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_PRIV_CAPTURES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23815.htm">DBA_PRIV_CAPTURES lists the privilege analysis policies in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_PROCEDURES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23168.htm">DBA_PROCEDURES lists all functions and procedures that are available in the database, along with their associated properties. Its columns are the same as those in ALL_PROCEDURES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_PROFILES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23169.htm">DBA_PROFILES displays all profiles and their limits.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_PROPAGATION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23170.htm">DBA_PROPAGATION displays information about all Streams propagations in the database. Its columns are the same as those in ALL_PROPAGATION.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_PROXIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23171.htm">DBA_PROXIES displays Information about all proxy connections in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_QUEUE_SCHEDULES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23174.htm">DBA_QUEUE_SCHEDULES describes all propagation schedules in the database. Its columns are the same as those in ALL_QUEUE_SCHEDULES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_QUEUE_SUBSCRIBERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23544.htm">DBA_QUEUE_SUBSCRIBERS displays all subscribers on all queues in the database. Its columns are the same as those in "ALL_QUEUE_SUBSCRIBERS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_QUEUE_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23175.htm">DBA_QUEUE_TABLES contains information about the owner instance for a queue table. A queue table can contain multiple queues. In this case, each queue in a queue table has the same owner instance as the queue table. Its columns are the same as those in ALL_QUEUE_TABLES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_QUEUES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23176.htm">DBA_QUEUES describes the operational characteristics of every queue in a database. Its columns are the same as those in "ALL_QUEUES".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_RECOVERABLE_SCRIPT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23545.htm">DBA_RECOVERABLE_SCRIPT provides details about recoverable operations.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_RECOVERABLE_SCRIPT_BLOCKS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23546.htm">DBA_RECOVERABLE_SCRIPT_BLOCKS provides details about recoverable script blocks.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_RECOVERABLE_SCRIPT_ERRORS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23547.htm">DBA_RECOVERABLE_SCRIPT_ERRORS provides details about errors that occurred during script execution.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_RECOVERABLE_SCRIPT_HIST" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23755.htm">DBA_RECOVERABLE_SCRIPT_HIST displays details about executed or purged recoverable operations.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_RECOVERABLE_SCRIPT_PARAMS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23548.htm">DBA_RECOVERABLE_SCRIPT_PARAMS provides details about recoverable operation parameters.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_RECYCLEBIN" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23342.htm">DBA_RECYCLEBIN displays information about all recycle bins in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_REDEFINITION_ERRORS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23363.htm">DBA_REDEFINITION_ERRORS is an online redefinition view. It displays the dependent objects for which errors were raised while attempting to create similar objects on the interim table of the redefinition.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_REDEFINITION_OBJECTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23364.htm">DBA_REDEFINITION_OBJECTS is an online redefinition view. It displays the objects involved in the current redefinitions.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_REDEFINITION_STATUS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23869.htm">DBA_REDEFINITION_STATUS is an online redefinition view. It provides information about the online redefinition status.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_REFRESH" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23178.htm">DBA_REFRESH describes all refresh groups in the database. Its columns are the same as those in "ALL_REFRESH".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_REFRESH_CHILDREN" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23179.htm">DBA_REFRESH_CHILDREN lists all of the objects in all refresh groups in the database. Its columns are the same as those in "ALL_REFRESH_CHILDREN".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_REFS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23181.htm">DBA_REFS describes the REF columns and REF attributes in object type columns of all the objects in the database. Its columns are the same as those in "ALL_REFS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_REGISTERED_ARCHIVED_LOG" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23343.htm">DBA_REGISTERED_ARCHIVED_LOG displays information about all registered archived logfiles in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_REGISTERED_MVIEW_GROUPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23182.htm">DBA_REGISTERED_MVIEW_GROUPS lists all the registered materialized view groups at the master site or master materialized view site.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_REGISTERED_MVIEWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23183.htm">DBA_REGISTERED_MVIEWS describes all registered materialized views (registered at a master site or a master materialized view site) in the database. Its columns are the same as those in ALL_REGISTERED_MVIEWS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_REGISTRY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23186.htm">DBA_REGISTRY displays information about all components in the database that are loaded into the component registry. The component registry tracks components that can be separately loaded into the Oracle Database. When a SQL script loads the PL/SQL packages and other database objects for a component into the database, the script records the component name, status, and version. If scripts are used to upgrade/downgrade the dictionary elements for the component, then those scripts also record status and version information.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_REGISTRY_HIERARCHY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23188.htm">DBA_REGISTRY_HIERARCHY displays information about the components loaded into the database, grouped by owner and organized in the component hierarchy.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_REGISTRY_HISTORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23549.htm">DBA_REGISTRY_HISTORY provides information about upgrades, downgrades, and critical patch updates that have been performed on the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_REGISTRY_LOG" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23506.htm">DBA_REGISTRY_LOG displays operating information about components loaded into the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_REPAIR_TABLE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23693.htm">DBA_REPAIR_TABLE describes any corruptions found by the DBMS_REPAIR.CHECK_OBJECT procedure. This information is used by the DBMS_REPAIR.FIX_CORRUPT_BLOCKS procedure on execution. To create this view, first run the DBMS_REPAIR.ADMIN_TABLES procedure. To populate the resulting repair table for an object, run the DBMS_REPAIR.CHECK_OBJECT procedure on the object.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_REPL_DBNAME_MAPPING" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23944.htm">DBA_REPL_DBNAME_MAPPING provides details about the database name mapping in replication. Its columns are the same as those in ALL_REPL_DBNAME_MAPPING.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_RESOURCE_INCARNATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23528.htm">DBA_RESOURCE_INCARNATIONS lists all resource incarnations that are running or eligible for HA status notification.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_RESUMABLE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23228.htm">DBA_RESUMABLE displays all resumable statements executed in the system.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_REWRITE_EQUIVALENCES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23344.htm">DBA_REWRITE_EQUIVALENCES describes all rewrite equivalences in the database. Its columns are the same as those in ALL_REWRITE_EQUIVALENCES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_RGROUP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23229.htm">DBA_RGROUP displays all refresh groups.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_RCHILD" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23177.htm">DBA_RCHILD displays all the children in any refresh group.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ROLE_PRIVS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23230.htm">DBA_ROLE_PRIVS describes the roles granted to all users and roles in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ROLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23231.htm">DBA_ROLES describes all roles in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ROLLBACK_SEGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23232.htm">DBA_ROLLBACK_SEGS describes rollback segments.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ROLLING_DATABASES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23887.htm">DBA_ROLLING_DATABASES lists all the databases eligible for configuration with rolling operations.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ROLLING_EVENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23888.htm">DBA_ROLLING_EVENTS lists all the events reported from the DBMS_ROLLING PL/SQL package.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ROLLING_PARAMETERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23889.htm">DBA_ROLLING_PARAMETERS lists the available parameters of the DBMS_ROLLING PL/SQL package.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ROLLING_PLAN" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23890.htm">DBA_ROLLING_PLAN displays the instructions which constitute the active upgrade plan. Each row in DBA_ROLLING_PLAN identifies a specific instruction scheduled to execute at a specific database. Instructions are created as a result of successful calls to the DBMS_ROLLING.BUILD_PLAN procedure.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ROLLING_STATISTICS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23892.htm">DBA_ROLLING_STATISTICS provides a list of rolling operation statistics.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ROLLING_STATUS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23891.htm">DBA_ROLLING_STATUS displays the overall status of the rolling operation.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ROLLING_UNSUPPORTED" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23960.htm">DBA_ROLLING_UNSUPPORTED displays the schemas, tables, and columns in those tables that contain unsupported data types for a rolling upgrade operation for a logical standby database using the DBMS_ROLLING PL/SQL package. Use this view before you perform a rolling upgrade using DBMS_ROLLING to determine what is unsupported.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_RSRC_CATEGORIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23653.htm">DBA_RSRC_CATEGORIES displays all resource consumer group categories.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_RSRC_CONSUMER_GROUP_PRIVS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23233.htm">DBA_RSRC_CONSUMER_GROUP_PRIVS displays information about all resource consumer groups and the users and roles assigned to them. The grant referred to in this view and the related view is the grant of the SWITCH_CONSUMER_GROUP object privilege, which is granted using the DBMS_RESOURCE_MANAGER_PRIVS package. This privilege is not granted through the GRANT SQL statement.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_RSRC_CONSUMER_GROUPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23234.htm">DBA_RSRC_CONSUMER_GROUPS displays information about all resource consumer groups in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_RSRC_GROUP_MAPPINGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23365.htm">DBA_RSRC_GROUP_MAPPINGS displays the mapping between session attributes and consumer groups in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_RSRC_IO_CALIBRATE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23652.htm">DBA_RSRC_IO_CALIBRATE displays I/O calibration results for the latest calibration run.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_RSRC_MANAGER_SYSTEM_PRIVS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23235.htm">DBA_RSRC_MANAGER_SYSTEM_PRIVS displays information about all the users and roles that have been granted the ADMINISTER_RESOURCE_MANAGER system privilege, which is granted using the DBMS_RESOURCE_MANAGER_PRIVS package. This privilege is not granted through the GRANT SQL statement.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_RSRC_MAPPING_PRIORITY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23366.htm">DBA_RSRC_MAPPING_PRIORITY displays information about all consumer group mapping attribute priorities.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_RSRC_PLAN_DIRECTIVES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23236.htm">DBA_RSRC_PLAN_DIRECTIVES displays information about all resource plan directives in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_RSRC_PLANS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23237.htm">DBA_RSRC_PLANS displays information about all resource plans in the database. For a list of currently active plans, see "V$RSRC_PLAN".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_RULE_SET_RULES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23238.htm">DBA_RULE_SET_RULES describes the rules in all rule sets in the database. Its columns are the same as those in ALL_RULE_SET_RULES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_RULE_SETS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23239.htm">DBA_RULE_SETS describes all rule sets in the database. Its columns are the same as those in ALL_RULE_SETS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_RULES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23240.htm">DBA_RULES describes all rules in the database. Its columns are the same as those in ALL_RULES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SEC_RELEVANT_COLS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23353.htm">DBA_SEC_RELEVANT_COLS describes the security relevant columns of all security policies in the database. Its columns are the same as those in ALL_SEC_RELEVANT_COLS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SECONDARY_OBJECTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23242.htm">DBA_SECONDARY_OBJECTS provides information about all secondary objects that are associated with domain indexes in the database. This view is only relevant in the context of domain indexes. Its columns are the same as those in "ALL_SECONDARY_OBJECTS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SEGMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23243.htm">DBA_SEGMENTS describes the storage allocated for all segments in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SEGMENTS_OLD" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23511.htm">DBA_SEGMENTS_OLD lists information about storage allocated for all database segments.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SENSITIVE_COLUMN_TYPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23915.htm">DBA_SENSITIVE_COLUMN_TYPES describes sensitive column types in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SENSITIVE_DATA" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23913.htm">DBA_SENSITIVE_DATA describes the sensitive columns in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SEQUENCES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23244.htm">DBA_SEQUENCES describes all sequences in the database. Its columns are the same as those in "ALL_SEQUENCES".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SERVER_REGISTRY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23389.htm">DBA_SERVER_REGISTRY displays information about all server components in the database that are loaded into the component registry.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SERVICES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23465.htm">DBA_SERVICES displays all services in the database. The view excludes rows marked for deletion. Its columns are the same as those in ALL_SERVICES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SCHEDULER_CREDENTIALS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23580.htm">DBA_SCHEDULER_CREDENTIALS displays information about all credentials in the database. Its columns are the same as those in ALL_SCHEDULER_CREDENTIALS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SCHEDULER_DB_DESTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23756.htm">DBA_SCHEDULER_DB_DESTS displays information about all destination objects in the database pointing to remote databases. Its columns are the same as those in ALL_SCHEDULER_DB_DESTS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SCHEDULER_DESTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23757.htm">DBA_SCHEDULER_DESTS displays information about all destination objects for jobs in the database. Its columns are the same as those in ALL_SCHEDULER_DESTS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SCHEDULER_EXTERNAL_DESTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23758.htm">DBA_SCHEDULER_EXTERNAL_DESTS displays information about all destination objects in the database pointing to remote agents. Its columns are the same as those in ALL_SCHEDULER_EXTERNAL_DESTS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SCHEDULER_FILE_WATCHERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23759.htm">DBA_SCHEDULER_FILE_WATCHERS displays information about all scheduler file watch requests in the database. Its columns are the same as those in ALL_SCHEDULER_FILE_WATCHERS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SCHEDULER_GLOBAL_ATTRIBUTE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23367.htm">DBA_SCHEDULER_GLOBAL_ATTRIBUTE displays the values of all scheduler attributes in the database (for example, DEFAULT_TIMEZONE and CURRENT_OPEN_WINDOW). Its columns are the same as those in ALL_SCHEDULER_GLOBAL_ATTRIBUTE.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SCHEDULER_GROUP_MEMBERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23760.htm">DBA_SCHEDULER_GROUP_MEMBERS displays information about the members of all Scheduler object groups in the database. Its columns are the same as those in ALL_SCHEDULER_GROUP_MEMBERS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SCHEDULER_GROUPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23761.htm">DBA_SCHEDULER_GROUPS displays information about all Scheduler object groups in the database. Its columns are the same as those in ALL_SCHEDULER_GROUPS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SCHEDULER_CHAIN_RULES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23507.htm">DBA_SCHEDULER_CHAIN_RULES displays information about the rules for all chains in the database. Its columns are the same as those in ALL_SCHEDULER_CHAIN_RULES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SCHEDULER_CHAIN_STEPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23508.htm">DBA_SCHEDULER_CHAIN_STEPS displays information about the defined steps of all chains in the database. Its columns are the same as those in ALL_SCHEDULER_CHAIN_STEPS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SCHEDULER_CHAINS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23509.htm">DBA_SCHEDULER_CHAINS displays information about all chains in the database. Its columns are the same as those in ALL_SCHEDULER_CHAINS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SCHEDULER_JOB_ARGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23346.htm">DBA_SCHEDULER_JOB_ARGS displays information about the arguments of all Scheduler jobs in the database. Its columns are the same as those in ALL_SCHEDULER_JOB_ARGS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SCHEDULER_JOB_CLASSES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23345.htm">DBA_SCHEDULER_JOB_CLASSES displays information about all Scheduler job classes in the database. Its columns are the same as those in ALL_SCHEDULER_JOB_CLASSES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SCHEDULER_JOB_DESTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23762.htm">DBA_SCHEDULER_JOB_DESTS displays information about the state of all jobs in the database at each of their destinations. Its columns are the same as those in ALL_SCHEDULER_JOB_DESTS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SCHEDULER_JOB_LOG" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23347.htm">DBA_SCHEDULER_JOB_LOG displays log information for all Scheduler jobs in the database. Its columns are the same as those in ALL_SCHEDULER_JOB_LOG.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SCHEDULER_JOB_ROLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23610.htm">DBA_SCHEDULER_JOB_ROLES displays information about all Scheduler jobs in the database by database role.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SCHEDULER_JOB_RUN_DETAILS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23386.htm">DBA_SCHEDULER_JOB_RUN_DETAILS displays log run details for all Scheduler jobs in the database. Its columns are the same as those in ALL_SCHEDULER_JOB_RUN_DETAILS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SCHEDULER_JOBS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23348.htm">DBA_SCHEDULER_JOBS displays information about all Scheduler jobs in the database. Its columns are the same as those in ALL_SCHEDULER_JOBS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SCHEDULER_NOTIFICATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23763.htm">DBA_SCHEDULER_NOTIFICATIONS displays information about the E-mail notifications for all jobs in the database. Its columns are the same as those in ALL_SCHEDULER_NOTIFICATIONS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SCHEDULER_PROGRAM_ARGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23349.htm">DBA_SCHEDULER_PROGRAM_ARGS displays information about the arguments of all Scheduler programs in the database. Its columns are the same as those in ALL_SCHEDULER_PROGRAM_ARGS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SCHEDULER_PROGRAMS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23350.htm">DBA_SCHEDULER_PROGRAMS displays information about all Scheduler programs in the database. Its columns are the same as those in ALL_SCHEDULER_PROGRAMS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SCHEDULER_REMOTE_DATABASES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23658.htm">DBA_SCHEDULER_REMOTE_DATABASES displays information about all remote databases that have been registered as sources and destinations for remote database jobs. Its columns are the same as those in ALL_SCHEDULER_REMOTE_DATABASES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SCHEDULER_REMOTE_JOBSTATE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23659.htm">DBA_SCHEDULER_REMOTE_JOBSTATE displays information about the state of all jobs at remote databases. Its columns are the same as those in ALL_SCHEDULER_REMOTE_JOBSTATE.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SCHEDULER_RUNNING_CHAINS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23510.htm">DBA_SCHEDULER_RUNNING_CHAINS displays information about the chain steps of all running chains in the database. Its columns are the same as those in ALL_SCHEDULER_RUNNING_CHAINS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SCHEDULER_RUNNING_JOBS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23387.htm">DBA_SCHEDULER_RUNNING_JOBS displays information about all running Scheduler jobs in the database. Its columns are the same as those in ALL_SCHEDULER_RUNNING_JOBS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SCHEDULER_SCHEDULES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23368.htm">DBA_SCHEDULER_SCHEDULES displays information about all Scheduler schedules in the database. Its columns are the same as those in ALL_SCHEDULER_SCHEDULES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SCHEDULER_WINDOW_DETAILS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23388.htm">DBA_SCHEDULER_WINDOW_DETAILS displays log details for all Scheduler windows in the database. Its columns are the same as those in ALL_SCHEDULER_WINDOW_DETAILS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SCHEDULER_WINDOW_GROUPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23369.htm">DBA_SCHEDULER_WINDOW_GROUPS displays information about all Scheduler window groups in the database. Its columns are the same as those in ALL_SCHEDULER_WINDOW_GROUPS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SCHEDULER_WINDOW_LOG" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23351.htm">DBA_SCHEDULER_WINDOW_LOG displays log information for all Scheduler windows in the database. Its columns are the same as those in ALL_SCHEDULER_WINDOW_LOG.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SCHEDULER_WINDOWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23352.htm">DBA_SCHEDULER_WINDOWS displays information about all Scheduler windows in the database. Its columns are the same as those in ALL_SCHEDULER_WINDOWS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SCHEDULER_WINGROUP_MEMBERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23370.htm">DBA_SCHEDULER_WINGROUP_MEMBERS displays the members of all Scheduler window groups in the database. Its columns are the same as those in ALL_SCHEDULER_WINGROUP_MEMBERS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SOURCE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23249.htm">DBA_SOURCE describes the text source of all stored objects in the database. Its columns are the same as those in "ALL_SOURCE".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SOURCE_AE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23694.htm">DBA_SOURCE_AE describes the text source of all stored objects (across all editions) in the database. Its columns are the same as those in ALL_SOURCE_AE.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SQL_MANAGEMENT_CONFIG" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23713.htm">DBA_SQL_MANAGEMENT_CONFIG displays the configuration parameters of the SQL management base. You must have the DBA role in order to change the configuration parameter values.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SQL_PATCHES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23654.htm">DBA_SQL_PATCHES displays the set of SQL patches.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SQL_PLAN_BASELINES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23714.htm">DBA_SQL_PLAN_BASELINES displays information about the SQL plan baselines currently created for specific SQL statements.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SQL_PLAN_DIR_OBJECTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23822.htm">DBA_SQL_PLAN_DIR_OBJECTS displays the objects created in the SQL plan directive.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SQL_PLAN_DIRECTIVES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23823.htm">DBA_SQL_PLAN_DIRECTIVES displays information about the SQL plan directives in the system.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SQL_PROFILES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23477.htm">DBA_SQL_PROFILES displays information about SQL profiles currently created for specific SQL statements.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SQL_TRANSLATION_PROFILES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23790.htm">DBA_SQL_TRANSLATION_PROFILES describes all SQL translation profiles in the database. Its columns are the same as those in ALL_SQL_TRANSLATION_PROFILES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SQL_TRANSLATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23791.htm">DBA_SQL_TRANSLATIONS describes all SQL translations in the database. Its columns are the same as those in ALL_SQL_TRANSLATIONS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SQLJ_TYPE_ATTRS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23252.htm">DBA_SQLJ_TYPE_ATTRS describes the attributes of all SQLJ object types in the database. Its columns are the same as those in ALL_SQLJ_TYPE_ATTRS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SQLJ_TYPE_METHODS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23253.htm">DBA_SQLJ_TYPE_METHODS describes the methods of all SQLJ object types in the database. Its columns are the same as those in ALL_SQLJ_TYPE_METHODS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SQLJ_TYPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23254.htm">DBA_SQLJ_TYPES describes all SQLJ object types in the database. Its columns are the same as those in ALL_SQLJ_TYPES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SQLSET" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23466.htm">DBA_SQLSET displays information about all SQL tuning sets in the database. Its columns are the same as those in "ALL_SQLSET".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SQLSET_BINDS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23467.htm">DBA_SQLSET_BINDS displays the bind values associated with all SQL tuning sets in the database. Its columns are the same as those in "ALL_SQLSET_BINDS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SQLSET_PLANS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23531.htm">DBA_SQLSET_PLANS describes captured plans in the SQL tuning sets in the database. Its columns are the same as those in "ALL_SQLSET_PLANS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SQLSET_REFERENCES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23469.htm">DBA_SQLSET_REFERENCES describes whether or not all SQL tuning sets in the database are active. A SQL tuning set cannot be dropped if it is referenced. Its columns are the same as those in "ALL_SQLSET_REFERENCES".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SQLSET_STATEMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23470.htm">DBA_SQLSET_STATEMENTS displays information about the SQL statements, along with their statistics, that form all SQL tuning sets in the database. Its columns, except for PARSING_SCHEMA_ID, are the same as those in "ALL_SQLSET_STATEMENTS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SQLTUNE_BINDS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23471.htm">DBA_SQLTUNE_BINDS displays the bind values associated with all tuned SQL statements in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SQLTUNE_PLANS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23472.htm">DBA_SQLTUNE_PLANS displays information about the execution plans generated for all SQL statements in the database during a SQL tuning session.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SQLTUNE_RATIONALE_PLAN" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23473.htm">DBA_SQLTUNE_RATIONALE_PLAN displays the association between rationales and operations in the execution plan of all SQL statements in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SQLTUNE_STATISTICS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23474.htm">DBA_SQLTUNE_STATISTICS displays statistics associated with all SQL statements in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SR_GRP_STATUS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23871.htm">DBA_SR_GRP_STATUS provides information on the current refresh operations for the current synchronous refresh groups in the database. It has the same columns as the DBA_SR_GRP_STATUS_ALL view.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SR_GRP_STATUS_ALL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23870.htm">DBA_SR_GRP_STATUS_ALL provides information on the refresh operations on the  synchronous refresh groups in the database. A refresh operation is also called a run, and it has two phases: PREPARE_REFRESH and EXECUTE_REFRESH. These phases are controlled using the DBMS_SYNC_REFRESH package.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SR_OBJ" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23874.htm">DBA_SR_OBJ provides information on the objects registered for synchronous refresh for current  groups.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SR_OBJ_ALL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23878.htm">DBA_SR_OBJ_ALL provides information on the objects registered for synchronous refresh for current and defunct groups.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SR_OBJ_STATUS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23873.htm">DBA_SR_OBJ_STATUS provides information on the status of objects registered for synchronous refresh for the current refresh operations for the current synchronous refresh groups in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SR_OBJ_STATUS_ALL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23872.htm">DBA_SR_OBJ_STATUS_ALL provides information on the status of objects registered for synchronous refresh.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SR_PARTN_OPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23880.htm">DBA_SR_PARTN_OPS provides information on the partition operations registered on the base tables of the materialized views registered for synchronous refresh. These rows last only as long as the registrations are active; that is, they disappear after EXECUTE_REFRESH or ABORT_REFRESH of the base table by the DBMS_SYNC_REFRESH package.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SR_STLOG_EXCEPTIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23875.htm">DBA_SR_STLOG_EXCEPTIONS provides information on the exceptions in the staging logs for the tables processed by DBMS_SYNC_REFRESH.PREPARE_STAGING_LOG.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SR_STLOG_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23879.htm">DBA_SR_STLOG_STATS provides information on the statistics in the staging logs for the tables processed by DBMS_SYNC_REFRESH.PREPARE_STAGING_LOG.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SSCR_CAPTURE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23655.htm">DBA_SSCR_CAPTURE displays session state capture statistics.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SSCR_RESTORE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23656.htm">DBA_SSCR_RESTORE displays session state restore statistics.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_STAT_EXTENSIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23695.htm">DBA_STAT_EXTENSIONS displays information about all optimizer statistics extensions in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_STMT_AUDIT_OPTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23255.htm">DBA_STMT_AUDIT_OPTS describes current system auditing options across the system and by user.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_STORED_SETTINGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23256.htm">DBA_STORED_SETTINGS lists information about the persistent parameter settings for stored PL/SQL units for which the current user has execute privileges. It also returns parameter information for all objects in the database and is accessible only to users with the SELECT_CATALOG_ROLE privilege. Its columns are the same as those in "ALL_STORED_SETTINGS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_STREAMS_ADD_COLUMN" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23512.htm">DBA_STREAMS_ADD_COLUMN displays information about declarative rule-based transformations that add a column to a row logical change record (LCR).</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_STREAMS_ADMINISTRATOR" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23371.htm">DBA_STREAMS_ADMINISTRATOR displays information about the users who have been granted privileges to be a Streams administrator by procedures in the DBMS_STREAMS_AUTH package.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_STREAMS_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23600.htm">DBA_STREAMS_COLUMNS displays information about all Streams unsupported columns in the database. Its columns are the same as those in ALL_STREAMS_COLUMNS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_STREAMS_DELETE_COLUMN" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23513.htm">DBA_STREAMS_DELETE_COLUMN displays information about declarative rule-based transformations that delete a column from a row logical change record (LCR).</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_STREAMS_GLOBAL_RULES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23257.htm">DBA_STREAMS_GLOBAL_RULES displays information about the global rules created for all Streams capture processes, propagations, and apply processes in the database. Its columns are the same as those in ALL_STREAMS_GLOBAL_RULES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_STREAMS_KEEP_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23746.htm">DBA_STREAMS_KEEP_COLUMNS displays information about declarative rule-based transformations that keep a list of columns in a row logical change record (LCR).</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_STREAMS_MESSAGE_CONSUMERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23372.htm">DBA_STREAMS_MESSAGE_CONSUMERS displays information about all Streams messaging clients in the database. Its columns are the same as those in ALL_STREAMS_MESSAGE_CONSUMERS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_STREAMS_MESSAGE_RULES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23373.htm">DBA_STREAMS_MESSAGE_RULES displays information about all Streams messaging rules in the database. Its columns are the same as those in ALL_STREAMS_MESSAGE_RULES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_STREAMS_NEWLY_SUPPORTED" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23390.htm">DBA_STREAMS_NEWLY_SUPPORTED displays information about all tables in the database that are newly supported by Streams capture processes. Its columns are the same as those in ALL_STREAMS_NEWLY_SUPPORTED.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_STREAMS_RENAME_COLUMN" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23514.htm">DBA_STREAMS_RENAME_COLUMN displays information about declarative rule-based transformations that rename a column in a row logical change record (LCR).</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_STREAMS_RENAME_SCHEMA" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23515.htm">DBA_STREAMS_RENAME_SCHEMA displays information about declarative rule-based transformations that rename a schema in a row logical change record (LCR).</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_STREAMS_RENAME_TABLE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23516.htm">DBA_STREAMS_RENAME_TABLE displays information about declarative rule-based transformations that rename a table in a row logical change record (LCR).</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_STREAMS_RULES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23475.htm">DBA_STREAMS_RULES displays information about the rules used by all Streams processes in the database. Its columns are the same as those in ALL_STREAMS_RULES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_STREAMS_SCHEMA_RULES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23258.htm">DBA_STREAMS_SCHEMA_RULES displays information about the schema rules created for all Streams capture processes, propagations, and apply processes in the database. Its columns are the same as those in ALL_STREAMS_SCHEMA_RULES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_STREAMS_SPLIT_MERGE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23744.htm">DBA_STREAMS_SPLIT_MERGE displays information about current Streams automatic split and merge operations.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_STREAMS_SPLIT_MERGE_HIST" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23764.htm">DBA_STREAMS_SPLIT_MERGE_HIST displays information about past Streams automatic split and merge operations.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_STREAMS_STMT_HANDLERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23765.htm">DBA_STREAMS_STMT_HANDLERS displays information about all Streams statement DML handlers in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_STREAMS_STMTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23766.htm">DBA_STREAMS_STMTS displays information about the statements in all Streams statement DML handlers in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_STREAMS_TABLE_RULES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23259.htm">DBA_STREAMS_TABLE_RULES displays information about the table rules created for all Streams capture processes, propagations, and apply processes in the database. Its columns are the same as those in ALL_STREAMS_TABLE_RULES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_STREAMS_TP_COMPONENT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23611.htm">DBA_STREAMS_TP_COMPONENT displays information about each Oracle Streams component at each database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_STREAMS_TP_COMPONENT_LINK" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23612.htm">DBA_STREAMS_TP_COMPONENT_LINK displays information about how messages flow between Oracle Streams components.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_STREAMS_TP_COMPONENT_STAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23613.htm">DBA_STREAMS_TP_COMPONENT_STAT displays temporary performance statistics and session statistics about each Oracle Streams component.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_STREAMS_TP_DATABASE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23614.htm">DBA_STREAMS_TP_DATABASE displays information about each database that contains Oracle Streams components.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_STREAMS_TP_PATH_BOTTLENECK" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23615.htm">DBA_STREAMS_TP_PATH_BOTTLENECK displays temporary information about Oracle Streams components that might be slowing down the flow of messages in a stream path.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_STREAMS_TP_PATH_STAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23616.htm">DBA_STREAMS_TP_PATH_STAT displays temporary performance statistics about each stream path that exists in the Oracle Streams topology.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_STREAMS_TRANSFORM_FUNCTION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23374.htm">DBA_STREAMS_TRANSFORM_FUNCTION displays information about all rule-based transformation functions in the database. Its columns are the same as those in ALL_STREAMS_TRANSFORM_FUNCTION.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_STREAMS_TRANSFORMATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23517.htm">DBA_STREAMS_TRANSFORMATIONS displays information about all Streams transformations available on a system, in order of execution.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_STREAMS_UNSUPPORTED" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23391.htm">DBA_STREAMS_UNSUPPORTED displays information about all tables in the database that are not supported by Streams in this release of the Oracle Database. Its columns are the same as those in ALL_STREAMS_UNSUPPORTED.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SUBPART_COL_STATISTICS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23260.htm">DBA_SUBPART_COL_STATISTICS provides column statistics and histogram information for all subpartitions in the database. Its columns are the same as those in "ALL_SUBPART_COL_STATISTICS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SUBPART_HISTOGRAMS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23261.htm">DBA_SUBPART_HISTOGRAMS lists actual histogram data (end-points per histogram) for histograms on all table subpartitions in the database. Its columns are the same as those in "ALL_SUBPART_HISTOGRAMS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SUBPART_KEY_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23262.htm">DBA_SUBPART_KEY_COLUMNS lists subpartitioning key columns for all composite-partitioned tables (and local indexes on composite-partitioned tables) in the database. Its columns are the same as those in ALL_SUBPART_KEY_COLUMNS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SUBPARTITION_TEMPLATES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23263.htm">DBA_SUBPARTITION_TEMPLATES describes all subpartition templates in the database. Its columns are the same as those in ALL_SUBPARTITION_TEMPLATES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SUBSCR_REGISTRATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23657.htm">DBA_SUBSCR_REGISTRATIONS displays information about all subscription registrations in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SUPPLEMENTAL_LOGGING" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23877.htm">DBA_SUPPLEMENTAL_LOGGING provides information about supplemental logging for a pluggable database (PDB) in a multitenant container database (CDB).</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SYNC_CAPTURE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23572.htm">DBA_SYNC_CAPTURE displays information about all synchronous capture processes in the database. Its columns are the same as those in ALL_SYNC_CAPTURE.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SYNC_CAPTURE_PREPARED_TABS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23573.htm">DBA_SYNC_CAPTURE_PREPARED_TABS displays information about all tables in the database that are prepared for synchronous capture instantiation. Its columns are the same as those in ALL_SYNC_CAPTURE_PREPARED_TABS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SYNC_CAPTURE_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23574.htm">DBA_SYNC_CAPTURE_TABLES displays information about all tables in the database that are captured by synchronous Streams captures. Its columns are the same as those in ALL_SYNC_CAPTURE_TABLES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SYNONYMS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23273.htm">DBA_SYNONYMS describes all synonyms in the database. Its columns are the same as those in ALL_SYNONYMS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_SYS_PRIVS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23274.htm">DBA_SYS_PRIVS describes system privileges granted to users and roles.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TAB_COL_STATISTICS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23275.htm">DBA_TAB_COL_STATISTICS contains column statistics and histogram information extracted from "DBA_TAB_COLUMNS". Its columns are the same as those in "ALL_TAB_COL_STATISTICS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TAB_COLS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23276.htm">DBA_TAB_COLS describes the columns of all tables, views, and clusters in the database. This view differs from "DBA_TAB_COLUMNS" in that system-generated hidden columns and invisible columns, which are user-generated hidden columns, are not filtered out.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TAB_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23277.htm">DBA_TAB_COLUMNS describes the columns of all tables, views, and clusters in the database. Its columns are the same as those in "ALL_TAB_COLUMNS", except for SENSITIVE_COLUMN. To gather statistics for this view, use the DBMS_STATS package.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TAB_COMMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23278.htm">DBA_TAB_COMMENTS displays comments on all tables and views in the database. Its columns are the same as those in ALL_TAB_COMMENTS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TAB_HISTGRM_PENDING_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23638.htm">DBA_TAB_HISTGRM_PENDING_STATS describes pending statistics for tables, partitions, and subpartitions in the database. Its columns are the same as those in "ALL_TAB_HISTGRM_PENDING_STATS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TAB_HISTOGRAMS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23279.htm">DBA_TAB_HISTOGRAMS describes histograms on columns of all tables in the database. Its columns are the same as those in "ALL_TAB_HISTOGRAMS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TAB_IDENTITY_COLS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23830.htm">DBA_TAB_IDENTITY_COLS describes all table identity columns. Its columns are the same as those in ALL_TAB_IDENTITY_COLS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TAB_MODIFICATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23280.htm">DBA_TAB_MODIFICATIONS describes modifications to all tables in the database that have been modified since the last time statistics were gathered on the tables. Its columns are the same as those in "ALL_TAB_MODIFICATIONS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TAB_PARTITIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23281.htm">DBA_TAB_PARTITIONS displays partition-level partitioning information, partition storage parameters, and partition statistics generated by the DBMS_STATS package for all partitions in the database. Its columns are the same as those in "ALL_TAB_PARTITIONS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TAB_PENDING_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23639.htm">DBA_TAB_PENDING_STATS describes pending statistics for tables, partitions, and subpartitions in the database. Its columns are the same as those in "ALL_TAB_PENDING_STATS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TAB_PRIVS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23282.htm">DBA_TAB_PRIVS describes all object grants in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TAB_STAT_PREFS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23640.htm">DBA_TAB_STAT_PREFS displays information about statistics preferences for all tables in the database. Its columns are the same as those in "ALL_TAB_STAT_PREFS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TAB_STATISTICS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23376.htm">DBA_TAB_STATISTICS displays optimizer statistics for all tables in the database. Its columns are the same as those in ALL_TAB_STATISTICS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TAB_STATS_HISTORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23490.htm">DBA_TAB_STATS_HISTORY provides a history of table statistics modifications for all tables in the database. Its columns are the same as those in "ALL_TAB_STATS_HISTORY".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TAB_SUBPARTITIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23285.htm">DBA_TAB_SUBPARTITIONS displays, for each table subpartition, the subpartition name, name of the table and partition to which it belongs, its storage attributes, and statistics generated by the DBMS_STATS package. Its columns are the same as those in "ALL_TAB_SUBPARTITIONS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23286.htm">DBA_TABLES describes all relational tables in the database. Its columns are the same as those in ALL_TABLES. To gather statistics for this view, use the DBMS_STATS package.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TABLESPACE_GROUPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23377.htm">DBA_TABLESPACE_GROUPS describes all tablespace groups in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TABLESPACE_THRESHOLDS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23768.htm">DBA_TABLESPACE_THRESHOLDS describes space utilization threshold settings for all tablespaces in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TABLESPACE_USAGE_METRICS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23496.htm">DBA_TABLESPACE_USAGE_METRICS describes tablespace usage metrics for all types of tablespaces, including permanent, temporary, and undo tablespaces.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TABLESPACES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23287.htm">DBA_TABLESPACES describes all tablespaces in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TEMP_FILES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23288.htm">DBA_TEMP_FILES describes all temporary files (tempfiles) in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TEMP_FREE_SPACE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23627.htm">DBA_TEMP_FREE_SPACE displays temporary space usage information at tablespace level.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_THRESHOLDS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23476.htm">DBA_THRESHOLDS describes all thresholds.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TRANSFORMATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23291.htm">DBA_TRANSFORMATIONS displays information about all transformations in the database. These transformations can be specified with Advanced Queuing operations such as enqueue, dequeue, and subscribe to automatically integrate transformations in AQ messaging. Its columns are the same as those in ALL_TRANSFORMATIONS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TRIGGER_COLS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23292.htm">DBA_TRIGGER_COLS describes the use of columns in all triggers in the database. Its columns are the same as those in ALL_TRIGGER_COLS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TRIGGER_ORDERING" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23581.htm">DBA_TRIGGER_ORDERING describes all triggers in the database that have FOLLOWS or PRECEDES ordering. Its columns are the same as those in ALL_TRIGGER_ORDERING.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TRIGGERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23293.htm">DBA_TRIGGERS describes all triggers in the database. Its columns are the same as those in ALL_TRIGGERS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TS_QUOTAS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23294.htm">DBA_TS_QUOTAS describes tablespace quotas for all users.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TSDP_IMPORT_ERRORS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23922.htm">DBA_TSDP_IMPORT_ERRORS shows information about the errors encountered during import of the Transparent Sensitive Data Protection discovery result. This error information corresponds to the last import of the discovery result done using the DBMS_TSDP_MANAGE.IMPORT_DISCOVERY_RESULT API.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TSDP_POLICY_CONDITION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23917.htm">DBA_TSDP_POLICY_CONDITION describes the Transparent Sensitive Data Protection policy and condition mapping. It also lists the property-value pairs for the condition.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TSDP_POLICY_FEATURE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23918.htm">DBA_TSDP_POLICY_FEATURE shows the Transparent Sensitive Data Protection policy security feature mapping for all the TSDP policies in the database. At this time, only Oracle Data Redaction is supported.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TSDP_POLICY_PARAMETER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23921.htm">DBA_TSDP_POLICY_PARAMETER shows the parameter-value pairs for the condition of the Transparent Sensitive Data Protection policy.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TSDP_POLICY_PROTECTION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23920.htm">DBA_TSDP_POLICY_PROTECTION shows the list of columns that have been protected through Transparent Sensitive Data Protection.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TSDP_POLICY_TYPE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23919.htm">DBA_TSDP_POLICY_TYPE shows the Transparent Sensitive Data Protection policy to sensitive column type mapping.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TSM_DESTINATION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23535.htm">DBA_TSM_DESTINATION lists transparent session migration (TSM) destination session statistics.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TSM_SOURCE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23536.htm">DBA_TSM_SOURCE lists transparent session migration (TSM) source session statistics.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TSTZ_TAB_COLS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23732.htm">DBA_TSTZ_TAB_COLS displays information about the columns of all tables in the database, which have columns defined on TIMESTAMP WITH TIME ZONE data types or object types containing attributes of TIMESTAMP WITH TIME ZONE data types. Its columns (except for COLUMN_NAME, NESTED and VIRTUAL_COLUMN) are the same as those in ALL_TSTZ_TAB_COLS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TSTZ_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23731.htm">DBA_TSTZ_TABLES displays information about all tables in the database, which have columns defined on TIMESTAMP WITH TIME ZONE data types or object types containing attributes of TIMESTAMP WITH TIME ZONE data types. Its columns are the same as those in ALL_TSTZ_TABLES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TUNE_MVIEW" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23378.htm">DBA_TUNE_MVIEW displays the result of executing the DBMS_ADVISOR.TUNE_MVIEW procedure.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TYPE_ATTRS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23295.htm">DBA_TYPE_ATTRS describes the attributes of all object types in the database. Its columns (except for CHAR_USED) are the same as those in ALL_TYPE_ATTRS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TYPE_METHODS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23296.htm">DBA_TYPE_METHODS describes the methods of all object types in the database. Its columns are the same as those in ALL_TYPE_METHODS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TYPE_VERSIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23297.htm">DBA_TYPE_VERSIONS describes the versions of all object types in the database. Its columns are the same as those in ALL_TYPE_VERSIONS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_TYPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23298.htm">DBA_TYPES describes all object types in the database. Its columns are the same as those in ALL_TYPES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_UNDO_EXTENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23299.htm">DBA_UNDO_EXTENTS describes the extents comprising the segments in all undo tablespaces in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_UNUSED_COL_TABS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23300.htm">DBA_UNUSED_COL_TABS describes all tables in the database containing unused columns. Its columns are the same as those in ALL_UNUSED_COL_TABS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_UNUSED_OBJPRIVS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23821.htm">DBA_UNUSED_OBJPRIVS lists the object privileges (without privilege grant paths) that are not used for the privilege analysis policies reported by the DBMS_PRIVILEGE_CAPTURE.GENERATE_RESULT procedure.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_UNUSED_OBJPRIVS_PATH" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23819.htm">DBA_UNUSED_OBJPRIVS_PATH lists the object privileges that are not used for the privilege analysis policies reported by the DBMS_PRIVILEGE_CAPTURE.GENERATE_RESULT procedure.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_UNUSED_PRIVS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23813.htm">DBA_UNUSED_PRIVS lists the privileges that are not used for the privilege analysis policies reported by the DBMS_PRIVILEGE_CAPTURE.GENERATE_RESULT procedure.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_UNUSED_SYSPRIVS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23820.htm">DBA_UNUSED_SYSPRIVS lists the system privileges (without privilege grant paths) that are not used for the privilege analysis policies reported by the DBMS_PRIVILEGE_CAPTURE.GENERATE_RESULT procedure.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_UNUSED_SYSPRIVS_PATH" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23818.htm">DBA_UNUSED_SYSPRIVS_PATH lists the system privileges that are not used for the privilege analysis policies reported by the DBMS_PRIVILEGE_CAPTURE.GENERATE_RESULT procedure.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_UNUSED_USERPRIVS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23945.htm">DBA_UNUSED_USERPRIVS lists the user privileges (without privilege grant paths) that are not used for the privilege analysis policies reported by the DBMS_PRIVILEGE_CAPTURE.GENERATE_RESULT procedure.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_UNUSED_USERPRIVS_PATH" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23946.htm">DBA_UNUSED_USERPRIVS_PATH lists the user privileges that are not used for the privilege analysis policies reported by the DBMS_PRIVILEGE_CAPTURE.GENERATE_RESULT procedure.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_UPDATABLE_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23301.htm">DBA_UPDATABLE_COLUMNS describes all columns in a join view that can be updated by the database administrator, subject to appropriate privileges. Its columns are the same as those in "ALL_UPDATABLE_COLUMNS".</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_USED_OBJPRIVS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23817.htm">DBA_USED_OBJPRIVS lists the object privileges (without privilege grant paths) that are used for the privilege analysis policies reported by the DBMS_PRIVILEGE_CAPTURE.GENERATE_RESULT procedure.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_USED_OBJPRIVS_PATH" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23812.htm">DBA_USED_OBJPRIVS_PATH lists the object privileges that are used for the privilege analysis policies reported by the DBMS_PRIVILEGE_CAPTURE.GENERATE_RESULT procedure.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_USED_PRIVS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23810.htm">DBA_USED_PRIVS lists the privileges that are used for the privilege analysis policies reported by the DBMS_PRIVILEGE_CAPTURE.GENERATE_RESULT procedure.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_USED_PUBPRIVS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23814.htm">DBA_USED_PUBPRIVS lists the privileges that are used from the PUBLIC role for the privilege analysis policies reported by the DBMS_PRIVILEGE_CAPTURE.GENERATE_RESULT procedure.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_USED_SYSPRIVS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23816.htm">DBA_USED_SYSPRIVS lists the system privileges (without privilege grant paths) that are used for the privilege analysis policies reported by the DBMS_PRIVILEGE_CAPTURE.GENERATE_RESULT procedure.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_USED_SYSPRIVS_PATH" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23811.htm">DBA_USED_SYSPRIVS_PATH lists the system privileges that are used for the privilege analysis policies reported by the DBMS_PRIVILEGE_CAPTURE.GENERATE_RESULT procedure.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_USED_USERPRIVS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23947.htm">DBA_USED_USERPRIVS lists the user privileges (without privilege grant paths) that are used for the privilege analysis policies reported by the DBMS_PRIVILEGE_CAPTURE.GENERATE_RESULT procedure.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_USED_USERPRIVS_PATH" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23948.htm">DBA_USED_USERPRIVS_PATH lists the user privileges that are used for the privilege analysis policies reported by the DBMS_PRIVILEGE_CAPTURE.GENERATE_RESULT procedure.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_USERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23302.htm">DBA_USERS describes all users of the database.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_USERS_WITH_DEFPWD" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23725.htm">DBA_USERS_WITH_DEFPWD displays all users in the database that are still using their default passwords.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_USTATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23303.htm">DBA_USTATS describes the user-defined statistics collected on all tables and indexes in the database. Its columns are the same as those in ALL_USTATS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_VARRAYS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23304.htm">DBA_VARRAYS describes all varrays in the database. Its columns are the same as those in ALL_VARRAYS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_VIEWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23305.htm">DBA_VIEWS describes all views in the database. Its columns are the same as those in ALL_VIEWS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_VIEWS_AE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23696.htm">DBA_VIEWS_AE describes all views (across all editions) in the database. Its columns are the same as those in ALL_VIEWS_AE.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_WAITERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23306.htm">DBA_WAITERS shows all the sessions that are waiting for a lock. In an Oracle RAC environment, this only applies if the waiter is on the same instance.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_WALLET_ACES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23942.htm">DBA_WALLET_ACES describes access control entries defined in wallet access control lists.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_WALLET_ACLS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23745.htm">DBA_WALLET_ACLS displays the access control lists assigned to restrict access to wallets through PL/SQL network utility packages.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_WARNING_SETTINGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23380.htm">DBA_WARNING_SETTINGS displays information about the warning parameter settings for all objects in the database. Its columns are the same as those in ALL_WARNING_SETTINGS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_WI_CAPTURE_FILES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23900.htm">Each row in DBA_WI_CAPTURE_FILES represents a capture file that belongs to the workload analyzed in the current Workload Intelligence job.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_WI_JOBS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23896.htm">Each row in DBA_WI_JOBS describes a Workload Intelligence job, that is, a task that applies the algorithms of Workload Intelligence on a given capture directory.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_WI_OBJECTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23899.htm">Each row in DBA_WI_OBJECTS represents a database object (table) that is accessed by the given template in the given Workload Intelligence job.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_WI_PATTERN_ITEMS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23903.htm">Each row in DBA_WI_PATTERN_ITEMS represents a template that participates in a significant pattern that has been found by the given Workload Intelligence job.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_WI_PATTERNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23902.htm">Each row in DBA_WI_PATTERNS represents a pattern that has been identified by Workload Intelligence as significant in the  workload associated with the given job. Such a pattern consists of one or more templates. These templates that comprise the given pattern are described in the related view DBA_WI_PATTERN_ITEMS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_WI_STATEMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23898.htm">Each row in DBA_WI_STATEMENTS describes a statement (SQL or PL/SQL) that is part of the template with identifier TEMPLATE_ID, which  has been found in the workload that is related to the Workload Intelligence job whose identifier is equal to JOB_ID. A template may consist of multiple statements, for example, if it represents a transaction. In this case, there is one row in this view for every one of these statements. These statements are ordered, based on the order defined by the corresponding transaction. Column SEQUENCE_NUMBER is used to describe this order.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_WI_TEMPLATE_EXECUTIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23901.htm">Each row in DBA_WI_TEMPLATE_EXECUTIONS represents an execution of a template in a capture that belongs to the workload that is associated with the current Workload Intelligence job.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_WI_TEMPLATES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23897.htm">Each row in DBA_WI_TEMPLATES describes a template that has been found in the workload that is related to the Workload Intelligence job whose identifier is equal to JOB_ID. A template can represent either a simple query, or an entire transaction. Two queries in the given workload belong to the same template, if they exhibit trivial differences, for example, if they contain different literal values, different bind variable names, different comments, or different white spaces.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_WORKLOAD_ACTIVE_USER_MAP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23930.htm">DBA_WORKLOAD_ACTIVE_USER_MAP contains the mappings that are going to be valid for the next replay or are valid for the current replay.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_WORKLOAD_CAPTURES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23628.htm">DBA_WORKLOAD_CAPTURES displays all the workload captures that have been performed in the current database. It also lists captures on which DBMS_WORKLOAD_CAPTURE.GET_CAPTURE_INFO() or DBMS_WORKLOAD_REPLAY.GET_REPLAY_INFO() have been called. Each row contains information about one workload capture.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_WORKLOAD_CONNECTION_MAP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23629.htm">DBA_WORKLOAD_CONNECTION_MAP displays the connection mapping information for workload replay. Each row defines one connection mapping for a particular workload replay.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_WORKLOAD_FILTERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23630.htm">DBA_WORKLOAD_FILTERS displays all the workload filters that have been defined in the current database. In Oracle Database 11g, only workload filters of type CAPTURE are supported. Starting with Oracle Database 11gR2, filters of type REPLAY are supported.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_WORKLOAD_REPLAY_DIVERGENCE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23632.htm">DBA_WORKLOAD_REPLAY_DIVERGENCE displays information about data/error divergence for a user call that has been replayed.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_WORKLOAD_REPLAY_SCHEDULES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23842.htm">DBA_WORKLOAD_REPLAY_SCHEDULES displays the names of replay schedules for the current replay directory. A replay schedule defines one or multiple workload captures, and the order to start their replays. The current replay directory is set by DBMS_WORKLOAD_REPLAY.SET_REPLAY_DIRECTORY('replay_dir'). Each row in the view contains information about one replay schedule.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_WORKLOAD_REPLAYS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23631.htm">DBA_WORKLOAD_REPLAYS displays all the workload replays that have been performed in the current database. It also lists replays on which DBMS_WORKLOAD_REPLAY.GET_REPLAY_INFO() has been called. Each row contains information about one workload replay.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_WORKLOAD_SCHEDULE_CAPTURES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23843.htm">DBA_WORKLOAD_SCHEDULE_CAPTURES displays the workload captures used by replay schedules. Each row in the view contains information about one workload capture.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_WORKLOAD_SCHEDULE_ORDERING" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23844.htm">DBA_WORKLOAD_SCHEDULE_ORDERING displays the start ordering between workload captures in the replay schedule. Each row in the view defines one start ordering between two workload captures in the same replay schedule.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_WORKLOAD_USER_MAP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23931.htm">DBA_WORKLOAD_USER_MAP contains all the mappings ever done until they are removed at some point.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_XML_INDEXES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23700.htm">DBA_XML_INDEXES describes all XML indexes in the database. Its columns are the same as those in ALL_XML_INDEXES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_XML_NESTED_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23845.htm">DBA_XML_NESTED_TABLES describes all the tables and their corresponding nested tables. Its columns are the same as those in ALL_XML_NESTED_TABLES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_XML_OUT_OF_LINE_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23846.htm">DBA_XML_OUT_OF_LINE_TABLES descibes all the out of line tables connected to a given root table for the same schema. Its columns are the same as those in ALL_XML_OUT_OF_LINE_TABLES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_XML_SCHEMA_ATTRIBUTES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23847.htm">DBA_XML_SCHEMA_ATTRIBUTES describes all the attributes and their properties. Its columns are the same as those in ALL_XML_SCHEMA_ATTRIBUTES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_XML_SCHEMA_COMPLEX_TYPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23848.htm">DBA_XML_SCHEMA_COMPLEX_TYPES describes all complex types in the database. Its columns are the same as those in ALL_XML_SCHEMA_COMPLEX_TYPES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_XML_SCHEMA_ELEMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23849.htm">DBA_XML_SCHEMA_ELEMENTS describes all the elements and their properties. Its columns are the same as those in ALL_XML_SCHEMA_ELEMENTS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_XML_SCHEMA_NAMESPACES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23850.htm">DBA_XML_SCHEMA_NAMESPACES describes all the available namespaces. Its columns are the same as those in ALL_XML_SCHEMA_NAMESPACES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_XML_SCHEMA_SIMPLE_TYPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23851.htm">DBA_XML_SCHEMA_SIMPLE_TYPES describes all simple types. Its columns are the same as those in ALL_XML_SCHEMA_SIMPLE_TYPES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_XML_SCHEMA_SUBSTGRP_HEAD" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23852.htm">DBA_XML_SCHEMA_SUBSTGRP_HEAD describes the heads of substitution groups. Its columns are the same as those in ALL_XML_SCHEMA_SUBSTGRP_HEAD.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_XML_SCHEMA_SUBSTGRP_MBRS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23853.htm">DBA_XML_SCHEMA_SUBSTGRP_MBRS describes all members of substitution groups. Its columns are the same as those in ALL_XML_SCHEMA_SUBSTGRP_MBRS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_XML_SCHEMAS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23307.htm">DBA_XML_SCHEMAS describes all registered XML schemas in the database. Its columns are the same as those in ALL_XML_SCHEMAS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_XML_TAB_COLS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23308.htm">DBA_XML_TAB_COLS describes the columns of all XML tables in the database. Its columns are the same as those in ALL_XML_TAB_COLS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_XML_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23309.htm">DBA_XML_TABLES describes all XML tables in the database. Its columns are the same as those in ALL_XML_TABLES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_XML_VIEW_COLS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23310.htm">DBA_XML_VIEW_COLS describes the columns of all XML views in the database. Its columns are the same as those in ALL_XML_VIEW_COLS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_XML_VIEWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23311.htm">DBA_XML_VIEWS describes all XML views in the database. Its columns are the same as those in ALL_XML_VIEWS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_XS_AUDIT_POLICY_OPTIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23884.htm">DBA_XS_AUDIT_POLICY_OPTIONS describes auditing options defined under all audit policies specific to Oracle Database Real Application Security.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_XS_AUDIT_TRAIL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23886.htm">DBA_XS_AUDIT_TRAIL describes all audit records specific to Oracle Database Real Application Security.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_XS_ENB_AUDIT_POLICIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23885.htm">DBA_XS_ENB_AUDIT_POLICIES describes all the audit policies specific to Oracle Database Real Application Security that are enabled to users.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_XSTREAM_ADMINISTRATOR" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23784.htm">DBA_XSTREAM_ADMINISTRATOR displays information about the users who have been granted privileges to be XStream administrators by procedures in the DBMS_XSTREAM_AUTH package. Its columns are the same as those in ALL_XSTREAM_ADMINISTRATOR.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_XSTREAM_INBOUND" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23734.htm">DBA_XSTREAM_INBOUND displays information about all XStream inbound servers in the database. Its columns are the same as those in ALL_XSTREAM_INBOUND.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_XSTREAM_INBOUND_PROGRESS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23770.htm">DBA_XSTREAM_INBOUND_PROGRESS displays information about the progress made by all XStream inbound servers in the database. Its columns are the same as those in ALL_XSTREAM_INBOUND_PROGRESS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_XSTREAM_OUT_SUPPORT_MODE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23785.htm">DBA_XSTREAM_OUT_SUPPORT_MODE displays information about the level of XStream capture process support for the tables in the database. Its columns are the same as those in ALL_XSTREAM_OUT_SUPPORT_MODE.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_XSTREAM_OUTBOUND" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23735.htm">DBA_XSTREAM_OUTBOUND displays information about all XStream outbound servers in the database. Its columns are the same as those in ALL_XSTREAM_OUTBOUND.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_XSTREAM_OUTBOUND_PROGRESS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23736.htm">DBA_XSTREAM_OUTBOUND_PROGRESS displays information about the progress made by all XStream outbound servers in the database. Its columns are the same as those in ALL_XSTREAM_OUTBOUND_PROGRESS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_XSTREAM_RULES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23737.htm">DBA_XSTREAM_RULES displays information about all XStream rules in the database. Its columns are the same as those in ALL_XSTREAM_RULES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_XSTREAM_SPLIT_MERGE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23907.htm">DBA_XSTREAM_SPLIT_MERGE displays information about XStream current automatic split and merge operations.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_XSTREAM_SPLIT_MERGE_HIST" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23908.htm">DBA_XSTREAM_SPLIT_MERGE_HIST displays information about past XStream automatic split and merge operations.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_XSTREAM_STMT_HANDLERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23916.htm">DBA_XSTREAM_STMT_HANDLERS displays information about all XStream statement DML handlers in the database..</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_XSTREAM_STMTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23904.htm">DBA_XSTREAM_STMTS displays information about the statements in all XStream statement DML handlers in the database..</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_XSTREAM_TRANSFORMATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23905.htm">DBA_XSTREAM_TRANSFORMATIONS displays information about all XStream transformations available on a system, in order of execution. Its columns are the same as those in ALL_XSTREAM_TRANSFORMATIONS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ZONEMAP_MEASURES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23859.htm">DBA_ZONEMAP_MEASURES describes the measures for all the zone maps in the database. Its columns are the same as those in ALL_ZONEMAP_MEASURES.</DataDictionaryObject>
    <DataDictionaryObject Name="DBA_ZONEMAPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn23860.htm">DBA_ZONEMAPS describes all the zone maps in the database. Its columns are the same as those in ALL_ZONEMAPS.</DataDictionaryObject>
    <DataDictionaryObject Name="DBFIPS_140" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10356.htm" />
    <DataDictionaryObject Name="DBFS_CONTENT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29148.htm">DBFS_CONTENT displays all the path items from all available content stores in the system.</DataDictionaryObject>
    <DataDictionaryObject Name="DBFS_CONTENT_PROPERTIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29149.htm">DBFS_CONTENT_PROPERTIES displays all the property/value pairs for all path items in all content stores in the system.</DataDictionaryObject>
    <DataDictionaryObject Name="DBMS_ALERT_INFO" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29109.htm">DBMS_ALERT_INFO describes registered alerts.</DataDictionaryObject>
    <DataDictionaryObject Name="DBMS_LOCK_ALLOCATED" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29110.htm">DBMS_LOCK_ALLOCATED describes user-allocated locks.</DataDictionaryObject>
    <DataDictionaryObject Name="DBWR_IO_SLAVES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10045.htm" />
    <DataDictionaryObject Name="DDL_LOCK_TIMEOUT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10267.htm" />
    <DataDictionaryObject Name="DEFERRED_SEGMENT_CREATION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10307.htm" />
    <DataDictionaryObject Name="DEPTREE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29083.htm">This view, created by utldtree.sql, contains information on the object dependency tree. For user SYS, this view displays shared cursors (and only shared cursors) that depend on the object. For all other users, it displays objects other than shared cursors. Other users can access SYS.DEPTREE for information on shared cursors.</DataDictionaryObject>
    <DataDictionaryObject Name="DG_BROKER_CONFIG_FILEn" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10046.htm" />
    <DataDictionaryObject Name="DG_BROKER_START" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10047.htm" />
    <DataDictionaryObject Name="DIAGNOSTIC_DEST" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10280.htm" />
    <DataDictionaryObject Name="DICT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29011.htm">DICT is a synonym for DICTIONARY.</DataDictionaryObject>
    <DataDictionaryObject Name="DICT_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29013.htm">DICT_COLUMNS contains descriptions of columns in data dictionary tables and views.</DataDictionaryObject>
    <DataDictionaryObject Name="DICTIONARY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29014.htm">DICTIONARY contains descriptions of data dictionary tables and views.</DataDictionaryObject>
    <DataDictionaryObject Name="DISK_ASYNCH_IO" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10048.htm" />
    <DataDictionaryObject Name="DISPATCHERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10049.htm" />
    <DataDictionaryObject Name="DISTRIBUTED_LOCK_TIMEOUT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10050.htm" />
    <DataDictionaryObject Name="DM_USER_MODELS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29073.htm">DM_USER_MODELS displays information about the models in the user's schema.</DataDictionaryObject>
    <DataDictionaryObject Name="DML_LOCKS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10051.htm" />
    <DataDictionaryObject Name="DNFS_BATCH_SIZE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10334.htm" />
    <DataDictionaryObject Name="DOCUMENT_LINKS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29078.htm">DOCUMENT_LINKS provides system information about Oracle XML DB document links in Oracle XML DB Repository documents. When an XML document that includes XLink or XInclude links is added to the repository, these links can be mapped to document links, which are tracked using view DOCUMENT_LINKS.</DataDictionaryObject>
    <DataDictionaryObject Name="DST_UPGRADE_INSERT_CONV" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10308.htm" />
    <DataDictionaryObject Name="ENABLE_DDL_LOGGING" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10302.htm" />
    <DataDictionaryObject Name="ENABLE_GOLDENGATE_REPLICATION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10346.htm" />
    <DataDictionaryObject Name="ENABLE_PLUGGABLE_DATABASE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10338.htm" />
    <DataDictionaryObject Name="ERROR_SIZE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29017.htm">ERROR_SIZE is accessed to create "DBA_OBJECT_SIZE" and "USER_OBJECT_SIZE".</DataDictionaryObject>
    <DataDictionaryObject Name="EVENT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10054.htm" />
    <DataDictionaryObject Name="EXCEPTIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29511.htm">EXCEPTIONS contains information on violations of integrity constraints. This table is created by the utlexcpt.sql script.</DataDictionaryObject>
    <DataDictionaryObject Name="FAL_CLIENT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10055.htm" />
    <DataDictionaryObject Name="FAL_SERVER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10056.htm" />
    <DataDictionaryObject Name="FAST_START_MTTR_TARGET" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10058.htm" />
    <DataDictionaryObject Name="FAST_START_PARALLEL_ROLLBACK" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10059.htm" />
    <DataDictionaryObject Name="FILE_MAPPING" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10060.htm" />
    <DataDictionaryObject Name="FILEIO_NETWORK_ADAPTERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10252.htm" />
    <DataDictionaryObject Name="FILESYSTEMIO_OPTIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10061.htm" />
    <DataDictionaryObject Name="FIXED_DATE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10062.htm" />
    <DataDictionaryObject Name="FLASHBACK_TRANSACTION_QUERY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29086.htm">FLASHBACK_TRANSACTION_QUERY displays information about all flashback transaction queries in the database. The database must have at least minimal supplemental logging enabled to avoid unpredictable behavior.</DataDictionaryObject>
    <DataDictionaryObject Name="GCS_SERVER_PROCESSES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10259.htm" />
    <DataDictionaryObject Name="GLOBAL_CONTEXT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29087.htm">GLOBAL_CONTEXT displays the values of global context attributes, which are accessible for the current session, based on the CLIENT_IDENTIFIER value. This view is similar to SESSION_CONTEXT, which lists the values of session (or local) context attributes set under the current session.</DataDictionaryObject>
    <DataDictionaryObject Name="GLOBAL_CONTEXT_POOL_SIZE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10064.htm" />
    <DataDictionaryObject Name="GLOBAL_NAME" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29019.htm">GLOBAL_NAME contains one row that displays the global name of the current database.</DataDictionaryObject>
    <DataDictionaryObject Name="GLOBAL_NAMES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10065.htm" />
    <DataDictionaryObject Name="GLOBAL_TXN_PROCESSES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10291.htm" />
    <DataDictionaryObject Name="HASH_AREA_SIZE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10066.htm" />
    <DataDictionaryObject Name="HEAT_MAP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10342.htm" />
    <DataDictionaryObject Name="HI_SHARED_MEMORY_ADDRESS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10068.htm" />
    <DataDictionaryObject Name="HS_ALL_CAPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29088.htm">HS_ALL_CAPS contains information about all of the capabilities (that is, features) associated with non-Oracle (FDS) data stores.</DataDictionaryObject>
    <DataDictionaryObject Name="HS_ALL_DD" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29089.htm">HS_ALL_DD contains data dictionary information about non-Oracle (FDS) data stores.</DataDictionaryObject>
    <DataDictionaryObject Name="HS_ALL_INITS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29090.htm">HS_ALL_INITS contains initialization parameter information about non-Oracle (FDS) data stores.</DataDictionaryObject>
    <DataDictionaryObject Name="HS_AUTOREGISTER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10069.htm" />
    <DataDictionaryObject Name="HS_BASE_CAPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29091.htm">HS_BASE_CAPS contains information about base capability (that is, base features) of the non-Oracle (FDS) data store.</DataDictionaryObject>
    <DataDictionaryObject Name="HS_BASE_DD" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29092.htm">HS_BASE_DD displays information from the base data dictionary translation table.</DataDictionaryObject>
    <DataDictionaryObject Name="HS_CLASS_CAPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29093.htm">HS_CLASS_CAPS contains information about the class-specific (driver) capabilities belonging to the non-Oracle (FDS) data store.</DataDictionaryObject>
    <DataDictionaryObject Name="HS_CLASS_DD" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29094.htm">HS_CLASS_DD displays information from the non-Oracle data store (FDS) class-specific data dictionary translations.</DataDictionaryObject>
    <DataDictionaryObject Name="HS_CLASS_INIT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29095.htm">HS_CLASS_INIT displays information about the non-Oracle (FDS) class-specific initialization parameters.</DataDictionaryObject>
    <DataDictionaryObject Name="HS_FDS_CLASS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29096.htm">HS_FDS_CLASS contains information about legal non-Oracle (FDS) classes.</DataDictionaryObject>
    <DataDictionaryObject Name="HS_FDS_INST" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29098.htm">HS_FDS_INST contains information about non-Oracle (FDS) instances.</DataDictionaryObject>
    <DataDictionaryObject Name="HS_INST_CAPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29099.htm">HS_INST_CAPS contains information about instance-specific capabilities (that is, features).</DataDictionaryObject>
    <DataDictionaryObject Name="HS_INST_DD" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29100.htm">HS_INST_DD displays information from the non-Oracle (FDS) instance-specific data dictionary translations.</DataDictionaryObject>
    <DataDictionaryObject Name="HS_INST_INIT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29101.htm">HS_INST_INIT contains information about the non-Oracle (FDS) instance-specific initialization parameters.</DataDictionaryObject>
    <DataDictionaryObject Name="CHAINED_ROWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29502.htm">CHAINED_ROWS stores the output for the ANALYZE statement with the LIST CHAINED ROWS clause. You must run the utlchain.sql or utlchn1.sql script to create this table.</DataDictionaryObject>
    <DataDictionaryObject Name="IDEPTREE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29084.htm">This view, created by utldtree.sql, lists the indented dependency tree. It is a pre-sorted, pretty-print version of DEPTREE.</DataDictionaryObject>
    <DataDictionaryObject Name="IFILE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10070.htm" />
    <DataDictionaryObject Name="IND" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29023.htm">IND is a synonym for USER_INDEXES.</DataDictionaryObject>
    <DataDictionaryObject Name="INDEX_HISTOGRAM" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29024.htm">INDEX_HISTOGRAM contains information from the ANALYZE INDEX ... VALIDATE STRUCTURE statement.</DataDictionaryObject>
    <DataDictionaryObject Name="INDEX_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29025.htm">INDEX_STATS stores information from the last ANALYZE INDEX ... VALIDATE STRUCTURE statement.</DataDictionaryObject>
    <DataDictionaryObject Name="INMEMORY_CLAUSE_DEFAULT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10350.htm" />
    <DataDictionaryObject Name="INMEMORY_FORCE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10353.htm" />
    <DataDictionaryObject Name="INMEMORY_MAX_POPULATE_SERVERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10355.htm" />
    <DataDictionaryObject Name="INMEMORY_QUERY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10351.htm" />
    <DataDictionaryObject Name="INMEMORY_SIZE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10348.htm" />
    <DataDictionaryObject Name="INMEMORY_TRICKLE_REPOPULATE_SERVERS_PERCENT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10358.htm" />
    <DataDictionaryObject Name="INSTANCE_GROUPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10071.htm" />
    <DataDictionaryObject Name="INSTANCE_NAME" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10072.htm" />
    <DataDictionaryObject Name="INSTANCE_NUMBER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10073.htm" />
    <DataDictionaryObject Name="INSTANCE_TYPE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10244.htm" />
    <DataDictionaryObject Name="JAVA_JIT_ENABLED" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10289.htm" />
    <DataDictionaryObject Name="JAVA_MAX_SESSIONSPACE_SIZE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10074.htm" />
    <DataDictionaryObject Name="JAVA_POOL_SIZE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10075.htm" />
    <DataDictionaryObject Name="JAVA_SOFT_SESSIONSPACE_LIMIT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10076.htm" />
    <DataDictionaryObject Name="JOB_QUEUE_PROCESSES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10077.htm" />
    <DataDictionaryObject Name="LARGE_POOL_SIZE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10078.htm" />
    <DataDictionaryObject Name="LDAP_DIRECTORY_ACCESS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10251.htm" />
    <DataDictionaryObject Name="LDAP_DIRECTORY_SYSAUTH" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10281.htm" />
    <DataDictionaryObject Name="LICENSE_MAX_SESSIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10079.htm" />
    <DataDictionaryObject Name="LICENSE_MAX_USERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10080.htm" />
    <DataDictionaryObject Name="LICENSE_SESSIONS_WARNING" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10081.htm" />
    <DataDictionaryObject Name="LISTENER_NETWORKS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10313.htm" />
    <DataDictionaryObject Name="LOCAL_LISTENER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10082.htm" />
    <DataDictionaryObject Name="LOCK_NAME_SPACE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10083.htm" />
    <DataDictionaryObject Name="LOCK_SGA" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10084.htm" />
    <DataDictionaryObject Name="LOG_ARCHIVE_CONFIG" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10237.htm" />
    <DataDictionaryObject Name="LOG_ARCHIVE_DEST" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10085.htm" />
    <DataDictionaryObject Name="LOG_ARCHIVE_DEST_n" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10086.htm" />
    <DataDictionaryObject Name="LOG_ARCHIVE_DEST_STATE_n" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10087.htm" />
    <DataDictionaryObject Name="LOG_ARCHIVE_DUPLEX_DEST" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10088.htm" />
    <DataDictionaryObject Name="LOG_ARCHIVE_FORMAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10089.htm" />
    <DataDictionaryObject Name="LOG_ARCHIVE_MAX_PROCESSES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10090.htm" />
    <DataDictionaryObject Name="LOG_ARCHIVE_MIN_SUCCEED_DEST" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10091.htm" />
    <DataDictionaryObject Name="LOG_ARCHIVE_TRACE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10093.htm" />
    <DataDictionaryObject Name="LOG_BUFFER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10094.htm" />
    <DataDictionaryObject Name="LOG_FILE_NAME_CONVERT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10098.htm" />
    <DataDictionaryObject Name="LOG_CHECKPOINT_INTERVAL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10095.htm" />
    <DataDictionaryObject Name="LOG_CHECKPOINT_TIMEOUT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10096.htm" />
    <DataDictionaryObject Name="LOG_CHECKPOINTS_TO_ALERT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10097.htm" />
    <DataDictionaryObject Name="LOGSTDBY_UNSUPPORTED_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29081.htm">LOGSTDBY_UNSUPPORTED_TABLES is a synonym for DBA_LOGSTDBY_UNSUPPORTED_TABLE.</DataDictionaryObject>
    <DataDictionaryObject Name="MAP_OBJECT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29504.htm">MAP_OBJECT is a global temporary table that displays the hierarchical arrangement of storage containers for objects. Each row in the table represents a level in the hierarchy.</DataDictionaryObject>
    <DataDictionaryObject Name="MAX_DISPATCHERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10102.htm" />
    <DataDictionaryObject Name="MAX_DUMP_FILE_SIZE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10103.htm" />
    <DataDictionaryObject Name="MAX_ENABLED_ROLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10104.htm" />
    <DataDictionaryObject Name="MAX_SHARED_SERVERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10106.htm" />
    <DataDictionaryObject Name="MAX_STRING_SIZE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10321.htm" />
    <DataDictionaryObject Name="MEMORY_MAX_TARGET" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10284.htm" />
    <DataDictionaryObject Name="MEMORY_TARGET" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10285.htm" />
    <DataDictionaryObject Name="NLS_CALENDAR" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10116.htm" />
    <DataDictionaryObject Name="NLS_COMP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10117.htm" />
    <DataDictionaryObject Name="NLS_CURRENCY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10118.htm" />
    <DataDictionaryObject Name="NLS_DATABASE_PARAMETERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29030.htm">NLS_DATABASE_PARAMETERS lists permanent NLS parameters of the database.</DataDictionaryObject>
    <DataDictionaryObject Name="NLS_DATE_FORMAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10119.htm" />
    <DataDictionaryObject Name="NLS_DATE_LANGUAGE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10120.htm" />
    <DataDictionaryObject Name="NLS_DUAL_CURRENCY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10121.htm" />
    <DataDictionaryObject Name="NLS_INSTANCE_PARAMETERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29031.htm">NLS_INSTANCE_PARAMETERS lists NLS parameters of the instance.</DataDictionaryObject>
    <DataDictionaryObject Name="NLS_ISO_CURRENCY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10122.htm" />
    <DataDictionaryObject Name="NLS_LANGUAGE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10123.htm" />
    <DataDictionaryObject Name="NLS_LENGTH_SEMANTICS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10124.htm" />
    <DataDictionaryObject Name="NLS_NCHAR_CONV_EXCP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10125.htm" />
    <DataDictionaryObject Name="NLS_NUMERIC_CHARACTERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10126.htm" />
    <DataDictionaryObject Name="NLS_SESSION_PARAMETERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29032.htm">NLS_SESSION_PARAMETERS lists NLS parameters of the user session.</DataDictionaryObject>
    <DataDictionaryObject Name="NLS_SORT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10127.htm" />
    <DataDictionaryObject Name="NLS_TERRITORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10128.htm" />
    <DataDictionaryObject Name="NLS_TIMESTAMP_FORMAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10131.htm" />
    <DataDictionaryObject Name="NLS_TIMESTAMP_TZ_FORMAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10132.htm" />
    <DataDictionaryObject Name="NONCDB_COMPATIBLE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10339.htm" />
    <DataDictionaryObject Name="O7_DICTIONARY_ACCESSIBILITY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10133.htm" />
    <DataDictionaryObject Name="OBJ" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29029.htm">OBJ is a synonym for USER_OBJECTS.</DataDictionaryObject>
    <DataDictionaryObject Name="OBJECT_CACHE_MAX_SIZE_PERCENT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10134.htm" />
    <DataDictionaryObject Name="OBJECT_CACHE_OPTIMAL_SIZE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10135.htm" />
    <DataDictionaryObject Name="OLAP_PAGE_POOL_SIZE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10136.htm" />
    <DataDictionaryObject Name="OPEN_CURSORS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10137.htm" />
    <DataDictionaryObject Name="OPEN_LINKS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10138.htm" />
    <DataDictionaryObject Name="OPEN_LINKS_PER_INSTANCE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10139.htm" />
    <DataDictionaryObject Name="OPTIMIZER_ADAPTIVE_FEATURES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10344.htm" />
    <DataDictionaryObject Name="OPTIMIZER_ADAPTIVE_REPORTING_ONLY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10327.htm" />
    <DataDictionaryObject Name="OPTIMIZER_CAPTURE_SQL_PLAN_BASELINES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10292.htm" />
    <DataDictionaryObject Name="OPTIMIZER_DYNAMIC_SAMPLING" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10140.htm" />
    <DataDictionaryObject Name="OPTIMIZER_FEATURES_ENABLE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10141.htm" />
    <DataDictionaryObject Name="OPTIMIZER_INDEX_CACHING" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10142.htm" />
    <DataDictionaryObject Name="OPTIMIZER_INDEX_COST_ADJ" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10143.htm" />
    <DataDictionaryObject Name="OPTIMIZER_INMEMORY_AWARE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10359.htm" />
    <DataDictionaryObject Name="OPTIMIZER_MODE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10145.htm" />
    <DataDictionaryObject Name="OPTIMIZER_SECURE_VIEW_MERGING" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10262.htm" />
    <DataDictionaryObject Name="OPTIMIZER_USE_INVISIBLE_INDEXES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10301.htm" />
    <DataDictionaryObject Name="OPTIMIZER_USE_PENDING_STATISTICS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10288.htm" />
    <DataDictionaryObject Name="OPTIMIZER_USE_SQL_PLAN_BASELINES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10293.htm" />
    <DataDictionaryObject Name="OS_AUTHENT_PREFIX" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10152.htm" />
    <DataDictionaryObject Name="OS_ROLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10153.htm" />
    <DataDictionaryObject Name="PARALLEL_ADAPTIVE_MULTI_USER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10154.htm" />
    <DataDictionaryObject Name="PARALLEL_AUTOMATIC_TUNING" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10155.htm" />
    <DataDictionaryObject Name="PARALLEL_DEGREE_LIMIT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10309.htm" />
    <DataDictionaryObject Name="PARALLEL_DEGREE_POLICY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10310.htm" />
    <DataDictionaryObject Name="PARALLEL_EXECUTION_MESSAGE_SIZE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10156.htm" />
    <DataDictionaryObject Name="PARALLEL_FORCE_LOCAL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10311.htm" />
    <DataDictionaryObject Name="PARALLEL_INSTANCE_GROUP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10157.htm" />
    <DataDictionaryObject Name="PARALLEL_IO_CAP_ENABLED" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10297.htm" />
    <DataDictionaryObject Name="PARALLEL_MAX_SERVERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10158.htm" />
    <DataDictionaryObject Name="PARALLEL_MIN_PERCENT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10159.htm" />
    <DataDictionaryObject Name="PARALLEL_MIN_SERVERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10160.htm" />
    <DataDictionaryObject Name="PARALLEL_MIN_TIME_THRESHOLD" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10312.htm" />
    <DataDictionaryObject Name="PARALLEL_SERVERS_TARGET" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10314.htm" />
    <DataDictionaryObject Name="PARALLEL_THREADS_PER_CPU" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10163.htm" />
    <DataDictionaryObject Name="PATH_VIEW" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29079.htm">PATH_VIEW contains one row for each unique path to access a resource in the Oracle XML DB repository.</DataDictionaryObject>
    <DataDictionaryObject Name="PDB_ALERTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29165.htm">PDB_ALERTS contains descriptions of reasons for PDB alerts.</DataDictionaryObject>
    <DataDictionaryObject Name="PDB_FILE_NAME_CONVERT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10322.htm" />
    <DataDictionaryObject Name="PDB_PLUG_IN_VIOLATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29161.htm">PDB_PLUG_IN_VIOLATIONS displays information about incompatibilities between a PDB and the CDB to which it belongs. This view is also used to display information generated by executing DBMS_PDB.CHECK_PLUG_COMPATIBILITY.</DataDictionaryObject>
    <DataDictionaryObject Name="PERMIT_92_WRAP_FORMAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10317.htm" />
    <DataDictionaryObject Name="PGA_AGGREGATE_LIMIT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10328.htm" />
    <DataDictionaryObject Name="PGA_AGGREGATE_TARGET" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10165.htm" />
    <DataDictionaryObject Name="PLAN_TABLE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29510.htm">PLAN_TABLE is automatically created as a global temporary table to hold the output of an EXPLAIN PLAN statement for all users. PLAN_TABLE is the default sample output table into which the EXPLAIN PLAN statement inserts rows describing execution plans.</DataDictionaryObject>
    <DataDictionaryObject Name="PLSCOPE_SETTINGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10271.htm" />
    <DataDictionaryObject Name="PLSQL_CCFLAGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10261.htm" />
    <DataDictionaryObject Name="PLSQL_CODE_TYPE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10253.htm" />
    <DataDictionaryObject Name="PLSQL_DEBUG" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10254.htm" />
    <DataDictionaryObject Name="PLSQL_OPTIMIZE_LEVEL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10255.htm" />
    <DataDictionaryObject Name="PLSQL_V2_COMPATIBILITY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10173.htm" />
    <DataDictionaryObject Name="PLSQL_WARNINGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10249.htm" />
    <DataDictionaryObject Name="PLUGGABLE_SET_CHECK" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29062.htm">PLUGGABLE_SET_CHECK contains pluggable set checks.</DataDictionaryObject>
    <DataDictionaryObject Name="PRE_PAGE_SGA" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10174.htm" />
    <DataDictionaryObject Name="PROCESSES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10175.htm" />
    <DataDictionaryObject Name="PROCESSOR_GROUP_NAME" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10323.htm" />
    <DataDictionaryObject Name="PRODUCT_COMPONENT_VERSION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29037.htm">PRODUCT_COMPONENT_VERSION contains version and status information for component products.</DataDictionaryObject>
    <DataDictionaryObject Name="PROXY_USERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29039.htm">PROXY_USERS describes the list of proxy users and the clients on whose behalf they can act.</DataDictionaryObject>
    <DataDictionaryObject Name="PSTUBTBL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29505.htm">This table contains information on stubs generated by the PSTUB utility so that an Oracle Forms 3.0 client can call stored procedures in Oracle Database.</DataDictionaryObject>
    <DataDictionaryObject Name="PUBLIC_DEPENDENCY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29106.htm">PUBLIC_DEPENDENCY lists dependencies to and from objects, by object number.</DataDictionaryObject>
    <DataDictionaryObject Name="PUBLICSYN" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29041.htm">PUBLICSYN contains information on public synonyms.</DataDictionaryObject>
    <DataDictionaryObject Name="QUERY_REWRITE_ENABLED" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10176.htm" />
    <DataDictionaryObject Name="QUERY_REWRITE_INTEGRITY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10177.htm" />
    <DataDictionaryObject Name="QUEUE_PRIVILEGES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29107.htm">QUEUE_PRIVILEGES shows all Advanced Queuing object privileges granted to the session.</DataDictionaryObject>
    <DataDictionaryObject Name="RDBMS_SERVER_DN" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10178.htm" />
    <DataDictionaryObject Name="READ_ONLY_OPEN_DELAYED" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10179.htm" />
    <DataDictionaryObject Name="RECOVERY_PARALLELISM" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10180.htm" />
    <DataDictionaryObject Name="RECYCLEBIN" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29036.htm">RECYCLEBIN is a synonym for USER_RECYCLEBIN.</DataDictionaryObject>
    <DataDictionaryObject Name="REDACTION_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29155.htm">REDACTION_COLUMNS describes all redacted columns in the database, giving the owner of the table or view within which the column resides, the object name, the column name, the type of redaction function, the parameters to the redaction function (if any), and an optional description of the redaction policy.</DataDictionaryObject>
    <DataDictionaryObject Name="REDACTION_POLICIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29154.htm">REDACTION_POLICIES displays all redaction policies in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="REDACTION_VALUES_FOR_TYPE_FULL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29164.htm">REDACTION_VALUES_FOR_TYPE_FULL shows all of the current values for full redaction.</DataDictionaryObject>
    <DataDictionaryObject Name="REDO_TRANSPORT_USER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10269.htm" />
    <DataDictionaryObject Name="REMOTE_DEPENDENCIES_MODE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10182.htm" />
    <DataDictionaryObject Name="REMOTE_LISTENER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10183.htm" />
    <DataDictionaryObject Name="REMOTE_LOGIN_PASSWORDFILE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10184.htm" />
    <DataDictionaryObject Name="REMOTE_OS_AUTHENT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10185.htm" />
    <DataDictionaryObject Name="REMOTE_OS_ROLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10186.htm" />
    <DataDictionaryObject Name="REPLICATION_DEPENDENCY_TRACKING" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10187.htm" />
    <DataDictionaryObject Name="REPORT_COMPONENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29074.htm">REPORT_COMPONENTS displays metadata about different database components offering reports in XML, HTML, or Text formats. Reports are first generated in XML and can then be translated into HTML or Text formats, for supported report types. Each component generates one or more reports containing different types of content. You can request reports using the component's own PL/SQL interface (for example, DBMS_SQLTUNE for SQL Tuning Advisor).</DataDictionaryObject>
    <DataDictionaryObject Name="REPORT_FILES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29075.htm">REPORT_FILES displays data for all of the XML schema and XSLT files associated with reports for a given component.</DataDictionaryObject>
    <DataDictionaryObject Name="REPORT_FORMATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29076.htm">REPORT_FORMATS displays metadata about the different output formats supported for reports. Some reports are generated in XML only, in which case no data will appear in this view. When reports support HTML or Text formats (for example, the SQL Performance Analyzer reports), metadata about the format will appear in this view. XML reports can be translated to another format with the DBMS_REPORT.FORMAT_REPORT procedure.</DataDictionaryObject>
    <DataDictionaryObject Name="RESOURCE_COST" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29058.htm">RESOURCE_COST lists the cost for each resource.</DataDictionaryObject>
    <DataDictionaryObject Name="RESOURCE_LIMIT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10188.htm" />
    <DataDictionaryObject Name="RESOURCE_MANAGER_CPU_ALLOCATION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10303.htm" />
    <DataDictionaryObject Name="RESOURCE_MANAGER_PLAN" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10189.htm" />
    <DataDictionaryObject Name="RESOURCE_MAP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29506.htm">RESOURCE_MAP describes resources. This table can be used to map resource names to resource numbers.</DataDictionaryObject>
    <DataDictionaryObject Name="RESOURCE_VIEW" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29080.htm">RESOURCE_VIEW contains one row for each resource in the Oracle XML DB repository.</DataDictionaryObject>
    <DataDictionaryObject Name="RESULT_CACHE_MAX_RESULT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10298.htm" />
    <DataDictionaryObject Name="RESULT_CACHE_MAX_SIZE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10272.htm" />
    <DataDictionaryObject Name="RESULT_CACHE_MODE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10270.htm" />
    <DataDictionaryObject Name="RESULT_CACHE_REMOTE_EXPIRATION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10294.htm" />
    <DataDictionaryObject Name="RESUMABLE_TIMEOUT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10239.htm" />
    <DataDictionaryObject Name="ROLE_ROLE_PRIVS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29059.htm">ROLE_ROLE_PRIVS describes the roles granted to other roles. Information is provided only about roles to which the user has access.</DataDictionaryObject>
    <DataDictionaryObject Name="ROLE_SYS_PRIVS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29060.htm">ROLE_SYS_PRIVS describes system privileges granted to roles. Information is provided only about roles to which the user has access.</DataDictionaryObject>
    <DataDictionaryObject Name="ROLE_TAB_PRIVS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29061.htm">ROLE_TAB_PRIVS describes table privileges granted to roles. Information is provided only about roles to which the user has access.</DataDictionaryObject>
    <DataDictionaryObject Name="ROLLBACK_SEGMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10190.htm" />
    <DataDictionaryObject Name="SEC_CASE_SENSITIVE_LOGON" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10299.htm" />
    <DataDictionaryObject Name="SEC_MAX_FAILED_LOGIN_ATTEMPTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10274.htm" />
    <DataDictionaryObject Name="SEC_PROTOCOL_ERROR_FURTHER_ACTION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10282.htm" />
    <DataDictionaryObject Name="SEC_PROTOCOL_ERROR_TRACE_ACTION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10283.htm" />
    <DataDictionaryObject Name="SEC_RETURN_SERVER_RELEASE_BANNER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10275.htm" />
    <DataDictionaryObject Name="SEQ" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29033.htm">SEQ is a synonym for USER_SEQUENCES.</DataDictionaryObject>
    <DataDictionaryObject Name="SERIAL_REUSE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10192.htm" />
    <DataDictionaryObject Name="SERVICE_NAMES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10194.htm" />
    <DataDictionaryObject Name="SESSION_CACHED_CURSORS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10195.htm" />
    <DataDictionaryObject Name="SESSION_CONTEXT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29026.htm">SESSION_CONTEXT describes the context attributes and their values set for the current session.</DataDictionaryObject>
    <DataDictionaryObject Name="SESSION_MAX_OPEN_FILES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10196.htm" />
    <DataDictionaryObject Name="SESSION_PRIVS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29027.htm">SESSION_PRIVS describes the privileges that are currently available to the user.</DataDictionaryObject>
    <DataDictionaryObject Name="SESSION_ROLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29028.htm">SESSION_ROLES describes the roles that are currently enabled to the user.</DataDictionaryObject>
    <DataDictionaryObject Name="SESSIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10197.htm" />
    <DataDictionaryObject Name="SGA_MAX_SIZE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10198.htm" />
    <DataDictionaryObject Name="SGA_TARGET" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10256.htm" />
    <DataDictionaryObject Name="SHADOW_CORE_DUMP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10199.htm" />
    <DataDictionaryObject Name="SHARED_MEMORY_ADDRESS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10200.htm" />
    <DataDictionaryObject Name="SHARED_POOL_RESERVED_SIZE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10201.htm" />
    <DataDictionaryObject Name="SHARED_POOL_SIZE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10202.htm" />
    <DataDictionaryObject Name="SHARED_SERVER_SESSIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10203.htm" />
    <DataDictionaryObject Name="SHARED_SERVERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10204.htm" />
    <DataDictionaryObject Name="SCHEDULER_BATCH_ERRORS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29077.htm">SCHEDULER_BATCH_ERRORS displays the errors caused by each call in the batch after a Scheduler batch call (when the COMMIT_SEMANTICS argument has been set to ABSORB_ERRORS).</DataDictionaryObject>
    <DataDictionaryObject Name="SCHEMA_EXPORT_OBJECTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29139.htm">SCHEMA_EXPORT_OBJECTS lists simple path names for some of the object types belonging to a Data Pump schema export, which is invoked using the SCHEMAS parameter on the expdp command. Users of the Data Pump Export and Import utilities can query this view to determine valid values for the EXCLUDE and INCLUDE parameters.</DataDictionaryObject>
    <DataDictionaryObject Name="SKIP_UNUSABLE_INDEXES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10240.htm" />
    <DataDictionaryObject Name="SMTP_OUT_SERVER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10241.htm" />
    <DataDictionaryObject Name="SORT_AREA_RETAINED_SIZE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10205.htm" />
    <DataDictionaryObject Name="SORT_AREA_SIZE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10206.htm" />
    <DataDictionaryObject Name="SOURCE_SIZE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29018.htm">Oracle accesses this view to create views about object size.</DataDictionaryObject>
    <DataDictionaryObject Name="SPATIAL_VECTOR_ACCELERATION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10337.htm" />
    <DataDictionaryObject Name="SPFILE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10207.htm" />
    <DataDictionaryObject Name="SQL_TRACE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10208.htm" />
    <DataDictionaryObject Name="SQL92_SECURITY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10210.htm" />
    <DataDictionaryObject Name="SQLTUNE_CATEGORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10257.htm" />
    <DataDictionaryObject Name="STANDBY_ARCHIVE_DEST" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10211.htm" />
    <DataDictionaryObject Name="STANDBY_FILE_MANAGEMENT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10212.htm" />
    <DataDictionaryObject Name="STAR_TRANSFORMATION_ENABLED" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10213.htm" />
    <DataDictionaryObject Name="STATISTICS_LEVEL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10214.htm" />
    <DataDictionaryObject Name="STMT_AUDIT_OPTION_MAP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29507.htm">STMT_AUDIT_OPTION_MAP describes auditing option type codes. This table can be used to map auditing option type numbers to type names.</DataDictionaryObject>
    <DataDictionaryObject Name="STREAMS_POOL_SIZE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10243.htm" />
    <DataDictionaryObject Name="SYN" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29034.htm">SYN is a synonym for USER_SYNONYMS.</DataDictionaryObject>
    <DataDictionaryObject Name="SYNONYMS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29064.htm">SYNONYMS is included for compatibility. Oracle recommends that you do not use this view.</DataDictionaryObject>
    <DataDictionaryObject Name="SYS_OBJECTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29108.htm">SYS_OBJECTS maps object IDs to object types and segment data block addresses.</DataDictionaryObject>
    <DataDictionaryObject Name="SYSCATALOG" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29065.htm">SYSCATALOG is included for compatibility. Oracle recommends that you do not use this view.</DataDictionaryObject>
    <DataDictionaryObject Name="SYSFILES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29066.htm">SYSFILES is included for compatibility. Oracle recommends that you do not use this view.</DataDictionaryObject>
    <DataDictionaryObject Name="SYSSEGOBJ" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29067.htm">SYSSEGOBJ is included for compatibility. Oracle recommends that you do not use this view.</DataDictionaryObject>
    <DataDictionaryObject Name="SYSTEM_PRIVILEGE_MAP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29508.htm">SYSTEM_PRIVILEGE_MAP describes privilege (auditing option) type codes. This table can be used to map privilege (auditing option) type numbers to type names.</DataDictionaryObject>
    <DataDictionaryObject Name="TAB" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29068.htm">TAB is included for compatibility. Oracle recommends that you do not use this view.</DataDictionaryObject>
    <DataDictionaryObject Name="TABLE_EXPORT_OBJECTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29141.htm">TABLE_EXPORT_OBJECTS lists simple path names for some of the object types belonging to a Data Pump schema export, which is invoked using the TABLES parameter on the expdp command. Users of the Data Pump Export and Import utilities can query this view to determine valid values for the EXCLUDE and INCLUDE parameters.</DataDictionaryObject>
    <DataDictionaryObject Name="TABLE_PRIVILEGE_MAP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29509.htm">TABLE_PRIVILEGE_MAP describes privilege (auditing option) type codes. This table can be used to map privilege (auditing option) type numbers to type names.</DataDictionaryObject>
    <DataDictionaryObject Name="TABQUOTAS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29070.htm">TABQUOTAS is included for compatibility. Oracle recommends that you do not use this view.</DataDictionaryObject>
    <DataDictionaryObject Name="TABS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29035.htm">TABS is a synonym for USER_TABLES.</DataDictionaryObject>
    <DataDictionaryObject Name="TAPE_ASYNCH_IO" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10215.htm" />
    <DataDictionaryObject Name="TEMP_UNDO_ENABLED" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10326.htm" />
    <DataDictionaryObject Name="THREAD" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10216.htm" />
    <DataDictionaryObject Name="THREADED_EXECUTION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10335.htm" />
    <DataDictionaryObject Name="TIMED_OS_STATISTICS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10217.htm" />
    <DataDictionaryObject Name="TIMED_STATISTICS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10218.htm" />
    <DataDictionaryObject Name="TRACE_ENABLED" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10219.htm" />
    <DataDictionaryObject Name="TRACEFILE_IDENTIFIER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10220.htm" />
    <DataDictionaryObject Name="TRANSACTIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10222.htm" />
    <DataDictionaryObject Name="TRANSACTIONS_PER_ROLLBACK_SEGMENT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10223.htm" />
    <DataDictionaryObject Name="TRUSTED_SERVERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29071.htm">TRUSTED_SERVERS displays whether a server is trusted or untrusted.</DataDictionaryObject>
    <DataDictionaryObject Name="TS_PITR_CHECK" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29021.htm">This view, created by catpitr.sql, provides information on any dependencies or restrictions that might prevent tablespace point-in-time recovery from proceeding. This view applies only to the tablespace point-in-time recovery feature.</DataDictionaryObject>
    <DataDictionaryObject Name="TS_PITR_OBJECTS_TO_BE_DROPPED" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29022.htm">TS_PITR_OBJECTS_TO_BE_DROPPED lists all objects lost as a result of performing tablespace point-in-time recovery. This view applies only to the tablespace point-in-time recovery feature.</DataDictionaryObject>
    <DataDictionaryObject Name="UNDO_MANAGEMENT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10224.htm" />
    <DataDictionaryObject Name="UNDO_RETENTION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10225.htm" />
    <DataDictionaryObject Name="UNDO_TABLESPACE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10227.htm" />
    <DataDictionaryObject Name="UNI_PLUGGABLE_SET_CHECK" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29063.htm">UNI_PLUGGABLE_SET_CHECK contains pluggable check information.</DataDictionaryObject>
    <DataDictionaryObject Name="UNIFIED_AUDIT_SGA_QUEUE_SIZE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10343.htm" />
    <DataDictionaryObject Name="UNIFIED_AUDIT_TRAIL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29162.htm">When unified auditing is enabled in Oracle Database, the audit records are populated in this new audit trail. This view displays audit records in tabular form by retrieving the audit records from the audit trail.</DataDictionaryObject>
    <DataDictionaryObject Name="USABLE_EDITIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn29166.htm">USABLE_EDITIONS describes the usable editions of the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="USE_DEDICATED_BROKER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10341.htm" />
    <DataDictionaryObject Name="USE_INDIRECT_DATA_BUFFERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10228.htm" />
    <DataDictionaryObject Name="USE_LARGE_PAGES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10320.htm" />
    <DataDictionaryObject Name="USER_ADDM_FDG_BREAKDOWN" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26617.htm">USER_ADDM_FDG_BREAKDOWN describes the contribution for each finding from the different instances owned by the current user. Its columns are the same as those in "DBA_ADDM_FDG_BREAKDOWN".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ADDM_FINDINGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26618.htm">USER_ADDM_FINDINGS displays the ADDM findings discovered by the advisors owned by the current user. Each row for ADDM tasks in the related USER_ADVISOR_FINDINGS view has a corresponding row in this view. Its columns (except for OWNER) are the same as those in "DBA_ADDM_FINDINGS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ADDM_INSTANCES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26619.htm">USER_ADDM_INSTANCES provides instance-level information for ADDM tasks that finished executing in all instances owned by the current user. Its columns are the same as those in "DBA_ADDM_INSTANCES".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ADDM_TASK_DIRECTIVES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26707.htm">USER_ADDM_TASK_DIRECTIVES displays information about ADDM task directives owned by the current user. Its columns (except for USERNAME and SEQ_ID) are the same as those in DBA_ADDM_TASK_DIRECTIVES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ADDM_TASKS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26620.htm">USER_ADDM_TASKS displays information about the ADDM tasks owned by the current user. The view contains one row for each row in the related USER_ADVISOR_TASKS view that has ADVISOR_NAME=ADDM and STATUS=COMPLETED. Its columns (except for OWNER) are the same as those in "DBA_ADVISOR_TASKS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ADVISOR_ACTIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26312.htm">USER_ADVISOR_ACTIONS displays information about the actions associated with the recommendations owned by the current user. Its columns (except for OWNER) are the same as those in DBA_ADVISOR_ACTIONS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ADVISOR_DIR_TASK_INST" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26604.htm">USER_ADVISOR_DIR_TASK_INST displays information about all task directive instances owned by the current user. Its columns (except for SEQ_ID and USERNAME) are the same as those in "DBA_ADVISOR_DIR_TASK_INST".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ADVISOR_EXEC_PARAMETERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26568.htm">USER_ADVISOR_EXEC_PARAMETERS displays the parameter values used for past executions of tasks owned by the current user. Its columns (except for OWNER) are the same as those in "DBA_ADVISOR_EXEC_PARAMETERS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ADVISOR_EXECUTIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26566.htm">USER_ADVISOR_EXECUTIONS displays metadata information for tasks owned by the current user. Its columns (except for OWNER) are the same as those in "DBA_ADVISOR_EXECUTIONS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ADVISOR_FDG_BREAKDOWN" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26621.htm">USER_ADVISOR_FDG_BREAKDOWN describes the contribution from the different instances to the findings for each ADDM task owned by the current user. Its columns are the same as those in DBA_ADVISOR_FDG_BREAKDOWN.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ADVISOR_FINDINGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26317.htm">USER_ADVISOR_FINDINGS displays the findings discovered by the advisors owned by the current user. Its columns (except for OWNER) are the same as those in DBA_ADVISOR_FINDINGS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ADVISOR_JOURNAL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26318.htm">USER_ADVISOR_JOURNAL displays the journal entries for the tasks owned by the current user. Its columns (except for OWNER) are the same as those in DBA_ADVISOR_JOURNAL.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ADVISOR_LOG" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26319.htm">USER_ADVISOR_LOG displays information about the current state of the tasks owned by the current user. Its columns (except for OWNER) are the same as those in DBA_ADVISOR_LOG.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ADVISOR_OBJECTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26320.htm">USER_ADVISOR_OBJECTS displays information about the objects currently referenced by the advisors owned by the current user. Its columns (except for OWNER) are the same as those in DBA_ADVISOR_OBJECTS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ADVISOR_PARAMETERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26321.htm">USER_ADVISOR_PARAMETERS displays the task parameters and their current values for the tasks owned by the current user. Its columns (except for OWNER) are the same as those in DBA_ADVISOR_PARAMETERS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ADVISOR_RATIONALE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26322.htm">USER_ADVISOR_RATIONALE displays information about the rationales for the recommendations owned by the current user. Its columns (except for OWNER) are the same as those in DBA_ADVISOR_RATIONALE.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ADVISOR_RECOMMENDATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26323.htm">USER_ADVISOR_RECOMMENDATIONS displays the results of an analysis of the recommendations owned by the current user. Its columns (except for OWNER) are the same as those in DBA_ADVISOR_RECOMMENDATIONS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ADVISOR_SQLA_REC_SUM" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26324.htm">USER_ADVISOR_SQLA_REC_SUM displays recommendation rollup information for the workload objects owned by the current user. Its columns (except for OWNER) are the same as those in DBA_ADVISOR_SQLA_REC_SUM.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ADVISOR_SQLA_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26623.htm">USER_ADVISOR_SQLA_TABLES displays cross references between the workload statements and the tables referenced in the statement for the current user. Its columns (except for OWNER) are the same as those in DBA_ADVISOR_SQLA_TABLES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ADVISOR_SQLA_WK_MAP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26325.htm">USER_ADVISOR_SQLA_WK_MAP displays the workload references for the tasks owned by the current user. Its columns (except for OWNER) are the same as those in DBA_ADVISOR_SQLA_WK_MAP.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ADVISOR_SQLA_WK_STMTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26326.htm">USER_ADVISOR_SQLA_WK_STMTS displays information about the workload objects owned by the current user after an Access Advisor analysis operation. Its columns (except for OWNER) are the same as those in DBA_ADVISOR_SQLA_WK_STMTS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ADVISOR_SQLPLANS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26660.htm">USER_ADVISOR_SQLPLANS displays the different SQL execution plans owned by the current user generated as part of an advisor analysis. Its columns are the same as those in "DBA_ADVISOR_SQLPLANS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ADVISOR_SQLSTATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26661.htm">USER_ADVISOR_SQLSTATS displays execution statistics owned by the current user for the test-execution of different SQL plans during the advisor analysis. Its columns are the same as those in "DBA_ADVISOR_SQLSTATS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ADVISOR_SQLW_JOURNAL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26382.htm">USER_ADVISOR_SQLW_JOURNAL displays the journal entries for the workload objects owned by the current user. Its columns (except for OWNER) are the same as those in DBA_ADVISOR_SQLW_JOURNAL.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ADVISOR_SQLW_PARAMETERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26383.htm">USER_ADVISOR_SQLW_PARAMETERS displays the workload parameters and their current values owned by the current user. Its columns (except for OWNER) are the same as those in DBA_ADVISOR_SQLW_PARAMETERS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ADVISOR_SQLW_STMTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26327.htm">USER_ADVISOR_SQLW_STMTS displays rows that correspond to the statements in the workload owned by the current user. Its columns (except for OWNER) are the same as those in DBA_ADVISOR_SQLW_STMTS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ADVISOR_SQLW_SUM" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26328.htm">USER_ADVISOR_SQLW_SUM displays an aggregated picture of the SQLWkld workload objects owned by the current user. Its columns (except for OWNER) are the same as those in DBA_ADVISOR_SQLW_SUM.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ADVISOR_SQLW_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26329.htm">USER_ADVISOR_SQLW_TABLES displays cross references between the workload statements and the tables referenced in the statement. Its columns (except for OWNER) are the same as those in DBA_ADVISOR_SQLW_TABLES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ADVISOR_SQLW_TEMPLATES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26355.htm">USER_ADVISOR_SQLW_TEMPLATES displays an aggregated picture of the SQLWkld template objects owned by the current user. Its columns (except for OWNER) are the same as those in DBA_ADVISOR_SQLW_TEMPLATES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ADVISOR_TASKS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26330.htm">USER_ADVISOR_TASKS displays information about the tasks owned by the current user. Its columns (except for OWNER) are the same as those in DBA_ADVISOR_TASKS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ADVISOR_TEMPLATES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26356.htm">USER_ADVISOR_TEMPLATES displays information about the templates owned by the current user. Its columns (except for OWNER) are the same as those in DBA_ADVISOR_TEMPLATES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ALL_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26003.htm">USER_ALL_TABLES describes the object tables and relational tables owned by the current user. Its columns (except for OWNER) are the same as those in ALL_ALL_TABLES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_APPLY_ERROR" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26008.htm">USER_APPLY_ERROR displays information about the error transactions generated by apply processes visible to the current user. Its columns (except for SOURCE_ROOT_NAME) are the same as those in ALL_APPLY_ERROR.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_AQ_AGENT_PRIVS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26013.htm">USER_AQ_AGENT_PRIVS displays information about the registered AQ agents that are mapped to the current user. Its columns (except for DB_USERNAME) are the same as those in DBA_AQ_AGENT_PRIVS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ARGUMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26015.htm">USER_ARGUMENTS lists the arguments of the functions and procedures that are owned by the current user. Its columns (except for OWNER) are the same as those in ALL_ARGUMENTS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ASSEMBLIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26564.htm">USER_ASSEMBLIES provides information about all assemblies owned by the current user. Its columns (except for OWNER) are the same as those in ALL_ASSEMBLIES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ASSOCIATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26016.htm">USER_ASSOCIATIONS describes user-defined statistics associated with objects owned by the current user. Its columns are the same as those in ALL_ASSOCIATIONS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ATTRIBUTE_TRANSFORMATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26017.htm">USER_ATTRIBUTE_TRANSFORMATIONS displays information about the transformation functions for the transformations owned by the current user. Its columns (except for OWNER) are the same as those in ALL_ATTRIBUTE_TRANSFORMATIONS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_AUDIT_OBJECT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26019.htm">USER_AUDIT_OBJECT displays audit trail records for the objects accessible to the current user. Its columns are the same as those in "DBA_AUDIT_OBJECT".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_AUDIT_POLICIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26020.htm">USER_AUDIT_POLICIES describes the fine-grained auditing policies on the tables and views owned by the current user. Its columns (except for OBJECT_SCHEMA) are the same as those in ALL_AUDIT_POLICIES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_AUDIT_POLICY_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26336.htm">USER_AUDIT_POLICY_COLUMNS describes the fine-grained auditing policy columns on the tables and views owned by the current user. Its columns are the same as those in ALL_AUDIT_POLICY_COLUMNS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_AUDIT_SESSION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26021.htm">USER_AUDIT_SESSION displays the audit trail records concerning connections and disconnections of the current user. Its columns are the same as those in "DBA_AUDIT_SESSION".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_AUDIT_STATEMENT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26022.htm">USER_AUDIT_STATEMENT displays audit trail entries for the GRANT, REVOKE, AUDIT, NOAUDIT, and ALTER SYSTEM statements issued by the current user. Its columns are the same as those in "DBA_AUDIT_STATEMENT".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_AUDIT_TRAIL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26023.htm">USER_AUDIT_TRAIL displays the standard audit trail entries related to the current user. Its columns are the same as those in "DBA_AUDIT_TRAIL".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_AW_PS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26024.htm">USER_AW_PS describes the page spaces in the analytic workspaces owned by the current user. Its columns (except for OWNER) are the same as those in ALL_AW_PS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_AWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26025.htm">USER_AWS describes the analytic workspaces owned by the current user. Its columns (except for OWNER) are the same as those in ALL_AWS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_BASE_TABLE_MVIEWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26026.htm">USER_BASE_TABLE_MVIEWS describes the materialized views using materialized view logs owned by the current user. Its columns are the same as those in ALL_BASE_TABLE_MVIEWS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_CATALOG" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26036.htm">USER_CATALOG lists tables, views, clusters, synonyms, and sequences owned by the current user. Its columns are the same as those in "ALL_CATALOG".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_CLU_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26037.htm">USER_CLU_COLUMNS maps columns in the current user's tables to cluster columns. Its columns are the same as those in "DBA_CLU_COLUMNS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_CLUSTER_HASH_EXPRESSIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26038.htm">USER_CLUSTER_HASH_EXPRESSIONS lists hash functions for the hash clusters owned by the current user. Its columns are the same as those in "ALL_CLUSTER_HASH_EXPRESSIONS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_CLUSTERING_DIMENSIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26827.htm">USER_CLUSTERING_DIMENSIONS describes dimension tables associated with tables with an attribute clustering clause owned by the user. Its columns (except for OWNER) are the same as those in ALL_CLUSTERING_DIMENSIONS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_CLUSTERING_JOINS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26828.htm">USER_CLUSTERING_JOINS describes joins to the dimension tables associated with tables with an attribute clustering clause owned by the user. Its columns (except for OWNER) are the same as those in ALL_CLUSTERING_JOINS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_CLUSTERING_KEYS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26826.htm">USER_CLUSTERING_KEYS describes clustering keys for tables with an attribute clustering clause owned by the user. Its columns are the same as those in ALL_CLUSTERING_KEYS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_CLUSTERING_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26825.htm">USER_CLUSTERING_TABLES describes the tables with an attribute clustering clause owned by the user. Its columns are the same as those in ALL_CLUSTERING_TABLES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_CLUSTERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26039.htm">USER_CLUSTERS describes all the clusters owned by the current user. Its columns are the same as those in "ALL_CLUSTERS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_CODE_ROLE_PRIVS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26824.htm">USER_CODE_ROLE_PRIVS describes all the roles that are associated with program units owned by current user. Its columns (except for OWNER) are the same as those in ALL_CODE_ROLE_PRIVS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_COL_COMMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26040.htm">USER_COL_COMMENTS displays comments on the columns of the tables and views owned by the current user. Its columns (except for OWNER) are the same as those in ALL_COL_COMMENTS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_COL_PENDING_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26633.htm">USER_COL_PENDING_STATS describes the pending statistics of the columns owned by the current user. Its columns (except for OWNER) are the same as those in ALL_COL_PENDING_STATS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_COL_PRIVS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26041.htm">USER_COL_PRIVS describes the column object grants for which the current user is the object owner, grantor, or grantee. Its columns are the same as those in DBA_COL_PRIVS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_COL_PRIVS_MADE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26042.htm">USER_COL_PRIVS_MADE describes the column object grants for which the current user is the object owner. Its columns (except for OWNER) are the same as those in ALL_COL_PRIVS_MADE.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_COL_PRIVS_RECD" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26043.htm">USER_COL_PRIVS_RECD describes the column object grants for which the current user is the grantee. Its columns (except for GRANTEE) are the same as those in ALL_COL_PRIVS_RECD.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_COLL_TYPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26044.htm">USER_COLL_TYPES describes named collection types (VARRAYs, nested tables, object tables, and so on) in the current user's schema. Its columns are the same as those in "ALL_COLL_TYPES".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_COMPARISON" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26582.htm">USER_COMPARISON displays information about the comparison objects owned by the current user. Its columns (except for OWNER) are the same as those in "DBA_COMPARISON".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_COMPARISON_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26583.htm">USER_COMPARISON_COLUMNS displays information about the columns for the comparison objects owned by the current user. Its columns (except for OWNER) are the same as those in "DBA_COMPARISON_COLUMNS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_COMPARISON_ROW_DIF" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26584.htm">USER_COMPARISON_ROW_DIF displays information about the differing rows in the comparison scans owned by the current user. Its columns are the same as those in "DBA_COMPARISON_ROW_DIF".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_COMPARISON_SCAN" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26585.htm">USER_COMPARISON_SCAN displays information about the comparison scans owned by the current user. Its columns (except for OWNER) are the same as those in "DBA_COMPARISON_SCAN".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_COMPARISON_SCAN_VALUES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26586.htm">USER_COMPARISON_SCAN_VALUES displays information about the values for the comparison scans owned by the current user. Its columns (except for OWNER) are the same as those in "DBA_COMPARISON_SCAN_VALUES".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_CONS_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26045.htm">USER_CONS_COLUMNS describes columns that are owned by the current user and that are specified in constraint definitions. Its columns are the same as those in "ALL_CONS_COLUMNS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_CONS_OBJ_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26046.htm">USER_CONS_OBJ_COLUMNS displays information about the types that object columns (or attributes) or collection elements have been constrained to, in the tables owned by the current user. Its columns (except for OWNER) are the same as those in ALL_CONS_OBJ_COLUMNS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_CONSTRAINTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26047.htm">USER_CONSTRAINTS describes all constraint definitions on tables owned by the current user. Its columns are the same as those in "ALL_CONSTRAINTS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_CQ_NOTIFICATION_QUERIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26626.htm">USER_CQ_NOTIFICATION_QUERIES describes the registered queries for the CQ notifications owned by the current user. Its columns (except for USERNAME) are the same as those in DBA_CQ_NOTIFICATION_QUERIES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_CREDENTIALS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26829.htm">USER_CREDENTIALS displays credentials owned by the current user. Its columns (except for OWNER) are the same as those in ALL_CREDENTIALS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_CUBE_ATTR_VISIBILITY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26691.htm">USER_CUBE_ATTR_VISIBILITY describes the OLAP attributes visible for the dimensions, hierarchies, and levels owned by the current user Its columns (except for OWNER) are the same as those in ALL_CUBE_ATTR_VISIBILITY.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_CUBE_ATTRIBUTES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26671.htm">USER_CUBE_ATTRIBUTES describes the attributes for the OLAP cube dimensions owned by the current user. Its columns (except for OWNER) are the same as those in ALL_CUBE_ATTRIBUTES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_CUBE_BUILD_PROCESSES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26718.htm">USER_CUBE_BUILD_PROCESSES describes the OLAP build processes and maintenance scripts owned by the current user. Its columns (except for OWNER) are the same as those in ALL_CUBE_BUILD_PROCESSES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_CUBE_CALCULATED_MEMBERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26672.htm">USER_CUBE_CALCULATED_MEMBERS describes the calculated members for the OLAP cube dimensions owned by the current user. Its columns (except for OWNER) are the same as those in ALL_CUBE_CALCULATED_MEMBERS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_CUBE_DIM_LEVELS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26677.htm">USER_CUBE_DIM_LEVELS describes the OLAP dimension levels owned by the current user. Its columns (except for OWNER) are the same as those in ALL_CUBE_DIM_LEVELS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_CUBE_DIM_MODELS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26678.htm">USER_CUBE_DIM_MODELS describes the models for the OLAP dimensions owned by the current user. Its columns (except for OWNER) are the same as those in ALL_CUBE_DIM_MODELS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_CUBE_DIM_VIEW_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26680.htm">USER_CUBE_DIM_VIEW_COLUMNS describes the columns of the relational views of the OLAP cube dimensions owned by the current user. Its columns (except for OWNER) are the same as those in ALL_CUBE_DIM_VIEW_COLUMNS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_CUBE_DIM_VIEWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26679.htm">USER_CUBE_DIM_VIEWS describes the relational views of the OLAP dimensions owned by the current user. Its columns (except for OWNER) are the same as those in ALL_CUBE_DIM_VIEWS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_CUBE_DIMENSIONALITY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26674.htm">USER_CUBE_DIMENSIONALITY describes the dimension order for the OLAP cubes owned by the current user. Its columns (except for OWNER) are the same as those in ALL_CUBE_DIMENSIONALITY.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_CUBE_DIMENSIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26690.htm">USER_CUBE_DIMENSIONS describes the OLAP cube dimensions owned by the current user. Its columns (except for OWNER) are the same as those in ALL_CUBE_DIMENSIONS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_CUBE_HIER_LEVELS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26685.htm">USER_CUBE_HIER_LEVELS describes the hierarchy levels for the OLAP cube dimensions owned by the current user. Its columns (except for OWNER) are the same as those in ALL_CUBE_HIER_LEVELS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_CUBE_HIER_VIEW_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26687.htm">USER_CUBE_HIER_VIEW_COLUMNS describes the columns of the relational hierarchy views of the OLAP cube dimensions owned by the current user. Its columns (except for OWNER) are the same as those in ALL_CUBE_HIER_VIEW_COLUMNS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_CUBE_HIER_VIEWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26686.htm">USER_CUBE_HIER_VIEWS describes the hierarchies for the OLAP cube dimensions owned by the current user. Its columns (except for OWNER) are the same as those in ALL_CUBE_HIER_VIEWS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_CUBE_HIERARCHIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26684.htm">USER_CUBE_HIERARCHIES describes the OLAP dimension hierarchies owned by the current user. Its columns (except for OWNER) are the same as those in ALL_CUBE_HIERARCHIES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_CUBE_MEASURES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26688.htm">USER_CUBE_MEASURES describes the measures for the OLAP cubes owned by the current user. Its columns (except for OWNER) are the same as those in ALL_CUBE_MEASURES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_CUBE_NAMED_BUILD_SPECS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26937.htm">USER_CUBE_NAMED_BUILD_SPECS describes the OLAP cube named build specifications in the database that are owned by the current user. Its columns (except for OWNER) are the same as those in ALL_CUBE_NAMED_BUILD_SPECS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_CUBE_SUB_PARTITION_LEVELS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26938.htm">USER_CUBE_SUB_PARTITION_LEVELS describes the OLAP secondary partition levels in the database that are owned by the current user. Its columns (except for OWNER) are the same as those in ALL_CUBE_SUB_PARTITION_LEVELS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_CUBE_VIEW_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26676.htm">USER_CUBE_VIEW_COLUMNS describes the columns of relational views of OLAP cubes owned by the current user. Its columns (except for OWNER) are the same as those in ALL_CUBE_VIEW_COLUMNS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_CUBE_VIEWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26675.htm">USER_CUBE_VIEWS describes the relational views of the OLAP cubes owned by the current user. Its columns (except for OWNER) are the same as those in ALL_CUBE_VIEWS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_CUBES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26673.htm">USER_CUBES describes the OLAP cubes owned by the current user. Its columns (except for OWNER) are the same as those in ALL_CUBES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_DATAPUMP_JOBS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26338.htm">USER_DATAPUMP_JOBS displays the Data Pump jobs owned by the current user. Its columns (except for OWNER_NAME) are the same as those in DBA_DATAPUMP_JOBS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_DB_LINKS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26050.htm">USER_DB_LINKS describes the database links owned by the current user. Its columns are the same as those in ALL_DB_LINKS except that it does not have the OWNER column. It also displays an additional column, PASSWORD, which is no longer used and for which nothing is returned. The PASSWORD column is maintained for backward compatibility only.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_DBFS_HS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26778.htm">USER_DBFS_HS shows all Database File System (DBFS) hierarchical stores owned by the current user. Its columns (except for STOREOWNER) are the same as those in DBA_DBFS_HS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_DBFS_HS_COMMANDS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26779.htm">USER_DBFS_HS_COMMANDS shows all the registered store commands for all Database File system (DBFS) hierarchical stores owned by current user. Its columns (except for STOREOWNER) are the same as those in DBA_DBFS_HS_COMMANDS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_DBFS_HS_FILES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26780.htm">USER_DBFS_HS_FILES displays files in the Database File System (DBFS) hierarchical store owned by the current user and their location on the back-end device.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_DBFS_HS_FIXED_PROPERTIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26781.htm">USER_DBFS_HS_FIXED_PROPERTIES shows non-modifiable properties of all Databaase File System (DBFS) hierarchical stores owned by current user. Its columns (except for STORE_OWNER) are the same as those in DBA_DBFS_HS_FIXED_PROPERTIES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_DBFS_HS_PROPERTIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26782.htm">USER_DBFS_HS_PROPERTIES shows modifiable properties of all Database File System (DBFS) hierarchical stores owned by current user. Its columns (except for STOREOWNER) are the same as those in DBA_DBFS_HS_PROPERTIES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_DEPENDENCIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26053.htm">USER_DEPENDENCIES describes dependencies between procedures, packages, functions, package bodies, and triggers owned by the current user, including dependencies on views created without any database links. Its columns are the same as those in "ALL_DEPENDENCIES".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_DIM_ATTRIBUTES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26054.htm">USER_DIM_ATTRIBUTES describes the relationship between dimension levels and functionally dependent columns in the current user's schema. The level columns and the dependent column must be in the same table. This view's columns are the same as those in "ALL_DIM_ATTRIBUTES".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_DIM_HIERARCHIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26056.htm">USER_DIM_HIERARCHIES describes the dimension hierarchies owned by the current user. Its columns are the same as those in "ALL_DIM_HIERARCHIES".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_DIM_CHILD_OF" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26055.htm">USER_DIM_CHILD_OF describes a hierarchical relationship of 1 to n between pairs of levels in dimensions owned by the current user. Its columns are the same as those in "ALL_DIM_CHILD_OF".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_DIM_JOIN_KEY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26057.htm">USER_DIM_JOIN_KEY describes the join between two dimension tables owned by the current user. The join is always specified between a parent dimension level column and a child column. This view's columns are the same as those in "ALL_DIM_JOIN_KEY".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_DIM_LEVEL_KEY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26058.htm">USER_DIM_LEVEL_KEY describes columns of dimension levels owned by the current user. This view's columns are the same as those in "ALL_DIM_LEVEL_KEY".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_DIM_LEVELS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26059.htm">USER_DIM_LEVELS describes the levels of dimensions owned by the current user. All columns of a dimension level must come from the same relation. This view's columns are the same as those in "ALL_DIM_LEVELS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_DIMENSIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26060.htm">USER_DIMENSIONS describes dimension objects in the user's schema. Its columns are the same as those in "ALL_DIMENSIONS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_DUMP_DEST" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10229.htm" />
    <DataDictionaryObject Name="USER_EDITIONED_TYPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26867.htm">USER_EDITIONED_TYPES lists the types that are editioned by default for the current user.. Its columns (except for SCHEMA) are the same as those in DBA_EDITIONED_TYPES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_EDITIONING_VIEW_COLS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26669.htm">USER_EDITIONING_VIEW_COLS describes the relationship between the columns of the editioning views owned by the current user and the table columns to which they map. Its columns (except for OWNER) are the same as those in ALL_EDITIONING_VIEW_COLS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_EDITIONING_VIEW_COLS_AE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26683.htm">USER_EDITIONING_VIEW_COLS_AE describes the relationship between the columns of the editioning views (across all editions) owned by the current user and the table columns to which they map. Its columns (except for OWNER) are the same as those in ALL_EDITIONING_VIEW_COLS_AE.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_EDITIONING_VIEWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26668.htm">USER_EDITIONING_VIEWS describes the editioning views owned by the current user. Its columns (except for OWNER) are the same as those in ALL_EDITIONING_VIEWS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_EDITIONING_VIEWS_AE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26681.htm">USER_EDITIONING_VIEWS_AE describes the editioning views (across all editions) owned by the current user. Its columns (except for OWNER) are the same as those in ALL_EDITIONING_VIEWS_AE.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ENCRYPTED_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26534.htm">USER_ENCRYPTED_COLUMNS maintains encryption algorithm information for all encrypted columns in all tables in the user's schema. Its columns (except for OWNER) are the same as those in "ALL_ENCRYPTED_COLUMNS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_EPG_DAD_AUTHORIZATION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26709.htm">USER_EPG_DAD_AUTHORIZATION describes the DADs that are authorized to use the user's privileges. Its columns (except for USERNAME) are the same as those in "DBA_EPG_DAD_AUTHORIZATION".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ERROR_TRANSLATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26792.htm">USER_ERROR_TRANSLATIONS describes all error translations owned by the user. Its columns (except for OWNER) are the same as those in ALL_ERROR_TRANSLATIONS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ERRORS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26065.htm">USER_ERRORS describes the current errors on the stored objects owned by the current user. Its columns (except for OWNER) are the same as those in ALL_ERRORS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ERRORS_AE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26577.htm">USER_ERRORS_AE describes the current errors on the stored objects (across all editions) owned by the current user. Its columns (except for OWNER) are the same as those in ALL_ERRORS_AE.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_EVALUATION_CONTEXT_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26066.htm">USER_EVALUATION_CONTEXT_TABLES describes the tables in the rule evaluation contexts owned by the current user. Its columns (except for EVALUATION_CONTEXT_OWNER) are the same as those in ALL_EVALUATION_CONTEXT_TABLES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_EVALUATION_CONTEXT_VARS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26067.htm">USER_EVALUATION_CONTEXT_VARS describes the variables in the rule evaluation contexts owned by the current user. Its columns (except for EVALUATION_CONTEXT_OWNER) are the same as those in ALL_EVALUATION_CONTEXT_VARS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_EVALUATION_CONTEXTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26068.htm">USER_EVALUATION_CONTEXTS describes the rule evaluation contexts owned by the current user. Its columns (except for EVALUATION_CONTEXT_OWNER) are the same as those in ALL_EVALUATION_CONTEXTS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_EXTENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26072.htm">USER_EXTENTS describes the extents comprising the segments owned by the current user's objects. Its columns (except for OWNER, FILE_ID, BLOCK_ID, and RELATIVE_FNO) are the same as those in DBA_EXTENTS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_EXTERNAL_LOCATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26073.htm">USER_EXTERNAL_LOCATIONS describes the locations (data sources) of the external tables owned by the current user. Its columns (except for OWNER) are the same as those in ALL_EXTERNAL_LOCATIONS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_EXTERNAL_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26074.htm">USER_EXTERNAL_TABLES describes the external tables owned by the current user. Its columns (except for OWNER) are the same as those in ALL_EXTERNAL_TABLES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_FILE_GROUP_EXPORT_INFO" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26499.htm">USER_FILE_GROUP_EXPORT_INFO shows export-related information for all file groups that the current user can manage. Its columns (except for FILE_GROUP_OWNER) are the same as those in "ALL_FILE_GROUP_EXPORT_INFO".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_FILE_GROUP_FILES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26500.htm">USER_FILE_GROUP_FILES shows the file set for each versioned group owned by the current user. Its columns (except for FILE_GROUP_OWNER) are the same as those in"ALL_FILE_GROUP_FILES".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_FILE_GROUP_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26501.htm">USER_FILE_GROUP_TABLES shows information about tables owned by the current user that can be imported using the file set. Its columns (except for FILE_GROUP_OWNER) are the same as those in "ALL_FILE_GROUP_TABLES". </DataDictionaryObject>
    <DataDictionaryObject Name="USER_FILE_GROUP_TABLESPACES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26502.htm">USER_FILE_GROUP_TABLESPACES shows information about the transportable tablespaces present (partially or completely) in the file set owned by the current user (when the file set contains dump files). Its columns (except for FILE_GROUP_OWNER) are the same as those in "ALL_FILE_GROUP_TABLESPACES".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_FILE_GROUP_VERSIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26503.htm">USER_FILE_GROUP_VERSIONS shows top-level version information for all file groups owned by the current user. Its columns (except for FILE_GROUP_OWNER) are the same as those in "ALL_FILE_GROUP_VERSIONS". </DataDictionaryObject>
    <DataDictionaryObject Name="USER_FILE_GROUPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26504.htm">USER_FILE_GROUPS shows top-level metadata about file groups owned by the current user. Its columns (except for FILE_GROUP_OWNER) are the same as those in "ALL_FILE_GROUPS". </DataDictionaryObject>
    <DataDictionaryObject Name="USER_FLASHBACK_ARCHIVE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26719.htm">USER_FLASHBACK_ARCHIVE describes flashback data archives, which consist of multiple tablespaces and historic data from all transactions against tracked tables. The content of this view depends on the privileges of the user who queries it, as follows: </DataDictionaryObject>
    <DataDictionaryObject Name="USER_FLASHBACK_ARCHIVE_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26715.htm">USER_FLASHBACK_ARCHIVE_TABLES displays information about the tables owned by the current user that are enabled for Flashback Archive. Its columns are the same as those in DBA_FLASHBACK_ARCHIVE_TABLES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_FLASHBACK_TXN_REPORT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26587.htm">USER_FLASHBACK_TXN_REPORT displays information about the compensating transactions owned by the current user that have been committed in the database. Its columns (except for USERNAME) are the same as those in DBA_FLASHBACK_TXN_REPORT.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_FLASHBACK_TXN_STATE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26588.htm">USER_FLASHBACK_TXN_STATE displays information about the compensating status of the transactions owned by the current user. Its columns (except for USERNAME) are the same as those in DBA_FLASHBACK_TXN_STATE.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_FREE_SPACE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26076.htm">USER_FREE_SPACE describes the free extents in the tablespaces accessible to the current user. Its columns are the same as those in DBA_FREE_SPACE.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_GOLDENGATE_PRIVILEGES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26804.htm">USER_GOLDENGATE_PRIVILEGES displays details about Oracle GoldenGate privileges. Its columns (except for USERNAME) are the same as those in ALL_GOLDENGATE_PRIVILEGES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_HEAT_MAP_SEG_HISTOGRAM" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26954.htm">USER_HEAT_MAP_SEG_HISTOGRAM displays segment access information for segments owned by the user. Its columns (except for OWNER) are the same as those in ALL_HEAT_MAP_SEG_HISTOGRAM.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_HEAT_MAP_SEGMENT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26955.htm">USER_HEAT_MAP_SEGMENT displays the latest segment access time for all segments owned by the user. Its columns (except for OWNER) are the same as those in ALL_HEAT_MAP_SEGMENT.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_HISTOGRAMS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26079.htm">USER_HISTOGRAMS is a synonym for USER_TAB_HISTOGRAMS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_HOST_ACES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26940.htm">USER_HOST_ACES describes the status of access control entries for the current user to access network hosts through PL/SQL network utility packages. Its columns (except for ACE_ORDER, START_DATE, END_DATE, GRANT_TYPE, INVERTED_PRINCIPAL, PRINCIPAL, PRINCIPAL_TYPE, and STATUS) are the same as those in DBA_HOST_ACES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_CHANGE_NOTIFICATION_REGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26537.htm">USER_CHANGE_NOTIFICATION_REGS describes the change notification registrations owned by the current user. Its columns (except for USERNAME) are the same as those in DBA_CHANGE_NOTIFICATION_REGS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_IDENTIFIERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26599.htm">USER_IDENTIFIERS displays information about the identifiers in the stored objects owned by the current user. Its columns (except for OWNER) are the same as those in ALL_IDENTIFIERS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ILMDATAMOVEMENTPOLICIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26837.htm">USER_ILMDATAMOVEMENTPOLICIES contains information specific to data movement-related attributes of an Automatic Data Optimization policy for a user. Its columns are the same as those in DBA_ILMDATAMOVEMENTPOLICIES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ILMEVALUATIONDETAILS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26840.htm">USER_ILMEVALUATIONDETAILS displays details on evaluation of Automatic Data Optimization policies considered for Automatic Data Optimization tasks for a user. It also shows the job name that executes the policy, in case the policy was selected for execution. If the policy was not selected for execution, this view provides a reason. Its columns are the same as those in DBA_ILMEVALUATIONDETAILS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ILMOBJECTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26838.htm">USER_ILMOBJECTS displays all the Automatic Data Optimization policies and objects for a user. Many objects inherit policies via their parent objects or because they were created in a particular tablespace. This view provides a mapping between the policies and objects and indicates whether a policy is inherited by an object or is directly specified on it. Its columns are the same as those in DBA_ILMOBJECTS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ILMPOLICIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26836.htm">USER_ILMPOLICIES displays details about Automatic Data Optimization policies owned by the user. The view contains common details relevant to all types of Automatic Data Optimization policies, not just details relevant to the data movement-related Automatic Data Optimization policies. Its columns are the same as those in DBA_ILMPOLICIES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ILMRESULTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26841.htm">USER_ILMRESULTS displays information on data movement-related Automatic Data Optimization jobs for tasks created by the user. Its columns are the same as those in DBA_ILMRESULTS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ILMTASKS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26839.htm">USER_ILMTASKS displays information on Automatic Data Optimization tasks created by a user. Its columns are the same as those in DBA_ILMTASKS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_IND_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26084.htm">USER_IND_COLUMNS describes the columns of the indexes owned by the current user and columns of indexes on tables owned by the current user. Its columns (except for INDEX_OWNER and TABLE_OWNER) are the same as those in "ALL_IND_COLUMNS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_IND_EXPRESSIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26085.htm">USER_IND_EXPRESSIONS describes expressions of function-based indexes on tables owned by the current user. Its columns (except for INDEX_OWNER and TABLE_OWNER) are the same as those in "ALL_IND_EXPRESSIONS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_IND_PARTITIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26086.htm">USER_IND_PARTITIONS displays, for each index partition owned by the current user, the partition-level partitioning information, the storage parameters for the partition, and various partition statistics generated by the DBMS_STATS package. Its columns are the same as those in "ALL_IND_PARTITIONS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_IND_PENDING_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26636.htm">USER_IND_PENDING_STATS describes pending statistics for all tables, partitions, and subpartitions owned by the current user and collected using the DBMS_STATS package. Its columns (except for OWNER) are the same as those in "ALL_IND_PENDING_STATS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_IND_STATISTICS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26360.htm">USER_IND_STATISTICS displays optimizer statistics for the indexes on the tables owned by the current user and collected using the DBMS_STATS package. Its columns (except for OWNER) are the same as those in ALL_IND_STATISTICS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_IND_SUBPARTITIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26087.htm">USER_IND_SUBPARTITIONS displays, for each index subpartition owned by the current user, the subpartition-level partitioning information, the storage parameters for the subpartition, and various subpartition statistics generated by the DBMS_STATS package. Its columns are the same as those in "ALL_IND_SUBPARTITIONS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_INDEXES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26088.htm">USER_INDEXES describes indexes owned by the current user. To gather statistics for this view, use the DBMS_STATS package. This view supports parallel partitioned index scans. Its columns (except for OWNER) are the same as those in "ALL_INDEXES".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_INDEXTYPE_ARRAYTYPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26361.htm">USER_INDEXTYPE_ARRAYTYPES displays information about the array types specified by the indextypes owned by the current user. Its columns are the same as those in ALL_INDEXTYPE_ARRAYTYPES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_INDEXTYPE_COMMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26089.htm">USER_INDEXTYPE_COMMENTS displays comments for the user-defined indextypes owned by the current user. Its columns are the same as those in ALL_INDEXTYPE_COMMENTS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_INDEXTYPE_OPERATORS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26090.htm">USER_INDEXTYPE_OPERATORS lists all the operators supported by indextypes owned by the current user. Its columns are the same as those in ALL_INDEXTYPE_OPERATORS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_INDEXTYPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26091.htm">USER_INDEXTYPES describes the indextypes owned by the current user. Its columns are the same as those in ALL_INDEXTYPES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_INTERNAL_TRIGGERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26092.htm">USER_INTERNAL_TRIGGERS describes the internal triggers on all tables owned by the current user. Its columns are the same as those in "ALL_INTERNAL_TRIGGERS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_JAVA_ARGUMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26093.htm">USER_JAVA_ARGUMENTS displays argument information about the stored Java classes owned by the current user. Its columns (except for OWNER) are the same as those in ALL_JAVA_ARGUMENTS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_JAVA_CLASSES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26094.htm">USER_JAVA_CLASSES displays class level information about the stored Java classes owned by the current user. Its columns (except for OWNER) are the same as those in ALL_JAVA_CLASSES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_JAVA_COMPILER_OPTIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26637.htm">USER_JAVA_COMPILER_OPTIONS displays information about the native compiler options owned by the current user. Its columns (except for OWNER) are the same as those in ALL_JAVA_COMPILER_OPTIONS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_JAVA_DERIVATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26095.htm">USER_JAVA_DERIVATIONS displays mapping information about Java source objects and their derived Java class objects and Java resource objects for the Java classes owned by the current user. Its columns (except for OWNER) are the same as those in ALL_JAVA_DERIVATIONS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_JAVA_FIELDS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26096.htm">USER_JAVA_FIELDS displays field information about the stored Java classes owned by the current user. Its columns (except for OWNER) are the same as those in ALL_JAVA_FIELDS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_JAVA_IMPLEMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26097.htm">USER_JAVA_IMPLEMENTS describes interfaces implemented by the stored Java classes owned by the current user. Its columns (except for OWNER) are the same as those in ALL_JAVA_IMPLEMENTS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_JAVA_INNERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26098.htm">USER_JAVA_INNERS displays information about inner classes referred to by the stored Java classes owned by the current user. Its columns (except for OWNER) are the same as those in ALL_JAVA_INNERS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_JAVA_LAYOUTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26099.htm">USER_JAVA_LAYOUTS displays class layout information about the stored Java classes owned by the current user. Its columns (except for OWNER) are the same as those in ALL_JAVA_LAYOUTS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_JAVA_METHODS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26100.htm">USER_JAVA_METHODS displays method information about the stored Java classes owned by the current user. Its columns (except for OWNER) are the same as those in ALL_JAVA_METHODS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_JAVA_NCOMPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26101.htm">USER_JAVA_NCOMPS displays ncomp-related information about the Java classes owned by the current user. Its columns (except for OWNER) are the same as those in ALL_JAVA_NCOMPS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_JAVA_POLICY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26102.htm">USER_JAVA_POLICY describes Java security permissions for the current user. Its columns are the same as those in DBA_JAVA_POLICY.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_JAVA_RESOLVERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26103.htm">USER_JAVA_RESOLVERS displays information about resolvers of the Java classes owned by the current user. Its columns (except for OWNER) are the same as those in ALL_JAVA_RESOLVERS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_JAVA_THROWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26104.htm">USER_JAVA_THROWS displays information about exceptions thrown from methods of the Java classes owned by the current user. Its columns (except for OWNER) are the same as those in ALL_JAVA_THROWS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_JOBS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26105.htm">USER_JOBS describes the jobs owned by the current user. Its columns are the same as those in DBA_JOBS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_JOIN_IND_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26107.htm">USER_JOIN_IND_COLUMNS describes all join conditions owned by the current user. Its columns are the same as those in "ALL_JOIN_IND_COLUMNS" .</DataDictionaryObject>
    <DataDictionaryObject Name="USER_JSON_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26963.htm">USER_JSON_COLUMNS provides information on the JavaScript Object Notation (JSON) columns for which the user is the owner. Its columns (except for OWNER) are the same as those in ALL_JSON_COLUMNS. Each column owned by the user that has an IS JSON check constraint in an AND condition appears in this view. This view enables a user to find all the JSON columns that he or she owns.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_LIBRARIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26109.htm">USER_LIBRARIES describes the libraries owned by the current user. Its columns (except for OWNER) are the same as those in ALL_LIBRARIES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_LOB_PARTITIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26112.htm">USER_LOB_PARTITIONS displays the LOB partitions contained in the tables owned by the current user. Its columns are the same as those in "ALL_LOB_PARTITIONS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_LOB_SUBPARTITIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26113.htm">USER_LOB_SUBPARTITIONS displays partition-level attributes of the LOB data subpartitions owned by the current user. Its columns are the same as those in "ALL_LOB_SUBPARTITIONS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_LOB_TEMPLATES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26114.htm">USER_LOB_TEMPLATES describes the LOB subpartition templates owned by the current user. Its columns (except for USER_NAME) are the same as those in ALL_LOB_TEMPLATES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_LOBS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26115.htm">USER_LOBS displays the user's CLOBs and BLOBs contained in the user's tables. BFILEs are stored outside the database, so they are not described by this view. This view's columns are the same as those in "ALL_LOBS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_LOG_GROUP_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26119.htm">USER_LOG_GROUP_COLUMNS describes columns that are owned by the current user and that are specified in log groups. Its columns are the same as those in "ALL_LOG_GROUP_COLUMNS" .</DataDictionaryObject>
    <DataDictionaryObject Name="USER_LOG_GROUPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26120.htm">USER_LOG_GROUPS describes log group definitions on tables owned by the current user. Its columns are the same as those in "ALL_LOG_GROUPS" .</DataDictionaryObject>
    <DataDictionaryObject Name="USER_MEASURE_FOLDER_CONTENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26716.htm">USER_MEASURE_FOLDER_CONTENTS describes the contents of the OLAP measure folders owned by the current user. Its columns (except for OWNER) are the same as those in ALL_MEASURE_FOLDER_CONTENTS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_MEASURE_FOLDER_SUBFOLDERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26939.htm">USER_MEASURE_FOLDER_SUBFOLDERS describes the OLAP measure folders contained within the OLAP measure folders owned by the current user. Its columns (except for OWNER) are the same as those in ALL_MEASURE_FOLDER_SUBFOLDERS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_MEASURE_FOLDERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26689.htm">USER_MEASURE_FOLDERS describes the OLAP measure folders owned by the current user. Its columns (except for OWNER) are the same as those in ALL_MEASURE_FOLDERS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_METADATA_PROPERTIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26943.htm">USER_METADATA_PROPERTIES describes OLAP metadata properties in the current user's schema. Its columns (except for OWNER) are the same as those in ALL_METADATA_PROPERTIES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_METHOD_PARAMS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26129.htm">USER_METHOD_PARAMS describes the method parameters of the object types owned by the current user. Its columns (except for OWNER) are the same as those in ALL_METHOD_PARAMS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_METHOD_RESULTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26130.htm">USER_METHOD_RESULTS describes the method results of the object types owned by the current user. Its columns (except for OWNER) are the same as those in ALL_METHOD_RESULTS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_MINING_MODEL_ATTRIBUTES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26556.htm">USER_MINING_MODEL_ATTRIBUTES describes the mining model attributes owned by the current user. Its columns (except for OWNER) are the same as those in ALL_MINING_MODEL_ATTRIBUTES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_MINING_MODEL_SETTINGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26557.htm">USER_MINING_MODEL_SETTINGS describes the mining model settings owned by the current user. Its columns (except for OWNER) are the same as those in ALL_MINING_MODEL_SETTINGS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_MINING_MODELS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26555.htm">USER_MINING_MODELS describes the mining models owned by the current user. Its columns (except for OWNER) are the same as those in ALL_MINING_MODELS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_MVIEW_AGGREGATES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26131.htm">USER_MVIEW_AGGREGATES describes the grouping functions (aggregated measures) that appear in the SELECT list of aggregated materialized views owned by the current user. Its columns are the same as those in "ALL_MVIEW_AGGREGATES".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_MVIEW_ANALYSIS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26132.htm">USER_MVIEW_ANALYSIS describes all materialized views owned by the current user that potentially support query rewrite and that provide additional information for analysis by applications. Its columns are the same as those in "ALL_MVIEW_ANALYSIS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_MVIEW_COMMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26341.htm">USER_MVIEW_COMMENTS displays comments on the materialized views owned by the current user. Its columns (except for OWNER) are the same as those in ALL_MVIEW_COMMENTS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_MVIEW_DETAIL_PARTITION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26558.htm">USER_MVIEW_DETAIL_PARTITION displays freshness information for all materialized views, with respect to a PCT detail partition, owned by the current user. Its columns are the same as those in "ALL_MVIEW_DETAIL_PARTITION".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_MVIEW_DETAIL_RELATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26133.htm">USER_MVIEW_DETAIL_RELATIONS represents the named detail relations that are either in the FROM list of a materialized view, or that are indirectly referenced through views in the FROM list. Its columns are the same as those in "ALL_MVIEW_DETAIL_RELATIONS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_MVIEW_DETAIL_SUBPARTITION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26559.htm">USER_MVIEW_DETAIL_SUBPARTITION displays freshness information for all materialized views, with respect to a PCT detail subpartition, owned by the current user. Its columns are the same as those in "ALL_MVIEW_DETAIL_SUBPARTITION".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_MVIEW_JOINS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26134.htm">USER_MVIEW_JOINS describes a join between two columns in the WHERE clause of a subquery that defines a materialized view. Its columns are the same as those in "ALL_MVIEW_JOINS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_MVIEW_KEYS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26135.htm">USER_MVIEW_KEYS describes the columns or expressions in the SELECT list upon which materialized views in the current user's schema are based. Its columns are the same as those in "ALL_MVIEW_KEYS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_MVIEW_LOGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26137.htm">USER_MVIEW_LOGS describes all materialized view logs owned by the current user. Its columns are the same as those in ALL_MVIEW_LOGS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_MVIEW_REFRESH_TIMES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26138.htm">USER_MVIEW_REFRESH_TIMES describes refresh times of the materialized views owned by the current user. Its columns are the same as those in ALL_MVIEW_REFRESH_TIMES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_MVIEWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26139.htm">USER_MVIEWS describes all materialized views owned by the current user. Its columns are the same as those in ALL_MVIEWS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_NESTED_TABLE_COLS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26399.htm">USER_NESTED_TABLE_COLS describes the columns of the nested tables owned by the current user. Its columns (except for OWNER) are the same as those in "ALL_NESTED_TABLE_COLS". To gather statistics for this view, use the DBMS_STATS package.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_NESTED_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26140.htm">USER_NESTED_TABLES describes the nested tables in tables owned by the current user. Its columns are the same as those in "ALL_NESTED_TABLES".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_NETWORK_ACL_PRIVILEGES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26712.htm">USER_NETWORK_ACL_PRIVILEGES describes the status of the network privileges for the current user to access network hosts.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_OBJ_AUDIT_OPTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26141.htm">USER_OBJ_AUDIT_OPTS describes auditing options on all objects owned by the current user. Its columns (except for OWNER) are the same as those in "DBA_OBJ_AUDIT_OPTS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_OBJ_COLATTRS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26142.htm">USER_OBJ_COLATTRS describes object columns and attributes contained in the tables owned by the current user. Its columns (except for OWNER) are the same as those in ALL_OBJ_COLATTRS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_OBJECT_SIZE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26143.htm">USER_OBJECT_SIZE lists the sizes, in bytes, of various PL/SQL objects. Its columns are the same as those in "DBA_OBJECT_SIZE".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_OBJECT_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26145.htm">USER_OBJECT_TABLES describes the object tables owned by the current user. Its columns (except for OWNER) are the same as those in ALL_OBJECT_TABLES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_OBJECT_USAGE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26958.htm">USER_OBJECT_USAGE displays statistics about index usage gathered from the database for the indexes owned by the current user. You can use this view to monitor index usage. All indexes owned by the current user that have been used at least once can be monitored and displayed in this view. Its columns (except for OWNER) are the same as those in DBA_OBJECT_USAGE.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_OBJECTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26146.htm">USER_OBJECTS describes all objects owned by the current user. Its columns (except for OWNER), are the same as those in ALL_OBJECTS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_OBJECTS_AE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26578.htm">USER_OBJECTS_AE describes the objects (across all editions) owned by the current user. Its columns (except for OWNER) are the same as those in ALL_OBJECTS_AE.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_OPANCILLARY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26147.htm">USER_OPANCILLARY provides ancillary information for operators owned by the current user. Its columns are the same as those in ALL_OPANCILLARY.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_OPARGUMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26148.htm">USER_OPARGUMENTS provides argument information for operator bindings owned by the current user. Its columns are the same as those in ALL_OPARGUMENTS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_OPBINDINGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26149.htm">USER_OPBINDINGS describes the binding functions and methods on the operators owned by the current user. Its columns are the same as those in ALL_OPBINDINGS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_OPERATOR_COMMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26150.htm">USER_OPERATOR_COMMENTS displays comments for the user-defined operators owned by the current user. Its columns are the same as those in ALL_OPERATOR_COMMENTS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_OPERATORS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26151.htm">USER_OPERATORS describes all operators owned by the current user. Its columns are the same as those in ALL_OPERATORS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_OUTLINE_HINTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26152.htm">USER_OUTLINE_HINTS describes the set of hints stored in the outlines owned by the current user. Its columns (except for OWNER) are the same as those in DBA_OUTLINE_HINTS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_OUTLINES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26153.htm">USER_OUTLINES describes the stored outlines owned by the current user. Its columns (except for OWNER) are the same as those in DBA_OUTLINES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_PARALLEL_EXECUTE_CHUNKS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26742.htm">USER_PARALLEL_EXECUTE_CHUNKS displays the chunks for tasks created by the current user. Its columns (except for TASK_OWNER) are the same as those in DBA_PARALLEL_EXECUTE_CHUNKS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_PARALLEL_EXECUTE_TASKS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26743.htm">USER_PARALLEL_EXECUTE_TASKS displays the tasks created by the current user. Its columns (except for TASK_OWNER) are the same as those in DBA_PARALLEL_EXECUTE_TASKS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_PART_COL_STATISTICS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26154.htm">USER_PART_COL_STATISTICS displays column statistics and histogram information for the table partitions owned by the current user. Its columns (except for OWNER) are the same as those in ALL_PART_COL_STATISTICS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_PART_HISTOGRAMS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26155.htm">USER_PART_HISTOGRAMS displays the histogram data (endpoints per histogram) for the histograms on the table partitions owned by the current user. Its columns (except for OWNER) are the same as those in ALL_PART_HISTOGRAMS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_PART_INDEXES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26156.htm">USER_PART_INDEXES displays the object-level partitioning information for the partitioned indexes owned by the current user. Its columns (except for OWNER) are the same as those in ALL_PART_INDEXES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_PART_KEY_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26157.htm">USER_PART_KEY_COLUMNS describes the partitioning key columns for the partitioned objects owned by the current user. Its columns (except for OWNER) are the same as those in ALL_PART_KEY_COLUMNS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_PART_LOBS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26158.htm">USER_PART_LOBS displays table-level information about the partitioned LOBs owned by the current user, including default attributes for LOB data partitions. Its columns (except for TABLE_OWNER) are the same as those in ALL_PART_LOBS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_PART_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26159.htm">USER_PART_TABLES displays the object-level partitioning information for the partitioned tables owned by the current user. Its columns (except for OWNER) are the same as those in ALL_PART_TABLES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_PARTIAL_DROP_TABS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26160.htm">USER_PARTIAL_DROP_TABS describes all tables in the schema of the current user that have partially completed DROP COLUMN operations. Its columns are the same as those in "ALL_PARTIAL_DROP_TABS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_PASSWORD_LIMITS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26161.htm">USER_PASSWORD_LIMITS describes the password profile parameters that are assigned to the user.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_PENDING_CONV_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26162.htm">USER_PENDING_CONV_TABLES describes the pending conversion tables owned by the current user. Its columns (except for OWNER) are the same as those in ALL_PENDING_CONV_TABLES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_PLSQL_COLL_TYPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26933.htm">USER_PLSQL_COLL_TYPES describes the user's own named PL/SQL collection types. Its columns (except for OWNER and CHAR_USED) are the same as those in ALL_PLSQL_COLL_TYPES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_PLSQL_OBJECT_SETTINGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26385.htm">USER_PLSQL_OBJECT_SETTINGS displays information about the compiler settings for the stored objects owned by the current user. Its columns (except for OWNER) are the same as those in ALL_PLSQL_OBJECT_SETTINGS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_PLSQL_TYPE_ATTRS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26934.htm">USER_PLSQL_TYPE_ATTRS describes the attributes of the user's own PL/SQL types. Its columns (except for OWNER and CHAR_USED) are the same as those in ALL_PLSQL_TYPE_ATTRS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_PLSQL_TYPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26935.htm">USER_PLSQL_TYPES describes the user's own PL/SQL types. Its columns (except for OWNER) are the same as those in ALL_PLSQL_TYPES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_POLICIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26164.htm">USER_POLICIES describes all Oracle Virtual Private Database (VPD) security policies associated with objects owned by the current user. Its columns (except for OBJECT_OWNER) are the same as those in ALL_POLICIES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_POLICY_ATTRIBUTES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26883.htm">USER_POLICY_ATTRIBUTES lists the attribute associations {Namespaces, Attributes} of all context-sensitive and shared-context sensitive Oracle Virtual Private Database (VPD) policies for synonyms, tables, or views owned by the user. Its columns are the same as those in ALL_POLICY_ATTRIBUTES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_POLICY_CONTEXTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26165.htm">USER_POLICY_CONTEXTS describes the driving contexts defined for the synonyms, tables, and views owned by the current user. Its columns (except for OBJECT_OWNER) are the same as those in ALL_POLICY_CONTEXTS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_POLICY_GROUPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26166.htm">USER_POLICY_GROUPS describes the policy groups defined for the synonyms, tables, and views owned by the current user. Its columns (except for OBJECT_OWNER) are the same as those in ALL_POLICY_GROUPS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_PRIVILEGE_MAP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26923.htm">USER_PRIVILEGE_MAP shows privilege (auditing option) type codes for object privileges that can be granted on a user. This table can be used to map privilege type numbers to type names.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_PROCEDURES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26168.htm">USER_PROCEDURES lists all functions and procedures that are owned by the current user, along with their associated properties. Its columns (except OWNER) are the same as those in "ALL_PROCEDURES".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_PROXIES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26171.htm">USER_PROXIES displays information about connections the current user is allowed to proxy. Its columns (except for PROXY) are the same as those in DBA_PROXIES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_QUEUE_SCHEDULES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26174.htm">USER_QUEUE_SCHEDULES describes the propagation schedules whose source queues are owned by the current user. Its columns (except for SCHEMA) are the same as those in ALL_QUEUE_SCHEDULES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_QUEUE_SUBSCRIBERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26544.htm">USER_QUEUE_SUBSCRIBERS displays the list of subscribers on queues that are under the current user's schema. Its columns (except for OWNER) are the same as those in "ALL_QUEUE_SUBSCRIBERS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_QUEUE_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26175.htm">USER_QUEUE_TABLES describes the queues in the queue tables created in the current user's schema. Its columns (except for OWNER) are the same as those in ALL_QUEUE_TABLES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_QUEUES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26176.htm">USER_QUEUES describes the operational characteristics of every queue in the user's schema. Its columns (except for OWNER) are the same as those in "ALL_QUEUES".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_RECYCLEBIN" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26342.htm">USER_RECYCLEBIN displays information about the recycle bin owned by the current user. Its columns (except for OWNER) are the same as those in DBA_RECYCLEBIN.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_REFRESH" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26178.htm">USER_REFRESH describes all refresh groups owned by the current user. Its columns are the same as those in "ALL_REFRESH".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_REFRESH_CHILDREN" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26179.htm">USER_REFRESH_CHILDREN lists all the objects in refresh groups owned by the current user. Its columns are the same as those in "ALL_REFRESH_CHILDREN".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_REFS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26181.htm">USER_REFS describes the REF columns and REF attributes in the object type columns of tables owned by the current user. Its columns are the same as those in "ALL_REFS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_REGISTERED_MVIEWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26183.htm">USER_REGISTERED_MVIEWS describes all registered materialized views (registered at a master site or a master materialized view site) owned by the current user. Its columns are the same as those in ALL_REGISTERED_MVIEWS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_REGISTRY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26186.htm">USER_REGISTRY displays information about the components owned by the current user that are loaded into the component registry. Its columns are the same as those in DBA_REGISTRY.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_RESOURCE_LIMITS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26227.htm">USER_RESOURCE_LIMITS displays the resource limits for the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_RESUMABLE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26228.htm">USER_RESUMABLE displays the resumable statements executed by the current user. Its columns (except for USER_ID) are the same as those in DBA_RESUMABLE.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_REWRITE_EQUIVALENCES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26344.htm">USER_REWRITE_EQUIVALENCES describes the rewrite equivalences owned by the current user. Its columns are the same as those in ALL_REWRITE_EQUIVALENCES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ROLE_PRIVS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26230.htm">USER_ROLE_PRIVS describes the roles granted to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_RSRC_CONSUMER_GROUP_PRIVS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26233.htm">USER_RSRC_CONSUMER_GROUP_PRIVS displays information about the resource consumer groups to which the current user is assigned. Its columns (except for GRANTEE) are the same as those in DBA_RSRC_CONSUMER_GROUP_PRIVS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_RSRC_MANAGER_SYSTEM_PRIVS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26235.htm">USER_RSRC_MANAGER_SYSTEM_PRIVS displays information about the users who are granted system privileges for the DBMS_RESOURCE_MANAGER package. Its columns (except for GRANTEE) are the same as those in DBA_RSRC_MANAGER_SYSTEM_PRIVS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_RULE_SET_RULES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26238.htm">USER_RULE_SET_RULES describes the rules in the rule sets owned by the current user. Its columns (except for RULE_SET_OWNER) are the same as those in ALL_RULE_SET_RULES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_RULE_SETS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26239.htm">USER_RULE_SETS describes the rule sets owned by the current user. Its columns (except for RULE_SET_OWNER) are the same as those in ALL_RULE_SETS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_RULES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26240.htm">USER_RULES describes the rules owned by the current user. Its columns (except for RULE_OWNER) are the same as those in ALL_RULES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SEC_RELEVANT_COLS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26353.htm">USER_SEC_RELEVANT_COLS describes the security relevant columns of the security policies for the tables and views owned by the current user. Its columns (except for OBJECT_OWNER) are the same as those in ALL_SEC_RELEVANT_COLS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SECONDARY_OBJECTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26242.htm">USER_SECONDARY_OBJECTS provides information about secondary objects   associated with domain indexes owned by the current user. This view is only relevant in the context of domain indexes. Its columns are the same as those in "ALL_SECONDARY_OBJECTS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SEGMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26243.htm">USER_SEGMENTS describes the storage allocated for the segments owned by the current user's objects. Its columns (except for OWNER, HEADER_FILE, HEADER_BLOCK, and RELATIVE_FNO) are the same as those in DBA_SEGMENTS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SEQUENCES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26244.htm">USER_SEQUENCES describes all sequences owned by the current user. Its columns are the same as those in "ALL_SEQUENCES".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SCHEDULER_CREDENTIALS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26580.htm">USER_SCHEDULER_CREDENTIALS displays information about the credentials owned by the current user. Its columns (except for OWNER) are the same as those in ALL_SCHEDULER_CREDENTIALS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SCHEDULER_DB_DESTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26756.htm">USER_SCHEDULER_DB_DESTS displays information about the destination objects owned by the current user pointing to remote databases. Its columns (except for OWNER) are the same as those in ALL_SCHEDULER_DB_DESTS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SCHEDULER_DESTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26757.htm">USER_SCHEDULER_DESTS displays information about the destination objects for jobs owned by the current user. Its columns (except for OWNER) are the same as those in ALL_SCHEDULER_DESTS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SCHEDULER_FILE_WATCHERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26759.htm">USER_SCHEDULER_FILE_WATCHERS displays information about the Scheduler file watch requests owned by the current user. Its columns (except for OWNER) are the same as those in ALL_SCHEDULER_FILE_WATCHERS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SCHEDULER_GROUP_MEMBERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26760.htm">USER_SCHEDULER_GROUP_MEMBERS displays information about the members of the Scheduler object groups owned by the current user. Its columns (except for OWNER) are the same as those in ALL_SCHEDULER_GROUP_MEMBERS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SCHEDULER_GROUPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26761.htm">USER_SCHEDULER_GROUPS displays information about the Scheduler object groups owned by the current user. Its columns (except for OWNER) are the same as those in ALL_SCHEDULER_GROUPS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SCHEDULER_CHAIN_RULES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26507.htm">USER_SCHEDULER_CHAIN_RULES displays information about the rules for the chains owned by the current user. Its columns (except for OWNER) are the same as those in ALL_SCHEDULER_CHAIN_RULES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SCHEDULER_CHAIN_STEPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26508.htm">USER_SCHEDULER_CHAIN_STEPS displays information about the defined steps of the chains owned by the current user. Its columns (except for OWNER) are the same as those in ALL_SCHEDULER_CHAIN_STEPS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SCHEDULER_CHAINS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26509.htm">USER_SCHEDULER_CHAINS displays information about the chains owned by the current user. Its columns (except for OWNER) are the same as those in ALL_SCHEDULER_CHAINS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SCHEDULER_JOB_ARGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26346.htm">USER_SCHEDULER_JOB_ARGS displays information about the arguments of the Scheduler jobs owned by the current user. Its columns (except for OWNER) are the same as those in ALL_SCHEDULER_JOB_ARGS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SCHEDULER_JOB_DESTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26762.htm">USER_SCHEDULER_JOB_DESTS displays information about the state of the jobs owned by the current user at each of their destinations. Its columns (except for OWNER) are the same as those in ALL_SCHEDULER_JOB_DESTS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SCHEDULER_JOB_LOG" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26347.htm">USER_SCHEDULER_JOB_LOG displays log information for the Scheduler jobs owned by the current user. Its columns are the same as those in ALL_SCHEDULER_JOB_LOG.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SCHEDULER_JOB_RUN_DETAILS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26386.htm">USER_SCHEDULER_JOB_RUN_DETAILS displays log run details for the Scheduler jobs owned by the current user. Its columns are the same as those in ALL_SCHEDULER_JOB_RUN_DETAILS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SCHEDULER_JOBS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26348.htm">USER_SCHEDULER_JOBS displays information about the Scheduler jobs owned by the current user. Its columns (except for OWNER) are the same as those in ALL_SCHEDULER_JOBS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SCHEDULER_NOTIFICATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26763.htm">USER_SCHEDULER_NOTIFICATIONS displays information about the E-mail notifications for the jobs owned by the current user. Its columns (except for OWNER) are the same as those in ALL_SCHEDULER_NOTIFICATIONS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SCHEDULER_PROGRAM_ARGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26349.htm">USER_SCHEDULER_PROGRAM_ARGS displays information about the arguments of the Scheduler programs owned by the current user. Its columns (except for OWNER) are the same as those in ALL_SCHEDULER_PROGRAM_ARGS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SCHEDULER_PROGRAMS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26350.htm">USER_SCHEDULER_PROGRAMS displays information about the Scheduler programs owned by the current user. Its columns (except for OWNER) are the same as those in ALL_SCHEDULER_PROGRAMS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SCHEDULER_REMOTE_JOBSTATE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26659.htm">USER_SCHEDULER_REMOTE_JOBSTATE displays information about the state of the jobs owned by the current user at remote databases. Its columns (except for OWNER) are the same as those in ALL_SCHEDULER_REMOTE_JOBSTATE.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SCHEDULER_RUNNING_CHAINS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26510.htm">USER_SCHEDULER_RUNNING_CHAINS displays information about the chain steps of the running chains owned by the current user. Its columns (except for OWNER) are the same as those in ALL_SCHEDULER_RUNNING_CHAINS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SCHEDULER_RUNNING_JOBS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26387.htm">USER_SCHEDULER_RUNNING_JOBS displays information about the running Scheduler jobs owned by the current user. Its columns (except for OWNER) are the same as those in ALL_SCHEDULER_RUNNING_JOBS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SCHEDULER_SCHEDULES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26368.htm">USER_SCHEDULER_SCHEDULES displays information about the Scheduler schedules owned by the current user. Its columns (except for OWNER) are the same as those in ALL_SCHEDULER_SCHEDULES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SOURCE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26249.htm">USER_SOURCE describes the text source of the stored objects owned by the current user. Its columns (except for OWNER) are the same as those in "ALL_SOURCE".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SOURCE_AE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26694.htm">USER_SOURCE_AE describes the text source of the stored objects (across all editions) owned by the current user. Its columns (except for OWNER) are the same as those in ALL_SOURCE_AE.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SQL_TRANSLATION_PROFILES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26790.htm">USER_SQL_TRANSLATION_PROFILES describes all SQL translation profiles owned by the user. Its columns (except for OWNER) are the same as those in ALL_SQL_TRANSLATION_PROFILES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SQL_TRANSLATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26791.htm">USER_SQL_TRANSLATIONS describes all SQL translations owned by the user. Its columns (except for OWNER) are the same as those in ALL_SQL_TRANSLATIONS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SQLJ_TYPE_ATTRS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26252.htm">USER_SQLJ_TYPE_ATTRS describes the attributes of the SQLJ object types owned by the current user. Its columns (except for OWNER) are the same as those in ALL_SQLJ_TYPE_ATTRS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SQLJ_TYPE_METHODS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26253.htm">USER_SQLJ_TYPE_METHODS describes the methods of the SQLJ object types owned by the current user. Its columns (except for OWNER) are the same as those in ALL_SQLJ_TYPE_METHODS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SQLJ_TYPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26254.htm">USER_SQLJ_TYPES describes the SQLJ object types owned by the current user. Its columns (except for OWNER) are the same as those in ALL_SQLJ_TYPES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SQLSET" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26466.htm">USER_SQLSET displays information about the SQL tuning sets owned by the current user. Its columns (except for OWNER) are the same as those in "ALL_SQLSET".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SQLSET_BINDS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26467.htm">USER_SQLSET_BINDS displays the bind values associated with the SQL tuning sets owned by the current user. Its columns (except for SQLSET_OWNER) are the same as those in "ALL_SQLSET_BINDS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SQLSET_PLANS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26531.htm">USER_SQLSET_PLANS describes captured plans for statements in the SQL tuning sets owned by the current user. Its columns (except for SQLSET_OWNER) are the same as those in "ALL_SQLSET_PLANS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SQLSET_REFERENCES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26469.htm">USER_SQLSET_REFERENCES describes whether or not the SQL tuning sets owned by the current user are active. Its columns (except for SQLSET_OWNER) are the same as those in "ALL_SQLSET_REFERENCES".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SQLSET_STATEMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26470.htm">USER_SQLSET_STATEMENTS displays information about the SQL statements, along with their statistics, that form the SQL tuning sets owned by the current user. Its columns (except for SQLSET_OWNER) are the same as those in "ALL_SQLSET_STATEMENTS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SQLTUNE_BINDS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26471.htm">USER_SQLTUNE_BINDS displays the bind values associated with the tuned SQL statements owned by the current user. Its columns are the same as those in DBA_SQLTUNE_BINDS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SQLTUNE_PLANS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26472.htm">USER_SQLTUNE_PLANS displays information about the execution plans generated for the SQL statements owned by the current user during a SQL tuning session. Its columns are the same as those in DBA_SQLTUNE_PLANS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SQLTUNE_RATIONALE_PLAN" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26473.htm">USER_SQLTUNE_RATIONALE_PLAN displays the association between rationales and operations in the execution plan of the SQL statements owned by the current user. Its columns are the same as those in DBA_SQLTUNE_RATIONALE_PLAN.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SQLTUNE_STATISTICS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26474.htm">USER_SQLTUNE_STATISTICS displays statistics associated with the SQL statements owned by the current user. Its columns are the same as those in DBA_SQLTUNE_STATISTICS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SR_GRP_STATUS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26871.htm">USER_SR_GRP_STATUS provides information on the current refresh operations for the current synchronous refresh groups in the database which are owned by the current user. Its columns are the same as those in DBA_SR_GRP_STATUS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SR_GRP_STATUS_ALL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26870.htm">USER_SR_GRP_STATUS_ALL provides information on the refresh operations on the synchronous refresh groups in the database which are owned by the current user. Its columns are the same as those in DBA_SR_GRP_STATUS_ALL.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SR_OBJ" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26874.htm">USER_SR_OBJ provides information on the objects currently registered for synchronous refresh for current groups for the current user. Its columns are the same as those in DBA_SR_OBJ.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SR_OBJ_ALL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26878.htm">USER_SR_OBJ_ALL provides information on the objects registered for synchronous refresh for current and defunct groups for the current user. Its columns are the same as those in DBA_SR_OBJ_ALL.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SR_OBJ_STATUS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26873.htm">USER_SR_OBJ_STATUS provides information on the status of objects registered for synchronous refresh for the current refresh operations for the current synchronous refresh groups in the database which are owned by the current user. Its columns are the same as those in DBA_SR_OBJ_STATUS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SR_OBJ_STATUS_ALL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26872.htm">USER_SR_OBJ_STATUS_ALL provides information on the status of objects registered for synchronous refresh in the database which are owned by the current user. Its columns are the same as those in DBA_SR_OBJ_STATUS_ALL.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SR_PARTN_OPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26880.htm">USER_SR_PARTN_OPS provides information on the partition operations registered on the base tables of the materialized views registered for synchronous refresh belonging to the current user. Its columns are the same as those in DBA_SR_PARTN_OPS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SR_STLOG_EXCEPTIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26875.htm">USER_SR_STLOG_EXCEPTIONS provides information on the exceptions in the staging logs for the tables belonging to the current user processed by DBMS_SYNC_REFRESH.PREPARE_STAGING_LOG. Its columns are the same as those in DBA_SR_STLOG_EXCEPTIONS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SR_STLOG_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26879.htm">USER_SR_STLOG_STATS provides information on the statistics in the staging logs for the tables belonging to the current user processed by DBMS_SYNC_REFRESH.PREPARE_STAGING_LOG. Its columns are the same as those in DBA_SR_STLOG_STATS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_STAT_EXTENSIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26695.htm">USER_STAT_EXTENSIONS displays information about the optimizer statistics extensions owned by the current user. Its columns (except for OWNER) are the same as those in ALL_STAT_EXTENSIONS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_STORED_SETTINGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26256.htm">USER_STORED_SETTINGS lists information about the persistent parameter settings for stored PL/SQL units, but only shows information about PL/SQL units owned by the current user. USER_STORED_SETTINGS does not display the OWNER column. The rest of its columns are the same as those in "ALL_STORED_SETTINGS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SUBPART_COL_STATISTICS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26260.htm">USER_SUBPART_COL_STATISTICS provides column statistics and histogram information for subpartitions of subpartitioned objects owned by the current user. Its columns (except for OWNER) are the same as those in "ALL_SUBPART_COL_STATISTICS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SUBPART_HISTOGRAMS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26261.htm">USER_SUBPART_HISTOGRAMS lists actual histogram data (end-points per histogram) for histograms on table subpartitions owned by the current user. Its columns (except for OWNER) are the same as those in "ALL_SUBPART_HISTOGRAMS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SUBPART_KEY_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26262.htm">USER_SUBPART_KEY_COLUMNS lists subpartitioning key columns for composite-partitioned tables (and local indexes on composite-partitioned tables) owned by the current user. Its columns are the same as those in ALL_SUBPART_KEY_COLUMNS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SUBPARTITION_TEMPLATES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26263.htm">USER_SUBPARTITION_TEMPLATES describes the subpartition templates owned by the current user. Its columns (except for USER_NAME) are the same as those in ALL_SUBPARTITION_TEMPLATES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SUBSCR_REGISTRATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26657.htm">USER_SUBSCR_REGISTRATIONS displays information about the subscription registrations owned by the current user. Its columns are the same as those in DBA_SUBSCR_REGISTRATIONS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SYNONYMS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26273.htm">USER_SYNONYMS describes the private synonyms (synonyms owned by the current user). Its columns (except for OWNER) are the same as those in ALL_SYNONYMS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_SYS_PRIVS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26274.htm">USER_SYS_PRIVS describes system privileges granted to the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_TAB_COL_STATISTICS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26275.htm">USER_TAB_COL_STATISTICS contains column statistics and histogram information extracted from "USER_TAB_COLUMNS". Its columns (except for OWNER) are the same as those in "ALL_TAB_COL_STATISTICS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_TAB_COLS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26276.htm">USER_TAB_COLS describes the columns of the tables, views, and clusters owned by the current user. This view differs from "USER_TAB_COLUMNS" in that system-generated hidden columns and invisible columns, which are user-generated hidden columns, are not filtered out. Its columns (except for OWNER) are the same as those in "ALL_TAB_COLS". To gather statistics for this view, use the DBMS_STATS package.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_TAB_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26277.htm">USER_TAB_COLUMNS describes the columns of the tables, views, and clusters owned by the current user. Its columns (except for OWNER) are the same as those in "ALL_TAB_COLUMNS". To gather statistics for this view, use the DBMS_STATS package.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_TAB_COMMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26278.htm">USER_TAB_COMMENTS displays comments on the tables and views owned by the current user. Its columns (except for OWNER) are the same as those in ALL_TAB_COMMENTS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_TAB_HISTGRM_PENDING_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26638.htm">USER_TAB_HISTGRM_PENDING_STATS describes pending statistics for tables, partitions, and subpartitions owned by the current user. Its columns (except for OWNER) are the same as those in "ALL_TAB_HISTGRM_PENDING_STATS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_TAB_HISTOGRAMS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26279.htm">USER_TAB_HISTOGRAMS describes histograms on columns of tables owned by the current user. Its columns (except for OWNER) are the same as those in "ALL_TAB_HISTOGRAMS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_TAB_IDENTITY_COLS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26830.htm">USER_TAB_IDENTITY_COLS describes all table identity columns. Its columns (except for OWNER) are the same as those in ALL_TAB_IDENTITY_COLS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_TAB_MODIFICATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26280.htm">USER_TAB_MODIFICATIONS describes modifications to all tables owned by the current user that have been modified since the last time statistics were gathered on the tables. Its columns are the same as those in "ALL_TAB_MODIFICATIONS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_TAB_PARTITIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26281.htm">USER_TAB_PARTITIONS describes partition-level partitioning information, partition storage parameters, and partition statistics generated by the DBMS_STATS package for all partitions owned by the current user. Its columns are the same as those in "ALL_TAB_PARTITIONS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_TAB_PENDING_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26639.htm">USER_TAB_PENDING_STATS describes pending statistics for tables, partitions, and subpartitions owned by the current user. Its columns (except for OWNER) are the same as those in "ALL_TAB_PENDING_STATS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_TAB_PRIVS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26282.htm">USER_TAB_PRIVS describes the object grants for which the current user is the object owner, grantor, or grantee. Its columns are the same as those in DBA_TAB_PRIVS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_TAB_PRIVS_MADE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26283.htm">USER_TAB_PRIVS_MADE describes the object grants for which the current user is the object owner. Its columns (except for OWNER) are the same as those in ALL_TAB_PRIVS_MADE.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_TAB_PRIVS_RECD" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26284.htm">USER_TAB_PRIVS_RECD describes the object grants for which the current user is the grantee. Its columns (except for GRANTEE) are the same as those in ALL_TAB_PRIVS_RECD.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_TAB_STAT_PREFS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26640.htm">USER_TAB_STAT_PREFS displays information about statistics preferences for the tables owned by the current user. Its columns (except for OWNER) are the same as those in "ALL_TAB_STAT_PREFS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_TAB_STATISTICS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26376.htm">USER_TAB_STATISTICS displays optimizer statistics for the tables owned by the current user. Its columns (except for OWNER) are the same as those in ALL_TAB_STATISTICS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_TAB_STATS_HISTORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26490.htm">USER_TAB_STATS_HISTORY provides a history of table statistics modifications for all tables owned by the current user. Its columns (except for OWNER) are the same as those in "ALL_TAB_STATS_HISTORY".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_TAB_SUBPARTITIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26285.htm">USER_TAB_SUBPARTITIONS describes, for each table subpartition owned by the current user, the subpartition name, name of the table and partition to which it belongs, and its storage attributes. Its columns are the same as those in "ALL_TAB_SUBPARTITIONS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26286.htm">USER_TABLES describes the relational tables owned by the current user. Its columns (except for OWNER) are the same as those in ALL_TABLES. To gather statistics for this view, use the DBMS_STATS package.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_TABLESPACES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26287.htm">USER_TABLESPACES describes the tablespaces accessible to the current user. Its columns (except for PLUGGED_IN) are the same as those in DBA_TABLESPACES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_TRANSFORMATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26291.htm">USER_TRANSFORMATIONS displays information about the transformations owned by the current user. Its columns (except for OWNER) are the same as those in ALL_TRANSFORMATIONS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_TRIGGER_COLS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26292.htm">USER_TRIGGER_COLS describes the use of columns in the triggers owned by the current user and in triggers on tables owned by the current user. Its columns are the same as those in ALL_TRIGGER_COLS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_TRIGGER_ORDERING" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26581.htm">USER_TRIGGER_ORDERING describes the triggers owned by the current user that have FOLLOWS or PRECEDES ordering. Its columns (except for TRIGGER_OWNER) are the same as those in ALL_TRIGGER_ORDERING.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_TRIGGERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26293.htm">USER_TRIGGERS describes the triggers owned by the current user. Its columns (except for OWNER) are the same as those in ALL_TRIGGERS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_TS_QUOTAS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26294.htm">USER_TS_QUOTAS contains information about tablespace quotas for the current user. Its columns (except for USERNAME) the same as those in "DBA_TS_QUOTAS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_TSTZ_TAB_COLS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26732.htm">USER_TSTZ_TAB_COLS displays information about the columns of the tables owned by the current user, which have columns defined on TIMESTAMP WITH TIME ZONE data types or object types containing attributes of TIMESTAMP WITH TIME ZONE data types. Its columns (except for OWNER, COLUMN_NAME, NESTED, and VIRTUAL_COLUMN) are the same as those in ALL_TSTZ_TAB_COLS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_TSTZ_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26731.htm">USER_TSTZ_TABLES displays information about the tables owned by the current user, which have columns defined on TIMESTAMP WITH TIME ZONE data types or object types containing attributes of TIMESTAMP WITH TIME ZONE data types. Its columns (except for OWNER) are the same as those in ALL_TSTZ_TABLES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_TUNE_MVIEW" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26378.htm">USER_TUNE_MVIEW displays the result of executing the DBMS_ADVISOR.TUNE_MVIEW procedure. Its columns (except for OWNER) are the same as those in DBA_TUNE_MVIEW.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_TYPE_ATTRS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26295.htm">USER_TYPE_ATTRS describes the attributes of the object types owned by the current user. Its columns (except for OWNER and CHAR_USED) are the same as those in ALL_TYPE_ATTRS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_TYPE_METHODS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26296.htm">USER_TYPE_METHODS describes the methods of the object types owned by the current user. Its columns (except for OWNER) are the same as those in ALL_TYPE_METHODS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_TYPE_VERSIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26297.htm">USER_TYPE_VERSIONS describes the versions of the object types owned by the current user. Its columns (except for OWNER) are the same as those in ALL_TYPE_VERSIONS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_TYPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26298.htm">USER_TYPES describes the object types owned by the current user. Its columns (except for OWNER) are the same as those in ALL_TYPES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_UNUSED_COL_TABS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26300.htm">USER_UNUSED_COL_TABS describes the tables owned by the current user that contain unused columns. Its columns (except for OWNER) are the same as those in ALL_UNUSED_COL_TABS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_UPDATABLE_COLUMNS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26301.htm">USER_UPDATABLE_COLUMNS describes columns in a join view that can be updated by the current user, subject to appropriate privileges. Its columns are the same as those in "ALL_UPDATABLE_COLUMNS".</DataDictionaryObject>
    <DataDictionaryObject Name="USER_USERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26302.htm">USER_USERS describes the current user.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_USTATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26303.htm">USER_USTATS describes the user-defined statistics collected on the tables and indexes owned by the current user. Its columns are the same as those in ALL_USTATS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_VARRAYS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26304.htm">USER_VARRAYS describes the varrays owned by the current user. Its columns (except for OWNER) are the same as those in ALL_VARRAYS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_VIEWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26305.htm">USER_VIEWS describes the views owned by the current user. Its columns (except for OWNER) are the same as those in ALL_VIEWS. </DataDictionaryObject>
    <DataDictionaryObject Name="USER_VIEWS_AE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26696.htm">USER_VIEWS_AE describes the views (across all editions) owned by the current user. Its columns (except for OWNER) are the same as those in ALL_VIEWS_AE.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_WALLET_ACES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26942.htm">USER_WALLET_ACES describes the status of access control entries for the current user to access wallets through PL/SQL network utility packages.  Its columns (except for ACE_ORDER, START_DATE, END_DATE, GRANT_TYPE, INVERTED_PRINCIPAL, PRINCIPAL, PRINCIPAL_TYPE, and STATUS) are the same as those in DBA_WALLET_ACES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_WARNING_SETTINGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26380.htm">USER_WARNING_SETTINGS displays information about the warning parameter settings for the objects owned by the current user. Its columns (except for OWNER) are the same as those in ALL_WARNING_SETTINGS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_XML_INDEXES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26700.htm">USER_XML_INDEXES describes the XML indexes owned by the current user. Its columns (except for INDEX_OWNER) are the same as those in ALL_XML_INDEXES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_XML_NESTED_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26845.htm">USER_XML_NESTED_TABLES describes all the tables and their corresponding nested tables owned by the current user. Its columns (except for OWNER) are the same as those in ALL_XML_NESTED_TABLES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_XML_OUT_OF_LINE_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26846.htm">USER_XML_OUT_OF_LINE_TABLES describes all the out of line tables connected to a given root table for the same schema owned by the current user. Its columns (except for TABLE_OWNER) are the same as those in ALL_XML_OUT_OF_LINE_TABLES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_XML_SCHEMA_ATTRIBUTES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26847.htm">USER_XML_SCHEMA_ATTRIBUTES describes all the attributes and their properties owned by the current user. Its columns (except for OWNER) are the same as those in ALL_XML_SCHEMA_ATTRIBUTES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_XML_SCHEMA_COMPLEX_TYPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26848.htm">USER_XML_SCHEMA_COMPLEX_TYPES describes all complex types owned by the current user. Its columns (except for OWNER) are the same as those in ALL_XML_SCHEMA_COMPLEX_TYPES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_XML_SCHEMA_ELEMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26849.htm">USER_XML_SCHEMA_ELEMENTS describes all the elements and their properties owned by the current user. Its columns (except for OWNER) are the same as those in ALL_XML_SCHEMA_ELEMENTS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_XML_SCHEMA_NAMESPACES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26850.htm">USER_XML_SCHEMA_NAMESPACES describes all the available namespaces owned by the current user. Its columns (except for OWNER) are the same as those in ALL_XML_SCHEMA_NAMESPACES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_XML_SCHEMA_SIMPLE_TYPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26851.htm">USER_XML_SCHEMA_SIMPLE_TYPES describes all simple types owned by the current user. Its columns (except for OWNER) are the same as those in ALL_XML_SCHEMA_SIMPLE_TYPES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_XML_SCHEMA_SUBSTGRP_HEAD" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26852.htm">USER_XML_SCHEMA_SUBSTGRP_HEAD describes the heads of substitution groups owned by the current user. Its columns (except for OWNER) are the same as those in ALL_XML_SCHEMA_SUBSTGRP_HEAD.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_XML_SCHEMA_SUBSTGRP_MBRS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26853.htm">USER_XML_SCHEMA_SUBSTGRP_MBRS describes all members of substitution groups owned by the current user. Its columns (except for OWNER) are the same as those in ALL_XML_SCHEMA_SUBSTGRP_MBRS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_XML_SCHEMAS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26307.htm">USER_XML_SCHEMAS describes the registered XML schemas owned by the current user. Its columns (except for OWNER) are the same as those in ALL_XML_SCHEMAS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_XML_TAB_COLS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26308.htm">USER_XML_TAB_COLS describes the columns of the XML tables owned by the current user. Its columns (except for OWNER) are the same as those in ALL_XML_TAB_COLS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_XML_TABLES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26309.htm">USER_XML_TABLES describes the XML tables owned by the current user. Its columns (except for OWNER) are the same as those in ALL_XML_TABLES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_XML_VIEW_COLS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26310.htm">USER_XML_VIEW_COLS describes the columns of the XML views owned by the current user. Its columns (except for OWNER) are the same as those in ALL_XML_VIEW_COLS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_XML_VIEWS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26311.htm">USER_XML_VIEWS describes the XML views owned by the current user. Its columns (except for OWNER) are the same as those in ALL_XML_VIEWS.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ZONEMAP_MEASURES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26859.htm">USER_ZONEMAP_MEASURES describes the measures for all the zone maps owned by the user. Its columns are the same as those in ALL_ZONEMAP_MEASURES.</DataDictionaryObject>
    <DataDictionaryObject Name="USER_ZONEMAPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn26860.htm">USER_ZONEMAPS describes the zone maps owned by the user. Its columns are the same as those in ALL_ZONEMAPS.</DataDictionaryObject>
    <DataDictionaryObject Name="UTL_FILE_DIR" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10230.htm" />
    <DataDictionaryObject Name="V_$ACCESS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30001.htm">V$ACCESS displays information about locks that are currently imposed on library cache objects. The locks are imposed to ensure that they are not aged out of the library cache while they are required for SQL execution.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ACTIVE_INSTANCES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30002.htm">V$ACTIVE_INSTANCES displays the mapping between instance names and instance numbers for all instances that have the database currently mounted.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ACTIVE_SERVICES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30326.htm">V$ACTIVE_SERVICES displays information about the active services in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ACTIVE_SESS_POOL_MTH" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30003.htm">V$ACTIVE_SESS_POOL_MTH displays available active session pool resource allocation methods.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ACTIVE_SESSION_HISTORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30299.htm">V$ACTIVE_SESSION_HISTORY displays sampled session activity in the database. It contains snapshots of active database sessions taken once a second. A database session is considered active if it was on the CPU or was waiting for an event that didn't belong to the Idle wait class. Refer to the V$EVENT_NAME view for more information on wait classes.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ADVISOR_PROGRESS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30327.htm">V$ADVISOR_PROGRESS displays information about the progress of advisor execution.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ALERT_TYPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30328.htm">V$ALERT_TYPES displays information about server alert types.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$AQ" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30004.htm">V$AQ displays statistics for the queues in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$AQ_BACKGROUND_COORDINATOR" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30691.htm">V$AQ_BACKGROUND_COORDINATOR lists performance statistics for the Oracle Database Advanced Queueing master background coordinator process (AQPC).</DataDictionaryObject>
    <DataDictionaryObject Name="V_$AQ_BMAP_NONDUR_SUBSCRIBERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30698.htm">V$AQ_BMAP_NONDUR_SUBSCRIBERS can be used to get the available bit positions. The view is queried to get the free bit position during creation of a non-durable subscriber.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$AQ_CROSS_INSTANCE_JOBS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30694.htm">V$AQ_CROSS_INSTANCE_JOBS describes each of the cross process jobs. Each job serves to forward messages for a shard from a source instance to a destination instance for a set of subscribers of a sharded queue.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$AQ_JOB_COORDINATOR" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30692.htm">V$AQ_JOB_COORDINATOR lists performance statistics per coordinator, for every AQ coordinator controlled by the Oracle Database Advanced Queueing master coordinator.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$AQ_MESSAGE_CACHE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30721.htm">V$AQ_MESSAGE_CACHE provides performance statistics of the message cache for sharded queues at the subshard level in the instance.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$AQ_NONDUR_REGISTRATIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30714.htm">V$AQ_NONDUR_REGISTRATIONS provides information about non-durable subscriptions.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$AQ_NONDUR_SUBSCRIBER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30697.htm">V$AQ_NONDUR_SUBSCRIBER provides information about the non-durable subscriptions on sharded queues.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$AQ_NONDUR_SUBSCRIBER_LWM" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30696.htm">V$AQ_NONDUR_SUBSCRIBER_LWM projects the low watermarks (LWMs) of non-durable subscribers in a sharded queue. The LWM of a non-durable subscriber is a combination of shard, priority and LWM (subshard).</DataDictionaryObject>
    <DataDictionaryObject Name="V_$AQ_NOTIFICATION_CLIENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30695.htm">V$AQ_NOTIFICATION_CLIENTS displays performance statistics for secure OCI client connections.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$AQ_SERVER_POOL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30693.htm">V$AQ_SERVER_POOL lists performance statistics for all the servers in the pool.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$AQ_SUBSCRIBER_LOAD" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30680.htm">V$AQ_SUBSCRIBER_LOAD describes the load of all subscribers of sharded queues in terms of latency at every instance in an Oracle RAC environment. Latency denotes the predicted amount of time (in seconds) required from the current time to drain all the messages for that subscriber at each respective instance. The latency calculation considers past enqueue/dequeue rates and future enqueue/dequeue rates based on history.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ARCHIVE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30006.htm">V$ARCHIVE displays information about redo log files in need of archiving. Each row displays information for one thread. This information is also available in V$LOG. Oracle recommends that you use V$LOG.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ARCHIVE_DEST" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30007.htm">V$ARCHIVE_DEST displays, for the current instance, all of the destinations in the Data Guard configuration, including each destination's current value, mode, and status.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ARCHIVE_DEST_STATUS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30008.htm">V$ARCHIVE_DEST_STATUS displays run time and configuration information for the archived redo log destinations. The information in this view does not persist across an instance shutdown.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ARCHIVE_GAP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30009.htm">V$ARCHIVE_GAP displays information about archive gaps on a standby database. This view can be used to find out the current archive gap that is blocking recovery for the current recovery incarnation.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ARCHIVE_PROCESSES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30010.htm">V$ARCHIVE_PROCESSES displays the state of the various ARCH processes for the instance.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ARCHIVED_LOG" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30011.htm">V$ARCHIVED_LOG displays archived log information from the control file, including archive log names. An archive log record is inserted after the online redo log is successfully archived or cleared (name column is NULL if the log was cleared). If the log is archived twice, there will be two archived log records with the same THREAD#, SEQUENCE#, and FIRST_CHANGE#, but with a different name. An archive log record is also inserted when an archive log is restored from a backup set or a copy and whenever a copy of a log is made with the RMAN COPY command.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_ACFS_ENCRYPTION_INFO" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30636.htm">V$ASM_ACFS_ENCRYPTION_INFO displays encryption information for every mounted Oracle ACFS.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_ACFS_SEC_ADMIN" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30707.htm">V$ASM_ACFS_SEC_ADMIN contains Oracle ACFS security administrators in the cluster. This view also supports GV$ global views.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_ACFS_SEC_CMDRULE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30706.htm">V$ASM_ACFS_SEC_CMDRULE contains one row for every Oracle ACFS security command rule for each Oracle ACFS file system. This view also supports GV$ global views.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_ACFS_SEC_REALM" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30699.htm">V$ASM_ACFS_SEC_REALM contains an entry for every realm in the Oracle ACFS security file system in an Oracle Automatic Storage Management (Oracle ASM) instance. This view also supports GV$ global views.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_ACFS_SEC_REALM_FILTER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30702.htm">V$ASM_ACFS_SEC_REALM_FILTER contains an entry for every filter in the Oracle ACFS security realm for each Oracle ACFS file system. A filter is a defined as a command rule/rule set pair in a realm. This view also supports GV$ global views.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_ACFS_SEC_REALM_GROUP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30701.htm">V$ASM_ACFS_SEC_REALM_GROUP contains an entry for every group in the Oracle ACFS security realm for each Oracle ACFS file system. This view also supports GV$ global views.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_ACFS_SEC_REALM_USER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30700.htm">V$ASM_ACFS_SEC_REALM_USER contains an entry for every user in the Oracle ACFS security realm for each Oracle ACFS file system. This view also supports GV$ global views.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_ACFS_SEC_RULE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30703.htm">V$ASM_ACFS_SEC_RULE contains information about all Oracle ACFS security rules for each Oracle ACFS file system. This view also supports GV$ global views.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_ACFS_SEC_RULESET" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30704.htm">V$ASM_ACFS_SEC_RULESET contains information about all Oracle ACFS security rule sets for each Oracle ACFS file system. This view also supports GV$ global views.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_ACFS_SEC_RULESET_RULE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30705.htm">V$ASM_ACFS_SEC_RULESET_RULE contains an entry for every rule in the Oracle ACFS security rule set for each Oracle ACFS file system. This view also supports GV$ global views.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_ACFS_SECURITY_INFO" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30637.htm">V$ASM_ACFS_SECURITY_INFO displays security information for every mounted Oracle ACFS.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_ACFSREPL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30719.htm">V$ASM_ACFSREPL displays information for Oracle ACFS file systems that are initialized for replication.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_ACFSREPLTAG" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30720.htm">V$ASM_ACFSREPLTAG displays replicated tag information for Oracle ACFS file systems that are initialized for replication.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_ACFSSNAPSHOTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30617.htm">V$ASM_ACFSSNAPSHOTS displays snapshot information for every mounted Oracle ACFS.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_ACFSTAG" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30690.htm">V$ASM_ACFSTAG displays every file or directory that has a tag and its tag name for every mounted Oracle ACFS.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_ACFSVOLUMES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30618.htm">V$ASM_ACFSVOLUMES displays information about mounted Oracle ACFS volumes, correlated with V$ASM_FILESYSTEM.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_ALIAS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30168.htm">In an Oracle Automatic Storage Management (Oracle ASM) instance, V$ASM_ALIAS displays one row for every alias present in every disk group mounted by the Oracle ASM instance.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_ATTRIBUTE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30447.htm">V$ASM_ATTRIBUTE displays one row for each attribute defined. In addition to attributes specified by CREATE DISKGROUP and ALTER DISKGROUP statements, the view may show other attributes that are created automatically. Note that attributes are only displayed for disk groups where COMPATIBLE.ASM is set to 11.1 or higher.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_AUDIT_CLEAN_EVENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30724.htm">In an Oracle Automatic Storage Management (Oracle ASM) instance, V$ASM_AUDIT_CLEAN_EVENTS displays information about the history of audit trail cleanup or purge events. In a database instance,  V$ASM_AUDIT_CLEAN_EVENTS displays no rows.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_AUDIT_CLEANUP_JOBS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30725.htm">In an Oracle Automatic Storage Management (Oracle ASM) instance, V$ASM_AUDIT_CLEANUP_JOBS displays information about the  configured audit trail purge jobs. In a database instance,  V$ASM_AUDIT_CLEANUP_JOBS displays no rows.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_AUDIT_CONFIG_PARAMS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30726.htm">In an Oracle Automatic Storage Management (Oracle ASM) instance, V$ASM_AUDIT_CONFIG_PARAMS displays information about the currently configured audit trail properties that are used by the DBMS_AUDIT_MGMT package. In a database instance, V$ASM_AUDIT_CONFIG_PARAMS displays no rows.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_AUDIT_LAST_ARCH_TS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30727.htm">In an Oracle Automatic Storage Management (Oracle ASM) instance, V$ASM_AUDIT_LAST_ARCH_TS displays information about the last archive timestamps set for audit trail cleanup or purges. In a database instance, V$ASM_AUDIT_LAST_ARCH_TS displays no rows.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_CLIENT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30169.htm">In an Oracle Automatic Storage Management (Oracle ASM) instance, V$ASM_CLIENT identifies databases using disk groups managed by the Oracle ASM instance. In a database instance, V$ASM_CLIENT displays information about the Oracle ASM instance if the database has any open Oracle ASM files.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_DISK" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30170.htm">V$ASM_DISK displays one row for every disk discovered by the Oracle Automatic Storage Management (Oracle ASM) instance, including disks that are not part of any disk group. </DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_DISK_IOSTAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30485.htm">V$ASM_DISK_IOSTAT displays information about disk I/O statistics for each Oracle Automatic Storage Management (Oracle ASM) client. If this view is queried from the database instance, only the rows for that instance are shown.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_DISK_STAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30360.htm">V$ASM_DISK_STAT displays performance statistics in the same way that V$ASM_DISK does, but without performing discovery of new disks. This results in a less expensive operation. However, since discovery is not performed, the output of this view does not include any data about disks that are new to the system. </DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_DISKGROUP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30171.htm">V$ASM_DISKGROUP displays one row for every Oracle Automatic Storage Management (Oracle ASM) disk group discovered by the Oracle ASM instance on the node.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_DISKGROUP_STAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30361.htm">V$ASM_DISKGROUP_STAT displays performance statistics in the same way that V$ASM_DISKGROUP does, but without performing discovery of new disk groups. This results in a less expensive operation. However, since discovery is not performed, the output of this view does not include any data about disk groups that are new to the system. </DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_ESTIMATE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30669.htm">V$ASM_ESTIMATE displays an estimate of the work involved in execution plans for Oracle Automatic Storage Management (Oracle ASM) disk group rebalance and resync operations.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_FILE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30172.htm">In an Oracle Automatic Storage Management (Oracle ASM) instance, V$ASM_FILE displays one row for each file in each disk group mounted by the Oracle ASM instance. For example, if there are three disk groups and five files in each, fifteen rows are displayed (unless the query is qualified with a WHERE clause).</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_FILESYSTEM" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30619.htm">V$ASM_FILESYSTEM displays information for every mounted Oracle ACFS.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_OPERATION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30173.htm"></DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_TEMPLATE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30174.htm">In an Oracle Automatic Storage Management (Oracle ASM) instance, V$ASM_TEMPLATE displays one row for every template present in every disk group mounted by the Oracle ASM instance. In a database instance, V$ASM_TEMPLATE displays one row for every template present in every disk group mounted by the Oracle ASM instance with which the database instance communicates.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_USER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30622.htm">V$ASM_USER displays the effective operating system user names of connected database instances and of file owners.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_USERGROUP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30623.htm">V$ASM_USERGROUP displays the creator for each Oracle Automatic Storage Management (Oracle ASM) File Access Control group.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_USERGROUP_MEMBER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30624.htm">V$ASM_USERGROUP_MEMBER displays the members for each Oracle Automatic Storage Management (Oracle ASM) File Access Control group.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_VOLUME" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30625.htm">In an Oracle Automatic Storage Management (Oracle ASM) instance, V$ASM_VOLUME displays information about each Oracle ADVM volume.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ASM_VOLUME_STAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30626.htm">In an Oracle Automatic Storage Management (Oracle ASM) instance, V$ASM_VOLUME_STAT displays information about statistics for each Oracle ADVM volume.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$AW_AGGREGATE_OP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30012.htm">V$AW_AGGREGATE_OP displays the aggregation operators available in analytic workspaces. You can use this view in an application to provide a list of choices.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$AW_ALLOCATE_OP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30013.htm">V$AW_ALLOCATE_OP displays the allocation operators available in analytic workspaces. You can use this view in an application to provide a list of choices.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$AW_CALC" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30014.htm">V$AW_CALC reports on the effectiveness of various caches used by Oracle OLAP during dynamic aggregation.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$AW_LONGOPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30315.htm">V$AW_LONGOPS displays status information about active SQL cursors initiated in an analytic workspace.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$AW_OLAP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30015.htm">V$AW_OLAP provides a record of active sessions and their use with analytic workspaces. A row is generated whenever an analytic workspace is created or attached. The first row for a session is created when the first command is issued. It identifies the SYS.EXPRESS workspace, which is attached automatically to each session. Rows related to a particular analytic workspace are deleted when the workspace is detached from the session or the session ends.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$AW_SESSION_INFO" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30016.htm">V$AW_SESSION_INFO provides information about each active session. A transaction is a single exchange between a client session and Oracle OLAP. Multiple commands can execute within a single transaction.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BACKUP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30017.htm">V$BACKUP displays the backup status of all online data files.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BACKUP_ARCHIVELOG_DETAILS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30362.htm">V$BACKUP_ARCHIVELOG_DETAILS contains information about all restorable archive logs. It will include all archived logs backed up in a backup set or proxy copies.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BACKUP_ARCHIVELOG_SUMMARY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30363.htm">V$BACKUP_ARCHIVELOG_SUMMARY provides archive log summary information based on archive logs in the backup set or on proxy copies.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BACKUP_ASYNC_IO" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30018.htm">V$BACKUP_ASYNC_IO displays performance information about ongoing and recently completed RMAN backups and restores. For each backup, it contains one row for each input data file, one row for the aggregate total performance of all data files, and one row for the output backup piece. This data is not stored persistently, and is not preserved when the instance is re-started.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BACKUP_CONTROLFILE_DETAILS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30364.htm">V$BACKUP_CONTROLFILE_DETAILS contains information about restorable control files. It will include all the control files backed up in the backup set, image copies, and proxy copies.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BACKUP_CONTROLFILE_SUMMARY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30365.htm">V$BACKUP_CONTROLFILE_SUMMARY provides control file summary information, based on either a backup set of files, image copies, or proxy copies.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BACKUP_COPY_DETAILS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30366.htm">V$BACKUP_COPY_DETAILS contains information about all available control file and data file copies.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BACKUP_COPY_SUMMARY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30367.htm">V$BACKUP_COPY_SUMMARY provides summary information for the output data file and control file copy.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BACKUP_CORRUPTION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30019.htm">V$BACKUP_CORRUPTION displays information about corrupt block ranges in data file backups from the control file. Note that corruptions are not tolerated in the control file and archived redo log backups.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BACKUP_DATAFILE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30020.htm">V$BACKUP_DATAFILE displays information about control files and data files in backup sets from the control file.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BACKUP_DATAFILE_DETAILS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30368.htm">V$BACKUP_DATAFILE_DETAILS contains information about restorable data files. It will include all data files backed in the backup set, image copies, and proxy copies.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BACKUP_DATAFILE_SUMMARY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30369.htm">V$BACKUP_DATAFILE_SUMMARY provides summary information for a specific criteria set, based on a backup job, a time range applicable to jobs, or a specific data file).</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BACKUP_DEVICE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30021.htm">V$BACKUP_DEVICE displays information about supported backup devices. If a device type does not support named devices, then one row with the device type and a null device name is returned for that device type. If a device type supports named devices then one row is returned for each available device of that type. The special device type DISK is not returned by this view because it is always available.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BACKUP_FILES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30022.htm">V$BACKUP_FILES displays information about all RMAN backups (both image copies and backup sets) and archived logs.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BACKUP_NONLOGGED" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30681.htm">V$BACKUP_NONLOGGED displays information about nonlogged block ranges in data file backups recorded in the control file.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BACKUP_PIECE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30023.htm">V$BACKUP_PIECE displays information about backup pieces from the control file. Each backup set consists of one or more backup pieces.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BACKUP_PIECE_DETAILS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30370.htm">V$BACKUP_PIECE_DETAILS displays information about all available backup pieces.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BACKUP_REDOLOG" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30024.htm">V$BACKUP_REDOLOG displays information about archived logs in backup sets from the control file. Note that online redo logs cannot be backed up directly; they must be archived first to disk and then backed up. An archive log backup set can contain one or more archived logs.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BACKUP_SET" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30025.htm">V$BACKUP_SET displays information about backup sets from the control file. A backup set record is inserted after the backup set is successfully completed.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BACKUP_SET_DETAILS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30371.htm">V$BACKUP_SET_DETAILS provides detailed information about the backup set. This view will contain an extra row for each backup session that invokes BACKUP BACKUPSET (that is, creates new copies for the same backup set or copies backup set information from disk to tape). However, the remaining values of other columns belong to the complete backup set.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BACKUP_SET_SUMMARY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30372.htm">V$BACKUP_SET_SUMMARY provides summary information for a backup set.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BACKUP_SPFILE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30026.htm">V$BACKUP_SPFILE displays information about server parameter files in backup sets from the control file.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BACKUP_SPFILE_DETAILS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30373.htm">V$BACKUP_SPFILE_DETAILS displays information about all restorable SP files backed up in the backup set.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BACKUP_SPFILE_SUMMARY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30374.htm">V$BACKUP_SPFILE_SUMMARY provides summary information for input SP file, based on either a backup job or time range applicable to jobs.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BACKUP_SYNC_IO" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30027.htm">V$BACKUP_SYNC_IO displays performance information about ongoing and recently completed RMAN backups and restores. For each backup, it contains one row for each input data file, one row for the aggregate total performance of all data files, and one row for the output backup piece. This data is not stored persistently, and is not preserved when the instance is re-started.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BGPROCESS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30028.htm">V$BGPROCESS displays information about the background processes.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BH" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30029.htm">V$BH displays the status and number of pings for every buffer in the SGA. This is an Oracle Real Application Clusters view.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BLOCK_CHANGE_TRACKING" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30030.htm">V$BLOCK_CHANGE_TRACKING displays the status of block change tracking for the database.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BLOCKING_QUIESCE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30399.htm">V$BLOCKING_QUIESCE indicates if a session is blocking, or would block, a quiesce operation.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BT_SCAN_CACHE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30736.htm">V$BT_SCAN_CACHE shows the parameters and status of the big table cache section.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BT_SCAN_OBJ_TEMPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30737.htm">V$BT_SCAN_OBJ_TEMPS shows the active objects currently tracked by the big table cache.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BUFFER_POOL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30032.htm">V$BUFFER_POOL displays information about all buffer pools available for the instance.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BUFFER_POOL_STATISTICS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30033.htm">V$BUFFER_POOL_STATISTICS displays statistics about all buffer pools available for the instance.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BUFFERED_PUBLISHERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30316.htm">V$BUFFERED_PUBLISHERS displays information about all buffered publishers in the instance. There is one row per queue per sender. The values are reset to zero when the database (or instance in an Oracle RAC environment) restarts.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BUFFERED_QUEUES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30317.htm">V$BUFFERED_QUEUES displays information about all buffered queues in the instance. There is one row per queue.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$BUFFERED_SUBSCRIBERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30318.htm">V$BUFFERED_SUBSCRIBERS displays information about the subscribers for all buffered queues in the instance. There is one row per subscriber per queue.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$CACHE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30034.htm">V$CACHE displays information from the block header of each block in the SGA of the current instance as related to particular database objects. This is an Oracle Real Application Clusters view.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$CACHE_LOCK" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30035.htm">V$CACHE_LOCK is deprecated. The information that was provided in this view is now provided in the V$INSTANCE_CACHE_TRANSFER and V$SEGMENT_STATISTICS views.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$CACHE_TRANSFER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30036.htm">V$CACHE_TRANSFER is identical to the V$CACHE view but only displays blocks that have been pinged at least once. This view contains information from the block header of each block in the SGA of the current instance as related to particular database objects. This is an Oracle Real Application Clusters view.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$CIRCUIT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30037.htm">V$CIRCUIT contains information about virtual circuits, which are user connections to the database through dispatchers and servers.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$CLASS_CACHE_TRANSFER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30038.htm">V$CLASS_CACHE_TRANSFER is deprecated. The information that was provided in this view is now provided in the V$INSTANCE_CACHE_TRANSFER and V$SEGMENT_STATISTICS views.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$CLIENT_SECRETS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30662.htm">V$CLIENT_SECRETS lists the secrets that are present in the keystore. Only SYS, SYSKM, and users with the ADMINISTER KEY MANAGEMENT privilege can access this view.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$CLIENT_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30329.htm">V$CLIENT_STATS displays measures for all sessions that are active for the client identifier per instance. The statistics available in this view are a subset of those available in V$SESSTAT and V$SESS_TIME_MODEL.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$CLONEDFILE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30713.htm">V$CLONEDFILE provides CloneDB file information.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$CLUSTER_INTERCONNECTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30400.htm">V$CLUSTER_INTERCONNECTS displays one or more interconnects that are being used for cluster communication.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$CON_SYS_TIME_MODEL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30715.htm">V$CON_SYS_TIME_MODEL displays the systemwide accumulated times for various operations for the container from which it is queried. The time reported is the total elapsed or CPU time (in microseconds). Any timed operation will buffer at most 5 seconds of time data. Specifically, this means that if a timed operation (such as SQL execution) takes a long period of time to perform, the data published to this view is at most missing 5 seconds of the time accumulated for the operation.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$CON_SYSSTAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30716.htm">V$CON_SYSSTAT displays system statistics, including OLAP kernel statistics for the container from which it is queried. To find the name of the statistic associated with each statistic number (STATISTIC#), query the V$STATNAME view.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$CON_SYSTEM_EVENT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30717.htm">V$CON_SYSTEM_EVENT displays information on total waits for an event in a container. Note that the TIME_WAITED and AVERAGE_WAIT columns will contain a value of zero on those platforms that do not support a fast timing mechanism. If you are running on one of these platforms and you want this column to reflect true wait times, then you must set TIMED_STATISTICS to TRUE in the parameter file; doing this will have a small negative effect on system performance.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$CON_SYSTEM_WAIT_CLASS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30718.htm">V$CON_SYSTEM_WAIT_CLASS displays the time totals for each registered wait class in a container.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$CONFIGURED_INTERCONNECTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30401.htm">V$CONFIGURED_INTERCONNECTS displays all the interconnects that Oracle is aware of. This view attempts to answer the question of where Oracle found the information about a specific interconnect.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$CONTAINERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30708.htm">V$CONTAINERS displays information about PDBs and the root associated with the current instance.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$CONTEXT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30042.htm">V$CONTEXT displays set attributes in the current session.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$CONTROLFILE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30043.htm">V$CONTROLFILE displays the names of the control files.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$CONTROLFILE_RECORD_SECTION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30044.htm">V$CONTROLFILE_RECORD_SECTION displays information about the control file record sections.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$COPY_CORRUPTION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30045.htm">V$COPY_CORRUPTION displays information about data file copy corruptions from the control file.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$COPY_NONLOGGED" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30682.htm">V$COPY_NONLOGGED displays information about nonlogged block ranges in data file copy blocks recorded in the control file.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$CORRUPT_XID_LIST" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30474.htm">V$CORRUPT_XID_LIST displays all corrupted XIDs.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$CPOOL_CC_INFO" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30486.htm">V$CPOOL_CC_INFO displays information about the pool-to-connection class mapping for the Database Resident Connection Pool per instance.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$CPOOL_CC_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30448.htm">V$CPOOL_CC_STATS displays information about the connection class level statistics for the Database Resident Connection Pool per instance.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$CPOOL_CONN_INFO" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30630.htm">V$CPOOL_CONN_INFO displays connection information about each connection to the connection broker.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$CPOOL_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30487.htm">V$CPOOL_STATS displays information about the Database Resident Connection Pool statistics for an instance.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$CR_BLOCK_SERVER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30046.htm">V$CR_BLOCK_SERVER displays statistics on the Global Cache Service processes (LMS) used in cache fusion.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$CURRENT_BLOCK_SERVER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30319.htm">V$CURRENT_BLOCK_SERVER displays statistics on the Global Cache Service processes (lMS) used in cache fusion.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$DATABASE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30047.htm">V$DATABASE displays information about the database from the control file.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$DATABASE_BLOCK_CORRUPTION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30048.htm">V$DATABASE_BLOCK_CORRUPTION displays information about database blocks that were corrupted after the last backup.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$DATABASE_INCARNATION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30049.htm">V$DATABASE_INCARNATION displays information about all database incarnations. Oracle creates a new incarnation whenever a database is opened with the RESETLOGS option. Records about the current and immediately previous incarnation are also contained in the V$DATABASE view.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$DATAFILE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30050.htm">V$DATAFILE displays datafile information from the control file.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$DATAFILE_COPY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30051.htm">V$DATAFILE_COPY displays data file copy information from the control file.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$DATAFILE_HEADER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30052.htm">V$DATAFILE_HEADER displays data file information from the data file headers.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$DATAGUARD_CONFIG" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30053.htm">V$DATAGUARD_CONFIG displays the unique database names defined with the DB_UNIQUE_NAME and LOG_ARCHIVE_CONFIG initialization parameters, providing a view of the Oracle Data Guard environment from any database in the configuration.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$DATAGUARD_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30413.htm">V$DATAGUARD_STATS displays information about Oracle Data Guard metrics when queried on a standby database. No rows are returned when queried on a primary database.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$DATAGUARD_STATUS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30054.htm">V$DATAGUARD_STATUS displays messages recently written to the alert log or server process trace files that concern physical standby databases or redo transport services for all standby database types.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$DB_CACHE_ADVICE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30057.htm">V$DB_CACHE_ADVICE contains rows that predict the number of physical reads for the cache size corresponding to each row. The rows also compute a "physical read factor," which is the ratio of the number of estimated reads to the number of reads actually performed by the real buffer cache during the measurement interval.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$DB_OBJECT_CACHE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30058.htm">V$DB_OBJECT_CACHE displays database objects that are cached in the library cache. Objects include tables, indexes, clusters, synonym definitions, PL/SQL procedures and packages, and triggers.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$DB_PIPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30059.htm">V$DB_PIPES displays the pipes that are currently represented in the shared pool for this instance.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$DB_TRANSPORTABLE_PLATFORM" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30376.htm">V$DB_TRANSPORTABLE_PLATFORM displays all platforms to which the database can be transported using the RMAN CONVERT DATABASE command. The transportable database feature only supports transports of the same endian platform. Therefore, V$DB_TRANSPORTABLE_PLATFORM displays fewer rows than V$TRANSPORTABLE_PLATFORM.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$DBFILE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30060.htm">V$DBFILE displays all data files making up the database. This view is retained for historical compatibility. Use of V$DATAFILE is recommended instead.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$DBLINK" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30061.htm">V$DBLINK describes all database links (links with IN_TRANSACTION = YES) opened by the session issuing the query on V$DBLINK. These database links must be committed or rolled back before being closed.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$DEAD_CLEANUP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30731.htm">V$DEAD_CLEANUP shows the dead processes and killed sessions present in the instance and their cleanup status.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$DELETED_OBJECT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30062.htm">V$DELETED_OBJECT displays information about deleted archived logs, data file copies and backup pieces from the control file. The only purpose of this view is to optimize the recovery catalog resync operation. When an archived log, data file copy, or backup piece is deleted, the corresponding record is marked deleted.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$DG_BROKER_CONFIG" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30659.htm">V$DG_BROKER_CONFIG provides a summary of an Oracle Data Guard broker configuration. This is similar to the DGMGRL CLI's SHOW CONFIGURATION command. It provides a view of the entire Oracle Data Guard broker configuration from any database in the configuration.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$DIAG_INFO" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30502.htm">V$DIAG_INFO describes the state of Automatic Diagnostic Repository (ADR) functionality using NAME=VALUE pairs.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$DISPATCHER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30063.htm">V$DISPATCHER displays information about the dispatcher processes.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$DISPATCHER_CONFIG" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30064.htm">V$DISPATCHER_CONFIG displays information about the dispatcher configurations and their attributes.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$DISPATCHER_RATE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30065.htm">V$DISPATCHER_RATE displays rate statistics for a number of activities performed by the dispatcher processes. Collected samples have an activity-specific "time-to-live" (TTL_* columns). Statistics are reported over the following two types of time intervals:</DataDictionaryObject>
    <DataDictionaryObject Name="V_$DNFS_FILES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30493.htm">V$DNFS_FILES displays information about the Oracle process files open through Direct NFS.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$DNFS_CHANNELS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30512.htm">V$DNFS_CHANNELS displays information about the Oracle process connections (channels) open to NFS servers.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$DNFS_SERVERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30494.htm">V$DNFS_SERVERS displays information about the Direct NFS servers accessed by Direct NFS.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$DNFS_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30495.htm">V$DNFS_STATS displays information about the Oracle process NFS operation statistics issued by Direct NFS.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$DYNAMIC_REMASTER_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30422.htm">V$DYNAMIC_REMASTER_STATS displays statistical information about the dynamic remastering process of object affinity and read-mostly. All times are given in hundredths of a second, and total values reflect what has been collected since instance startup.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$EDITIONABLE_TYPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30660.htm">V$EDITIONABLE_TYPES lists all the editionable types based on the current compatibility setting. The SELECT privilege on V$EDITIONABLE_TYPES will be granted to PUBLIC.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$EMON" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30608.htm">V$EMON displays performance statistics per event monitor (EMON) slave for diagnosability of notifications. All processing time and latency is in seconds.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$EMX_USAGE_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30741.htm">V$EMX_USAGE_STATS  is used to track how often each report in Oracle Enterprise Manager Database Express (EM Express) is used and how long the EM Express servlet takes to serve these reports to the client.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ENABLEDPRIVS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30074.htm">V$ENABLEDPRIVS displays the system privileges that have been granted to the current user and the currently enabled roles. These privileges can be found in the table SYSTEM_PRIVILEGE_MAP.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ENCRYPTED_TABLESPACES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30496.htm">V$ENCRYPTED_TABLESPACES displays information about the tablespaces that are encrypted.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ENCRYPTION_KEYS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30661.htm">V$ENCRYPTION_KEYS displays master key description attributes.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ENCRYPTION_WALLET" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30488.htm">V$ENCRYPTION_WALLET displays information on the status of the wallet and the wallet location for Transparent Data Encryption.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ENQUEUE_LOCK" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30075.htm">V$ENQUEUE_LOCK displays all locks owned by enqueue state objects. The columns in this view are identical to the columns in V$LOCK.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ENQUEUE_STAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30076.htm">V$ENQUEUE_STAT displays statistics on the number of enqueue (lock) requests for each type of lock.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ENQUEUE_STATISTICS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30077.htm">V$ENQUEUE_STATISTICS displays statistics on the number of enqueue (lock) requests for each type of lock. V$ENQUEUE_STATISTICS encompasses V$ENQUEUE_STAT and gives more detailed information (several rows for same enqueues with different reasons).</DataDictionaryObject>
    <DataDictionaryObject Name="V_$EVENT_HISTOGRAM" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30078.htm">V$EVENT_HISTOGRAM displays a histogram of the number of waits, the maximum wait, and total wait time on an event basis, in milliseconds. The histogram has buckets of time intervals from &lt; 1 ms, &lt; 2 ms, &lt; 4 ms, &lt; 8 ms, ... &lt; 221 ms, &lt; 222 ms, and &gt;= 222 ms.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$EVENT_HISTOGRAM_MICRO" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30743.htm">V$EVENT_HISTOGRAM_MICRO displays a histogram of the number of waits, the maximum wait, and total wait time on an event basis, in microseconds. The histogram has buckets of time intervals from &lt; 1 us, &lt; 2 us, &lt; 4 us, &lt; 8 us, ... &lt; 231 us, &lt; 232 us, and &gt;= 232 us.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$EVENT_NAME" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30079.htm">V$EVENT_NAME displays information about wait events.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$EVENTMETRIC" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30330.htm">V$EVENTMETRIC displays values of wait event metrics for the most recent 60-second interval.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$EXECUTION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30080.htm">V$EXECUTION displays information on parallel execution.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$FALSE_PING" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30081.htm">V$FALSE_PING is deprecated. The information that was provided in this view is now provided in the V$INSTANCE_CACHE_TRANSFER and V$SEGMENT_STATISTICS views.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$FAST_START_SERVERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30082.htm">V$FAST_START_SERVERS provides information about all the recovery slaves performing parallel transaction recovery.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$FAST_START_TRANSACTIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30083.htm">V$FAST_START_TRANSACTIONS displays information about the progress of the transactions that Oracle is recovering.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$FILE_CACHE_TRANSFER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30084.htm">V$FILE_CACHE_TRANSFER is deprecated. The information that was provided in this view is now provided in the V$INSTANCE_CACHE_TRANSFER and V$SEGMENT_STATISTICS views.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$FILE_HISTOGRAM" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30085.htm">V$FILE_HISTOGRAM displays a histogram of all synchronous single block reads on a per-file basis (for data files). The histogram has buckets of time intervals from &lt; 1 ms, &lt; 2 ms, &lt; 4 ms, &lt; 8 ms, ... &lt; 221 ms, &lt; 222 ms, and &gt;= 222 ms.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$FILEMETRIC" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30331.htm">V$FILEMETRIC displays values of file metrics for the most recent 10-minute interval. A history of the last one hour will be kept in the system.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$FILEMETRIC_HISTORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30332.htm">V$FILEMETRIC_HISTORY displays values of file metrics for all intervals in the last one hour.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$FILESPACE_USAGE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30333.htm">V$FILESPACE_USAGE summarizes space allocation information of each data file and temp file.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$FILESTAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30087.htm">V$FILESTAT displays the number of physical reads and writes done and the total number of single-block and multiblock I/Os done at file level. As of Oracle Database 10g Release 2 (10.2), this view also includes reads done by RMAN processes for backup operations.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$FIXED_TABLE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30089.htm">V$FIXED_TABLE displays all dynamic performance tables, views, and derived tables in the database. Some V$ tables (for example, V$ROLLNAME) refer to real tables and are therefore not listed.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$FIXED_VIEW_DEFINITION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30090.htm">V$FIXED_VIEW_DEFINITION contains the definitions of all the fixed views (views beginning with V$). Use this table with caution. Oracle tries to keep the behavior of fixed views the same from release to release, but the definitions of the fixed views can change without notice. Use these definitions to optimize your queries by using indexed columns of the dynamic performance tables.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$FLASHBACK_DATABASE_LOG" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30300.htm">V$FLASHBACK_DATABASE_LOG displays information about the flashback data. Use this view to help estimate the amount of flashback space required for the current workload.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$FLASHBACK_DATABASE_LOGFILE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30301.htm">V$FLASHBACK_DATABASE_LOGFILE displays information about the flashback log files.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$FLASHBACK_DATABASE_STAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30320.htm">V$FLASHBACK_DATABASE_STAT displays statistics for monitoring the I/O overhead of logging flashback data. This view also displays the estimated flashback space needed based on previous workloads.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$FLASHBACK_TXN_GRAPH" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30497.htm">V$FLASHBACK_TXN_GRAPH displays a tabular representation of the transaction dependency graph. For each dependency edge, there could be multiple rows, one for each conflicting operation..</DataDictionaryObject>
    <DataDictionaryObject Name="V_$FLASHBACK_TXN_MODS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30498.htm">V$FLASHBACK_TXN_MODS displays the individual modifications of all the transactions in memory.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$FLASHFILESTAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30666.htm">V$FLASHFILESTAT displays statistics about Database Smart Flash Cache.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$FOREIGN_ARCHIVED_LOG" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30471.htm">V$FOREIGN_ARCHIVED_LOG can be queried on a logical standby database to find out the list of foreign archived logs received by a database.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$FS_FAILOVER_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30484.htm">V$FS_FAILOVER_STATS displays statistics about fast-start failovers occurring on the system.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$FS_OBSERVER_HISTOGRAM" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30735.htm">V$FS_OBSERVER_HISTOGRAM displays statistics that are based on the frequency of successful pings between the observer and primary database for different time intervals. These statistics can be used to select an appropriate value for the FastStartFailoverThreshold configuration property for your environment.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$GC_ELEMENT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30091.htm">V$GC_ELEMENT displays one entry for each global cache resource that is used by the buffer cache. The name of the global cache resource that corresponds to a lock element is {'BL', indx, class}. This is an Oracle Real Application Clusters view.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$GC_ELEMENTS_WITH_COLLISIONS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30092.htm">V$GC_ELEMENTS_WITH_COLLISIONS is deprecated. The information that was provided in this view is now provided in the V$INSTANCE_CACHE_TRANSFER and V$SEGMENT_STATISTICS views.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$GCSHVMASTER_INFO" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30093.htm">V$GCSHVMASTER_INFO describes the current and previous master instances and the number of re-masterings of Global Cache Service resources except those belonging to files mapped to a particular master.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$GCSPFMASTER_INFO" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30094.htm">V$GCSPFMASTER_INFO describes the current and previous master instances and the number of re-masterings of Global Cache Service resources belonging to files mapped to instances.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$GES_BLOCKING_ENQUEUE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30095.htm">V$GES_BLOCKING_ENQUEUE describes all locks currently known to lock manager that are being blocked or blocking others. The output of this view is a subset of the output from V$GES_ENQUEUE. This is an Oracle Real Application Clusters view.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$GES_CONVERT_LOCAL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30067.htm">V$GES_CONVERT_LOCAL displays statistics for local GES enqueue operations. This view records average convert times, count information, and timed statistics for global enqueue requests.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$GES_CONVERT_REMOTE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30068.htm">V$GES_CONVERT_REMOTE displays values for remote GES enqueue conversions. This view records average convert times, count information, and timed statistics for global enqueue requests.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$GES_ENQUEUE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30096.htm">V$GES_ENQUEUE describes all locks currently known to lock manager. This is an Oracle Real Application Clusters view.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$GES_LATCH" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30069.htm">V$GES_LATCH is deprecated.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$GES_RESOURCE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30072.htm">V$GES_RESOURCE is an Oracle Real Application Clusters view. It displays information of all resources currently known to the lock manager.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$GES_STATISTICS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30071.htm">V$GES_STATISTICS displays miscellaneous GES statistics.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$GG_APPLY_COORDINATOR" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30684.htm">V$GG_APPLY_COORDINATOR displays information about each GoldenGate apply process coordinator. The coordinator for an apply process gets transactions from the apply process reader and passes them to apply servers. An apply process coordinator is a subcomponent of an apply process used by Oracle GoldenGate Integrated Replicat.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$GG_APPLY_READER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30686.htm">V$GG_APPLY_READER displays information about each GoldenGate apply reader. The apply reader is a process which reads (dequeues) messages from the queue, computes message dependencies, and builds transactions. It passes the transactions on to the coordinator in commit order for assignment to the apply servers. An apply reader is a subcomponent of an apply process used by Oracle GoldenGate Integrated Replicat.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$GG_APPLY_RECEIVER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30728.htm">V$GG_APPLY_RECEIVER displays information about the message receiver of the Replicat process. The values are reset to zero when the database (or instance in an Oracle Real Application Clusters (Oracle RAC) environment) restarts and when the Replicat process is stopped.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$GG_APPLY_SERVER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30688.htm">V$GG_APPLY_SERVER displays information about each GoldenGate apply server and its activities. An apply server receives messages from the apply coordinator for an apply process. For each message received, an apply server either applies the message or sends the message to the appropriate apply handler. An apply server is a subcomponent of an apply process used by Oracle GoldenGate Integrated Replicat.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$GLOBAL_BLOCKED_LOCKS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30097.htm">V$GLOBAL_BLOCKED_LOCKS displays global blocked locks.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$GLOBAL_TRANSACTION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30098.htm">V$GLOBAL_TRANSACTION displays information on the currently active global transactions.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$GOLDENGATE_CAPTURE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30654.htm">V$GOLDENGATE_CAPTURE displays information about each capture process that sends LCRs to an Oracle GoldenGate outbound server.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$GOLDENGATE_MESSAGE_TRACKING" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30656.htm">V$GOLDENGATE_MESSAGE_TRACKING displays information about LCRs tracked through the stream that are processed by Oracle GoldenGate components.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$GOLDENGATE_TABLE_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30657.htm">V$GOLDENGATE_TABLE_STATS displays table statistics for all the tables used by each Oracle GoldenGate apply server.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$GOLDENGATE_TRANSACTION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30655.htm">V$GOLDENGATE_TRANSACTION displays information about transactions that are being processed by Oracle GoldenGate capture processes, outbound servers, and inbound servers. This view can identify long running transactions and display how many LCRs are being processed in each transaction. This view only contains information about captured LCRs. It does not contain information about user-enqueued LCRs or user messages.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$HANG_INFO" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30647.htm">V$HANG_INFO displays information about hangs found on the cluster. A hang can be an open wait chain or closed wait chain (cycle or deadlock). A wait chain is a series of sessions that are blocking one another. Each row represents a hang and describes how severe the hang is.  This view also includes the victim or final blocker of the hang.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$HANG_SESSION_INFO" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30648.htm">V$HANG_SESSION_INFO displays information about sessions involved in hangs described by V$HANG_INFO.  Each row with the same HANG_ID describes a session that is in the hang wait chain described by the row with the same HANG_ID in V$HANG_INFO.  This session is blocked by the victim or final blocker of that hang.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$HANG_STATISTICS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30734.htm">V$HANG_STATISTICS displays statistics about hangs found on the cluster.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$HEAT_MAP_SEGMENT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30732.htm">V$HEAT_MAP_SEGMENT displays real-time segment access information.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$HM_FINDING" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30452.htm">V$HM_FINDING displays information about all the findings of various Health Monitor runs.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$HM_CHECK" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30450.htm">V$HM_CHECK displays information about all the checks registered with Health Monitor. Each check is uniquely identified by a name or an ID.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$HM_CHECK_PARAM" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30451.htm">V$HM_CHECK_PARAM displays information about the input parameters of all Health Monitor checks.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$HM_INFO" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30489.htm">V$HM_INFO displays information about Health Monitor runs, findings, and recommendations. The information for a run/finding/recommendation is organized as a name, value pair.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$HM_RECOMMENDATION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30453.htm">V$HM_RECOMMENDATION displays information about all the recommendations made to various Health Monitor findings.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$HM_RUN" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30454.htm">V$HM_RUN displays information about all Health Monitor checks and their status.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$HS_AGENT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30100.htm">V$HS_AGENT displays the set of HS agents currently running on a given host. There is one row per agent process.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$HS_PARAMETER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30101.htm">V$HS_PARAMETER describes the initialization parameters in use by the server and agent.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$HS_SESSION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30102.htm">V$HS_SESSION describes the current HS session.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$HVMASTER_INFO" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30103.htm">V$HVMASTER_INFO describes the current and previous master instances and the number of re-masterings of Global Enqueue Service resources.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$IM_COLUMN_LEVEL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30742.htm">V$IM_COLUMN_LEVEL presents the selective column compression levels that are defined using the inmemory_memcompress clause of the inmemory_column_clause of the CREATE TABLE statement. This view returns no rows for a table which has no associated selective column compression levels. For each column of a table that is associated with selective column compression levels, this view presents the associated compression level of the column, if any, or the string DEFAULT if no compression level has been defined for the column.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$IM_SEGMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30739.htm">V$IM_SEGMENTS presents information about all the in-memory segments in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$IM_USER_SEGMENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30740.htm">V$IM_USER_SEGMENTS presents information about the in-memory segments for the current user in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$INDEXED_FIXED_COLUMN" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30104.htm">V$INDEXED_FIXED_COLUMN displays the columns in dynamic performance tables that are indexed (X$ tables). The X$ tables can change without notice. Use this view only to write queries against fixed views (V$ views) more efficiently.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$INMEMORY_AREA" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30744.htm">V$INMEMORY_AREA contains information on the space allocation inside the In-Memory area.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$INSTANCE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30105.htm">V$INSTANCE displays the state of the current instance.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$INSTANCE_CACHE_TRANSFER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30355.htm">V$INSTANCE_CACHE_TRANSFER displays statistics for the cache blocks transferred among instances.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$INSTANCE_PING" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30710.htm">V$INSTANCE_PING provides information about measured latency of the interconnect for all instances in an Oracle Real Application Clusters (Oracle RAC) environment.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$INSTANCE_RECOVERY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30106.htm">V$INSTANCE_RECOVERY monitors the mechanisms available to users to limit recovery I/O. Those mechanisms are:</DataDictionaryObject>
    <DataDictionaryObject Name="V_$IO_CALIBRATION_STATUS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30509.htm">V$IO_CALIBRATION_STATUS displays the status of I/O calibration in the instance.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$IO_OUTLIER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30673.htm">V$IO_OUTLIER contains entries corresponding to I/Os that have taken a long time (more than 500 ms) to complete. Use this view to see if there any occasional delays in serving disk I/O requests by the storage subsystem.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$IOFUNCMETRIC" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30477.htm">V$IOFUNCMETRIC displays I/O statistics information by database function for the most recent time interval period.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$IOFUNCMETRIC_HISTORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30478.htm">V$IOFUNCMETRIC_HISTORY displays a recent history of the I/O statistics information by database function for the most recent time interval period.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$IOSTAT_CONSUMER_GROUP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30440.htm">V$IOSTAT_CONSUMER_GROUP displays disk I/O statistics for consumer groups. If the resource manager is enabled, then I/O statistics for all consumer groups that are part of the currently enabled resource plan are captured.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$IOSTAT_FILE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30441.htm">V$IOSTAT_FILE displays information about disk I/O statistics of database files (including data files, temp files, and other types of database files). I/O statistics for Data files and Temp files are provided for each file. All other file types (for example, control files, log files, archive logs, and so on) have their statistics consolidated into one entry in the view.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$IOSTAT_FUNCTION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30442.htm">V$IOSTAT_FUNCTION displays disk I/O statistics for database functions (such as the LGWR and DBWR).</DataDictionaryObject>
    <DataDictionaryObject Name="V_$IOSTAT_FUNCTION_DETAIL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30609.htm">V$IOSTAT_FUNCTION_DETAIL displays disk I/O statistics for database functions (such as the LGWR and DBWR), broken down by file type.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$IOSTAT_NETWORK" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30424.htm">V$IOSTAT_NETWORK displays information about network I/O statistics that were caused by accessing files on a remote database instance.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$JAVA_LIBRARY_CACHE_MEMORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30302.htm">V$JAVA_LIBRARY_CACHE_MEMORY displays information about memory allocated to library cache memory objects in different namespaces for Java objects. A memory object is an internal grouping of memory for efficient management. A library cache object may consist of one or more memory objects.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$JAVA_POOL_ADVICE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30303.htm">V$JAVA_POOL_ADVICE displays information about estimated parse time in the Java pool for different pool sizes. The sizes range from 10% of the current Java pool size or the amount of pinned Java library cache memory (whichever is higher) to 200% of the current Java pool size, in equal intervals. The value of the interval depends on the current size of the Java pool.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$KERNEL_IO_OUTLIER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30722.htm">V$KERNEL_IO_OUTLIER contains entries corresponding to I/Os that have taken a long time (more than 500 ms) to complete. Use this view to see the individual kernel components of I/Os for which there are any occasional delays in serving disk I/O requests by the storage subsystem.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$KEY_VECTOR" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30738.htm">V$KEY_VECTOR provides debugging information related to the data structures used by in-memory aggregation for current and recent queries using key vectors.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$LATCH" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30108.htm">V$LATCH displays aggregate latch statistics for both parent and child latches, grouped by latch name. Individual parent and child latch statistics are broken down in the views V$LATCH_PARENT and V$LATCH_CHILDREN.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$LATCH_CHILDREN" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30109.htm">V$LATCH_CHILDREN displays statistics about child latches. This view includes all columns of V$LATCH plus the CHILD# column. Note that child latches have the same parent if their LATCH# columns match each other.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$LATCH_MISSES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30110.htm">V$LATCH_MISSES displays statistics about missed attempts to acquire a latch.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$LATCH_PARENT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30111.htm">V$LATCH_PARENT displays statistics about parent latches. The columns for V$LATCH_PARENT are the same as those for V$LATCH.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$LATCHHOLDER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30112.htm">V$LATCHHOLDER displays information about the current latch holders.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$LATCHNAME" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30113.htm">V$LATCHNAME displays information about decoded latch names for the latches shown in V$LATCH. The rows of V$LATCHNAME have a one-to-one correspondence to the rows of V$LATCH.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$LGWRIO_OUTLIER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30674.htm">V$LGWRIO_OUTLIER contains entries corresponding to Log Writer (LGWR) process I/Os that have taken a long time (more than 500 ms) to complete. Use this view to see if there any occasional delays in serving disk I/O requests by the storage subsystem.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$LIBCACHE_LOCKS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30635.htm">V$LIBCACHE_LOCKS displays information about the library cache locks and pins. Locks and pins are distinguished based on the value of the TYPE column.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$LIBRARY_CACHE_MEMORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30114.htm">V$LIBRARY_CACHE_MEMORY displays information about memory allocated to library cache memory objects in different namespaces. A memory object is an internal grouping of memory for efficient management. A library cache object may consist of one or more memory objects.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$LIBRARYCACHE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30115.htm">V$LIBRARYCACHE contains statistics about library cache performance and activity.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$LICENSE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30116.htm">V$LICENSE displays information about license limits.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$LOADISTAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30118.htm">V$LOADISTAT contains errors that occurred when updating indexes on a table during a load using the Direct Path API.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$LOADPSTAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30119.htm">V$LOADPSTAT contains statistics about the number of rows loaded into a partition, or subpartition, during a load using the Direct Path API.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$LOCK" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30121.htm">V$LOCK lists the locks currently held by the Oracle Database and outstanding requests for a lock or latch.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$LOCK_ACTIVITY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30122.htm">V$LOCK_ACTIVITY is deprecated. The information that was provided in this view is now provided in the V$INSTANCE_CACHE_TRANSFER and V$SEGMENT_STATISTICS views.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$LOCK_TYPE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30124.htm">V$LOCK_TYPE describes the type of locks available. </DataDictionaryObject>
    <DataDictionaryObject Name="V_$LOCKED_OBJECT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30125.htm">V$LOCKED_OBJECT lists all locks acquired by every transaction on the system. It shows which sessions are holding DML locks (that is, TM-type enqueues) on what objects and in what mode.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$LOG" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30127.htm">V$LOG displays log file information from the control file.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$LOG_HISTORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30128.htm">V$LOG_HISTORY displays log history information from the control file.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$LOGFILE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30129.htm">V$LOGFILE contains information about redo log files.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$LOGHIST" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30130.htm">V$LOGHIST contains log history information from the control file. This view is retained for historical compatibility. Oracle recommends that you use V$LOG_HISTORY instead.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$LOGMNR_CONTENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30132.htm">V$LOGMNR_CONTENTS contains log history information. To query this view, you must have the LOGMINING privilege.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$LOGMNR_DICTIONARY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30133.htm">V$LOGMNR_DICTIONARY contains log history information.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$LOGMNR_DICTIONARY_LOAD" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30378.htm">V$LOGMNR_DICTIONARY_LOAD displays information about LogMiner dictionaries for all active LogMiner sessions on the system. Each query of this view will return one row for each attached LogMiner session. This view will not show valid information for LogMiner adhoc query clients. </DataDictionaryObject>
    <DataDictionaryObject Name="V_$LOGMNR_LATCH" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30356.htm">V$LOGMNR_LATCH can be joined with the V$LATCH and the V$LATCH_CHILDREN views to obtain statistics about different latches used by active LogMiner persistent sessions. A persistent LogMiner session is created either by starting Data Guard SQL Apply on a logical standby database for the first time or by creating a Streams capture.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$LOGMNR_LOGS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30135.htm">V$LOGMNR_LOGS contains log information.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$LOGMNR_PARAMETERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30136.htm">V$LOGMNR_PARAMETERS contains log information.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$LOGMNR_PROCESS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30137.htm">V$LOGMNR_PROCESS identifies all processes attached to an active LogMiner persistent session. (A persistent LogMiner session is created either by starting Data Guard SQL Apply on a logical standby database for the first time or by creating Streams capture.) This view can be joined with either the V$SESSION view or the V$PROCESS view to gather process-specific information.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$LOGMNR_SESSION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30139.htm">V$LOGMNR_SESSION displays information about active LogMiner persistent sessions. (A LogMiner persistent session is created either by starting Data Guard SQL Apply on a logical standby database for the first time or by creating Streams Capture.) Transient LogMiner sessions (those created as a result of querying the V$LOGMNR_CONTENTS view) do not show up in the V$LOGMNR_SESSION view. The statistics shown in this view correspond to snapshots of the system and are not cumulative in nature.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$LOGMNR_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30140.htm">V$LOGMNR_STATS displays the activity currently being performed by the active LogMiner persistent sessions.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$LOGSTDBY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30142.htm">V$LOGSTDBY is deprecated.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$LOGSTDBY_PROCESS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30379.htm">V$LOGSTDBY_PROCESS displays dynamic information about what is happening to the Data Guard log apply services. This view is helpful when diagnosing performance problems during the logical application of archived redo logs to the standby database, and it can be helpful for other problems. This view is for logical standby databases only.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$LOGSTDBY_PROGRESS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30380.htm">V$LOGSTDBY_PROGRESS displays the progress of log apply services on the logical standby database. This view is for logical standby databases only.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$LOGSTDBY_STATE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30381.htm">V$LOGSTDBY_STATE provides consolidated information from V$LOGSTDBY and V$LOGSTDBY_STATS about the running state of Logical Standby.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$LOGSTDBY_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30143.htm">V$LOGSTDBY_STATS displays statistics, current state, and status information related to SQL Apply. No rows are returned from this view when SQL Apply is not running. This view is only meaningful in the context of a logical standby database.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$LOGSTDBY_TRANSACTION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30382.htm">V$LOGSTDBY_TRANSACTION displays all transactions that are actively being processed by SQL Apply. The transaction identifiers shown in this view are those mined from the redo stream and correspond to transaction identifiers assigned at the primary database, and do not correspond to the transactions that are active at the logical standby database. For information regarding transactions active in the logical standby database, including those created as part of SQL Apply, query the V$TRANSACTION view at the logical standby database.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$MANAGED_STANDBY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30144.htm">V$MANAGED_STANDBY displays current status information for some Oracle Database processes related to physical standby databases in the Data Guard environment. This view does not persist after an instance shutdown.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$MAP_COMP_LIST" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30145.htm">V$MAP_COMP_LIST displays supplementary information for all element mapping structures.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$MAP_ELEMENT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30146.htm">V$MAP_ELEMENT displays a list of all element mapping structures in the SGA of the instance.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$MAP_EXT_ELEMENT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30147.htm">V$MAP_EXT_ELEMENT displays supplementary information for all element mapping structures.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$MAP_FILE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30148.htm">V$MAP_FILE displays a list of all file mapping structures in the shared memory of the instance.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$MAP_FILE_EXTENT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30149.htm">V$MAP_FILE_EXTENT displays a list of all file extent mapping structures in the shared memory of the instance.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$MAP_FILE_IO_STACK" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30150.htm">V$MAP_FILE_IO_STACK displays the hierarchical arrangement of storage containers for files. Each row in the view represents a level in the hierarchy.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$MAP_LIBRARY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30151.htm">V$MAP_LIBRARY displays a list of all mapping libraries dynamically loaded by the external process.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$MAP_SUBELEMENT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30152.htm">V$MAP_SUBELEMENT displays a list of all subelement mapping structures in the shared memory of the instance.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$MAPPED_SQL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30664.htm">V$MAPPED_SQL lists the SQL statements that are mapped to a different SQL statement for execution.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$MEMORY_CURRENT_RESIZE_OPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30462.htm">V$MEMORY_CURRENT_RESIZE_OPS displays information about memory resize operations (both automatic and manual) which are currently in progress. An operation can be a grow or a shrink of a dynamic memory component. All sizes are expressed in bytes.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$MEMORY_DYNAMIC_COMPONENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30463.htm">V$MEMORY_DYNAMIC_COMPONENTS displays information about the dynamic SGA components. This view summarizes information based on all completed SGA resize operations since instance startup. All sizes are expressed in bytes.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$MEMORY_RESIZE_OPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30464.htm">V$MEMORY_RESIZE_OPS displays information about the last 800 completed memory resize operations (both automatic and manual). This does not include in-progress operations. All sizes are expressed in bytes.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$MEMORY_TARGET_ADVICE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30465.htm">V$MEMORY_TARGET_ADVICE provides information about how the MEMORY_TARGET parameter should be sized based on current sizing and satisfaction metrics.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$METRIC" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30357.htm">V$METRIC displays the most recent statistic values for the complete set of metrics captured by the Automatic Workload Repository (AWR) infrastructure.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$METRIC_HISTORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30358.htm">V$METRIC_HISTORY displays all the available statistic values for the complete set of metrics captured by the Automatic Workload Repository (AWR) infrastructure.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$METRICGROUP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30335.htm">V$METRICGROUP displays information about the metric group for each of the four major Streams components: capture, propagation, apply, and queue.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$METRICNAME" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30336.htm">V$METRICNAME displays the mapping of the name of metrics to their metric ID.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$MTTR_TARGET_ADVICE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30156.htm">V$MTTR_TARGET_ADVICE displays rows that predict the number of physical I/Os for the MTTR corresponding to each row. The rows also compute a physical I/O factor, which is the ratio of the number of estimated I/Os to the number of I/Os actually performed by the current MTTR setting during the measurement interval.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$MUTEX_SLEEP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30416.htm">V$MUTEX_SLEEP shows the wait time, and the number of sleeps for each combination of mutex type and location.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$MUTEX_SLEEP_HISTORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30417.htm">V$MUTEX_SLEEP_HISTORY displays time-series data. Each row in this view is for a specific time, mutex type, location, requesting session and blocking session combination. That is, it shows data related to a specific session (requesting session) that slept while requesting a specific mutex type and location, because it was being held by a specific blocking session. The data in this view is contained within a circular buffer, with the most recent sleeps shown.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$MVREFRESH" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30157.htm">V$MVREFRESH displays information about the materialized views currently being refreshed. </DataDictionaryObject>
    <DataDictionaryObject Name="V_$MYSTAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30158.htm">V$MYSTAT contains statistics on the current session.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$NFS_CLIENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30468.htm">V$NFS_CLIENTS displays information about NFS clients currently connected to the XML DB NFS Server.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$NFS_LOCKS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30469.htm">V$NFS_LOCKS displays information about byte range locks held on different files by NFS clients.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$NFS_OPEN_FILES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30470.htm">V$NFS_OPEN_FILES displays information about all the files currently opened by clients at the NFS server.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$NLS_PARAMETERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30159.htm">V$NLS_PARAMETERS contains current values of NLS parameters.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$NLS_VALID_VALUES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30160.htm">V$NLS_VALID_VALUES lists all valid values for NLS parameters.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$NONLOGGED_BLOCK" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30670.htm">V$NONLOGGED_BLOCK displays ranges of nonlogged datafile blocks recorded in the control file.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$OBJECT_DEPENDENCY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30161.htm">V$OBJECT_DEPENDENCY displays the objects depended on by a package, procedure, or cursor that is currently loaded in the shared pool. For example, together with V$SESSION and V$SQL, this view can be used to determine which tables are used in the SQL statement that a user is currently executing.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$OBJECT_PRIVILEGE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30419.htm">V$OBJECT_PRIVILEGE displays information about privileges associated with an object.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$OBJECT_USAGE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30162.htm">V$OBJECT_USAGE displays statistics about index usage gathered from the database for the indexes owned by the current user. You can use this view to monitor index usage. All indexes that have been used at least once can be monitored and displayed in this view.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$OBSOLETE_BACKUP_FILES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30163.htm">V$OBSOLETE_BACKUP_FILES displays all obsolete backups, copies, and archived logs according to the current retention policy. This view requires that the database is set using the DBMS_RCVMAN.SETDATABASE procedure.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$OBSOLETE_PARAMETER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30164.htm">V$OBSOLETE_PARAMETER displays information about obsolete initialization parameters. If any row of the view contains TRUE in the ISSPECIFIED column, then you should examine why.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$OFFLINE_RANGE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30165.htm">V$OFFLINE_RANGE displays datafile offline information from the control file. Note that the last offline range of each datafile is kept in the DATAFILE record.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$OPEN_CURSOR" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30166.htm">V$OPEN_CURSOR lists cursors that each user session currently has opened and parsed, or cached.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$OPTIMIZER_PROCESSING_RATE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30675.htm">V$OPTIMIZER_PROCESSING_RATE displays the processing rates used by the optimizer to compute degree of parallelism.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$OPTION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30167.htm">V$OPTION displays Oracle Database options and features. Typically, although not always, options must be separately licensed, whereas features come with the product and are enabled based on the product that is running (Standard Edition, Enterprise Edition, and so on).</DataDictionaryObject>
    <DataDictionaryObject Name="V_$OSSTAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30321.htm">V$OSSTAT displays system utilization statistics from the operating system. One row is returned for each system statistic.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$PARALLEL_DEGREE_LIMIT_MTH" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30175.htm">V$PARALLEL_DEGREE_LIMIT_MTH displays all available parallel degree limit resource allocation methods.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$PARAMETER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30176.htm">V$PARAMETER displays information about the initialization parameters that are currently in effect for the session. A new session inherits parameter values from the instance-wide values displayed by the V$SYSTEM_PARAMETER view.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$PARAMETER_VALID_VALUES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30414.htm">V$PARAMETER_VALID_VALUES displays a list of valid values for list parameters.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$PARAMETER2" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30177.htm">V$PARAMETER2 displays information about the initialization parameters that are currently in effect for the session, with each list parameter value appearing as a row in the view. A new session inherits parameter values from the instance-wide values displayed in the V$SYSTEM_PARAMETER2 view.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$PATCHES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30668.htm">V$PATCHES shows the patches applied on an Oracle ASM instance and the list of patches applied to an Oracle Grid infrastructure home directory.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$PDB_INCARNATION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30709.htm">V$PDB_INCARNATION displays information about all PDB incarnations. Oracle creates a new PDB incarnation whenever a PDB is opened with the RESETLOGS option.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$PDBS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30652.htm">V$PDBS displays information about PDBs associated with the current instance.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$PERSISTENT_PUBLISHERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30459.htm">V$PERSISTENT_PUBLISHERS displays information about all active publishers of the persistent queues in the database. There is one row per instance per queue per publisher. The rows are deleted when the database (or instance in an Oracle RAC environment) restarts.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$PERSISTENT_QMN_CACHE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30631.htm">V$PERSISTENT_QMN_CACHE displays detailed information and statistics about the background activities for all queue tables in the system. There is one row per queue table. The rows are deleted when the database (or instance in an Oracle RAC environment) restarts.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$PERSISTENT_QUEUES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30460.htm">V$PERSISTENT_QUEUES displays information about all active persistent queues in the database since the queues' first activity time. There is one row per queue. The rows are deleted when the database (or instance in an Oracle RAC environment) restarts.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$PERSISTENT_SUBSCRIBERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30461.htm">V$PERSISTENT_SUBSCRIBERS displays information about all active subscribers of the persistent queues in the database. There is one row per instance per queue per subscriber. The rows are deleted when the database (or instance in an Oracle RAC environment) restarts.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$PGA_TARGET_ADVICE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30178.htm">V$PGA_TARGET_ADVICE predicts how the cache hit percentage and over allocation count statistics displayed by the V$PGASTAT performance view would be impacted if the value of the PGA_AGGREGATE_TARGET parameter is changed. The prediction is performed for various values of the PGA_AGGREGATE_TARGET parameter, selected around its current value. The advice statistic is generated by simulating the past workload run by the instance.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$PGA_TARGET_ADVICE_HISTOGRAM" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30179.htm">V$PGA_TARGET_ADVICE_HISTOGRAM predicts how statistics displayed by the V$SQL_WORKAREA_HISTOGRAM dynamic view would be impacted if the value of the PGA_AGGREGATE_TARGET parameter is changed. This prediction is performed for various values of the PGA_AGGREGATE_TARGET parameter, selected around its current value. The advice statistic is generated by simulating the past workload run by the instance.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$PGASTAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30180.htm">V$PGASTAT displays PGA memory usage statistics as well as statistics about the automatic PGA memory manager when it is enabled (that is, when PGA_AGGREGATE_TARGET is set). Cumulative values in V$PGASTAT are accumulated since instance startup.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$PQ_SESSTAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30182.htm">V$PQ_SESSTAT lists session statistics for parallel queries. After you have run a query or DML operation, you can use the information derived from V$PQ_SESSTAT to view the number of slave processes used, and other information for the session and system.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$PQ_SLAVE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30183.htm">V$PQ_SLAVE lists statistics for each of the active parallel execution servers on an instance.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$PQ_SYSSTAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30184.htm">V$PQ_SYSSTAT lists system statistics for parallel queries. After you have run a query or DML operation, you can use the information derived from V$PQ_SYSSTAT to view the number of slave processes used, and other information for the system.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$PQ_TQSTAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30185.htm">V$PQ_TQSTAT contains statistics on parallel execution operations. The statistics are compiled after the query completes and only remain for the duration of the session. It displays the number of rows processed through each parallel execution server at each stage of the execution tree. This view can help determine skew problems in a query's execution. (Note that for PDML, information from V$PQ_TQSTAT is available only after a commit or rollback operation.)</DataDictionaryObject>
    <DataDictionaryObject Name="V_$PROCESS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30186.htm">V$PROCESS displays information about the currently active processes.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$PROCESS_MEMORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30383.htm">V$PROCESS_MEMORY displays dynamic PGA memory usage by named component categories for each process.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$PROPAGATION_RECEIVER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30352.htm">V$PROPAGATION_RECEIVER displays information about buffer queue propagation schedules on the receiving (destination) side. The values are reset to zero when the database (or instance in an Oracle Real Application Clusters (Oracle RAC) environment) restarts, when propagation migrates to another instance, or when an unscheduled propagation is attempted.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$PROPAGATION_SENDER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30353.htm">V$PROPAGATION_SENDER displays information about buffer queue propagation schedules on the sending (source) side. The values are reset to zero when the database (or instance in an Oracle Real Application Clusters (Oracle RAC) environment) restarts, when propagation migrates to another instance, or when an unscheduled propagation is attempted.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$PROXY_ARCHIVEDLOG" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30187.htm">V$PROXY_ARCHIVEDLOG contains descriptions of archived log backups that were taken using the proxy copy functionality.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$PROXY_ARCHIVELOG_DETAILS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30386.htm">V$PROXY_ARCHIVELOG_DETAILS contains information about all available archive log proxy copies.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$PROXY_ARCHIVELOG_SUMMARY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30387.htm">V$PROXY_ARCHIVELOG_SUMMARY provides summary information about the output proxy archive log file.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$PROXY_COPY_DETAILS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30388.htm">V$PROXY_COPY_DETAILS contains information about all available control file and datafile proxy copies.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$PROXY_COPY_SUMMARY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30389.htm">V$PROXY_COPY_SUMMARY provides summary information about the output proxy datafile and control file.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$PROXY_DATAFILE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30188.htm">V$PROXY_DATAFILE contains descriptions of datafile and control file backups that are taken with Proxy Copy. Each row represents a backup of one database file.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$PWFILE_USERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30189.htm">V$PWFILE_USERS lists all users in the password file, and indicates whether the user has been granted the SYSDBA, SYSOPER, SYSASM, SYSBACKUP, SYSDG, and SYSKM privileges.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$PX_INSTANCE_GROUP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30443.htm">V$PX_INSTANCE_GROUP provides information about the instance groups being used for parallel operations by the current session.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$PX_PROCESS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30190.htm">V$PX_PROCESS contains information about the sessions running parallel execution.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$PX_PROCESS_SYSSTAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30191.htm">V$PX_PROCESS_SYSSTAT contains information about the sessions running parallel execution.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$PX_SESSION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30192.htm">V$PX_SESSION contains information about the sessions running parallel execution.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$PX_SESSTAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30193.htm">V$PX_SESSTAT contains information about the sessions running parallel execution.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$QMON_COORDINATOR_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30612.htm">V$QMON_COORDINATOR_STATS displays statistics of the non-sharded queue master process. There is one row per instance. The rows are deleted when the database (or instance in an Oracle RAC environment) restarts.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$QMON_SERVER_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30613.htm">V$QMON_SERVER_STATS displays information and statistics about the active queue monitor server processes. There is one row per live queue monitor server process. The rows are deleted when the database (or instance in an Oracle RAC environment) restarts.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$QMON_TASK_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30614.htm">V$QMON_TASK_STATS displays information and statistics based on different queue monitor tasks in the system (spilling, time manager activity, and so on). There is one row per kind of task. The rows are deleted when the database (or instance in an Oracle RAC environment) restarts.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$QMON_TASKS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30615.htm">V$QMON_TASKS displays information and statistics about all queue background tasks in the system, which would be served by queue monitor servers. There is one row per task. The rows are deleted when the database (or instance in an Oracle RAC environment) restarts.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$QUEUE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30194.htm">V$QUEUE contains information on the shared server message queues.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$QUEUEING_MTH" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30195.htm">V$QUEUEING_MTH displays all available queuing resource allocation methods.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RECOVER_FILE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30196.htm">V$RECOVER_FILE displays the status of files needing media recovery.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RECOVERY_AREA_USAGE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30377.htm">V$RECOVERY_AREA_USAGE displays usage information about recovery areas.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RECOVERY_FILE_DEST" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30304.htm">V$RECOVERY_FILE_DEST displays information about the disk quota and current disk usage in the fast recovery area.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RECOVERY_FILE_STATUS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30197.htm">V$RECOVERY_FILE_STATUS contains one row for each datafile for each RECOVER statement. This view contains useful information only for the Oracle process doing the recovery. When Recovery Manager directs a server process to perform recovery, only Recovery Manager can view the relevant information in this view. V$RECOVERY_FILE_STATUS will be empty to all other Oracle users.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RECOVERY_LOG" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30198.htm">V$RECOVERY_LOG lists information about archived logs that are needed to complete media recovery. This information is derived from the log history view, V$LOG_HISTORY.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RECOVERY_PROGRESS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30199.htm">V$RECOVERY_PROGRESS can be used to track database recovery operations to ensure that they are not stalled, and also to estimate the time required to complete the operation in progress.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RECOVERY_STATUS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30200.htm">V$RECOVERY_STATUS contains statistics of the current recovery process. This view contains useful information only for the Oracle process doing the recovery. When Recovery Manager directs a server process to perform recovery, only Recovery Manager can view the relevant information in this view. V$RECOVERY_STATUS will be empty to all other Oracle users.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$REDO_DEST_RESP_HISTOGRAM" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30435.htm">V$REDO_DEST_RESP_HISTOGRAM provides statistical information for each redo transport destination.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$REPLPROP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30201.htm">V$REPLPROP displays information about the parallel propagation currently in progress at the replication site. Use this view to determine which transactions are currently being propagated, the number of calls propagated in each transaction, and the current activity of the parallel propagation slave processes or parallel propagation coordinator process.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$REPLQUEUE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30202.htm">V$REPLQUEUE displays statistics about the replication deferred transactions queue. All values are stored since the start of the current database instance.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$REQDIST" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30203.htm">V$REQDIST lists statistics for the histogram of shared server dispatcher request times, divided into 12 buckets, or ranges of time. The time ranges grow exponentially as a function of the bucket number.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RESERVED_WORDS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30204.htm">V$RESERVED_WORDS displays a list of all SQL keywords. To determine whether a particular keyword is reserved in any way, check the RESERVED, RES_TYPE, RES_ATTR, and RES_SEMI columns.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RESOURCE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30205.htm">V$RESOURCE contains resource name and address information.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RESOURCE_LIMIT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30206.htm">V$RESOURCE_LIMIT displays information about global resource use for some of the system resources. Use this view to monitor the consumption of resources so that you can take corrective action, if necessary. Many of the resources correspond to initialization parameters listed in Table 8-5.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RESTORE_POINT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30390.htm">V$RESTORE_POINT displays information about restore points.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RESULT_CACHE_DEPENDENCY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30436.htm">V$RESULT_CACHE_DEPENDENCY displays the depends-on relationship between cached results and dependencies.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RESULT_CACHE_MEMORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30437.htm">V$RESULT_CACHE_MEMORY displays all the memory blocks and their status.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RESULT_CACHE_OBJECTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30438.htm">V$RESULT_CACHE_OBJECTS displays all the objects (both cached results and dependencies) and their attributes.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RESULT_CACHE_STATISTICS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30439.htm">V$RESULT_CACHE_STATISTICS displays various Result Cache settings and usage statistics.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RMAN_BACKUP_JOB_DETAILS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30391.htm">V$RMAN_BACKUP_JOB_DETAILS displays details about backup jobs.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RMAN_BACKUP_SUBJOB_DETAILS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30392.htm">V$RMAN_BACKUP_SUBJOB_DETAILS merges similar operations within an RMAN session into a single row. For example, if there are four BACKUP DATAFILE &lt;n&gt; commands, three RECOVERY COPY OF DATAFILE commands, and one BACKUP RECOVERY AREA command, this view will contain three rows - one each for BACKUP, ROLLFORWARD, and COPY_DISK_TO_TAPE operation.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RMAN_BACKUP_TYPE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30411.htm">V$RMAN_BACKUP_TYPE displays information about RMAN backup types.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RMAN_COMPRESSION_ALGORITHM" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30499.htm">V$RMAN_COMPRESSION_ALGORITHM provides descriptions of supported compression algorithms. It is used by the RMAN client.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RMAN_CONFIGURATION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30208.htm">V$RMAN_CONFIGURATION lists information about RMAN persistent configuration settings.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RMAN_ENCRYPTION_ALGORITHMS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30418.htm">V$RMAN_ENCRYPTION_ALGORITHMS displays supported encryption algorithms. It is used by the RMAN client to validate user-requested algorithms. This view will list AES128, AES192, and AES256 encryption algorithms for the current release. The default algorithm is AES128.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RMAN_OUTPUT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30305.htm">V$RMAN_OUTPUT displays messages reported by RMAN. This is an in-memory view and is not recorded in the controlfile. The view can hold 32768 rows.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RMAN_STATUS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30306.htm">V$RMAN_STATUS displays the finished and on-going RMAN jobs. For on-going jobs, this view displays progress and status. The jobs which are in progress are stored only in memory while the finished jobs are stored in the controlfile.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RO_USER_ACCOUNT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30676.htm">V$RO_USER_ACCOUNT is populated only on Oracle databases that are open in read-only mode. When a database is read-only, security data cannot be stored in normal catalogue tables. Instead, the security data is stored in an in-memory table that is queried through this view.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ROLLNAME" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30209.htm">V$ROLLNAME lists the names of all online rollback segments. It can only be accessed when the database is open.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ROLLSTAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30210.htm">V$ROLLSTAT contains rollback segment statistics.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ROWCACHE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30211.htm">V$ROWCACHE displays statistics for data dictionary activity. Each row contains statistics for one data dictionary cache.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ROWCACHE_PARENT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30212.htm">V$ROWCACHE_PARENT displays information for parent objects in the data dictionary. There is one row per lock owner, and one waiter for each object. This row shows the mode held or requested. For objects with no owners or waiters, a single row is displayed.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$ROWCACHE_SUBORDINATE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30213.htm">V$ROWCACHE_SUBORDINATE displays information for subordinate objects in the data dictionary.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RSRC_CONS_GROUP_HISTORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30402.htm">V$RSRC_CONS_GROUP_HISTORY displays a history of consumer group statistics for each entry in V$RSRC_PLAN_HISTORY that has a non-NULL plan.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RSRC_CONSUMER_GROUP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30214.htm">V$RSRC_CONSUMER_GROUP displays data related to currently active resource consumer groups.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RSRC_CONSUMER_GROUP_CPU_MTH" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30215.htm">V$RSRC_CONSUMER_GROUP_CPU_MTH displays all resource allocation methods defined for resource consumer groups.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RSRC_PLAN" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30216.htm">V$RSRC_PLAN displays the names of all currently active resource plans.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RSRC_PLAN_CPU_MTH" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30217.htm">V$RSRC_PLAN_CPU_MTH displays all available CPU resource allocation methods defined for resource plans.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RSRC_PLAN_HISTORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30403.htm">V$RSRC_PLAN_HISTORY displays a history of when a resource plan was enabled, disabled, or modified on the instance. Up to 15 of the most recent entries are shown. Once the database is opened, this view shows at least one row. The row with the most recent START_TIME and with END_TIME equal to NULL gives information about the current resource plan.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RSRC_SESSION_INFO" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30404.htm">V$RSRC_SESSION_INFO displays Resource Manager statistics per session.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RSRCMGRMETRIC" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30482.htm">V$RSRCMGRMETRIC displays information about resources consumed and wait times per consumer group.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RSRCMGRMETRIC_HISTORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30483.htm">V$RSRCMGRMETRIC_HISTORY displays a history (the last one hour) of resource manager metrics, taken from V$RSRCMGRMETRIC. When a resource plan is set, this history is cleared and restarted. This view provides information about resources consumed and wait times per consumer group.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RULE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30307.htm">V$RULE displays rule statistics. This view has a row for every rule loaded into shared memory.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RULE_SET" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30218.htm">V$RULE_SET displays rule set statistics. This view has a row for every rule set loaded into shared memory.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$RULE_SET_AGGREGATE_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30219.htm">V$RULE_SET_AGGREGATE_STATS displays statistics aggregated over all evaluations on all rule sets. This view has a row for each type of statistic.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SECUREFILE_TIMER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30511.htm">V$SECUREFILE_TIMER displays information about time taken (in microseconds) by functions of SecureFiles. These timer values are collected per session.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SEGMENT_STATISTICS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30220.htm">V$SEGMENT_STATISTICS displays information about segment-level statistics.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SEGSTAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30221.htm">V$SEGSTAT displays information about segment-level statistics.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SEGSTAT_NAME" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30222.htm">V$SEGSTAT_NAME displays information about segment-level statistics properties.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SERV_MOD_ACT_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30338.htm">V$SERV_MOD_ACT_STATS displays the same set of performance statistics as V$SERVICE_STATS except for a specific combination of service/module/action names.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SERVICE_EVENT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30350.htm">V$SERVICE_EVENT displays aggregated wait counts and wait times for each wait statistic.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SERVICE_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30337.htm">V$SERVICE_STATS displays a minimal set of performance statistics. These call rate statistics are used for making run-time routing decisions, for tracking service levels, and for per-instance diagnostics per call rate. The elapsed timing for each call provides a relative value across instances for how well a node is processing SQL calls issued under a service name.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SERVICE_WAIT_CLASS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30351.htm">V$SERVICE_WAIT_CLASS displays aggregated wait counts and wait times for each wait statistic. An aggregation of these wait classes is used when thresholds are imported.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SERVICEMETRIC" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30341.htm">V$SERVICEMETRIC displays metric values measured on the most recent time interval period for services executing inside the database. Service metrics are measured in 5-second and 1-minute intervals.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SERVICEMETRIC_HISTORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30342.htm">V$SERVICEMETRIC_HISTORY displays a recent history of the metric values measured in predefined time interval periods for services executing inside the database. Service metrics are measured in 5-second and 1-minute intervals.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SERVICES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30354.htm">V$SERVICES displays information about the services in the database.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SES_OPTIMIZER_ENV" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30308.htm">V$SES_OPTIMIZER_ENV displays the contents of the optimizer environment used by each session. When a new session is first created, it automatically inherits its optimizer environment from the optimizer environment defined at the instance level by V$SYS_OPTIMIZER_ENV. The value of certain parameters can be dynamically modified by issuing an ALTER SESSION statement.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SESS_IO" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30231.htm">V$SESS_IO displays I/O statistics for each user session.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SESS_TIME_MODEL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30340.htm">V$SESS_TIME_MODEL displays the session-accumulated time for various operations. The time reported is the total elapsed or CPU time (in microseconds). Any timed operation will buffer at most 5 seconds of time data. Specifically, this means that if a timed operation (such as SQL execution) takes a long period of time to perform, the data published to this view is at most missing 5 seconds of the time accumulated for the operation.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SESSION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30223.htm">V$SESSION displays session information for each current session.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SESSION_BLOCKERS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30638.htm">V$SESSION_BLOCKERS displays the blocker sessions for each blocked session. Each row represents a blocked and blocker session pair. If a session is blocked by multiple sessions there will be multiple rows for that blocked session. The maximum number of blocker sessions displayed for a single blocked session is 30. If a session is not blocked by other sessions, then there will be no row in this view for that session.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SESSION_CONNECT_INFO" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30224.htm">V$SESSION_CONNECT_INFO displays information about network connections for all currently logged in sessions.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SESSION_CURSOR_CACHE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30225.htm">V$SESSION_CURSOR_CACHE displays information on cursor usage for the current session.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SESSION_EVENT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30226.htm">V$SESSION_EVENT displays information on waits for an event by a session. Note that the TIME_WAITED and AVERAGE_WAIT columns will contain a value of zero on those platforms that do not support a fast timing mechanism. If you are running on one of these platforms and you want this column to reflect true wait times, then you must set TIMED_STATISTICS to true in the parameter file; doing this will have a small negative effect on system performance.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SESSION_FIX_CONTROL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30420.htm">V$SESSION_FIX_CONTROL displays information about Fix Control (enabled/disabled) for the current session.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SESSION_LONGOPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30227.htm">V$SESSION_LONGOPS displays the status of various operations that run for longer than 6 seconds (in absolute time). These operations currently include many backup and recovery functions, statistics gathering, and query execution, and more operations are added for every Oracle release.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SESSION_OBJECT_CACHE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30228.htm">V$SESSION_OBJECT_CACHE displays object cache statistics for the current user session on the local server (instance).</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SESSION_WAIT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30229.htm">V$SESSION_WAIT displays the current or last wait for each session.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SESSION_WAIT_CLASS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30309.htm">V$SESSION_WAIT_CLASS displays the time spent in various wait event operations on a per-session basis.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SESSION_WAIT_HISTORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30230.htm">V$SESSION_WAIT_HISTORY displays the last 10 wait events for each active session.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SESSIONS_COUNT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30733.htm">V$SESSIONS_COUNT displays the current number of sessions for each PDB.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SESSMETRIC" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30339.htm">V$SESSMETRIC displays the metric values for all sessions.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SESSTAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30232.htm">V$SESSTAT displays user session statistics. To find the name of the statistic associated with each statistic number (STATISTIC#), query the V$STATNAME view.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SGA" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30233.htm">V$SGA displays summary information about the system global area (SGA).</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SGA_CURRENT_RESIZE_OPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30234.htm">V$SGA_CURRENT_RESIZE_OPS displays information about SGA resize operations which are currently in progress. An operation can be a grow or a shrink of a dynamic SGA component. All sizes are expressed in bytes.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SGA_DYNAMIC_COMPONENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30235.htm">V$SGA_DYNAMIC_COMPONENTS displays information about the dynamic SGA components. This view summarizes information based on all completed SGA resize operations since instance startup. All sizes are expressed in bytes.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SGA_DYNAMIC_FREE_MEMORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30236.htm">V$SGA_DYNAMIC_FREE_MEMORY displays information about the amount of SGA memory available for future dynamic SGA resize operations.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SGA_RESIZE_OPS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30237.htm">V$SGA_RESIZE_OPS displays information about the last 800 completed SGA resize operations. This does not include in-progress operations. All sizes are expressed in bytes.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SGA_TARGET_ADVICE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30393.htm">V$SGA_TARGET_ADVICE displays information about the SGA_TARGET initialization parameter.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SGAINFO" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30314.htm">V$SGAINFO displays size information about the SGA, including the sizes of different SGA items, the granule size, and free memory.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SGASTAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30238.htm">V$SGASTAT displays detailed information on the system global area (SGA).</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SHARED_POOL_ADVICE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30239.htm">V$SHARED_POOL_ADVICE displays information about estimated parse time in the shared pool for different pool sizes. The sizes range from 10% of the current shared pool size or the amount of pinned library cache memory (whichever is higher) to 200% of the current shared pool size, in equal intervals. The value of the interval depends on the current size of the shared pool.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SHARED_POOL_RESERVED" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30240.htm">V$SHARED_POOL_RESERVED displays statistics that help you tune the reserved pool and space within the shared pool.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SHARED_SERVER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30241.htm">V$SHARED_SERVER displays information on the shared server processes.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SHARED_SERVER_MONITOR" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30242.htm">V$SHARED_SERVER_MONITOR displays information for tuning the shared server.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SCHEDULER_RUNNING_JOBS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30323.htm">V$SCHEDULER_RUNNING_JOBS displays information about running Scheduler jobs.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SORT_SEGMENT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30243.htm">V$SORT_SEGMENT displays information about every sort segment in a given instance. The view is only updated when the tablespace is of the TEMPORARY type.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SPPARAMETER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30245.htm">V$SPPARAMETER displays information about the contents of the server parameter file. If a server parameter file was not used to start the instance, then each row of the view will contain FALSE in the ISSPECIFIED column.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SQL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30246.htm">V$SQL lists statistics on shared SQL areas without the GROUP BY clause and contains one row for each child of the original SQL text entered. Statistics displayed in V$SQL are normally updated at the end of query execution. However, for long running queries, they are updated every 5 seconds. This makes it easy to see the impact of long running SQL statements while they are still in progress.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SQL_BIND_CAPTURE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30310.htm">V$SQL_BIND_CAPTURE displays information on bind variables used by SQL cursors. Each row in the view contains information for one bind variable defined in a cursor. This includes:</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SQL_BIND_DATA" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30247.htm">V$SQL_BIND_DATA describes, for each distinct bind variable in each cursor owned by the session querying this view:</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SQL_BIND_METADATA" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30248.htm">V$SQL_BIND_METADATA describes, for each distinct bind variable in each cursor owned by the session querying this view:</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SQL_CS_HISTOGRAM" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30444.htm">V$SQL_CS_HISTOGRAM summarizes the monitoring information stored by adaptive cursor sharing. This information is used to decide whether to enable extended cursor sharing for a query. It is stored in a histogram, whose bucket's contents are exposed by this view.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SQL_CS_SELECTIVITY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30445.htm">V$SQL_CS_SELECTIVITY exposes the valid selectivity ranges for a child cursor in extended cursor sharing mode. A valid range consists of a low and high value for each predicate containing binds. Each predicate's selectivity (with the current bind value) must fall between the corresponding low and high values in order for the child cursor to be shared.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SQL_CS_STATISTICS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30446.htm">V$SQL_CS_STATISTICS contains the raw execution statistics used by the monitoring component of adaptive cursor sharing. A sample of the executions is monitored. This view exposes which executions were sampled, and what the statistics were for those executions. The statistics are cumulative for each distinct set of bind values.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SQL_CURSOR" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30249.htm">V$SQL_CURSOR displays debugging information for each cursor associated with the session querying this view.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SQL_JOIN_FILTER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30394.htm">V$SQL_JOIN_FILTER displays performance information about the characteristics of join filters when they are used for a parallel cursor. (A join filter is a bitmap filter applied to table rows before a join operation in order to avoid parallel communication.)</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SQL_MONITOR" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30479.htm">V$SQL_MONITOR displays SQL statements whose execution have been (or are being) monitored by Oracle. An entry is created in V$SQL_MONITOR every time the execution of a SQL statement is being monitored. SQL monitoring is automatically started when a SQL statement runs parallel or when it has consumed at least 5 seconds of CPU or I/O time.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SQL_MONITOR_SESSTAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30665.htm">V$SQL_MONITOR_SESSTAT displays information about statistics that are exposed in V$SESSTAT.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SQL_MONITOR_STATNAME" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30663.htm">V$SQL_MONITOR_STATNAME provides information about the plan line statistics exposed in V$SQL_PLAN_MONITOR. A plan line statistic is identified by its group ID (column GROUP_ID) and its ID (column ID).</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SQL_OPTIMIZER_ENV" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30311.htm">V$SQL_OPTIMIZER_ENV displays the contents of the optimizer environment used to build the execution plan of a SQL cursor. This view can be joined with V$SQLAREA on (HASH_VALUE, ADDRESS) and with V$SQL on (HASH_VALUE, CHILD_ADDRESS).</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SQL_PLAN" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30250.htm">V$SQL_PLAN contains the execution plan information for each child cursor loaded in the library cache.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SQL_PLAN_MONITOR" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30480.htm">V$SQL_PLAN_MONITOR displays plan level monitoring statistics for each SQL statement found in V$SQL_MONITOR. Each row in V$SQL_PLAN_MONITOR corresponds to an operation of the execution plan being monitored. As with V$SQL_MONITOR, statistics exposed in V$SQL_PLAN_MONITOR are generally updated every second when the statement executes. These statistics are recycled on the same basis as V$SQL_MONITOR.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SQL_PLAN_STATISTICS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30251.htm">V$SQL_PLAN_STATISTICS provides execution statistics at the row source level for each child cursor.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SQL_PLAN_STATISTICS_ALL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30252.htm">V$SQL_PLAN_STATISTICS_ALL contains memory usage statistics for row sources that use SQL memory (sort or hash-join). This view concatenates information in V$SQL_PLAN with execution statistics from V$SQL_PLAN_STATISTICS and V$SQL_WORKAREA.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SQL_REDIRECTION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30253.htm">V$SQL_REDIRECTION displays SQL statements that are redirected.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SQL_SHARED_CURSOR" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30254.htm">V$SQL_SHARED_CURSOR explains why a particular child cursor is not shared with existing child cursors. Each column identifies a specific reason why the cursor cannot be shared.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SQL_SHARED_MEMORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30255.htm">V$SQL_SHARED_MEMORY displays information about the cursor shared memory snapshot. Each SQL statement stored in the shared pool has one or more child objects associated with it. Each child object has several parts, one of which is the context heap, which holds, among other things, the query plan.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SQL_WORKAREA" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30256.htm">V$SQL_WORKAREA displays information about work areas used by SQL cursors. Each SQL statement stored in the shared pool has one or more child cursors that are listed in the V$SQL view. V$SQL_WORKAREA lists all work areas needed by these child cursors; V$SQL_WORKAREA can be joined with V$SQLAREA on (ADDRESS, HASH_VALUE) and with V$SQL on (ADDRESS, HASH_VALUE, CHILD_NUMBER).</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SQL_WORKAREA_ACTIVE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30257.htm">V$SQL_WORKAREA_ACTIVE contains an instantaneous view of the work areas currently allocated by the system. You can join this view against V$SQL_WORKAREA on WORKAREA_ADDRESS to access the definition of that work area. If a work area spills to disk, then this view contains information for the temporary segment created on behalf of this work area.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SQL_WORKAREA_HISTOGRAM" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30258.htm">V$SQL_WORKAREA_HISTOGRAM displays the cumulative work area execution statistics (cumulated since instance startup) for different work area groups. The work areas are split into 33 groups based on their optimal memory requirements with the requirements increasing in powers of two. That is, work areas whose optimal requirement varies from 0 KB to 1 KB, 1 KB to 2 KB, 2 KB to 4 KB, ... and 2 TB to 4 TB.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SQLAREA" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30259.htm">V$SQLAREA displays statistics on shared SQL areas and contains one row per SQL string. It provides statistics on SQL statements that are in memory, parsed, and ready for execution.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SQLAREA_PLAN_HASH" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30395.htm">V$SQLAREA_PLAN_HASH displays statistics on shared SQL areas (V$SQL) by grouping on the SQL_ID and PLAN_HASH_VALUE columns. It can potentially create several rows for one parent cursor, one for each distinct value of the column PLAN_HASH_VALUE.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SQLCOMMAND" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30632.htm">V$SQLCOMMAND displays the mapping between SQL opcodes and names.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SQLFN_ARG_METADATA" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30500.htm">V$SQLFN_ARG_METADATA contains metadata about function arguments. There is one row for each argument of every function found in V$SQLFN_METADATA. There are no rows for functions that do not have any arguments.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SQLFN_METADATA" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30501.htm">V$SQLFN_METADATA contains metadata about operators and built-in functions. Note that this view does not contain information about arguments because the number of arguments will be different for various functions. Information about arguments is contained in V$SQLFN_ARG_METADATA, which can be joined with V$SQLFN_METADATA to get information about any function and its arguments.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SQLSTATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30396.htm">V$SQLSTATS displays basic performance statistics for SQL cursors and contains one row per SQL statement (that is, one row per unique value of SQL_ID). The column definitions for columns in V$SQLSTATS are identical to those in the V$SQL and V$SQLAREA views. However, the V$SQLSTATS view differs from V$SQL and V$SQLAREA in that it is faster, more scalable, and has a greater data retention (the statistics may still appear in this view, even after the cursor has been aged out of the shared pool). Note that V$SQLSTATS contains a subset of columns that appear in V$SQL and V$SQLAREA. </DataDictionaryObject>
    <DataDictionaryObject Name="V_$SQLSTATS_PLAN_HASH" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30616.htm">V$SQLSTATS_PLAN_HASH displays basic performance statistics for SQL cursors and contains one row per execution plan of a SQL statement (that is, one row per unique combination of SQL_ID and PLAN_HASH_VALUE).</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SQLTEXT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30260.htm">V$SQLTEXT displays the text of SQL statements belonging to shared SQL cursors in the SGA.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SQLTEXT_WITH_NEWLINES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30261.htm">V$SQLTEXT_WITH_NEWLINES is identical to the V$SQLTEXT view except that, to improve legibility, V$SQLTEXT_WITH_NEWLINES does not replace newlines and tabs in the SQL statement with spaces.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$STANDBY_EVENT_HISTOGRAM" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30513.htm">V$STANDBY_EVENT_HISTOGRAM displays the histogram of apply lag on the physical standby. Each distinct value of apply lag has its own bucket and the count in the corresponding bucket represents the number of occurrences so far. The physical standby samples the apply lag every second and increments the corresponding bucket in the histogram.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$STANDBY_LOG" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30263.htm">V$STANDBY_LOG displays information about standby redo logs. Standby redo logs are similar to online redo logs, but standby redo logs are only used on a standby database that is receiving redo data from the primary database.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$STATISTICS_LEVEL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30264.htm">V$STATISTICS_LEVEL displays the status of the statistics/advisories controlled by STATISTICS_LEVEL.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$STATNAME" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30265.htm">V$STATNAME displays decoded statistic names for the statistics shown in the V$SESSTAT and V$SYSSTAT tables.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$STREAMS_APPLY_COORDINATOR" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30266.htm">V$STREAMS_APPLY_COORDINATOR displays information about each apply process coordinator. The coordinator for an apply process gets transactions from the apply process reader and passes them to apply servers. An apply process coordinator is a subcomponent of an apply process, outbound server, or inbound server.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$STREAMS_APPLY_READER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30267.htm">V$STREAMS_APPLY_READER displays information about each apply reader. The apply reader is a process which reads (dequeues) messages from the queue, computes message dependencies, and builds transactions. It passes the transactions on to the coordinator in commit order for assignment to the apply servers. An apply reader is a subcomponent of an apply process, outbound server, or inbound server.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$STREAMS_APPLY_SERVER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30268.htm">V$STREAMS_APPLY_SERVER displays information about each apply server and its activities. An apply server receives messages from the apply coordinator for an apply process. For each message received, an apply server either applies the message or sends the message to the appropriate apply handler. An apply server is a subcomponent of an apply process, outbound server, or inbound server.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$STREAMS_CAPTURE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30269.htm">V$STREAMS_CAPTURE displays information about each capture process that sends LCRs to an XStream outbound server.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$STREAMS_MESSAGE_TRACKING" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30428.htm">V$STREAMS_MESSAGE_TRACKING displays information about LCRs tracked through the stream that are processed by each Streams client. Use the DBMS_STREAMS_ADM.SET_MESSAGE_TRACKING procedure to specify a tracking label that becomes part of each LCR generated by the current session.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$STREAMS_POOL_ADVICE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30324.htm">V$STREAMS_POOL_ADVICE displays information about the estimated count of spilled or unspilled messages and the associated time spent in the spill or unspill activity for different Streams pool sizes. The sizes range from 10% to 200% of the current Streams pool size, in equal intervals. The value of the interval depends on the current size of the Streams pool.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$STREAMS_POOL_STATISTICS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30634.htm">V$STREAMS_POOL_STATISTICS displays information about the current Streams pool usage percentage.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$STREAMS_TRANSACTION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30415.htm">V$STREAMS_TRANSACTION displays information about transactions that are being processed by capture processes or apply processes. This view can be used to identify long running transactions and to determine how many logical change records (LCRs) are being processed in each transaction. This view only contains information about captured LCRs. It does not contain information about user-enqueued LCRs or user messages.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SUBCACHE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30270.htm">V$SUBCACHE displays information about the subordinate caches currently loaded into library cache memory. The view walks through the library cache, printing out a row for each loaded subordinate cache per library cache object.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SUBSCR_REGISTRATION_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30476.htm">V$SUBSCR_REGISTRATION_STATS displays information for diagnosability of notifications.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SYS_OPTIMIZER_ENV" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30312.htm">V$SYS_OPTIMIZER_ENV displays the contents of the optimizer environment for the instance. The optimizer environment stores the value of the main parameters used by the Oracle optimizer when building the execution plan of a SQL statement. Hence, modifying the value of one or more of these parameters (for example, by issuing an ALTER SYSTEM statement) could lead to plan changes.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SYS_TIME_MODEL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30346.htm">V$SYS_TIME_MODEL displays the system-wide accumulated times for various operations. The time reported is the total elapsed or CPU time (in microseconds). Any timed operation will buffer at most 5 seconds of time data. Specifically, this means that if a timed operation (such as SQL execution) takes a long period of time to perform, the data published to this view is at most missing 5 seconds of the time accumulated for the operation.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SYSAUX_OCCUPANTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30271.htm">V$SYSAUX_OCCUPANTS displays SYSAUX tablespace occupant information.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SYSMETRIC" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30343.htm">V$SYSMETRIC displays the system metric values captured for the most current time interval for both the long duration (60-second) and short duration (15-second) system metrics.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SYSMETRIC_HISTORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30344.htm">V$SYSMETRIC_HISTORY displays all system metric values available in the database. Both long duration (60-second with 1 hour history) and short duration (15-second with one-interval only) metrics are displayed by this view.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SYSMETRIC_SUMMARY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30345.htm">V$SYSMETRIC_SUMMARY displays a summary of all system Metric values for the long-duration system metrics. The average, maximum value, minimum value, and the value of one standard deviation for the last hour are displayed for each metric item.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SYSSTAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30272.htm">V$SYSSTAT displays system statistics. To find the name of the statistic associated with each statistic number (STATISTIC#), query the V$STATNAME view.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SYSTEM_CURSOR_CACHE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30273.htm">V$SYSTEM_CURSOR_CACHE displays system wide information on cursor usage.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SYSTEM_EVENT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30274.htm">V$SYSTEM_EVENT displays information on total waits for an event. Note that the TIME_WAITED and AVERAGE_WAIT columns will contain a value of zero on those platforms that do not support a fast timing mechanism. If you are running on one of these platforms and you want this column to reflect true wait times, then you must set TIMED_STATISTICS to TRUE in the parameter file; doing this will have a small negative effect on system performance.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SYSTEM_FIX_CONTROL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30421.htm">V$SYSTEM_FIX_CONTROL displays information about Fix Control (enabled/disabled) at the system level.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SYSTEM_PARAMETER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30275.htm">V$SYSTEM_PARAMETER displays information about the initialization parameters that are currently in effect for the instance. A new session inherits parameter values from the instance-wide values.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SYSTEM_PARAMETER2" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30276.htm">V$SYSTEM_PARAMETER2 displays information about the initialization parameters that are currently in effect for the instance, with each list parameter value appearing as a row in the view. A new session inherits parameter values from the instance-wide values.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$SYSTEM_WAIT_CLASS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30313.htm">V$SYSTEM_WAIT_CLASS displays the instance-wide time totals for each registered wait class.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$TABLESPACE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30277.htm">V$TABLESPACE displays tablespace information from the control file.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$TEMP_CACHE_TRANSFER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30278.htm">V$TEMP_CACHE_TRANSFER is deprecated. The information that was provided in this view is now provided in the V$INSTANCE_CACHE_TRANSFER and V$SEGMENT_STATISTICS views.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$TEMP_EXTENT_MAP" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30279.htm">V$TEMP_EXTENT_MAP displays the status of each unit for all LOCALLY MANAGED temporary tablespaces.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$TEMP_EXTENT_POOL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30280.htm">V$TEMP_EXTENT_POOL displays the state of temporary space cached and used for the instance. Note that loading of the temporary space cache is lazy and that instances can be dormant.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$TEMP_SPACE_HEADER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30282.htm">V$TEMP_SPACE_HEADER displays aggregate information per file per LOCALLY MANAGED temporary tablespace regarding how much space is currently being used and how much is free as identified in the space header.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$TEMPFILE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30283.htm">V$TEMPFILE displays temp file information.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$TEMPORARY_LOBS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30284.htm">V$TEMPORARY_LOBS displays information about temporary and abstract LOBs.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$TEMPSEG_USAGE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30285.htm">V$TEMPSEG_USAGE describes temporary segment usage.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$TEMPSTAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30286.htm">V$TEMPSTAT displays information about file read/write statistics.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$TEMPUNDOSTAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30689.htm">V$TEMPUNDOSTAT shows various statistics related to the temporary undo log for this database instance. It displays a histogram of statistical data to show how the system is working.  Each row in the view keeps statistics collected in the instance for a 10-minute interval. The rows are in the descending order of the BEGIN_TIME column value. This view contains a total of 576 rows, spanning a 4-day cycle. This view is similar to the V$UNDOSTAT view.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$THREAD" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30288.htm">V$THREAD displays thread information from the control file. This view does not return meaningful results on a physical standby database.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$THRESHOLD_TYPES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30347.htm">V$THRESHOLD_TYPES displays information about threshold types.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$TIMER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30289.htm">V$TIMER displays the elapsed time in hundredths of a second. Time is measured since the beginning of the epoch, which is operating system specific, and wraps around to 0 again whenever the value overflows four bytes (roughly 497 days).</DataDictionaryObject>
    <DataDictionaryObject Name="V_$TIMEZONE_NAMES" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30290.htm">V$TIMEZONE_NAMES displays valid time zone names.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$TOPLEVELCALL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30633.htm">V$TOPLEVELCALL displays the mapping between Oracle top level calls and names.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$TRANSACTION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30291.htm">V$TRANSACTION lists the active transactions in the system.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$TRANSACTION_ENQUEUE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30292.htm">V$TRANSACTION_ENQUEUE displays locks owned by transaction state objects.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$TRANSPORTABLE_PLATFORM" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30293.htm">V$TRANSPORTABLE_PLATFORM displays all platforms that support cross-platform tablespace transport. Specifically, it lists all platforms supported by the RMAN CONVERT TABLESPACE command, along with the endianness of each platform.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$TSDP_SUPPORTED_FEATURE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30730.htm">V$TSDP_SUPPORTED_FEATURE displays information about the features supported by Transparent Sensitive Data Protection (TSDP).</DataDictionaryObject>
    <DataDictionaryObject Name="V_$TYPE_SIZE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30294.htm">V$TYPE_SIZE displays the sizes of various database components for use in estimating data block capacity.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$UNDOSTAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30295.htm">V$UNDOSTAT displays a histogram of statistical data to show how well the system is working. The available statistics include undo space consumption, transaction concurrency, and length of queries executed in the instance. You can use this view to estimate the amount of undo space required for the current workload. Oracle uses this view to tune undo usage in the system. The view returns NULL values if the system is in manual undo management mode.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$UNUSABLE_BACKUPFILE_DETAILS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30398.htm">V$UNUSABLE_BACKUPFILE_DETAILS displays information about all backup files (backup pieces, proxy copies, or copies) that are marked unavailable and expired. You can select one of the rows and use BTYPE_KEY or FILETYPE_KEY to change the status of a backup file set or a specific file to available.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$VERSION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30296.htm">V$VERSION displays version numbers of core library components in the Oracle Database. There is one row for each component.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$VPD_POLICY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30297.htm">V$VPD_POLICY displays all the fine-grained security policies and predicates associated with the cursors currently in the library cache.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$WAIT_CHAINS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30472.htm">V$WAIT_CHAINS displays information about blocked sessions. A wait chain is composed of sessions that are blocked by one another. Each row represents a blocked and blocker session pair. If a wait chain is not a cyclical wait chain, then the last row for the chain does not have a blocker.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$WAITCLASSMETRIC" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30348.htm">V$WAITCLASSMETRIC displays metric values of wait classes for the most recent 60-second interval. A history of the last one hour will be kept in the system.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$WAITCLASSMETRIC_HISTORY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30349.htm">V$WAITCLASSMETRIC_HISTORY displays metric values of wait classes for all intervals in the last one hour.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$WAITSTAT" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30298.htm">V$WAITSTAT displays block contention statistics. This table is only updated when timed statistics are enabled.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$WALLET" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30406.htm">V$WALLET displays metadata of certificates that may be used as a master key for Transparent Data Encryption.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$WORKLOAD_REPLAY_THREAD" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30481.htm">V$WORKLOAD_REPLAY_THREAD displays information for all the different types of replay sessions.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$XML_AUDIT_TRAIL" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30405.htm">V$XML_AUDIT_TRAIL shows standard, fine-grained, SYS, and mandatory audit records written in XML format files.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$XSTREAM_APPLY_COORDINATOR" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30683.htm">V$XSTREAM_APPLY_COORDINATOR displays information about each XStream apply process coordinator. The coordinator for an apply process gets transactions from the apply process reader and passes them to apply servers. An apply process coordinator is a subcomponent of an apply process, outbound server, or inbound server.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$XSTREAM_APPLY_READER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30685.htm">V$XSTREAM_APPLY_READER displays information about each XStream apply reader. The apply reader is a process which reads (dequeues) messages from the queue, computes message dependencies, and builds transactions. It passes the transactions on to the coordinator in commit order for assignment to the apply servers. An apply reader is a subcomponent of an apply process, outbound server, or inbound server.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$XSTREAM_APPLY_RECEIVER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30729.htm">V$XSTREAM_APPLY_RECEIVER displays information about the message receiver of the apply process. The values are reset to zero when the database (or instance in an Oracle Real Application Clusters (Oracle RAC) environment) restarts, when apply migrates to another instance, or when the XStream process is stopped.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$XSTREAM_APPLY_SERVER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30687.htm">V$XSTREAM_APPLY_SERVER displays information about each XStream apply server and its activities. An apply server receives messages from the apply coordinator for an apply process. For each message received, an apply server either applies the message or sends the message to the appropriate apply handler. An apply server is a subcomponent of an apply process, outbound server, or inbound server.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$XSTREAM_CAPTURE" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30639.htm">V$XSTREAM_CAPTURE displays information about each capture process that sends LCRs to an XStream outbound server.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$XSTREAM_MESSAGE_TRACKING" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30640.htm">V$XSTREAM_MESSAGE_TRACKING displays information about LCRs tracked through the stream that are processed by XStream components.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$XSTREAM_OUTBOUND_SERVER" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30641.htm">V$XSTREAM_OUTBOUND_SERVER displays statistics about an outbound server. An outbound server sends LCRs to the XStream client application.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$XSTREAM_TABLE_STATS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30658.htm">V$XSTREAM_TABLE_STATS shows the statistics for all the tables processed by each apply server for the current session.</DataDictionaryObject>
    <DataDictionaryObject Name="V_$XSTREAM_TRANSACTION" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn30642.htm">V$XSTREAM_TRANSACTION displays information about transactions that are being processed by capture processes, outbound servers, and inbound servers. This view can identify long running transactions and to display how many LCRs are being processed in each transaction. This view only contains information about captured LCRs. It does not contain information about user-enqueued LCRs or user messages.</DataDictionaryObject>
    <DataDictionaryObject Name="WORKAREA_SIZE_POLICY" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10231.htm" />
    <DataDictionaryObject Name="XML_DB_EVENTS" Url="http://docs.oracle.com/cloud/latest/db121/REFRN/refrn10278.htm" />
  </DataDictionary>
</Documentation>