<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Threading" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
<#
	CultureInfo.CurrentCulture = CultureInfo.InvariantCulture;
	const string xmlNamespace = "{http://husqvik.com/SqlPad/2014/08/Oracle}";
	var grammarDescriptionPath = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), @"OracleSqlGrammar.xml");
	var grammarXml = XDocument.Load(grammarDescriptionPath);
#>
using System.Collections.Generic;
using System.Collections.ObjectModel;

namespace SqlPad.Oracle
{
	/// <summary>
	/// This class provides token constants for Oracle SQL grammar.
	/// </summary>
	public static class OracleGrammarDescription
	{
		/// <summary>
		/// This class provides all available non-terminal IDs.
		/// </summary>
		public static class NonTerminals
		{
<#
		var startNonterminalIds = grammarXml.Element(xmlNamespace + "SqlGrammar").Element(xmlNamespace + "StartSymbols").Elements().Select(e => e.Attribute("Id").Value);
		var nonTerminalIds = grammarXml.Element(xmlNamespace + "SqlGrammar").Element(xmlNamespace + "Rules").Elements().Select(r => r.Element(xmlNamespace + "Sequences"))
			.SelectMany(s => s.Elements())
			.SelectMany(s => s.Elements(xmlNamespace + "NonTerminal"))
			.Select(e => e.Attribute("Id").Value)
			.Concat(startNonterminalIds)
			.Distinct()
			.OrderBy(id => id);
		foreach(var nonTerminalId in nonTerminalIds)
		{
#>
			public const string <#=nonTerminalId#> = "<#=nonTerminalId#>";
<#
		}
#>
		}

<#
		var terminalElements = grammarXml.Element(xmlNamespace + "SqlGrammar").Element(xmlNamespace + "Terminals").Elements().ToArray();
		var terminalValues = terminalElements.Where(e => e.Attribute("Value") != null).Select(e => new { Id = e.Attribute("Id").Value, Value = e.Attribute("Value").Value }).OrderBy(v => v.Id).ToDictionary(v => v.Id, v => v.Value);
		var terminalIds = terminalElements.Select(e => e.Attribute("Id").Value).OrderBy(id => id);
		var identifierTerminalIds = terminalElements.Where(e => e.Attribute("Id").Value.Contains("Identifier")).Select(e => e.Attribute("Id").Value).OrderBy(id => id);
		var aliasTerminalIds = terminalElements.Where(e => e.Attribute("Id").Value.Contains("Alias")).Select(e => e.Attribute("Id").Value).OrderBy(id => id);
		var literalTerminalIds = terminalElements.Where(e => e.Attribute("Id").Value.Contains("Literal")).Select(e => e.Attribute("Id").Value).OrderBy(id => id);
		var reservedWordsSql = terminalElements.Where(e => e.Attribute("ReservedWord") != null && e.Attribute("ReservedWord").Value == "Sql").Select(e => "\"" + e.Attribute("Value").Value.ToUpperInvariant() + "\"").Distinct().OrderBy(id => id);
		var reservedWordsPlSqlDeclaration = terminalElements.Where(e => IsPlSqlDeclarationReserved(e.Attribute("ReservedWord"))).Select(e => "\"" + e.Attribute("Value").Value.ToUpperInvariant() + "\"").OrderBy(id => id);
		var reservedWordsPlSqlBody = terminalElements.Where(e => IsPlSqlBodyReserved(e.Attribute("ReservedWord"))).Select(e => "\"" + e.Attribute("Value").Value.ToUpperInvariant() + "\"").OrderBy(id => id);
#>

		/// <summary>
		/// This class provides all available terminal IDs.
		/// </summary>
		public static class Terminals
		{
<#
		foreach(var terminalId in terminalIds)
		{
#>
			public const string <#=terminalId#> = "<#=terminalId#>";
<#
		}

#>
			
			public static IReadOnlyDictionary<string, string> AllTerminals => AllTerminalsInternal;
		}

		/// <summary>
		/// This class provides all available fixed terminal values.
		/// </summary>
		public static class TerminalValues
		{
<#
		foreach(var terminalValue in terminalValues)
		{
#>
			public const string <#=terminalValue.Key#> = "<#=terminalValue.Value.Replace("\n", @"\n") #>";
<#
		}

#>
		}

		private static readonly ReadOnlyDictionary<string, string> AllTerminalsInternal = new ReadOnlyDictionary<string, string>(new Dictionary<string, string> { <#= String.Join(", ", terminalIds.Select(id => "{ Terminals." + id + ", " + (terminalValues.ContainsKey(id) ? ("TerminalValues." + id) : "null") + " }")) #> });
			
		private static readonly HashSet<string> IdentifiersInternal = new HashSet<string> { <#= String.Join(", ", identifierTerminalIds.Select(id => "Terminals." + id)) #> };

		internal static readonly ICollection<string> ReservedWordsSql = new HashSet<string> { <#= String.Join(", ", reservedWordsSql) #> };
		
		internal static readonly ICollection<string> ReservedWordsPlSqlDeclaration = new HashSet<string> { <#= String.Join(", ", reservedWordsPlSqlDeclaration) #> };
		
		internal static readonly ICollection<string> ReservedWordsPlSqlBody = new HashSet<string> { <#= String.Join(", ", reservedWordsPlSqlBody) #> };
		
		internal static readonly ICollection<string> ReservedWordsPlSql = new HashSet<string> { <#= String.Join(", ", reservedWordsPlSqlBody.Intersect(reservedWordsPlSqlDeclaration)) #> };
		
		private static readonly HashSet<string> LiteralsInternal = new HashSet<string> { <#= String.Join(", ", literalTerminalIds.Select(id => "Terminals." + id)) #> };

		private static readonly HashSet<string> ZeroOffsetTerminalIdsInternal =
			new HashSet<string>
			{
				Terminals.Asterisk,
				Terminals.Dot,
				Terminals.Comma,
				Terminals.OperatorConcatenation,
				Terminals.LeftParenthesis,
				Terminals.RightParenthesis,
				Terminals.MathDivide,
				Terminals.MathEquals,
				Terminals.MathFactor,
				Terminals.MathGreatherThan,
				Terminals.MathGreatherThanOrEquals,
				Terminals.MathLessThan,
				Terminals.MathLessThanOrEquals,
				Terminals.MathMinus,
				Terminals.MathNotEqualsC,
				Terminals.MathNotEqualsCircumflex,
				Terminals.MathNotEqualsSql,
				Terminals.MathPlus
			};

		private static readonly HashSet<string> MathTerminalsInternal =
			new HashSet<string>
			{
				Terminals.MathFactor,
				Terminals.MathDivide,
				Terminals.MathPlus,
				Terminals.MathMinus,
				Terminals.OperatorConcatenation
			};

		public static ICollection<string> MathTerminals => MathTerminalsInternal;

		public static ICollection<string> Identifiers => IdentifiersInternal;

		public static bool IsReservedWord(this string value, ReservedWordScope scope = ReservedWordScope.Sql)
		{
			var invariantString = value.ToUpperInvariant();
			var isSqlReserved = ReservedWordsSql.Contains(invariantString);
			return isSqlReserved ||
				   (scope == ReservedWordScope.PlSqlDeclaration && ReservedWordsPlSqlDeclaration.Contains(invariantString)) ||
				   (scope == ReservedWordScope.PlSqlBody && ReservedWordsPlSqlBody.Contains(invariantString));
		}

		public static bool IsIdentifier(this string terminalId)
		{
			return IdentifiersInternal.Contains(terminalId);
		}

		public static bool IsZeroOffsetTerminalId(this string terminalId)
		{
			return ZeroOffsetTerminalIdsInternal.Contains(terminalId);
		}

		public static bool IsAlias(this string terminalId)
		{
			return <#= String.Join(" || ", aliasTerminalIds.Select(a => "terminalId == \"" + a + "\"")) #>;
		}

		public static bool IsIdentifierOrAlias(this string terminalId)
		{
			return terminalId.IsIdentifier() || terminalId.IsAlias();
		}

		public static bool IsLiteral(this string terminalId)
		{
			return LiteralsInternal.Contains(terminalId);
		}
	}
}
<#+
	private bool IsPlSqlDeclarationReserved(XAttribute reservedWordAttribute)
	{
		if (reservedWordAttribute == null)
			return false;

		return reservedWordAttribute.Value == "PlSql" || reservedWordAttribute.Value == "PlSqlDeclaration";
	}

	private bool IsPlSqlBodyReserved(XAttribute reservedWordAttribute)
	{
		if (reservedWordAttribute == null)
			return false;

		return reservedWordAttribute.Value == "PlSql" || reservedWordAttribute.Value == "PlSqlBody";
	}
#>